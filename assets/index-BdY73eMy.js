(function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList && relList.supports && relList.supports("modulepreload")) {
    return;
  }
  for (const link2 of document.querySelectorAll('link[rel="modulepreload"]')) {
    processPreload(link2);
  }
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") {
        continue;
      }
      for (const node2 of mutation.addedNodes) {
        if (node2.tagName === "LINK" && node2.rel === "modulepreload")
          processPreload(node2);
      }
    }
  }).observe(document, { childList: true, subtree: true });
  function getFetchOpts(link2) {
    const fetchOpts = {};
    if (link2.integrity) fetchOpts.integrity = link2.integrity;
    if (link2.referrerPolicy) fetchOpts.referrerPolicy = link2.referrerPolicy;
    if (link2.crossOrigin === "use-credentials")
      fetchOpts.credentials = "include";
    else if (link2.crossOrigin === "anonymous") fetchOpts.credentials = "omit";
    else fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link2) {
    if (link2.ep)
      return;
    link2.ep = true;
    const fetchOpts = getFetchOpts(link2);
    fetch(link2.href, fetchOpts);
  }
})();
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];
function getNodeName(element) {
  return element ? (element.nodeName || "").toLowerCase() : null;
}
function getWindow(node2) {
  if (node2 == null) {
    return window;
  }
  if (node2.toString() !== "[object Window]") {
    var ownerDocument = node2.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node2;
}
function isElement$1(node2) {
  var OwnElement = getWindow(node2).Element;
  return node2 instanceof OwnElement || node2 instanceof Element;
}
function isHTMLElement(node2) {
  var OwnElement = getWindow(node2).HTMLElement;
  return node2 instanceof OwnElement || node2 instanceof HTMLElement;
}
function isShadowRoot(node2) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node2).ShadowRoot;
  return node2 instanceof OwnElement || node2 instanceof ShadowRoot;
}
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name];
    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    }
    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function(name2) {
      var value2 = attributes[name2];
      if (value2 === false) {
        element.removeAttribute(name2);
      } else {
        element.setAttribute(name2, value2 === true ? "" : value2);
      }
    });
  });
}
function effect$3(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
}
const applyStyles$1 = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect: effect$3,
  requires: ["computeStyles"]
};
function getBasePlacement(placement) {
  return placement.split("-")[0];
}
var max$5 = Math.max;
var min$4 = Math.min;
var round$2 = Math.round;
function getUAString() {
  var uaData = navigator.userAgentData;
  if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
    return uaData.brands.map(function(item) {
      return item.brand + "/" + item.version;
    }).join(" ");
  }
  return navigator.userAgent;
}
function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}
function getBoundingClientRect(element, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  var clientRect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (includeScale && isHTMLElement(element)) {
    scaleX = element.offsetWidth > 0 ? round$2(clientRect.width) / element.offsetWidth || 1 : 1;
    scaleY = element.offsetHeight > 0 ? round$2(clientRect.height) / element.offsetHeight || 1 : 1;
  }
  var _ref = isElement$1(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x2 = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y2 = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect.width / scaleX;
  var height = clientRect.height / scaleY;
  return {
    width,
    height,
    top: y2,
    right: x2 + width,
    bottom: y2 + height,
    left: x2,
    x: x2,
    y: y2
  };
}
function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element);
  var width = element.offsetWidth;
  var height = element.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width,
    height
  };
}
function contains(parent2, child2) {
  var rootNode = child2.getRootNode && child2.getRootNode();
  if (parent2.contains(child2)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next4 = child2;
    do {
      if (next4 && parent2.isSameNode(next4)) {
        return true;
      }
      next4 = next4.parentNode || next4.host;
    } while (next4);
  }
  return false;
}
function getComputedStyle$1(element) {
  return getWindow(element).getComputedStyle(element);
}
function isTableElement(element) {
  return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
}
function getDocumentElement(element) {
  return ((isElement$1(element) ? element.ownerDocument : (
    // $FlowFixMe[prop-missing]
    element.document
  )) || window.document).documentElement;
}
function getParentNode(element) {
  if (getNodeName(element) === "html") {
    return element;
  }
  return (
    // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || // DOM Element detected
    (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    getDocumentElement(element)
  );
}
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
  getComputedStyle$1(element).position === "fixed") {
    return null;
  }
  return element.offsetParent;
}
function getContainingBlock(element) {
  var isFirefox = /firefox/i.test(getUAString());
  var isIE = /Trident/i.test(getUAString());
  if (isIE && isHTMLElement(element)) {
    var elementCss = getComputedStyle$1(element);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css2 = getComputedStyle$1(currentNode);
    if (css2.transform !== "none" || css2.perspective !== "none" || css2.contain === "paint" || ["transform", "perspective"].indexOf(css2.willChange) !== -1 || isFirefox && css2.willChange === "filter" || isFirefox && css2.filter && css2.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element) {
  var window2 = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle$1(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}
function within(min2, value2, max2) {
  return max$5(min2, min$4(value2, max2));
}
function withinMaxClamp(min2, value2, max2) {
  var v2 = within(min2, value2, max2);
  return v2 > max2 ? max2 : v2;
}
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}
function expandToHashMap(value2, keys6) {
  return keys6.reduce(function(hashMap, key2) {
    hashMap[key2] = value2;
    return hashMap;
  }, {});
}
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name, options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect$2(_ref2) {
  var state = _ref2.state, options = _ref2.options;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    return;
  }
  state.elements.arrow = arrowElement;
}
const arrow$1 = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect$2,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};
function getVariation(placement) {
  return placement.split("-")[1];
}
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref, win2) {
  var x2 = _ref.x, y2 = _ref.y;
  var dpr = win2.devicePixelRatio || 1;
  return {
    x: round$2(x2 * dpr) / dpr || 0,
    y: round$2(y2 * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x, x2 = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y2 = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x: x2,
    y: y2
  }) : {
    x: x2,
    y: y2
  };
  x2 = _ref3.x;
  y2 = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win2 = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle$1(offsetParent).position !== "static" && position === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win2 && win2.visualViewport ? win2.visualViewport.height : (
        // $FlowFixMe[prop-missing]
        offsetParent[heightProp]
      );
      y2 -= offsetY - popperRect.height;
      y2 *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win2 && win2.visualViewport ? win2.visualViewport.width : (
        // $FlowFixMe[prop-missing]
        offsetParent[widthProp]
      );
      x2 -= offsetX - popperRect.width;
      x2 *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x: x2,
    y: y2
  }, getWindow(popper2)) : {
    x: x2,
    y: y2
  };
  x2 = _ref4.x;
  y2 = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign3;
    return Object.assign({}, commonStyles, (_Object$assign3 = {}, _Object$assign3[sideY] = hasY ? "0" : "", _Object$assign3[sideX] = hasX ? "0" : "", _Object$assign3.transform = (win2.devicePixelRatio || 1) <= 1 ? "translate(" + x2 + "px, " + y2 + "px)" : "translate3d(" + x2 + "px, " + y2 + "px, 0)", _Object$assign3));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y2 + "px" : "", _Object$assign2[sideX] = hasX ? x2 + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
const computeStyles$1 = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};
var passive = {
  passive: true
};
function effect$1(_ref) {
  var state = _ref.state, instance = _ref.instance, options = _ref.options;
  var _options$scroll = options.scroll, scroll2 = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll2) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance.update, passive);
  }
  return function() {
    if (scroll2) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance.update, passive);
    }
  };
}
const eventListeners = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect: effect$1,
  data: {}
};
var hash$2 = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash$2[matched];
  });
}
var hash$1 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash$1[matched];
  });
}
function getWindowScroll(node2) {
  var win2 = getWindow(node2);
  var scrollLeft = win2.pageXOffset;
  var scrollTop = win2.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}
function getViewportRect(element, strategy) {
  var win2 = getWindow(element);
  var html2 = getDocumentElement(element);
  var visualViewport = win2.visualViewport;
  var width = html2.clientWidth;
  var height = html2.clientHeight;
  var x2 = 0;
  var y2 = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();
    if (layoutViewport || !layoutViewport && strategy === "fixed") {
      x2 = visualViewport.offsetLeft;
      y2 = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x2 + getWindowScrollBarX(element),
    y: y2
  };
}
function getDocumentRect(element) {
  var _element$ownerDocumen;
  var html2 = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max$5(html2.scrollWidth, html2.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max$5(html2.scrollHeight, html2.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x2 = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y2 = -winScroll.scrollTop;
  if (getComputedStyle$1(body || html2).direction === "rtl") {
    x2 += max$5(html2.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x: x2,
    y: y2
  };
}
function isScrollParent(element) {
  var _getComputedStyle = getComputedStyle$1(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
function getScrollParent(node2) {
  if (["html", "body", "#document"].indexOf(getNodeName(node2)) >= 0) {
    return node2.ownerDocument.body;
  }
  if (isHTMLElement(node2) && isScrollParent(node2)) {
    return node2;
  }
  return getScrollParent(getParentNode(node2));
}
function listScrollParents(element, list2) {
  var _element$ownerDocumen;
  if (list2 === void 0) {
    list2 = [];
  }
  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win2 = getWindow(scrollParent);
  var target = isBody ? [win2].concat(win2.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list2.concat(target);
  return isBody ? updatedList : (
    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)))
  );
}
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}
function getInnerBoundingClientRect(element, strategy) {
  var rect = getBoundingClientRect(element, false, strategy === "fixed");
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement$1(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingParents(element) {
  var clippingParents2 = listScrollParents(getParentNode(element));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle$1(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
  if (!isElement$1(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement$1(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent, strategy);
    accRect.top = max$5(rect.top, accRect.top);
    accRect.right = min$4(rect.right, accRect.right);
    accRect.bottom = min$4(rect.bottom, accRect.bottom);
    accRect.left = max$5(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
        break;
    }
  }
  return offsets;
}
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement$1(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key2) {
      var multiply = [right, bottom].indexOf(key2) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key2) >= 0 ? "y" : "x";
      overflowOffsets[key2] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements$1.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements$1;
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a2, b2) {
    return overflows[a2] - overflows[b2];
  });
}
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = /* @__PURE__ */ new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i2 = 0; i2 < placements2.length; i2++) {
    var placement = placements2[i2];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check2) {
      return check2;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check2) {
            return check2;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break") break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
const flip$1 = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
const hide$1 = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data2 = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data2[state.placement], x2 = _data$state$placement.x, y2 = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x2;
    state.modifiersData.popperOffsets.y += y2;
  }
  state.modifiersData[name] = data2;
}
const offset$1 = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
const popperOffsets$1 = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function preventOverflow(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data2 = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min2 = offset2 + overflow[mainSide];
    var max2 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min$4(min2, tetherMin) : min2, offset2, tether ? max$5(max2, tetherMax) : max2);
    popperOffsets2[mainAxis] = preventedOffset;
    data2[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data2[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data2;
}
const preventOverflow$1 = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}
function getNodeScroll(node2) {
  if (node2 === getWindow(node2) || !isHTMLElement(node2)) {
    return getWindowScroll(node2);
  } else {
    return getHTMLElementScroll(node2);
  }
}
function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = round$2(rect.width) / element.offsetWidth || 1;
  var scaleY = round$2(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
  var scroll2 = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
    isScrollParent(documentElement)) {
      scroll2 = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll2.scrollLeft - offsets.x,
    y: rect.top + scroll2.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
function order(modifiers) {
  var map4 = /* @__PURE__ */ new Map();
  var visited = /* @__PURE__ */ new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map4.set(modifier.name, modifier);
  });
  function sort4(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map4.get(dep);
        if (depModifier) {
          sort4(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort4(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}
function debounce(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve3) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve3(fn2());
        });
      });
    }
    return pending;
  };
}
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key2) {
    return merged[key2];
  });
}
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element) {
    return !(element && typeof element.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper2(reference2, popper2, options) {
    if (options === void 0) {
      options = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options2);
        state.scrollParents = {
          reference: isElement$1(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m2) {
          return m2.enabled;
        });
        runModifierEffects();
        return instance.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        for (var index2 = 0; index2 < state.orderedModifiers.length; index2++) {
          if (state.reset === true) {
            state.reset = false;
            index2 = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index2], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name,
              instance
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: debounce(function() {
        return new Promise(function(resolve3) {
          instance.forceUpdate();
          resolve3(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      return instance;
    }
    instance.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref) {
        var name = _ref.name, _ref$options = _ref.options, options2 = _ref$options === void 0 ? {} : _ref$options, effect2 = _ref.effect;
        if (typeof effect2 === "function") {
          var cleanupFn = effect2({
            state,
            name,
            instance,
            options: options2
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}
var createPopper$2 = /* @__PURE__ */ popperGenerator();
var defaultModifiers$1 = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1];
var createPopper$1 = /* @__PURE__ */ popperGenerator({
  defaultModifiers: defaultModifiers$1
});
var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
var createPopper = /* @__PURE__ */ popperGenerator({
  defaultModifiers
});
const Popper = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  afterMain,
  afterRead,
  afterWrite,
  applyStyles: applyStyles$1,
  arrow: arrow$1,
  auto,
  basePlacements,
  beforeMain,
  beforeRead,
  beforeWrite,
  bottom,
  clippingParents,
  computeStyles: computeStyles$1,
  createPopper,
  createPopperBase: createPopper$2,
  createPopperLite: createPopper$1,
  detectOverflow,
  end,
  eventListeners,
  flip: flip$1,
  hide: hide$1,
  left,
  main,
  modifierPhases,
  offset: offset$1,
  placements,
  popper,
  popperGenerator,
  popperOffsets: popperOffsets$1,
  preventOverflow: preventOverflow$1,
  read,
  reference,
  right,
  start,
  top,
  variationPlacements,
  viewport,
  write
}, Symbol.toStringTag, { value: "Module" }));
/*!
  * Bootstrap v5.3.3 (https://getbootstrap.com/)
  * Copyright 2011-2024 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
const elementMap = /* @__PURE__ */ new Map();
const Data = {
  set(element, key2, instance) {
    if (!elementMap.has(element)) {
      elementMap.set(element, /* @__PURE__ */ new Map());
    }
    const instanceMap = elementMap.get(element);
    if (!instanceMap.has(key2) && instanceMap.size !== 0) {
      console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`);
      return;
    }
    instanceMap.set(key2, instance);
  },
  get(element, key2) {
    if (elementMap.has(element)) {
      return elementMap.get(element).get(key2) || null;
    }
    return null;
  },
  remove(element, key2) {
    if (!elementMap.has(element)) {
      return;
    }
    const instanceMap = elementMap.get(element);
    instanceMap.delete(key2);
    if (instanceMap.size === 0) {
      elementMap.delete(element);
    }
  }
};
const MAX_UID = 1e6;
const MILLISECONDS_MULTIPLIER = 1e3;
const TRANSITION_END = "transitionend";
const parseSelector = (selector) => {
  if (selector && window.CSS && window.CSS.escape) {
    selector = selector.replace(/#([^\s"#']+)/g, (match2, id2) => `#${CSS.escape(id2)}`);
  }
  return selector;
};
const toType = (object2) => {
  if (object2 === null || object2 === void 0) {
    return `${object2}`;
  }
  return Object.prototype.toString.call(object2).match(/\s([a-z]+)/i)[1].toLowerCase();
};
const getUID = (prefix) => {
  do {
    prefix += Math.floor(Math.random() * MAX_UID);
  } while (document.getElementById(prefix));
  return prefix;
};
const getTransitionDurationFromElement = (element) => {
  if (!element) {
    return 0;
  }
  let {
    transitionDuration,
    transitionDelay
  } = window.getComputedStyle(element);
  const floatTransitionDuration = Number.parseFloat(transitionDuration);
  const floatTransitionDelay = Number.parseFloat(transitionDelay);
  if (!floatTransitionDuration && !floatTransitionDelay) {
    return 0;
  }
  transitionDuration = transitionDuration.split(",")[0];
  transitionDelay = transitionDelay.split(",")[0];
  return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
};
const triggerTransitionEnd = (element) => {
  element.dispatchEvent(new Event(TRANSITION_END));
};
const isElement = (object2) => {
  if (!object2 || typeof object2 !== "object") {
    return false;
  }
  if (typeof object2.jquery !== "undefined") {
    object2 = object2[0];
  }
  return typeof object2.nodeType !== "undefined";
};
const getElement = (object2) => {
  if (isElement(object2)) {
    return object2.jquery ? object2[0] : object2;
  }
  if (typeof object2 === "string" && object2.length > 0) {
    return document.querySelector(parseSelector(object2));
  }
  return null;
};
const isVisible = (element) => {
  if (!isElement(element) || element.getClientRects().length === 0) {
    return false;
  }
  const elementIsVisible = getComputedStyle(element).getPropertyValue("visibility") === "visible";
  const closedDetails = element.closest("details:not([open])");
  if (!closedDetails) {
    return elementIsVisible;
  }
  if (closedDetails !== element) {
    const summary = element.closest("summary");
    if (summary && summary.parentNode !== closedDetails) {
      return false;
    }
    if (summary === null) {
      return false;
    }
  }
  return elementIsVisible;
};
const isDisabled = (element) => {
  if (!element || element.nodeType !== Node.ELEMENT_NODE) {
    return true;
  }
  if (element.classList.contains("disabled")) {
    return true;
  }
  if (typeof element.disabled !== "undefined") {
    return element.disabled;
  }
  return element.hasAttribute("disabled") && element.getAttribute("disabled") !== "false";
};
const findShadowRoot = (element) => {
  if (!document.documentElement.attachShadow) {
    return null;
  }
  if (typeof element.getRootNode === "function") {
    const root = element.getRootNode();
    return root instanceof ShadowRoot ? root : null;
  }
  if (element instanceof ShadowRoot) {
    return element;
  }
  if (!element.parentNode) {
    return null;
  }
  return findShadowRoot(element.parentNode);
};
const noop$2 = () => {
};
const reflow = (element) => {
  element.offsetHeight;
};
const getjQuery = () => {
  if (window.jQuery && !document.body.hasAttribute("data-bs-no-jquery")) {
    return window.jQuery;
  }
  return null;
};
const DOMContentLoadedCallbacks = [];
const onDOMContentLoaded = (callback) => {
  if (document.readyState === "loading") {
    if (!DOMContentLoadedCallbacks.length) {
      document.addEventListener("DOMContentLoaded", () => {
        for (const callback2 of DOMContentLoadedCallbacks) {
          callback2();
        }
      });
    }
    DOMContentLoadedCallbacks.push(callback);
  } else {
    callback();
  }
};
const isRTL = () => document.documentElement.dir === "rtl";
const defineJQueryPlugin = (plugin) => {
  onDOMContentLoaded(() => {
    const $2 = getjQuery();
    if ($2) {
      const name = plugin.NAME;
      const JQUERY_NO_CONFLICT = $2.fn[name];
      $2.fn[name] = plugin.jQueryInterface;
      $2.fn[name].Constructor = plugin;
      $2.fn[name].noConflict = () => {
        $2.fn[name] = JQUERY_NO_CONFLICT;
        return plugin.jQueryInterface;
      };
    }
  });
};
const execute = (possibleCallback, args = [], defaultValue = possibleCallback) => {
  return typeof possibleCallback === "function" ? possibleCallback(...args) : defaultValue;
};
const executeAfterTransition = (callback, transitionElement, waitForTransition = true) => {
  if (!waitForTransition) {
    execute(callback);
    return;
  }
  const durationPadding = 5;
  const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;
  let called2 = false;
  const handler = ({
    target
  }) => {
    if (target !== transitionElement) {
      return;
    }
    called2 = true;
    transitionElement.removeEventListener(TRANSITION_END, handler);
    execute(callback);
  };
  transitionElement.addEventListener(TRANSITION_END, handler);
  setTimeout(() => {
    if (!called2) {
      triggerTransitionEnd(transitionElement);
    }
  }, emulatedDuration);
};
const getNextActiveElement = (list2, activeElement, shouldGetNext, isCycleAllowed) => {
  const listLength = list2.length;
  let index2 = list2.indexOf(activeElement);
  if (index2 === -1) {
    return !shouldGetNext && isCycleAllowed ? list2[listLength - 1] : list2[0];
  }
  index2 += shouldGetNext ? 1 : -1;
  if (isCycleAllowed) {
    index2 = (index2 + listLength) % listLength;
  }
  return list2[Math.max(0, Math.min(index2, listLength - 1))];
};
const namespaceRegex = /[^.]*(?=\..*)\.|.*/;
const stripNameRegex = /\..*/;
const stripUidRegex = /::\d+$/;
const eventRegistry = {};
let uidEvent = 1;
const customEvents = {
  mouseenter: "mouseover",
  mouseleave: "mouseout"
};
const nativeEvents = /* @__PURE__ */ new Set(["click", "dblclick", "mouseup", "mousedown", "contextmenu", "mousewheel", "DOMMouseScroll", "mouseover", "mouseout", "mousemove", "selectstart", "selectend", "keydown", "keypress", "keyup", "orientationchange", "touchstart", "touchmove", "touchend", "touchcancel", "pointerdown", "pointermove", "pointerup", "pointerleave", "pointercancel", "gesturestart", "gesturechange", "gestureend", "focus", "blur", "change", "reset", "select", "submit", "focusin", "focusout", "load", "unload", "beforeunload", "resize", "move", "DOMContentLoaded", "readystatechange", "error", "abort", "scroll"]);
function makeEventUid(element, uid2) {
  return uid2 && `${uid2}::${uidEvent++}` || element.uidEvent || uidEvent++;
}
function getElementEvents(element) {
  const uid2 = makeEventUid(element);
  element.uidEvent = uid2;
  eventRegistry[uid2] = eventRegistry[uid2] || {};
  return eventRegistry[uid2];
}
function bootstrapHandler(element, fn2) {
  return function handler(event) {
    hydrateObj(event, {
      delegateTarget: element
    });
    if (handler.oneOff) {
      EventHandler.off(element, event.type, fn2);
    }
    return fn2.apply(element, [event]);
  };
}
function bootstrapDelegationHandler(element, selector, fn2) {
  return function handler(event) {
    const domElements = element.querySelectorAll(selector);
    for (let {
      target
    } = event; target && target !== this; target = target.parentNode) {
      for (const domElement of domElements) {
        if (domElement !== target) {
          continue;
        }
        hydrateObj(event, {
          delegateTarget: target
        });
        if (handler.oneOff) {
          EventHandler.off(element, event.type, selector, fn2);
        }
        return fn2.apply(target, [event]);
      }
    }
  };
}
function findHandler(events, callable, delegationSelector = null) {
  return Object.values(events).find((event) => event.callable === callable && event.delegationSelector === delegationSelector);
}
function normalizeParameters(originalTypeEvent, handler, delegationFunction) {
  const isDelegated = typeof handler === "string";
  const callable = isDelegated ? delegationFunction : handler || delegationFunction;
  let typeEvent = getTypeEvent(originalTypeEvent);
  if (!nativeEvents.has(typeEvent)) {
    typeEvent = originalTypeEvent;
  }
  return [isDelegated, callable, typeEvent];
}
function addHandler(element, originalTypeEvent, handler, delegationFunction, oneOff) {
  if (typeof originalTypeEvent !== "string" || !element) {
    return;
  }
  let [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction);
  if (originalTypeEvent in customEvents) {
    const wrapFunction = (fn3) => {
      return function(event) {
        if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {
          return fn3.call(this, event);
        }
      };
    };
    callable = wrapFunction(callable);
  }
  const events = getElementEvents(element);
  const handlers = events[typeEvent] || (events[typeEvent] = {});
  const previousFunction = findHandler(handlers, callable, isDelegated ? handler : null);
  if (previousFunction) {
    previousFunction.oneOff = previousFunction.oneOff && oneOff;
    return;
  }
  const uid2 = makeEventUid(callable, originalTypeEvent.replace(namespaceRegex, ""));
  const fn2 = isDelegated ? bootstrapDelegationHandler(element, handler, callable) : bootstrapHandler(element, callable);
  fn2.delegationSelector = isDelegated ? handler : null;
  fn2.callable = callable;
  fn2.oneOff = oneOff;
  fn2.uidEvent = uid2;
  handlers[uid2] = fn2;
  element.addEventListener(typeEvent, fn2, isDelegated);
}
function removeHandler(element, events, typeEvent, handler, delegationSelector) {
  const fn2 = findHandler(events[typeEvent], handler, delegationSelector);
  if (!fn2) {
    return;
  }
  element.removeEventListener(typeEvent, fn2, Boolean(delegationSelector));
  delete events[typeEvent][fn2.uidEvent];
}
function removeNamespacedHandlers(element, events, typeEvent, namespace) {
  const storeElementEvent = events[typeEvent] || {};
  for (const [handlerKey, event] of Object.entries(storeElementEvent)) {
    if (handlerKey.includes(namespace)) {
      removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);
    }
  }
}
function getTypeEvent(event) {
  event = event.replace(stripNameRegex, "");
  return customEvents[event] || event;
}
const EventHandler = {
  on(element, event, handler, delegationFunction) {
    addHandler(element, event, handler, delegationFunction, false);
  },
  one(element, event, handler, delegationFunction) {
    addHandler(element, event, handler, delegationFunction, true);
  },
  off(element, originalTypeEvent, handler, delegationFunction) {
    if (typeof originalTypeEvent !== "string" || !element) {
      return;
    }
    const [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction);
    const inNamespace = typeEvent !== originalTypeEvent;
    const events = getElementEvents(element);
    const storeElementEvent = events[typeEvent] || {};
    const isNamespace = originalTypeEvent.startsWith(".");
    if (typeof callable !== "undefined") {
      if (!Object.keys(storeElementEvent).length) {
        return;
      }
      removeHandler(element, events, typeEvent, callable, isDelegated ? handler : null);
      return;
    }
    if (isNamespace) {
      for (const elementEvent of Object.keys(events)) {
        removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));
      }
    }
    for (const [keyHandlers, event] of Object.entries(storeElementEvent)) {
      const handlerKey = keyHandlers.replace(stripUidRegex, "");
      if (!inNamespace || originalTypeEvent.includes(handlerKey)) {
        removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);
      }
    }
  },
  trigger(element, event, args) {
    if (typeof event !== "string" || !element) {
      return null;
    }
    const $2 = getjQuery();
    const typeEvent = getTypeEvent(event);
    const inNamespace = event !== typeEvent;
    let jQueryEvent = null;
    let bubbles = true;
    let nativeDispatch = true;
    let defaultPrevented = false;
    if (inNamespace && $2) {
      jQueryEvent = $2.Event(event, args);
      $2(element).trigger(jQueryEvent);
      bubbles = !jQueryEvent.isPropagationStopped();
      nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();
      defaultPrevented = jQueryEvent.isDefaultPrevented();
    }
    const evt = hydrateObj(new Event(event, {
      bubbles,
      cancelable: true
    }), args);
    if (defaultPrevented) {
      evt.preventDefault();
    }
    if (nativeDispatch) {
      element.dispatchEvent(evt);
    }
    if (evt.defaultPrevented && jQueryEvent) {
      jQueryEvent.preventDefault();
    }
    return evt;
  }
};
function hydrateObj(obj, meta2 = {}) {
  for (const [key2, value2] of Object.entries(meta2)) {
    try {
      obj[key2] = value2;
    } catch (_unused) {
      Object.defineProperty(obj, key2, {
        configurable: true,
        get() {
          return value2;
        }
      });
    }
  }
  return obj;
}
function normalizeData(value2) {
  if (value2 === "true") {
    return true;
  }
  if (value2 === "false") {
    return false;
  }
  if (value2 === Number(value2).toString()) {
    return Number(value2);
  }
  if (value2 === "" || value2 === "null") {
    return null;
  }
  if (typeof value2 !== "string") {
    return value2;
  }
  try {
    return JSON.parse(decodeURIComponent(value2));
  } catch (_unused) {
    return value2;
  }
}
function normalizeDataKey(key2) {
  return key2.replace(/[A-Z]/g, (chr) => `-${chr.toLowerCase()}`);
}
const Manipulator = {
  setDataAttribute(element, key2, value2) {
    element.setAttribute(`data-bs-${normalizeDataKey(key2)}`, value2);
  },
  removeDataAttribute(element, key2) {
    element.removeAttribute(`data-bs-${normalizeDataKey(key2)}`);
  },
  getDataAttributes(element) {
    if (!element) {
      return {};
    }
    const attributes = {};
    const bsKeys = Object.keys(element.dataset).filter((key2) => key2.startsWith("bs") && !key2.startsWith("bsConfig"));
    for (const key2 of bsKeys) {
      let pureKey = key2.replace(/^bs/, "");
      pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);
      attributes[pureKey] = normalizeData(element.dataset[key2]);
    }
    return attributes;
  },
  getDataAttribute(element, key2) {
    return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key2)}`));
  }
};
class Config {
  // Getters
  static get Default() {
    return {};
  }
  static get DefaultType() {
    return {};
  }
  static get NAME() {
    throw new Error('You have to implement the static method "NAME", for each component!');
  }
  _getConfig(config) {
    config = this._mergeConfigObj(config);
    config = this._configAfterMerge(config);
    this._typeCheckConfig(config);
    return config;
  }
  _configAfterMerge(config) {
    return config;
  }
  _mergeConfigObj(config, element) {
    const jsonConfig = isElement(element) ? Manipulator.getDataAttribute(element, "config") : {};
    return {
      ...this.constructor.Default,
      ...typeof jsonConfig === "object" ? jsonConfig : {},
      ...isElement(element) ? Manipulator.getDataAttributes(element) : {},
      ...typeof config === "object" ? config : {}
    };
  }
  _typeCheckConfig(config, configTypes = this.constructor.DefaultType) {
    for (const [property, expectedTypes] of Object.entries(configTypes)) {
      const value2 = config[property];
      const valueType = isElement(value2) ? "element" : toType(value2);
      if (!new RegExp(expectedTypes).test(valueType)) {
        throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${property}" provided type "${valueType}" but expected type "${expectedTypes}".`);
      }
    }
  }
}
const VERSION = "5.3.3";
class BaseComponent extends Config {
  constructor(element, config) {
    super();
    element = getElement(element);
    if (!element) {
      return;
    }
    this._element = element;
    this._config = this._getConfig(config);
    Data.set(this._element, this.constructor.DATA_KEY, this);
  }
  // Public
  dispose() {
    Data.remove(this._element, this.constructor.DATA_KEY);
    EventHandler.off(this._element, this.constructor.EVENT_KEY);
    for (const propertyName of Object.getOwnPropertyNames(this)) {
      this[propertyName] = null;
    }
  }
  _queueCallback(callback, element, isAnimated = true) {
    executeAfterTransition(callback, element, isAnimated);
  }
  _getConfig(config) {
    config = this._mergeConfigObj(config, this._element);
    config = this._configAfterMerge(config);
    this._typeCheckConfig(config);
    return config;
  }
  // Static
  static getInstance(element) {
    return Data.get(getElement(element), this.DATA_KEY);
  }
  static getOrCreateInstance(element, config = {}) {
    return this.getInstance(element) || new this(element, typeof config === "object" ? config : null);
  }
  static get VERSION() {
    return VERSION;
  }
  static get DATA_KEY() {
    return `bs.${this.NAME}`;
  }
  static get EVENT_KEY() {
    return `.${this.DATA_KEY}`;
  }
  static eventName(name) {
    return `${name}${this.EVENT_KEY}`;
  }
}
const getSelector = (element) => {
  let selector = element.getAttribute("data-bs-target");
  if (!selector || selector === "#") {
    let hrefAttribute = element.getAttribute("href");
    if (!hrefAttribute || !hrefAttribute.includes("#") && !hrefAttribute.startsWith(".")) {
      return null;
    }
    if (hrefAttribute.includes("#") && !hrefAttribute.startsWith("#")) {
      hrefAttribute = `#${hrefAttribute.split("#")[1]}`;
    }
    selector = hrefAttribute && hrefAttribute !== "#" ? hrefAttribute.trim() : null;
  }
  return selector ? selector.split(",").map((sel) => parseSelector(sel)).join(",") : null;
};
const SelectorEngine = {
  find(selector, element = document.documentElement) {
    return [].concat(...Element.prototype.querySelectorAll.call(element, selector));
  },
  findOne(selector, element = document.documentElement) {
    return Element.prototype.querySelector.call(element, selector);
  },
  children(element, selector) {
    return [].concat(...element.children).filter((child2) => child2.matches(selector));
  },
  parents(element, selector) {
    const parents = [];
    let ancestor = element.parentNode.closest(selector);
    while (ancestor) {
      parents.push(ancestor);
      ancestor = ancestor.parentNode.closest(selector);
    }
    return parents;
  },
  prev(element, selector) {
    let previous = element.previousElementSibling;
    while (previous) {
      if (previous.matches(selector)) {
        return [previous];
      }
      previous = previous.previousElementSibling;
    }
    return [];
  },
  // TODO: this is now unused; remove later along with prev()
  next(element, selector) {
    let next4 = element.nextElementSibling;
    while (next4) {
      if (next4.matches(selector)) {
        return [next4];
      }
      next4 = next4.nextElementSibling;
    }
    return [];
  },
  focusableChildren(element) {
    const focusables = ["a", "button", "input", "textarea", "select", "details", "[tabindex]", '[contenteditable="true"]'].map((selector) => `${selector}:not([tabindex^="-"])`).join(",");
    return this.find(focusables, element).filter((el) => !isDisabled(el) && isVisible(el));
  },
  getSelectorFromElement(element) {
    const selector = getSelector(element);
    if (selector) {
      return SelectorEngine.findOne(selector) ? selector : null;
    }
    return null;
  },
  getElementFromSelector(element) {
    const selector = getSelector(element);
    return selector ? SelectorEngine.findOne(selector) : null;
  },
  getMultipleElementsFromSelector(element) {
    const selector = getSelector(element);
    return selector ? SelectorEngine.find(selector) : [];
  }
};
const enableDismissTrigger = (component, method2 = "hide") => {
  const clickEvent = `click.dismiss${component.EVENT_KEY}`;
  const name = component.NAME;
  EventHandler.on(document, clickEvent, `[data-bs-dismiss="${name}"]`, function(event) {
    if (["A", "AREA"].includes(this.tagName)) {
      event.preventDefault();
    }
    if (isDisabled(this)) {
      return;
    }
    const target = SelectorEngine.getElementFromSelector(this) || this.closest(`.${name}`);
    const instance = component.getOrCreateInstance(target);
    instance[method2]();
  });
};
const NAME$f = "alert";
const DATA_KEY$a = "bs.alert";
const EVENT_KEY$b = `.${DATA_KEY$a}`;
const EVENT_CLOSE = `close${EVENT_KEY$b}`;
const EVENT_CLOSED = `closed${EVENT_KEY$b}`;
const CLASS_NAME_FADE$5 = "fade";
const CLASS_NAME_SHOW$8 = "show";
class Alert extends BaseComponent {
  // Getters
  static get NAME() {
    return NAME$f;
  }
  // Public
  close() {
    const closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE);
    if (closeEvent.defaultPrevented) {
      return;
    }
    this._element.classList.remove(CLASS_NAME_SHOW$8);
    const isAnimated = this._element.classList.contains(CLASS_NAME_FADE$5);
    this._queueCallback(() => this._destroyElement(), this._element, isAnimated);
  }
  // Private
  _destroyElement() {
    this._element.remove();
    EventHandler.trigger(this._element, EVENT_CLOSED);
    this.dispose();
  }
  // Static
  static jQueryInterface(config) {
    return this.each(function() {
      const data2 = Alert.getOrCreateInstance(this);
      if (typeof config !== "string") {
        return;
      }
      if (data2[config] === void 0 || config.startsWith("_") || config === "constructor") {
        throw new TypeError(`No method named "${config}"`);
      }
      data2[config](this);
    });
  }
}
enableDismissTrigger(Alert, "close");
defineJQueryPlugin(Alert);
const NAME$e = "button";
const DATA_KEY$9 = "bs.button";
const EVENT_KEY$a = `.${DATA_KEY$9}`;
const DATA_API_KEY$6 = ".data-api";
const CLASS_NAME_ACTIVE$3 = "active";
const SELECTOR_DATA_TOGGLE$5 = '[data-bs-toggle="button"]';
const EVENT_CLICK_DATA_API$6 = `click${EVENT_KEY$a}${DATA_API_KEY$6}`;
class Button extends BaseComponent {
  // Getters
  static get NAME() {
    return NAME$e;
  }
  // Public
  toggle() {
    this._element.setAttribute("aria-pressed", this._element.classList.toggle(CLASS_NAME_ACTIVE$3));
  }
  // Static
  static jQueryInterface(config) {
    return this.each(function() {
      const data2 = Button.getOrCreateInstance(this);
      if (config === "toggle") {
        data2[config]();
      }
    });
  }
}
EventHandler.on(document, EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$5, (event) => {
  event.preventDefault();
  const button = event.target.closest(SELECTOR_DATA_TOGGLE$5);
  const data2 = Button.getOrCreateInstance(button);
  data2.toggle();
});
defineJQueryPlugin(Button);
const NAME$d = "swipe";
const EVENT_KEY$9 = ".bs.swipe";
const EVENT_TOUCHSTART = `touchstart${EVENT_KEY$9}`;
const EVENT_TOUCHMOVE = `touchmove${EVENT_KEY$9}`;
const EVENT_TOUCHEND = `touchend${EVENT_KEY$9}`;
const EVENT_POINTERDOWN = `pointerdown${EVENT_KEY$9}`;
const EVENT_POINTERUP = `pointerup${EVENT_KEY$9}`;
const POINTER_TYPE_TOUCH = "touch";
const POINTER_TYPE_PEN = "pen";
const CLASS_NAME_POINTER_EVENT = "pointer-event";
const SWIPE_THRESHOLD = 40;
const Default$c = {
  endCallback: null,
  leftCallback: null,
  rightCallback: null
};
const DefaultType$c = {
  endCallback: "(function|null)",
  leftCallback: "(function|null)",
  rightCallback: "(function|null)"
};
class Swipe extends Config {
  constructor(element, config) {
    super();
    this._element = element;
    if (!element || !Swipe.isSupported()) {
      return;
    }
    this._config = this._getConfig(config);
    this._deltaX = 0;
    this._supportPointerEvents = Boolean(window.PointerEvent);
    this._initEvents();
  }
  // Getters
  static get Default() {
    return Default$c;
  }
  static get DefaultType() {
    return DefaultType$c;
  }
  static get NAME() {
    return NAME$d;
  }
  // Public
  dispose() {
    EventHandler.off(this._element, EVENT_KEY$9);
  }
  // Private
  _start(event) {
    if (!this._supportPointerEvents) {
      this._deltaX = event.touches[0].clientX;
      return;
    }
    if (this._eventIsPointerPenTouch(event)) {
      this._deltaX = event.clientX;
    }
  }
  _end(event) {
    if (this._eventIsPointerPenTouch(event)) {
      this._deltaX = event.clientX - this._deltaX;
    }
    this._handleSwipe();
    execute(this._config.endCallback);
  }
  _move(event) {
    this._deltaX = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - this._deltaX;
  }
  _handleSwipe() {
    const absDeltaX = Math.abs(this._deltaX);
    if (absDeltaX <= SWIPE_THRESHOLD) {
      return;
    }
    const direction = absDeltaX / this._deltaX;
    this._deltaX = 0;
    if (!direction) {
      return;
    }
    execute(direction > 0 ? this._config.rightCallback : this._config.leftCallback);
  }
  _initEvents() {
    if (this._supportPointerEvents) {
      EventHandler.on(this._element, EVENT_POINTERDOWN, (event) => this._start(event));
      EventHandler.on(this._element, EVENT_POINTERUP, (event) => this._end(event));
      this._element.classList.add(CLASS_NAME_POINTER_EVENT);
    } else {
      EventHandler.on(this._element, EVENT_TOUCHSTART, (event) => this._start(event));
      EventHandler.on(this._element, EVENT_TOUCHMOVE, (event) => this._move(event));
      EventHandler.on(this._element, EVENT_TOUCHEND, (event) => this._end(event));
    }
  }
  _eventIsPointerPenTouch(event) {
    return this._supportPointerEvents && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH);
  }
  // Static
  static isSupported() {
    return "ontouchstart" in document.documentElement || navigator.maxTouchPoints > 0;
  }
}
const NAME$c = "carousel";
const DATA_KEY$8 = "bs.carousel";
const EVENT_KEY$8 = `.${DATA_KEY$8}`;
const DATA_API_KEY$5 = ".data-api";
const ARROW_LEFT_KEY$1 = "ArrowLeft";
const ARROW_RIGHT_KEY$1 = "ArrowRight";
const TOUCHEVENT_COMPAT_WAIT = 500;
const ORDER_NEXT = "next";
const ORDER_PREV = "prev";
const DIRECTION_LEFT$2 = "left";
const DIRECTION_RIGHT$2 = "right";
const EVENT_SLIDE = `slide${EVENT_KEY$8}`;
const EVENT_SLID = `slid${EVENT_KEY$8}`;
const EVENT_KEYDOWN$1 = `keydown${EVENT_KEY$8}`;
const EVENT_MOUSEENTER$1 = `mouseenter${EVENT_KEY$8}`;
const EVENT_MOUSELEAVE$1 = `mouseleave${EVENT_KEY$8}`;
const EVENT_DRAG_START = `dragstart${EVENT_KEY$8}`;
const EVENT_LOAD_DATA_API$3 = `load${EVENT_KEY$8}${DATA_API_KEY$5}`;
const EVENT_CLICK_DATA_API$5 = `click${EVENT_KEY$8}${DATA_API_KEY$5}`;
const CLASS_NAME_CAROUSEL = "carousel";
const CLASS_NAME_ACTIVE$2 = "active";
const CLASS_NAME_SLIDE = "slide";
const CLASS_NAME_END = "carousel-item-end";
const CLASS_NAME_START = "carousel-item-start";
const CLASS_NAME_NEXT = "carousel-item-next";
const CLASS_NAME_PREV = "carousel-item-prev";
const SELECTOR_ACTIVE = ".active";
const SELECTOR_ITEM = ".carousel-item";
const SELECTOR_ACTIVE_ITEM = SELECTOR_ACTIVE + SELECTOR_ITEM;
const SELECTOR_ITEM_IMG = ".carousel-item img";
const SELECTOR_INDICATORS = ".carousel-indicators";
const SELECTOR_DATA_SLIDE = "[data-bs-slide], [data-bs-slide-to]";
const SELECTOR_DATA_RIDE = '[data-bs-ride="carousel"]';
const KEY_TO_DIRECTION = {
  [ARROW_LEFT_KEY$1]: DIRECTION_RIGHT$2,
  [ARROW_RIGHT_KEY$1]: DIRECTION_LEFT$2
};
const Default$b = {
  interval: 5e3,
  keyboard: true,
  pause: "hover",
  ride: false,
  touch: true,
  wrap: true
};
const DefaultType$b = {
  interval: "(number|boolean)",
  // TODO:v6 remove boolean support
  keyboard: "boolean",
  pause: "(string|boolean)",
  ride: "(boolean|string)",
  touch: "boolean",
  wrap: "boolean"
};
class Carousel extends BaseComponent {
  constructor(element, config) {
    super(element, config);
    this._interval = null;
    this._activeElement = null;
    this._isSliding = false;
    this.touchTimeout = null;
    this._swipeHelper = null;
    this._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, this._element);
    this._addEventListeners();
    if (this._config.ride === CLASS_NAME_CAROUSEL) {
      this.cycle();
    }
  }
  // Getters
  static get Default() {
    return Default$b;
  }
  static get DefaultType() {
    return DefaultType$b;
  }
  static get NAME() {
    return NAME$c;
  }
  // Public
  next() {
    this._slide(ORDER_NEXT);
  }
  nextWhenVisible() {
    if (!document.hidden && isVisible(this._element)) {
      this.next();
    }
  }
  prev() {
    this._slide(ORDER_PREV);
  }
  pause() {
    if (this._isSliding) {
      triggerTransitionEnd(this._element);
    }
    this._clearInterval();
  }
  cycle() {
    this._clearInterval();
    this._updateInterval();
    this._interval = setInterval(() => this.nextWhenVisible(), this._config.interval);
  }
  _maybeEnableCycle() {
    if (!this._config.ride) {
      return;
    }
    if (this._isSliding) {
      EventHandler.one(this._element, EVENT_SLID, () => this.cycle());
      return;
    }
    this.cycle();
  }
  to(index2) {
    const items = this._getItems();
    if (index2 > items.length - 1 || index2 < 0) {
      return;
    }
    if (this._isSliding) {
      EventHandler.one(this._element, EVENT_SLID, () => this.to(index2));
      return;
    }
    const activeIndex = this._getItemIndex(this._getActive());
    if (activeIndex === index2) {
      return;
    }
    const order2 = index2 > activeIndex ? ORDER_NEXT : ORDER_PREV;
    this._slide(order2, items[index2]);
  }
  dispose() {
    if (this._swipeHelper) {
      this._swipeHelper.dispose();
    }
    super.dispose();
  }
  // Private
  _configAfterMerge(config) {
    config.defaultInterval = config.interval;
    return config;
  }
  _addEventListeners() {
    if (this._config.keyboard) {
      EventHandler.on(this._element, EVENT_KEYDOWN$1, (event) => this._keydown(event));
    }
    if (this._config.pause === "hover") {
      EventHandler.on(this._element, EVENT_MOUSEENTER$1, () => this.pause());
      EventHandler.on(this._element, EVENT_MOUSELEAVE$1, () => this._maybeEnableCycle());
    }
    if (this._config.touch && Swipe.isSupported()) {
      this._addTouchEventListeners();
    }
  }
  _addTouchEventListeners() {
    for (const img of SelectorEngine.find(SELECTOR_ITEM_IMG, this._element)) {
      EventHandler.on(img, EVENT_DRAG_START, (event) => event.preventDefault());
    }
    const endCallBack = () => {
      if (this._config.pause !== "hover") {
        return;
      }
      this.pause();
      if (this.touchTimeout) {
        clearTimeout(this.touchTimeout);
      }
      this.touchTimeout = setTimeout(() => this._maybeEnableCycle(), TOUCHEVENT_COMPAT_WAIT + this._config.interval);
    };
    const swipeConfig = {
      leftCallback: () => this._slide(this._directionToOrder(DIRECTION_LEFT$2)),
      rightCallback: () => this._slide(this._directionToOrder(DIRECTION_RIGHT$2)),
      endCallback: endCallBack
    };
    this._swipeHelper = new Swipe(this._element, swipeConfig);
  }
  _keydown(event) {
    if (/input|textarea/i.test(event.target.tagName)) {
      return;
    }
    const direction = KEY_TO_DIRECTION[event.key];
    if (direction) {
      event.preventDefault();
      this._slide(this._directionToOrder(direction));
    }
  }
  _getItemIndex(element) {
    return this._getItems().indexOf(element);
  }
  _setActiveIndicatorElement(index2) {
    if (!this._indicatorsElement) {
      return;
    }
    const activeIndicator = SelectorEngine.findOne(SELECTOR_ACTIVE, this._indicatorsElement);
    activeIndicator.classList.remove(CLASS_NAME_ACTIVE$2);
    activeIndicator.removeAttribute("aria-current");
    const newActiveIndicator = SelectorEngine.findOne(`[data-bs-slide-to="${index2}"]`, this._indicatorsElement);
    if (newActiveIndicator) {
      newActiveIndicator.classList.add(CLASS_NAME_ACTIVE$2);
      newActiveIndicator.setAttribute("aria-current", "true");
    }
  }
  _updateInterval() {
    const element = this._activeElement || this._getActive();
    if (!element) {
      return;
    }
    const elementInterval = Number.parseInt(element.getAttribute("data-bs-interval"), 10);
    this._config.interval = elementInterval || this._config.defaultInterval;
  }
  _slide(order2, element = null) {
    if (this._isSliding) {
      return;
    }
    const activeElement = this._getActive();
    const isNext = order2 === ORDER_NEXT;
    const nextElement = element || getNextActiveElement(this._getItems(), activeElement, isNext, this._config.wrap);
    if (nextElement === activeElement) {
      return;
    }
    const nextElementIndex = this._getItemIndex(nextElement);
    const triggerEvent2 = (eventName) => {
      return EventHandler.trigger(this._element, eventName, {
        relatedTarget: nextElement,
        direction: this._orderToDirection(order2),
        from: this._getItemIndex(activeElement),
        to: nextElementIndex
      });
    };
    const slideEvent = triggerEvent2(EVENT_SLIDE);
    if (slideEvent.defaultPrevented) {
      return;
    }
    if (!activeElement || !nextElement) {
      return;
    }
    const isCycling = Boolean(this._interval);
    this.pause();
    this._isSliding = true;
    this._setActiveIndicatorElement(nextElementIndex);
    this._activeElement = nextElement;
    const directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END;
    const orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV;
    nextElement.classList.add(orderClassName);
    reflow(nextElement);
    activeElement.classList.add(directionalClassName);
    nextElement.classList.add(directionalClassName);
    const completeCallBack = () => {
      nextElement.classList.remove(directionalClassName, orderClassName);
      nextElement.classList.add(CLASS_NAME_ACTIVE$2);
      activeElement.classList.remove(CLASS_NAME_ACTIVE$2, orderClassName, directionalClassName);
      this._isSliding = false;
      triggerEvent2(EVENT_SLID);
    };
    this._queueCallback(completeCallBack, activeElement, this._isAnimated());
    if (isCycling) {
      this.cycle();
    }
  }
  _isAnimated() {
    return this._element.classList.contains(CLASS_NAME_SLIDE);
  }
  _getActive() {
    return SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);
  }
  _getItems() {
    return SelectorEngine.find(SELECTOR_ITEM, this._element);
  }
  _clearInterval() {
    if (this._interval) {
      clearInterval(this._interval);
      this._interval = null;
    }
  }
  _directionToOrder(direction) {
    if (isRTL()) {
      return direction === DIRECTION_LEFT$2 ? ORDER_PREV : ORDER_NEXT;
    }
    return direction === DIRECTION_LEFT$2 ? ORDER_NEXT : ORDER_PREV;
  }
  _orderToDirection(order2) {
    if (isRTL()) {
      return order2 === ORDER_PREV ? DIRECTION_LEFT$2 : DIRECTION_RIGHT$2;
    }
    return order2 === ORDER_PREV ? DIRECTION_RIGHT$2 : DIRECTION_LEFT$2;
  }
  // Static
  static jQueryInterface(config) {
    return this.each(function() {
      const data2 = Carousel.getOrCreateInstance(this, config);
      if (typeof config === "number") {
        data2.to(config);
        return;
      }
      if (typeof config === "string") {
        if (data2[config] === void 0 || config.startsWith("_") || config === "constructor") {
          throw new TypeError(`No method named "${config}"`);
        }
        data2[config]();
      }
    });
  }
}
EventHandler.on(document, EVENT_CLICK_DATA_API$5, SELECTOR_DATA_SLIDE, function(event) {
  const target = SelectorEngine.getElementFromSelector(this);
  if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) {
    return;
  }
  event.preventDefault();
  const carousel = Carousel.getOrCreateInstance(target);
  const slideIndex = this.getAttribute("data-bs-slide-to");
  if (slideIndex) {
    carousel.to(slideIndex);
    carousel._maybeEnableCycle();
    return;
  }
  if (Manipulator.getDataAttribute(this, "slide") === "next") {
    carousel.next();
    carousel._maybeEnableCycle();
    return;
  }
  carousel.prev();
  carousel._maybeEnableCycle();
});
EventHandler.on(window, EVENT_LOAD_DATA_API$3, () => {
  const carousels = SelectorEngine.find(SELECTOR_DATA_RIDE);
  for (const carousel of carousels) {
    Carousel.getOrCreateInstance(carousel);
  }
});
defineJQueryPlugin(Carousel);
const NAME$b = "collapse";
const DATA_KEY$7 = "bs.collapse";
const EVENT_KEY$7 = `.${DATA_KEY$7}`;
const DATA_API_KEY$4 = ".data-api";
const EVENT_SHOW$6 = `show${EVENT_KEY$7}`;
const EVENT_SHOWN$6 = `shown${EVENT_KEY$7}`;
const EVENT_HIDE$6 = `hide${EVENT_KEY$7}`;
const EVENT_HIDDEN$6 = `hidden${EVENT_KEY$7}`;
const EVENT_CLICK_DATA_API$4 = `click${EVENT_KEY$7}${DATA_API_KEY$4}`;
const CLASS_NAME_SHOW$7 = "show";
const CLASS_NAME_COLLAPSE = "collapse";
const CLASS_NAME_COLLAPSING = "collapsing";
const CLASS_NAME_COLLAPSED = "collapsed";
const CLASS_NAME_DEEPER_CHILDREN = `:scope .${CLASS_NAME_COLLAPSE} .${CLASS_NAME_COLLAPSE}`;
const CLASS_NAME_HORIZONTAL = "collapse-horizontal";
const WIDTH = "width";
const HEIGHT = "height";
const SELECTOR_ACTIVES = ".collapse.show, .collapse.collapsing";
const SELECTOR_DATA_TOGGLE$4 = '[data-bs-toggle="collapse"]';
const Default$a = {
  parent: null,
  toggle: true
};
const DefaultType$a = {
  parent: "(null|element)",
  toggle: "boolean"
};
class Collapse extends BaseComponent {
  constructor(element, config) {
    super(element, config);
    this._isTransitioning = false;
    this._triggerArray = [];
    const toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE$4);
    for (const elem of toggleList) {
      const selector = SelectorEngine.getSelectorFromElement(elem);
      const filterElement = SelectorEngine.find(selector).filter((foundElement) => foundElement === this._element);
      if (selector !== null && filterElement.length) {
        this._triggerArray.push(elem);
      }
    }
    this._initializeChildren();
    if (!this._config.parent) {
      this._addAriaAndCollapsedClass(this._triggerArray, this._isShown());
    }
    if (this._config.toggle) {
      this.toggle();
    }
  }
  // Getters
  static get Default() {
    return Default$a;
  }
  static get DefaultType() {
    return DefaultType$a;
  }
  static get NAME() {
    return NAME$b;
  }
  // Public
  toggle() {
    if (this._isShown()) {
      this.hide();
    } else {
      this.show();
    }
  }
  show() {
    if (this._isTransitioning || this._isShown()) {
      return;
    }
    let activeChildren = [];
    if (this._config.parent) {
      activeChildren = this._getFirstLevelChildren(SELECTOR_ACTIVES).filter((element) => element !== this._element).map((element) => Collapse.getOrCreateInstance(element, {
        toggle: false
      }));
    }
    if (activeChildren.length && activeChildren[0]._isTransitioning) {
      return;
    }
    const startEvent = EventHandler.trigger(this._element, EVENT_SHOW$6);
    if (startEvent.defaultPrevented) {
      return;
    }
    for (const activeInstance of activeChildren) {
      activeInstance.hide();
    }
    const dimension = this._getDimension();
    this._element.classList.remove(CLASS_NAME_COLLAPSE);
    this._element.classList.add(CLASS_NAME_COLLAPSING);
    this._element.style[dimension] = 0;
    this._addAriaAndCollapsedClass(this._triggerArray, true);
    this._isTransitioning = true;
    const complete = () => {
      this._isTransitioning = false;
      this._element.classList.remove(CLASS_NAME_COLLAPSING);
      this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);
      this._element.style[dimension] = "";
      EventHandler.trigger(this._element, EVENT_SHOWN$6);
    };
    const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
    const scrollSize = `scroll${capitalizedDimension}`;
    this._queueCallback(complete, this._element, true);
    this._element.style[dimension] = `${this._element[scrollSize]}px`;
  }
  hide() {
    if (this._isTransitioning || !this._isShown()) {
      return;
    }
    const startEvent = EventHandler.trigger(this._element, EVENT_HIDE$6);
    if (startEvent.defaultPrevented) {
      return;
    }
    const dimension = this._getDimension();
    this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`;
    reflow(this._element);
    this._element.classList.add(CLASS_NAME_COLLAPSING);
    this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);
    for (const trigger2 of this._triggerArray) {
      const element = SelectorEngine.getElementFromSelector(trigger2);
      if (element && !this._isShown(element)) {
        this._addAriaAndCollapsedClass([trigger2], false);
      }
    }
    this._isTransitioning = true;
    const complete = () => {
      this._isTransitioning = false;
      this._element.classList.remove(CLASS_NAME_COLLAPSING);
      this._element.classList.add(CLASS_NAME_COLLAPSE);
      EventHandler.trigger(this._element, EVENT_HIDDEN$6);
    };
    this._element.style[dimension] = "";
    this._queueCallback(complete, this._element, true);
  }
  _isShown(element = this._element) {
    return element.classList.contains(CLASS_NAME_SHOW$7);
  }
  // Private
  _configAfterMerge(config) {
    config.toggle = Boolean(config.toggle);
    config.parent = getElement(config.parent);
    return config;
  }
  _getDimension() {
    return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;
  }
  _initializeChildren() {
    if (!this._config.parent) {
      return;
    }
    const children2 = this._getFirstLevelChildren(SELECTOR_DATA_TOGGLE$4);
    for (const element of children2) {
      const selected = SelectorEngine.getElementFromSelector(element);
      if (selected) {
        this._addAriaAndCollapsedClass([element], this._isShown(selected));
      }
    }
  }
  _getFirstLevelChildren(selector) {
    const children2 = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);
    return SelectorEngine.find(selector, this._config.parent).filter((element) => !children2.includes(element));
  }
  _addAriaAndCollapsedClass(triggerArray, isOpen) {
    if (!triggerArray.length) {
      return;
    }
    for (const element of triggerArray) {
      element.classList.toggle(CLASS_NAME_COLLAPSED, !isOpen);
      element.setAttribute("aria-expanded", isOpen);
    }
  }
  // Static
  static jQueryInterface(config) {
    const _config = {};
    if (typeof config === "string" && /show|hide/.test(config)) {
      _config.toggle = false;
    }
    return this.each(function() {
      const data2 = Collapse.getOrCreateInstance(this, _config);
      if (typeof config === "string") {
        if (typeof data2[config] === "undefined") {
          throw new TypeError(`No method named "${config}"`);
        }
        data2[config]();
      }
    });
  }
}
EventHandler.on(document, EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$4, function(event) {
  if (event.target.tagName === "A" || event.delegateTarget && event.delegateTarget.tagName === "A") {
    event.preventDefault();
  }
  for (const element of SelectorEngine.getMultipleElementsFromSelector(this)) {
    Collapse.getOrCreateInstance(element, {
      toggle: false
    }).toggle();
  }
});
defineJQueryPlugin(Collapse);
const NAME$a = "dropdown";
const DATA_KEY$6 = "bs.dropdown";
const EVENT_KEY$6 = `.${DATA_KEY$6}`;
const DATA_API_KEY$3 = ".data-api";
const ESCAPE_KEY$2 = "Escape";
const TAB_KEY$1 = "Tab";
const ARROW_UP_KEY$1 = "ArrowUp";
const ARROW_DOWN_KEY$1 = "ArrowDown";
const RIGHT_MOUSE_BUTTON = 2;
const EVENT_HIDE$5 = `hide${EVENT_KEY$6}`;
const EVENT_HIDDEN$5 = `hidden${EVENT_KEY$6}`;
const EVENT_SHOW$5 = `show${EVENT_KEY$6}`;
const EVENT_SHOWN$5 = `shown${EVENT_KEY$6}`;
const EVENT_CLICK_DATA_API$3 = `click${EVENT_KEY$6}${DATA_API_KEY$3}`;
const EVENT_KEYDOWN_DATA_API = `keydown${EVENT_KEY$6}${DATA_API_KEY$3}`;
const EVENT_KEYUP_DATA_API = `keyup${EVENT_KEY$6}${DATA_API_KEY$3}`;
const CLASS_NAME_SHOW$6 = "show";
const CLASS_NAME_DROPUP = "dropup";
const CLASS_NAME_DROPEND = "dropend";
const CLASS_NAME_DROPSTART = "dropstart";
const CLASS_NAME_DROPUP_CENTER = "dropup-center";
const CLASS_NAME_DROPDOWN_CENTER = "dropdown-center";
const SELECTOR_DATA_TOGGLE$3 = '[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)';
const SELECTOR_DATA_TOGGLE_SHOWN = `${SELECTOR_DATA_TOGGLE$3}.${CLASS_NAME_SHOW$6}`;
const SELECTOR_MENU = ".dropdown-menu";
const SELECTOR_NAVBAR = ".navbar";
const SELECTOR_NAVBAR_NAV = ".navbar-nav";
const SELECTOR_VISIBLE_ITEMS = ".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)";
const PLACEMENT_TOP = isRTL() ? "top-end" : "top-start";
const PLACEMENT_TOPEND = isRTL() ? "top-start" : "top-end";
const PLACEMENT_BOTTOM = isRTL() ? "bottom-end" : "bottom-start";
const PLACEMENT_BOTTOMEND = isRTL() ? "bottom-start" : "bottom-end";
const PLACEMENT_RIGHT = isRTL() ? "left-start" : "right-start";
const PLACEMENT_LEFT = isRTL() ? "right-start" : "left-start";
const PLACEMENT_TOPCENTER = "top";
const PLACEMENT_BOTTOMCENTER = "bottom";
const Default$9 = {
  autoClose: true,
  boundary: "clippingParents",
  display: "dynamic",
  offset: [0, 2],
  popperConfig: null,
  reference: "toggle"
};
const DefaultType$9 = {
  autoClose: "(boolean|string)",
  boundary: "(string|element)",
  display: "string",
  offset: "(array|string|function)",
  popperConfig: "(null|object|function)",
  reference: "(string|element|object)"
};
class Dropdown extends BaseComponent {
  constructor(element, config) {
    super(element, config);
    this._popper = null;
    this._parent = this._element.parentNode;
    this._menu = SelectorEngine.next(this._element, SELECTOR_MENU)[0] || SelectorEngine.prev(this._element, SELECTOR_MENU)[0] || SelectorEngine.findOne(SELECTOR_MENU, this._parent);
    this._inNavbar = this._detectNavbar();
  }
  // Getters
  static get Default() {
    return Default$9;
  }
  static get DefaultType() {
    return DefaultType$9;
  }
  static get NAME() {
    return NAME$a;
  }
  // Public
  toggle() {
    return this._isShown() ? this.hide() : this.show();
  }
  show() {
    if (isDisabled(this._element) || this._isShown()) {
      return;
    }
    const relatedTarget = {
      relatedTarget: this._element
    };
    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$5, relatedTarget);
    if (showEvent.defaultPrevented) {
      return;
    }
    this._createPopper();
    if ("ontouchstart" in document.documentElement && !this._parent.closest(SELECTOR_NAVBAR_NAV)) {
      for (const element of [].concat(...document.body.children)) {
        EventHandler.on(element, "mouseover", noop$2);
      }
    }
    this._element.focus();
    this._element.setAttribute("aria-expanded", true);
    this._menu.classList.add(CLASS_NAME_SHOW$6);
    this._element.classList.add(CLASS_NAME_SHOW$6);
    EventHandler.trigger(this._element, EVENT_SHOWN$5, relatedTarget);
  }
  hide() {
    if (isDisabled(this._element) || !this._isShown()) {
      return;
    }
    const relatedTarget = {
      relatedTarget: this._element
    };
    this._completeHide(relatedTarget);
  }
  dispose() {
    if (this._popper) {
      this._popper.destroy();
    }
    super.dispose();
  }
  update() {
    this._inNavbar = this._detectNavbar();
    if (this._popper) {
      this._popper.update();
    }
  }
  // Private
  _completeHide(relatedTarget) {
    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$5, relatedTarget);
    if (hideEvent.defaultPrevented) {
      return;
    }
    if ("ontouchstart" in document.documentElement) {
      for (const element of [].concat(...document.body.children)) {
        EventHandler.off(element, "mouseover", noop$2);
      }
    }
    if (this._popper) {
      this._popper.destroy();
    }
    this._menu.classList.remove(CLASS_NAME_SHOW$6);
    this._element.classList.remove(CLASS_NAME_SHOW$6);
    this._element.setAttribute("aria-expanded", "false");
    Manipulator.removeDataAttribute(this._menu, "popper");
    EventHandler.trigger(this._element, EVENT_HIDDEN$5, relatedTarget);
  }
  _getConfig(config) {
    config = super._getConfig(config);
    if (typeof config.reference === "object" && !isElement(config.reference) && typeof config.reference.getBoundingClientRect !== "function") {
      throw new TypeError(`${NAME$a.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);
    }
    return config;
  }
  _createPopper() {
    if (typeof Popper === "undefined") {
      throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");
    }
    let referenceElement = this._element;
    if (this._config.reference === "parent") {
      referenceElement = this._parent;
    } else if (isElement(this._config.reference)) {
      referenceElement = getElement(this._config.reference);
    } else if (typeof this._config.reference === "object") {
      referenceElement = this._config.reference;
    }
    const popperConfig = this._getPopperConfig();
    this._popper = createPopper(referenceElement, this._menu, popperConfig);
  }
  _isShown() {
    return this._menu.classList.contains(CLASS_NAME_SHOW$6);
  }
  _getPlacement() {
    const parentDropdown = this._parent;
    if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {
      return PLACEMENT_RIGHT;
    }
    if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {
      return PLACEMENT_LEFT;
    }
    if (parentDropdown.classList.contains(CLASS_NAME_DROPUP_CENTER)) {
      return PLACEMENT_TOPCENTER;
    }
    if (parentDropdown.classList.contains(CLASS_NAME_DROPDOWN_CENTER)) {
      return PLACEMENT_BOTTOMCENTER;
    }
    const isEnd = getComputedStyle(this._menu).getPropertyValue("--bs-position").trim() === "end";
    if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {
      return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP;
    }
    return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM;
  }
  _detectNavbar() {
    return this._element.closest(SELECTOR_NAVBAR) !== null;
  }
  _getOffset() {
    const {
      offset: offset2
    } = this._config;
    if (typeof offset2 === "string") {
      return offset2.split(",").map((value2) => Number.parseInt(value2, 10));
    }
    if (typeof offset2 === "function") {
      return (popperData) => offset2(popperData, this._element);
    }
    return offset2;
  }
  _getPopperConfig() {
    const defaultBsPopperConfig = {
      placement: this._getPlacement(),
      modifiers: [{
        name: "preventOverflow",
        options: {
          boundary: this._config.boundary
        }
      }, {
        name: "offset",
        options: {
          offset: this._getOffset()
        }
      }]
    };
    if (this._inNavbar || this._config.display === "static") {
      Manipulator.setDataAttribute(this._menu, "popper", "static");
      defaultBsPopperConfig.modifiers = [{
        name: "applyStyles",
        enabled: false
      }];
    }
    return {
      ...defaultBsPopperConfig,
      ...execute(this._config.popperConfig, [defaultBsPopperConfig])
    };
  }
  _selectMenuItem({
    key: key2,
    target
  }) {
    const items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter((element) => isVisible(element));
    if (!items.length) {
      return;
    }
    getNextActiveElement(items, target, key2 === ARROW_DOWN_KEY$1, !items.includes(target)).focus();
  }
  // Static
  static jQueryInterface(config) {
    return this.each(function() {
      const data2 = Dropdown.getOrCreateInstance(this, config);
      if (typeof config !== "string") {
        return;
      }
      if (typeof data2[config] === "undefined") {
        throw new TypeError(`No method named "${config}"`);
      }
      data2[config]();
    });
  }
  static clearMenus(event) {
    if (event.button === RIGHT_MOUSE_BUTTON || event.type === "keyup" && event.key !== TAB_KEY$1) {
      return;
    }
    const openToggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE_SHOWN);
    for (const toggle2 of openToggles) {
      const context = Dropdown.getInstance(toggle2);
      if (!context || context._config.autoClose === false) {
        continue;
      }
      const composedPath = event.composedPath();
      const isMenuTarget = composedPath.includes(context._menu);
      if (composedPath.includes(context._element) || context._config.autoClose === "inside" && !isMenuTarget || context._config.autoClose === "outside" && isMenuTarget) {
        continue;
      }
      if (context._menu.contains(event.target) && (event.type === "keyup" && event.key === TAB_KEY$1 || /input|select|option|textarea|form/i.test(event.target.tagName))) {
        continue;
      }
      const relatedTarget = {
        relatedTarget: context._element
      };
      if (event.type === "click") {
        relatedTarget.clickEvent = event;
      }
      context._completeHide(relatedTarget);
    }
  }
  static dataApiKeydownHandler(event) {
    const isInput = /input|textarea/i.test(event.target.tagName);
    const isEscapeEvent = event.key === ESCAPE_KEY$2;
    const isUpOrDownEvent = [ARROW_UP_KEY$1, ARROW_DOWN_KEY$1].includes(event.key);
    if (!isUpOrDownEvent && !isEscapeEvent) {
      return;
    }
    if (isInput && !isEscapeEvent) {
      return;
    }
    event.preventDefault();
    const getToggleButton = this.matches(SELECTOR_DATA_TOGGLE$3) ? this : SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.next(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.findOne(SELECTOR_DATA_TOGGLE$3, event.delegateTarget.parentNode);
    const instance = Dropdown.getOrCreateInstance(getToggleButton);
    if (isUpOrDownEvent) {
      event.stopPropagation();
      instance.show();
      instance._selectMenuItem(event);
      return;
    }
    if (instance._isShown()) {
      event.stopPropagation();
      instance.hide();
      getToggleButton.focus();
    }
  }
}
EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$3, Dropdown.dataApiKeydownHandler);
EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);
EventHandler.on(document, EVENT_CLICK_DATA_API$3, Dropdown.clearMenus);
EventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);
EventHandler.on(document, EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$3, function(event) {
  event.preventDefault();
  Dropdown.getOrCreateInstance(this).toggle();
});
defineJQueryPlugin(Dropdown);
const NAME$9 = "backdrop";
const CLASS_NAME_FADE$4 = "fade";
const CLASS_NAME_SHOW$5 = "show";
const EVENT_MOUSEDOWN = `mousedown.bs.${NAME$9}`;
const Default$8 = {
  className: "modal-backdrop",
  clickCallback: null,
  isAnimated: false,
  isVisible: true,
  // if false, we use the backdrop helper without adding any element to the dom
  rootElement: "body"
  // give the choice to place backdrop under different elements
};
const DefaultType$8 = {
  className: "string",
  clickCallback: "(function|null)",
  isAnimated: "boolean",
  isVisible: "boolean",
  rootElement: "(element|string)"
};
class Backdrop extends Config {
  constructor(config) {
    super();
    this._config = this._getConfig(config);
    this._isAppended = false;
    this._element = null;
  }
  // Getters
  static get Default() {
    return Default$8;
  }
  static get DefaultType() {
    return DefaultType$8;
  }
  static get NAME() {
    return NAME$9;
  }
  // Public
  show(callback) {
    if (!this._config.isVisible) {
      execute(callback);
      return;
    }
    this._append();
    const element = this._getElement();
    if (this._config.isAnimated) {
      reflow(element);
    }
    element.classList.add(CLASS_NAME_SHOW$5);
    this._emulateAnimation(() => {
      execute(callback);
    });
  }
  hide(callback) {
    if (!this._config.isVisible) {
      execute(callback);
      return;
    }
    this._getElement().classList.remove(CLASS_NAME_SHOW$5);
    this._emulateAnimation(() => {
      this.dispose();
      execute(callback);
    });
  }
  dispose() {
    if (!this._isAppended) {
      return;
    }
    EventHandler.off(this._element, EVENT_MOUSEDOWN);
    this._element.remove();
    this._isAppended = false;
  }
  // Private
  _getElement() {
    if (!this._element) {
      const backdrop = document.createElement("div");
      backdrop.className = this._config.className;
      if (this._config.isAnimated) {
        backdrop.classList.add(CLASS_NAME_FADE$4);
      }
      this._element = backdrop;
    }
    return this._element;
  }
  _configAfterMerge(config) {
    config.rootElement = getElement(config.rootElement);
    return config;
  }
  _append() {
    if (this._isAppended) {
      return;
    }
    const element = this._getElement();
    this._config.rootElement.append(element);
    EventHandler.on(element, EVENT_MOUSEDOWN, () => {
      execute(this._config.clickCallback);
    });
    this._isAppended = true;
  }
  _emulateAnimation(callback) {
    executeAfterTransition(callback, this._getElement(), this._config.isAnimated);
  }
}
const NAME$8 = "focustrap";
const DATA_KEY$5 = "bs.focustrap";
const EVENT_KEY$5 = `.${DATA_KEY$5}`;
const EVENT_FOCUSIN$2 = `focusin${EVENT_KEY$5}`;
const EVENT_KEYDOWN_TAB = `keydown.tab${EVENT_KEY$5}`;
const TAB_KEY = "Tab";
const TAB_NAV_FORWARD = "forward";
const TAB_NAV_BACKWARD = "backward";
const Default$7 = {
  autofocus: true,
  trapElement: null
  // The element to trap focus inside of
};
const DefaultType$7 = {
  autofocus: "boolean",
  trapElement: "element"
};
class FocusTrap extends Config {
  constructor(config) {
    super();
    this._config = this._getConfig(config);
    this._isActive = false;
    this._lastTabNavDirection = null;
  }
  // Getters
  static get Default() {
    return Default$7;
  }
  static get DefaultType() {
    return DefaultType$7;
  }
  static get NAME() {
    return NAME$8;
  }
  // Public
  activate() {
    if (this._isActive) {
      return;
    }
    if (this._config.autofocus) {
      this._config.trapElement.focus();
    }
    EventHandler.off(document, EVENT_KEY$5);
    EventHandler.on(document, EVENT_FOCUSIN$2, (event) => this._handleFocusin(event));
    EventHandler.on(document, EVENT_KEYDOWN_TAB, (event) => this._handleKeydown(event));
    this._isActive = true;
  }
  deactivate() {
    if (!this._isActive) {
      return;
    }
    this._isActive = false;
    EventHandler.off(document, EVENT_KEY$5);
  }
  // Private
  _handleFocusin(event) {
    const {
      trapElement
    } = this._config;
    if (event.target === document || event.target === trapElement || trapElement.contains(event.target)) {
      return;
    }
    const elements = SelectorEngine.focusableChildren(trapElement);
    if (elements.length === 0) {
      trapElement.focus();
    } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {
      elements[elements.length - 1].focus();
    } else {
      elements[0].focus();
    }
  }
  _handleKeydown(event) {
    if (event.key !== TAB_KEY) {
      return;
    }
    this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;
  }
}
const SELECTOR_FIXED_CONTENT = ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top";
const SELECTOR_STICKY_CONTENT = ".sticky-top";
const PROPERTY_PADDING = "padding-right";
const PROPERTY_MARGIN = "margin-right";
class ScrollBarHelper {
  constructor() {
    this._element = document.body;
  }
  // Public
  getWidth() {
    const documentWidth = document.documentElement.clientWidth;
    return Math.abs(window.innerWidth - documentWidth);
  }
  hide() {
    const width = this.getWidth();
    this._disableOverFlow();
    this._setElementAttributes(this._element, PROPERTY_PADDING, (calculatedValue) => calculatedValue + width);
    this._setElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING, (calculatedValue) => calculatedValue + width);
    this._setElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN, (calculatedValue) => calculatedValue - width);
  }
  reset() {
    this._resetElementAttributes(this._element, "overflow");
    this._resetElementAttributes(this._element, PROPERTY_PADDING);
    this._resetElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING);
    this._resetElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN);
  }
  isOverflowing() {
    return this.getWidth() > 0;
  }
  // Private
  _disableOverFlow() {
    this._saveInitialAttribute(this._element, "overflow");
    this._element.style.overflow = "hidden";
  }
  _setElementAttributes(selector, styleProperty, callback) {
    const scrollbarWidth = this.getWidth();
    const manipulationCallBack = (element) => {
      if (element !== this._element && window.innerWidth > element.clientWidth + scrollbarWidth) {
        return;
      }
      this._saveInitialAttribute(element, styleProperty);
      const calculatedValue = window.getComputedStyle(element).getPropertyValue(styleProperty);
      element.style.setProperty(styleProperty, `${callback(Number.parseFloat(calculatedValue))}px`);
    };
    this._applyManipulationCallback(selector, manipulationCallBack);
  }
  _saveInitialAttribute(element, styleProperty) {
    const actualValue = element.style.getPropertyValue(styleProperty);
    if (actualValue) {
      Manipulator.setDataAttribute(element, styleProperty, actualValue);
    }
  }
  _resetElementAttributes(selector, styleProperty) {
    const manipulationCallBack = (element) => {
      const value2 = Manipulator.getDataAttribute(element, styleProperty);
      if (value2 === null) {
        element.style.removeProperty(styleProperty);
        return;
      }
      Manipulator.removeDataAttribute(element, styleProperty);
      element.style.setProperty(styleProperty, value2);
    };
    this._applyManipulationCallback(selector, manipulationCallBack);
  }
  _applyManipulationCallback(selector, callBack) {
    if (isElement(selector)) {
      callBack(selector);
      return;
    }
    for (const sel of SelectorEngine.find(selector, this._element)) {
      callBack(sel);
    }
  }
}
const NAME$7 = "modal";
const DATA_KEY$4 = "bs.modal";
const EVENT_KEY$4 = `.${DATA_KEY$4}`;
const DATA_API_KEY$2 = ".data-api";
const ESCAPE_KEY$1 = "Escape";
const EVENT_HIDE$4 = `hide${EVENT_KEY$4}`;
const EVENT_HIDE_PREVENTED$1 = `hidePrevented${EVENT_KEY$4}`;
const EVENT_HIDDEN$4 = `hidden${EVENT_KEY$4}`;
const EVENT_SHOW$4 = `show${EVENT_KEY$4}`;
const EVENT_SHOWN$4 = `shown${EVENT_KEY$4}`;
const EVENT_RESIZE$1 = `resize${EVENT_KEY$4}`;
const EVENT_CLICK_DISMISS = `click.dismiss${EVENT_KEY$4}`;
const EVENT_MOUSEDOWN_DISMISS = `mousedown.dismiss${EVENT_KEY$4}`;
const EVENT_KEYDOWN_DISMISS$1 = `keydown.dismiss${EVENT_KEY$4}`;
const EVENT_CLICK_DATA_API$2 = `click${EVENT_KEY$4}${DATA_API_KEY$2}`;
const CLASS_NAME_OPEN = "modal-open";
const CLASS_NAME_FADE$3 = "fade";
const CLASS_NAME_SHOW$4 = "show";
const CLASS_NAME_STATIC = "modal-static";
const OPEN_SELECTOR$1 = ".modal.show";
const SELECTOR_DIALOG = ".modal-dialog";
const SELECTOR_MODAL_BODY = ".modal-body";
const SELECTOR_DATA_TOGGLE$2 = '[data-bs-toggle="modal"]';
const Default$6 = {
  backdrop: true,
  focus: true,
  keyboard: true
};
const DefaultType$6 = {
  backdrop: "(boolean|string)",
  focus: "boolean",
  keyboard: "boolean"
};
class Modal extends BaseComponent {
  constructor(element, config) {
    super(element, config);
    this._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, this._element);
    this._backdrop = this._initializeBackDrop();
    this._focustrap = this._initializeFocusTrap();
    this._isShown = false;
    this._isTransitioning = false;
    this._scrollBar = new ScrollBarHelper();
    this._addEventListeners();
  }
  // Getters
  static get Default() {
    return Default$6;
  }
  static get DefaultType() {
    return DefaultType$6;
  }
  static get NAME() {
    return NAME$7;
  }
  // Public
  toggle(relatedTarget) {
    return this._isShown ? this.hide() : this.show(relatedTarget);
  }
  show(relatedTarget) {
    if (this._isShown || this._isTransitioning) {
      return;
    }
    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$4, {
      relatedTarget
    });
    if (showEvent.defaultPrevented) {
      return;
    }
    this._isShown = true;
    this._isTransitioning = true;
    this._scrollBar.hide();
    document.body.classList.add(CLASS_NAME_OPEN);
    this._adjustDialog();
    this._backdrop.show(() => this._showElement(relatedTarget));
  }
  hide() {
    if (!this._isShown || this._isTransitioning) {
      return;
    }
    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$4);
    if (hideEvent.defaultPrevented) {
      return;
    }
    this._isShown = false;
    this._isTransitioning = true;
    this._focustrap.deactivate();
    this._element.classList.remove(CLASS_NAME_SHOW$4);
    this._queueCallback(() => this._hideModal(), this._element, this._isAnimated());
  }
  dispose() {
    EventHandler.off(window, EVENT_KEY$4);
    EventHandler.off(this._dialog, EVENT_KEY$4);
    this._backdrop.dispose();
    this._focustrap.deactivate();
    super.dispose();
  }
  handleUpdate() {
    this._adjustDialog();
  }
  // Private
  _initializeBackDrop() {
    return new Backdrop({
      isVisible: Boolean(this._config.backdrop),
      // 'static' option will be translated to true, and booleans will keep their value,
      isAnimated: this._isAnimated()
    });
  }
  _initializeFocusTrap() {
    return new FocusTrap({
      trapElement: this._element
    });
  }
  _showElement(relatedTarget) {
    if (!document.body.contains(this._element)) {
      document.body.append(this._element);
    }
    this._element.style.display = "block";
    this._element.removeAttribute("aria-hidden");
    this._element.setAttribute("aria-modal", true);
    this._element.setAttribute("role", "dialog");
    this._element.scrollTop = 0;
    const modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog);
    if (modalBody) {
      modalBody.scrollTop = 0;
    }
    reflow(this._element);
    this._element.classList.add(CLASS_NAME_SHOW$4);
    const transitionComplete = () => {
      if (this._config.focus) {
        this._focustrap.activate();
      }
      this._isTransitioning = false;
      EventHandler.trigger(this._element, EVENT_SHOWN$4, {
        relatedTarget
      });
    };
    this._queueCallback(transitionComplete, this._dialog, this._isAnimated());
  }
  _addEventListeners() {
    EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS$1, (event) => {
      if (event.key !== ESCAPE_KEY$1) {
        return;
      }
      if (this._config.keyboard) {
        this.hide();
        return;
      }
      this._triggerBackdropTransition();
    });
    EventHandler.on(window, EVENT_RESIZE$1, () => {
      if (this._isShown && !this._isTransitioning) {
        this._adjustDialog();
      }
    });
    EventHandler.on(this._element, EVENT_MOUSEDOWN_DISMISS, (event) => {
      EventHandler.one(this._element, EVENT_CLICK_DISMISS, (event2) => {
        if (this._element !== event.target || this._element !== event2.target) {
          return;
        }
        if (this._config.backdrop === "static") {
          this._triggerBackdropTransition();
          return;
        }
        if (this._config.backdrop) {
          this.hide();
        }
      });
    });
  }
  _hideModal() {
    this._element.style.display = "none";
    this._element.setAttribute("aria-hidden", true);
    this._element.removeAttribute("aria-modal");
    this._element.removeAttribute("role");
    this._isTransitioning = false;
    this._backdrop.hide(() => {
      document.body.classList.remove(CLASS_NAME_OPEN);
      this._resetAdjustments();
      this._scrollBar.reset();
      EventHandler.trigger(this._element, EVENT_HIDDEN$4);
    });
  }
  _isAnimated() {
    return this._element.classList.contains(CLASS_NAME_FADE$3);
  }
  _triggerBackdropTransition() {
    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED$1);
    if (hideEvent.defaultPrevented) {
      return;
    }
    const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
    const initialOverflowY = this._element.style.overflowY;
    if (initialOverflowY === "hidden" || this._element.classList.contains(CLASS_NAME_STATIC)) {
      return;
    }
    if (!isModalOverflowing) {
      this._element.style.overflowY = "hidden";
    }
    this._element.classList.add(CLASS_NAME_STATIC);
    this._queueCallback(() => {
      this._element.classList.remove(CLASS_NAME_STATIC);
      this._queueCallback(() => {
        this._element.style.overflowY = initialOverflowY;
      }, this._dialog);
    }, this._dialog);
    this._element.focus();
  }
  /**
   * The following methods are used to handle overflowing modals
   */
  _adjustDialog() {
    const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
    const scrollbarWidth = this._scrollBar.getWidth();
    const isBodyOverflowing = scrollbarWidth > 0;
    if (isBodyOverflowing && !isModalOverflowing) {
      const property = isRTL() ? "paddingLeft" : "paddingRight";
      this._element.style[property] = `${scrollbarWidth}px`;
    }
    if (!isBodyOverflowing && isModalOverflowing) {
      const property = isRTL() ? "paddingRight" : "paddingLeft";
      this._element.style[property] = `${scrollbarWidth}px`;
    }
  }
  _resetAdjustments() {
    this._element.style.paddingLeft = "";
    this._element.style.paddingRight = "";
  }
  // Static
  static jQueryInterface(config, relatedTarget) {
    return this.each(function() {
      const data2 = Modal.getOrCreateInstance(this, config);
      if (typeof config !== "string") {
        return;
      }
      if (typeof data2[config] === "undefined") {
        throw new TypeError(`No method named "${config}"`);
      }
      data2[config](relatedTarget);
    });
  }
}
EventHandler.on(document, EVENT_CLICK_DATA_API$2, SELECTOR_DATA_TOGGLE$2, function(event) {
  const target = SelectorEngine.getElementFromSelector(this);
  if (["A", "AREA"].includes(this.tagName)) {
    event.preventDefault();
  }
  EventHandler.one(target, EVENT_SHOW$4, (showEvent) => {
    if (showEvent.defaultPrevented) {
      return;
    }
    EventHandler.one(target, EVENT_HIDDEN$4, () => {
      if (isVisible(this)) {
        this.focus();
      }
    });
  });
  const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR$1);
  if (alreadyOpen) {
    Modal.getInstance(alreadyOpen).hide();
  }
  const data2 = Modal.getOrCreateInstance(target);
  data2.toggle(this);
});
enableDismissTrigger(Modal);
defineJQueryPlugin(Modal);
const NAME$6 = "offcanvas";
const DATA_KEY$3 = "bs.offcanvas";
const EVENT_KEY$3 = `.${DATA_KEY$3}`;
const DATA_API_KEY$1 = ".data-api";
const EVENT_LOAD_DATA_API$2 = `load${EVENT_KEY$3}${DATA_API_KEY$1}`;
const ESCAPE_KEY = "Escape";
const CLASS_NAME_SHOW$3 = "show";
const CLASS_NAME_SHOWING$1 = "showing";
const CLASS_NAME_HIDING = "hiding";
const CLASS_NAME_BACKDROP = "offcanvas-backdrop";
const OPEN_SELECTOR = ".offcanvas.show";
const EVENT_SHOW$3 = `show${EVENT_KEY$3}`;
const EVENT_SHOWN$3 = `shown${EVENT_KEY$3}`;
const EVENT_HIDE$3 = `hide${EVENT_KEY$3}`;
const EVENT_HIDE_PREVENTED = `hidePrevented${EVENT_KEY$3}`;
const EVENT_HIDDEN$3 = `hidden${EVENT_KEY$3}`;
const EVENT_RESIZE = `resize${EVENT_KEY$3}`;
const EVENT_CLICK_DATA_API$1 = `click${EVENT_KEY$3}${DATA_API_KEY$1}`;
const EVENT_KEYDOWN_DISMISS = `keydown.dismiss${EVENT_KEY$3}`;
const SELECTOR_DATA_TOGGLE$1 = '[data-bs-toggle="offcanvas"]';
const Default$5 = {
  backdrop: true,
  keyboard: true,
  scroll: false
};
const DefaultType$5 = {
  backdrop: "(boolean|string)",
  keyboard: "boolean",
  scroll: "boolean"
};
class Offcanvas extends BaseComponent {
  constructor(element, config) {
    super(element, config);
    this._isShown = false;
    this._backdrop = this._initializeBackDrop();
    this._focustrap = this._initializeFocusTrap();
    this._addEventListeners();
  }
  // Getters
  static get Default() {
    return Default$5;
  }
  static get DefaultType() {
    return DefaultType$5;
  }
  static get NAME() {
    return NAME$6;
  }
  // Public
  toggle(relatedTarget) {
    return this._isShown ? this.hide() : this.show(relatedTarget);
  }
  show(relatedTarget) {
    if (this._isShown) {
      return;
    }
    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$3, {
      relatedTarget
    });
    if (showEvent.defaultPrevented) {
      return;
    }
    this._isShown = true;
    this._backdrop.show();
    if (!this._config.scroll) {
      new ScrollBarHelper().hide();
    }
    this._element.setAttribute("aria-modal", true);
    this._element.setAttribute("role", "dialog");
    this._element.classList.add(CLASS_NAME_SHOWING$1);
    const completeCallBack = () => {
      if (!this._config.scroll || this._config.backdrop) {
        this._focustrap.activate();
      }
      this._element.classList.add(CLASS_NAME_SHOW$3);
      this._element.classList.remove(CLASS_NAME_SHOWING$1);
      EventHandler.trigger(this._element, EVENT_SHOWN$3, {
        relatedTarget
      });
    };
    this._queueCallback(completeCallBack, this._element, true);
  }
  hide() {
    if (!this._isShown) {
      return;
    }
    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$3);
    if (hideEvent.defaultPrevented) {
      return;
    }
    this._focustrap.deactivate();
    this._element.blur();
    this._isShown = false;
    this._element.classList.add(CLASS_NAME_HIDING);
    this._backdrop.hide();
    const completeCallback = () => {
      this._element.classList.remove(CLASS_NAME_SHOW$3, CLASS_NAME_HIDING);
      this._element.removeAttribute("aria-modal");
      this._element.removeAttribute("role");
      if (!this._config.scroll) {
        new ScrollBarHelper().reset();
      }
      EventHandler.trigger(this._element, EVENT_HIDDEN$3);
    };
    this._queueCallback(completeCallback, this._element, true);
  }
  dispose() {
    this._backdrop.dispose();
    this._focustrap.deactivate();
    super.dispose();
  }
  // Private
  _initializeBackDrop() {
    const clickCallback = () => {
      if (this._config.backdrop === "static") {
        EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);
        return;
      }
      this.hide();
    };
    const isVisible2 = Boolean(this._config.backdrop);
    return new Backdrop({
      className: CLASS_NAME_BACKDROP,
      isVisible: isVisible2,
      isAnimated: true,
      rootElement: this._element.parentNode,
      clickCallback: isVisible2 ? clickCallback : null
    });
  }
  _initializeFocusTrap() {
    return new FocusTrap({
      trapElement: this._element
    });
  }
  _addEventListeners() {
    EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, (event) => {
      if (event.key !== ESCAPE_KEY) {
        return;
      }
      if (this._config.keyboard) {
        this.hide();
        return;
      }
      EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);
    });
  }
  // Static
  static jQueryInterface(config) {
    return this.each(function() {
      const data2 = Offcanvas.getOrCreateInstance(this, config);
      if (typeof config !== "string") {
        return;
      }
      if (data2[config] === void 0 || config.startsWith("_") || config === "constructor") {
        throw new TypeError(`No method named "${config}"`);
      }
      data2[config](this);
    });
  }
}
EventHandler.on(document, EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE$1, function(event) {
  const target = SelectorEngine.getElementFromSelector(this);
  if (["A", "AREA"].includes(this.tagName)) {
    event.preventDefault();
  }
  if (isDisabled(this)) {
    return;
  }
  EventHandler.one(target, EVENT_HIDDEN$3, () => {
    if (isVisible(this)) {
      this.focus();
    }
  });
  const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR);
  if (alreadyOpen && alreadyOpen !== target) {
    Offcanvas.getInstance(alreadyOpen).hide();
  }
  const data2 = Offcanvas.getOrCreateInstance(target);
  data2.toggle(this);
});
EventHandler.on(window, EVENT_LOAD_DATA_API$2, () => {
  for (const selector of SelectorEngine.find(OPEN_SELECTOR)) {
    Offcanvas.getOrCreateInstance(selector).show();
  }
});
EventHandler.on(window, EVENT_RESIZE, () => {
  for (const element of SelectorEngine.find("[aria-modal][class*=show][class*=offcanvas-]")) {
    if (getComputedStyle(element).position !== "fixed") {
      Offcanvas.getOrCreateInstance(element).hide();
    }
  }
});
enableDismissTrigger(Offcanvas);
defineJQueryPlugin(Offcanvas);
const ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
const DefaultAllowlist = {
  // Global attributes allowed on any supplied element below.
  "*": ["class", "dir", "id", "lang", "role", ARIA_ATTRIBUTE_PATTERN],
  a: ["target", "href", "title", "rel"],
  area: [],
  b: [],
  br: [],
  col: [],
  code: [],
  dd: [],
  div: [],
  dl: [],
  dt: [],
  em: [],
  hr: [],
  h1: [],
  h2: [],
  h3: [],
  h4: [],
  h5: [],
  h6: [],
  i: [],
  img: ["src", "srcset", "alt", "title", "width", "height"],
  li: [],
  ol: [],
  p: [],
  pre: [],
  s: [],
  small: [],
  span: [],
  sub: [],
  sup: [],
  strong: [],
  u: [],
  ul: []
};
const uriAttributes = /* @__PURE__ */ new Set(["background", "cite", "href", "itemtype", "longdesc", "poster", "src", "xlink:href"]);
const SAFE_URL_PATTERN = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i;
const allowedAttribute = (attribute, allowedAttributeList) => {
  const attributeName = attribute.nodeName.toLowerCase();
  if (allowedAttributeList.includes(attributeName)) {
    if (uriAttributes.has(attributeName)) {
      return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue));
    }
    return true;
  }
  return allowedAttributeList.filter((attributeRegex) => attributeRegex instanceof RegExp).some((regex) => regex.test(attributeName));
};
function sanitizeHtml(unsafeHtml, allowList, sanitizeFunction) {
  if (!unsafeHtml.length) {
    return unsafeHtml;
  }
  if (sanitizeFunction && typeof sanitizeFunction === "function") {
    return sanitizeFunction(unsafeHtml);
  }
  const domParser = new window.DOMParser();
  const createdDocument = domParser.parseFromString(unsafeHtml, "text/html");
  const elements = [].concat(...createdDocument.body.querySelectorAll("*"));
  for (const element of elements) {
    const elementName = element.nodeName.toLowerCase();
    if (!Object.keys(allowList).includes(elementName)) {
      element.remove();
      continue;
    }
    const attributeList = [].concat(...element.attributes);
    const allowedAttributes = [].concat(allowList["*"] || [], allowList[elementName] || []);
    for (const attribute of attributeList) {
      if (!allowedAttribute(attribute, allowedAttributes)) {
        element.removeAttribute(attribute.nodeName);
      }
    }
  }
  return createdDocument.body.innerHTML;
}
const NAME$5 = "TemplateFactory";
const Default$4 = {
  allowList: DefaultAllowlist,
  content: {},
  // { selector : text ,  selector2 : text2 , }
  extraClass: "",
  html: false,
  sanitize: true,
  sanitizeFn: null,
  template: "<div></div>"
};
const DefaultType$4 = {
  allowList: "object",
  content: "object",
  extraClass: "(string|function)",
  html: "boolean",
  sanitize: "boolean",
  sanitizeFn: "(null|function)",
  template: "string"
};
const DefaultContentType = {
  entry: "(string|element|function|null)",
  selector: "(string|element)"
};
class TemplateFactory extends Config {
  constructor(config) {
    super();
    this._config = this._getConfig(config);
  }
  // Getters
  static get Default() {
    return Default$4;
  }
  static get DefaultType() {
    return DefaultType$4;
  }
  static get NAME() {
    return NAME$5;
  }
  // Public
  getContent() {
    return Object.values(this._config.content).map((config) => this._resolvePossibleFunction(config)).filter(Boolean);
  }
  hasContent() {
    return this.getContent().length > 0;
  }
  changeContent(content) {
    this._checkContent(content);
    this._config.content = {
      ...this._config.content,
      ...content
    };
    return this;
  }
  toHtml() {
    const templateWrapper = document.createElement("div");
    templateWrapper.innerHTML = this._maybeSanitize(this._config.template);
    for (const [selector, text] of Object.entries(this._config.content)) {
      this._setContent(templateWrapper, text, selector);
    }
    const template = templateWrapper.children[0];
    const extraClass = this._resolvePossibleFunction(this._config.extraClass);
    if (extraClass) {
      template.classList.add(...extraClass.split(" "));
    }
    return template;
  }
  // Private
  _typeCheckConfig(config) {
    super._typeCheckConfig(config);
    this._checkContent(config.content);
  }
  _checkContent(arg) {
    for (const [selector, content] of Object.entries(arg)) {
      super._typeCheckConfig({
        selector,
        entry: content
      }, DefaultContentType);
    }
  }
  _setContent(template, content, selector) {
    const templateElement = SelectorEngine.findOne(selector, template);
    if (!templateElement) {
      return;
    }
    content = this._resolvePossibleFunction(content);
    if (!content) {
      templateElement.remove();
      return;
    }
    if (isElement(content)) {
      this._putElementInTemplate(getElement(content), templateElement);
      return;
    }
    if (this._config.html) {
      templateElement.innerHTML = this._maybeSanitize(content);
      return;
    }
    templateElement.textContent = content;
  }
  _maybeSanitize(arg) {
    return this._config.sanitize ? sanitizeHtml(arg, this._config.allowList, this._config.sanitizeFn) : arg;
  }
  _resolvePossibleFunction(arg) {
    return execute(arg, [this]);
  }
  _putElementInTemplate(element, templateElement) {
    if (this._config.html) {
      templateElement.innerHTML = "";
      templateElement.append(element);
      return;
    }
    templateElement.textContent = element.textContent;
  }
}
const NAME$4 = "tooltip";
const DISALLOWED_ATTRIBUTES = /* @__PURE__ */ new Set(["sanitize", "allowList", "sanitizeFn"]);
const CLASS_NAME_FADE$2 = "fade";
const CLASS_NAME_MODAL = "modal";
const CLASS_NAME_SHOW$2 = "show";
const SELECTOR_TOOLTIP_INNER = ".tooltip-inner";
const SELECTOR_MODAL = `.${CLASS_NAME_MODAL}`;
const EVENT_MODAL_HIDE = "hide.bs.modal";
const TRIGGER_HOVER = "hover";
const TRIGGER_FOCUS = "focus";
const TRIGGER_CLICK = "click";
const TRIGGER_MANUAL = "manual";
const EVENT_HIDE$2 = "hide";
const EVENT_HIDDEN$2 = "hidden";
const EVENT_SHOW$2 = "show";
const EVENT_SHOWN$2 = "shown";
const EVENT_INSERTED = "inserted";
const EVENT_CLICK$1 = "click";
const EVENT_FOCUSIN$1 = "focusin";
const EVENT_FOCUSOUT$1 = "focusout";
const EVENT_MOUSEENTER = "mouseenter";
const EVENT_MOUSELEAVE = "mouseleave";
const AttachmentMap = {
  AUTO: "auto",
  TOP: "top",
  RIGHT: isRTL() ? "left" : "right",
  BOTTOM: "bottom",
  LEFT: isRTL() ? "right" : "left"
};
const Default$3 = {
  allowList: DefaultAllowlist,
  animation: true,
  boundary: "clippingParents",
  container: false,
  customClass: "",
  delay: 0,
  fallbackPlacements: ["top", "right", "bottom", "left"],
  html: false,
  offset: [0, 6],
  placement: "top",
  popperConfig: null,
  sanitize: true,
  sanitizeFn: null,
  selector: false,
  template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
  title: "",
  trigger: "hover focus"
};
const DefaultType$3 = {
  allowList: "object",
  animation: "boolean",
  boundary: "(string|element)",
  container: "(string|element|boolean)",
  customClass: "(string|function)",
  delay: "(number|object)",
  fallbackPlacements: "array",
  html: "boolean",
  offset: "(array|string|function)",
  placement: "(string|function)",
  popperConfig: "(null|object|function)",
  sanitize: "boolean",
  sanitizeFn: "(null|function)",
  selector: "(string|boolean)",
  template: "string",
  title: "(string|element|function)",
  trigger: "string"
};
class Tooltip extends BaseComponent {
  constructor(element, config) {
    if (typeof Popper === "undefined") {
      throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");
    }
    super(element, config);
    this._isEnabled = true;
    this._timeout = 0;
    this._isHovered = null;
    this._activeTrigger = {};
    this._popper = null;
    this._templateFactory = null;
    this._newContent = null;
    this.tip = null;
    this._setListeners();
    if (!this._config.selector) {
      this._fixTitle();
    }
  }
  // Getters
  static get Default() {
    return Default$3;
  }
  static get DefaultType() {
    return DefaultType$3;
  }
  static get NAME() {
    return NAME$4;
  }
  // Public
  enable() {
    this._isEnabled = true;
  }
  disable() {
    this._isEnabled = false;
  }
  toggleEnabled() {
    this._isEnabled = !this._isEnabled;
  }
  toggle() {
    if (!this._isEnabled) {
      return;
    }
    this._activeTrigger.click = !this._activeTrigger.click;
    if (this._isShown()) {
      this._leave();
      return;
    }
    this._enter();
  }
  dispose() {
    clearTimeout(this._timeout);
    EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);
    if (this._element.getAttribute("data-bs-original-title")) {
      this._element.setAttribute("title", this._element.getAttribute("data-bs-original-title"));
    }
    this._disposePopper();
    super.dispose();
  }
  show() {
    if (this._element.style.display === "none") {
      throw new Error("Please use show on visible elements");
    }
    if (!(this._isWithContent() && this._isEnabled)) {
      return;
    }
    const showEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOW$2));
    const shadowRoot = findShadowRoot(this._element);
    const isInTheDom = (shadowRoot || this._element.ownerDocument.documentElement).contains(this._element);
    if (showEvent.defaultPrevented || !isInTheDom) {
      return;
    }
    this._disposePopper();
    const tip = this._getTipElement();
    this._element.setAttribute("aria-describedby", tip.getAttribute("id"));
    const {
      container
    } = this._config;
    if (!this._element.ownerDocument.documentElement.contains(this.tip)) {
      container.append(tip);
      EventHandler.trigger(this._element, this.constructor.eventName(EVENT_INSERTED));
    }
    this._popper = this._createPopper(tip);
    tip.classList.add(CLASS_NAME_SHOW$2);
    if ("ontouchstart" in document.documentElement) {
      for (const element of [].concat(...document.body.children)) {
        EventHandler.on(element, "mouseover", noop$2);
      }
    }
    const complete = () => {
      EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOWN$2));
      if (this._isHovered === false) {
        this._leave();
      }
      this._isHovered = false;
    };
    this._queueCallback(complete, this.tip, this._isAnimated());
  }
  hide() {
    if (!this._isShown()) {
      return;
    }
    const hideEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDE$2));
    if (hideEvent.defaultPrevented) {
      return;
    }
    const tip = this._getTipElement();
    tip.classList.remove(CLASS_NAME_SHOW$2);
    if ("ontouchstart" in document.documentElement) {
      for (const element of [].concat(...document.body.children)) {
        EventHandler.off(element, "mouseover", noop$2);
      }
    }
    this._activeTrigger[TRIGGER_CLICK] = false;
    this._activeTrigger[TRIGGER_FOCUS] = false;
    this._activeTrigger[TRIGGER_HOVER] = false;
    this._isHovered = null;
    const complete = () => {
      if (this._isWithActiveTrigger()) {
        return;
      }
      if (!this._isHovered) {
        this._disposePopper();
      }
      this._element.removeAttribute("aria-describedby");
      EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDDEN$2));
    };
    this._queueCallback(complete, this.tip, this._isAnimated());
  }
  update() {
    if (this._popper) {
      this._popper.update();
    }
  }
  // Protected
  _isWithContent() {
    return Boolean(this._getTitle());
  }
  _getTipElement() {
    if (!this.tip) {
      this.tip = this._createTipElement(this._newContent || this._getContentForTemplate());
    }
    return this.tip;
  }
  _createTipElement(content) {
    const tip = this._getTemplateFactory(content).toHtml();
    if (!tip) {
      return null;
    }
    tip.classList.remove(CLASS_NAME_FADE$2, CLASS_NAME_SHOW$2);
    tip.classList.add(`bs-${this.constructor.NAME}-auto`);
    const tipId = getUID(this.constructor.NAME).toString();
    tip.setAttribute("id", tipId);
    if (this._isAnimated()) {
      tip.classList.add(CLASS_NAME_FADE$2);
    }
    return tip;
  }
  setContent(content) {
    this._newContent = content;
    if (this._isShown()) {
      this._disposePopper();
      this.show();
    }
  }
  _getTemplateFactory(content) {
    if (this._templateFactory) {
      this._templateFactory.changeContent(content);
    } else {
      this._templateFactory = new TemplateFactory({
        ...this._config,
        // the `content` var has to be after `this._config`
        // to override config.content in case of popover
        content,
        extraClass: this._resolvePossibleFunction(this._config.customClass)
      });
    }
    return this._templateFactory;
  }
  _getContentForTemplate() {
    return {
      [SELECTOR_TOOLTIP_INNER]: this._getTitle()
    };
  }
  _getTitle() {
    return this._resolvePossibleFunction(this._config.title) || this._element.getAttribute("data-bs-original-title");
  }
  // Private
  _initializeOnDelegatedTarget(event) {
    return this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig());
  }
  _isAnimated() {
    return this._config.animation || this.tip && this.tip.classList.contains(CLASS_NAME_FADE$2);
  }
  _isShown() {
    return this.tip && this.tip.classList.contains(CLASS_NAME_SHOW$2);
  }
  _createPopper(tip) {
    const placement = execute(this._config.placement, [this, tip, this._element]);
    const attachment = AttachmentMap[placement.toUpperCase()];
    return createPopper(this._element, tip, this._getPopperConfig(attachment));
  }
  _getOffset() {
    const {
      offset: offset2
    } = this._config;
    if (typeof offset2 === "string") {
      return offset2.split(",").map((value2) => Number.parseInt(value2, 10));
    }
    if (typeof offset2 === "function") {
      return (popperData) => offset2(popperData, this._element);
    }
    return offset2;
  }
  _resolvePossibleFunction(arg) {
    return execute(arg, [this._element]);
  }
  _getPopperConfig(attachment) {
    const defaultBsPopperConfig = {
      placement: attachment,
      modifiers: [{
        name: "flip",
        options: {
          fallbackPlacements: this._config.fallbackPlacements
        }
      }, {
        name: "offset",
        options: {
          offset: this._getOffset()
        }
      }, {
        name: "preventOverflow",
        options: {
          boundary: this._config.boundary
        }
      }, {
        name: "arrow",
        options: {
          element: `.${this.constructor.NAME}-arrow`
        }
      }, {
        name: "preSetPlacement",
        enabled: true,
        phase: "beforeMain",
        fn: (data2) => {
          this._getTipElement().setAttribute("data-popper-placement", data2.state.placement);
        }
      }]
    };
    return {
      ...defaultBsPopperConfig,
      ...execute(this._config.popperConfig, [defaultBsPopperConfig])
    };
  }
  _setListeners() {
    const triggers = this._config.trigger.split(" ");
    for (const trigger2 of triggers) {
      if (trigger2 === "click") {
        EventHandler.on(this._element, this.constructor.eventName(EVENT_CLICK$1), this._config.selector, (event) => {
          const context = this._initializeOnDelegatedTarget(event);
          context.toggle();
        });
      } else if (trigger2 !== TRIGGER_MANUAL) {
        const eventIn = trigger2 === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSEENTER) : this.constructor.eventName(EVENT_FOCUSIN$1);
        const eventOut = trigger2 === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSELEAVE) : this.constructor.eventName(EVENT_FOCUSOUT$1);
        EventHandler.on(this._element, eventIn, this._config.selector, (event) => {
          const context = this._initializeOnDelegatedTarget(event);
          context._activeTrigger[event.type === "focusin" ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;
          context._enter();
        });
        EventHandler.on(this._element, eventOut, this._config.selector, (event) => {
          const context = this._initializeOnDelegatedTarget(event);
          context._activeTrigger[event.type === "focusout" ? TRIGGER_FOCUS : TRIGGER_HOVER] = context._element.contains(event.relatedTarget);
          context._leave();
        });
      }
    }
    this._hideModalHandler = () => {
      if (this._element) {
        this.hide();
      }
    };
    EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);
  }
  _fixTitle() {
    const title = this._element.getAttribute("title");
    if (!title) {
      return;
    }
    if (!this._element.getAttribute("aria-label") && !this._element.textContent.trim()) {
      this._element.setAttribute("aria-label", title);
    }
    this._element.setAttribute("data-bs-original-title", title);
    this._element.removeAttribute("title");
  }
  _enter() {
    if (this._isShown() || this._isHovered) {
      this._isHovered = true;
      return;
    }
    this._isHovered = true;
    this._setTimeout(() => {
      if (this._isHovered) {
        this.show();
      }
    }, this._config.delay.show);
  }
  _leave() {
    if (this._isWithActiveTrigger()) {
      return;
    }
    this._isHovered = false;
    this._setTimeout(() => {
      if (!this._isHovered) {
        this.hide();
      }
    }, this._config.delay.hide);
  }
  _setTimeout(handler, timeout) {
    clearTimeout(this._timeout);
    this._timeout = setTimeout(handler, timeout);
  }
  _isWithActiveTrigger() {
    return Object.values(this._activeTrigger).includes(true);
  }
  _getConfig(config) {
    const dataAttributes = Manipulator.getDataAttributes(this._element);
    for (const dataAttribute of Object.keys(dataAttributes)) {
      if (DISALLOWED_ATTRIBUTES.has(dataAttribute)) {
        delete dataAttributes[dataAttribute];
      }
    }
    config = {
      ...dataAttributes,
      ...typeof config === "object" && config ? config : {}
    };
    config = this._mergeConfigObj(config);
    config = this._configAfterMerge(config);
    this._typeCheckConfig(config);
    return config;
  }
  _configAfterMerge(config) {
    config.container = config.container === false ? document.body : getElement(config.container);
    if (typeof config.delay === "number") {
      config.delay = {
        show: config.delay,
        hide: config.delay
      };
    }
    if (typeof config.title === "number") {
      config.title = config.title.toString();
    }
    if (typeof config.content === "number") {
      config.content = config.content.toString();
    }
    return config;
  }
  _getDelegateConfig() {
    const config = {};
    for (const [key2, value2] of Object.entries(this._config)) {
      if (this.constructor.Default[key2] !== value2) {
        config[key2] = value2;
      }
    }
    config.selector = false;
    config.trigger = "manual";
    return config;
  }
  _disposePopper() {
    if (this._popper) {
      this._popper.destroy();
      this._popper = null;
    }
    if (this.tip) {
      this.tip.remove();
      this.tip = null;
    }
  }
  // Static
  static jQueryInterface(config) {
    return this.each(function() {
      const data2 = Tooltip.getOrCreateInstance(this, config);
      if (typeof config !== "string") {
        return;
      }
      if (typeof data2[config] === "undefined") {
        throw new TypeError(`No method named "${config}"`);
      }
      data2[config]();
    });
  }
}
defineJQueryPlugin(Tooltip);
const NAME$3 = "popover";
const SELECTOR_TITLE = ".popover-header";
const SELECTOR_CONTENT = ".popover-body";
const Default$2 = {
  ...Tooltip.Default,
  content: "",
  offset: [0, 8],
  placement: "right",
  template: '<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',
  trigger: "click"
};
const DefaultType$2 = {
  ...Tooltip.DefaultType,
  content: "(null|string|element|function)"
};
class Popover extends Tooltip {
  // Getters
  static get Default() {
    return Default$2;
  }
  static get DefaultType() {
    return DefaultType$2;
  }
  static get NAME() {
    return NAME$3;
  }
  // Overrides
  _isWithContent() {
    return this._getTitle() || this._getContent();
  }
  // Private
  _getContentForTemplate() {
    return {
      [SELECTOR_TITLE]: this._getTitle(),
      [SELECTOR_CONTENT]: this._getContent()
    };
  }
  _getContent() {
    return this._resolvePossibleFunction(this._config.content);
  }
  // Static
  static jQueryInterface(config) {
    return this.each(function() {
      const data2 = Popover.getOrCreateInstance(this, config);
      if (typeof config !== "string") {
        return;
      }
      if (typeof data2[config] === "undefined") {
        throw new TypeError(`No method named "${config}"`);
      }
      data2[config]();
    });
  }
}
defineJQueryPlugin(Popover);
const NAME$2 = "scrollspy";
const DATA_KEY$2 = "bs.scrollspy";
const EVENT_KEY$2 = `.${DATA_KEY$2}`;
const DATA_API_KEY = ".data-api";
const EVENT_ACTIVATE = `activate${EVENT_KEY$2}`;
const EVENT_CLICK = `click${EVENT_KEY$2}`;
const EVENT_LOAD_DATA_API$1 = `load${EVENT_KEY$2}${DATA_API_KEY}`;
const CLASS_NAME_DROPDOWN_ITEM = "dropdown-item";
const CLASS_NAME_ACTIVE$1 = "active";
const SELECTOR_DATA_SPY = '[data-bs-spy="scroll"]';
const SELECTOR_TARGET_LINKS = "[href]";
const SELECTOR_NAV_LIST_GROUP = ".nav, .list-group";
const SELECTOR_NAV_LINKS = ".nav-link";
const SELECTOR_NAV_ITEMS = ".nav-item";
const SELECTOR_LIST_ITEMS = ".list-group-item";
const SELECTOR_LINK_ITEMS = `${SELECTOR_NAV_LINKS}, ${SELECTOR_NAV_ITEMS} > ${SELECTOR_NAV_LINKS}, ${SELECTOR_LIST_ITEMS}`;
const SELECTOR_DROPDOWN = ".dropdown";
const SELECTOR_DROPDOWN_TOGGLE$1 = ".dropdown-toggle";
const Default$1 = {
  offset: null,
  // TODO: v6 @deprecated, keep it for backwards compatibility reasons
  rootMargin: "0px 0px -25%",
  smoothScroll: false,
  target: null,
  threshold: [0.1, 0.5, 1]
};
const DefaultType$1 = {
  offset: "(number|null)",
  // TODO v6 @deprecated, keep it for backwards compatibility reasons
  rootMargin: "string",
  smoothScroll: "boolean",
  target: "element",
  threshold: "array"
};
class ScrollSpy extends BaseComponent {
  constructor(element, config) {
    super(element, config);
    this._targetLinks = /* @__PURE__ */ new Map();
    this._observableSections = /* @__PURE__ */ new Map();
    this._rootElement = getComputedStyle(this._element).overflowY === "visible" ? null : this._element;
    this._activeTarget = null;
    this._observer = null;
    this._previousScrollData = {
      visibleEntryTop: 0,
      parentScrollTop: 0
    };
    this.refresh();
  }
  // Getters
  static get Default() {
    return Default$1;
  }
  static get DefaultType() {
    return DefaultType$1;
  }
  static get NAME() {
    return NAME$2;
  }
  // Public
  refresh() {
    this._initializeTargetsAndObservables();
    this._maybeEnableSmoothScroll();
    if (this._observer) {
      this._observer.disconnect();
    } else {
      this._observer = this._getNewObserver();
    }
    for (const section2 of this._observableSections.values()) {
      this._observer.observe(section2);
    }
  }
  dispose() {
    this._observer.disconnect();
    super.dispose();
  }
  // Private
  _configAfterMerge(config) {
    config.target = getElement(config.target) || document.body;
    config.rootMargin = config.offset ? `${config.offset}px 0px -30%` : config.rootMargin;
    if (typeof config.threshold === "string") {
      config.threshold = config.threshold.split(",").map((value2) => Number.parseFloat(value2));
    }
    return config;
  }
  _maybeEnableSmoothScroll() {
    if (!this._config.smoothScroll) {
      return;
    }
    EventHandler.off(this._config.target, EVENT_CLICK);
    EventHandler.on(this._config.target, EVENT_CLICK, SELECTOR_TARGET_LINKS, (event) => {
      const observableSection = this._observableSections.get(event.target.hash);
      if (observableSection) {
        event.preventDefault();
        const root = this._rootElement || window;
        const height = observableSection.offsetTop - this._element.offsetTop;
        if (root.scrollTo) {
          root.scrollTo({
            top: height,
            behavior: "smooth"
          });
          return;
        }
        root.scrollTop = height;
      }
    });
  }
  _getNewObserver() {
    const options = {
      root: this._rootElement,
      threshold: this._config.threshold,
      rootMargin: this._config.rootMargin
    };
    return new IntersectionObserver((entries2) => this._observerCallback(entries2), options);
  }
  // The logic of selection
  _observerCallback(entries2) {
    const targetElement = (entry) => this._targetLinks.get(`#${entry.target.id}`);
    const activate = (entry) => {
      this._previousScrollData.visibleEntryTop = entry.target.offsetTop;
      this._process(targetElement(entry));
    };
    const parentScrollTop = (this._rootElement || document.documentElement).scrollTop;
    const userScrollsDown = parentScrollTop >= this._previousScrollData.parentScrollTop;
    this._previousScrollData.parentScrollTop = parentScrollTop;
    for (const entry of entries2) {
      if (!entry.isIntersecting) {
        this._activeTarget = null;
        this._clearActiveClass(targetElement(entry));
        continue;
      }
      const entryIsLowerThanPrevious = entry.target.offsetTop >= this._previousScrollData.visibleEntryTop;
      if (userScrollsDown && entryIsLowerThanPrevious) {
        activate(entry);
        if (!parentScrollTop) {
          return;
        }
        continue;
      }
      if (!userScrollsDown && !entryIsLowerThanPrevious) {
        activate(entry);
      }
    }
  }
  _initializeTargetsAndObservables() {
    this._targetLinks = /* @__PURE__ */ new Map();
    this._observableSections = /* @__PURE__ */ new Map();
    const targetLinks = SelectorEngine.find(SELECTOR_TARGET_LINKS, this._config.target);
    for (const anchor2 of targetLinks) {
      if (!anchor2.hash || isDisabled(anchor2)) {
        continue;
      }
      const observableSection = SelectorEngine.findOne(decodeURI(anchor2.hash), this._element);
      if (isVisible(observableSection)) {
        this._targetLinks.set(decodeURI(anchor2.hash), anchor2);
        this._observableSections.set(anchor2.hash, observableSection);
      }
    }
  }
  _process(target) {
    if (this._activeTarget === target) {
      return;
    }
    this._clearActiveClass(this._config.target);
    this._activeTarget = target;
    target.classList.add(CLASS_NAME_ACTIVE$1);
    this._activateParents(target);
    EventHandler.trigger(this._element, EVENT_ACTIVATE, {
      relatedTarget: target
    });
  }
  _activateParents(target) {
    if (target.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {
      SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE$1, target.closest(SELECTOR_DROPDOWN)).classList.add(CLASS_NAME_ACTIVE$1);
      return;
    }
    for (const listGroup of SelectorEngine.parents(target, SELECTOR_NAV_LIST_GROUP)) {
      for (const item of SelectorEngine.prev(listGroup, SELECTOR_LINK_ITEMS)) {
        item.classList.add(CLASS_NAME_ACTIVE$1);
      }
    }
  }
  _clearActiveClass(parent2) {
    parent2.classList.remove(CLASS_NAME_ACTIVE$1);
    const activeNodes = SelectorEngine.find(`${SELECTOR_TARGET_LINKS}.${CLASS_NAME_ACTIVE$1}`, parent2);
    for (const node2 of activeNodes) {
      node2.classList.remove(CLASS_NAME_ACTIVE$1);
    }
  }
  // Static
  static jQueryInterface(config) {
    return this.each(function() {
      const data2 = ScrollSpy.getOrCreateInstance(this, config);
      if (typeof config !== "string") {
        return;
      }
      if (data2[config] === void 0 || config.startsWith("_") || config === "constructor") {
        throw new TypeError(`No method named "${config}"`);
      }
      data2[config]();
    });
  }
}
EventHandler.on(window, EVENT_LOAD_DATA_API$1, () => {
  for (const spy of SelectorEngine.find(SELECTOR_DATA_SPY)) {
    ScrollSpy.getOrCreateInstance(spy);
  }
});
defineJQueryPlugin(ScrollSpy);
const NAME$1 = "tab";
const DATA_KEY$1 = "bs.tab";
const EVENT_KEY$1 = `.${DATA_KEY$1}`;
const EVENT_HIDE$1 = `hide${EVENT_KEY$1}`;
const EVENT_HIDDEN$1 = `hidden${EVENT_KEY$1}`;
const EVENT_SHOW$1 = `show${EVENT_KEY$1}`;
const EVENT_SHOWN$1 = `shown${EVENT_KEY$1}`;
const EVENT_CLICK_DATA_API = `click${EVENT_KEY$1}`;
const EVENT_KEYDOWN = `keydown${EVENT_KEY$1}`;
const EVENT_LOAD_DATA_API = `load${EVENT_KEY$1}`;
const ARROW_LEFT_KEY = "ArrowLeft";
const ARROW_RIGHT_KEY = "ArrowRight";
const ARROW_UP_KEY = "ArrowUp";
const ARROW_DOWN_KEY = "ArrowDown";
const HOME_KEY = "Home";
const END_KEY = "End";
const CLASS_NAME_ACTIVE = "active";
const CLASS_NAME_FADE$1 = "fade";
const CLASS_NAME_SHOW$1 = "show";
const CLASS_DROPDOWN = "dropdown";
const SELECTOR_DROPDOWN_TOGGLE = ".dropdown-toggle";
const SELECTOR_DROPDOWN_MENU = ".dropdown-menu";
const NOT_SELECTOR_DROPDOWN_TOGGLE = `:not(${SELECTOR_DROPDOWN_TOGGLE})`;
const SELECTOR_TAB_PANEL = '.list-group, .nav, [role="tablist"]';
const SELECTOR_OUTER = ".nav-item, .list-group-item";
const SELECTOR_INNER = `.nav-link${NOT_SELECTOR_DROPDOWN_TOGGLE}, .list-group-item${NOT_SELECTOR_DROPDOWN_TOGGLE}, [role="tab"]${NOT_SELECTOR_DROPDOWN_TOGGLE}`;
const SELECTOR_DATA_TOGGLE = '[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]';
const SELECTOR_INNER_ELEM = `${SELECTOR_INNER}, ${SELECTOR_DATA_TOGGLE}`;
const SELECTOR_DATA_TOGGLE_ACTIVE = `.${CLASS_NAME_ACTIVE}[data-bs-toggle="tab"], .${CLASS_NAME_ACTIVE}[data-bs-toggle="pill"], .${CLASS_NAME_ACTIVE}[data-bs-toggle="list"]`;
class Tab extends BaseComponent {
  constructor(element) {
    super(element);
    this._parent = this._element.closest(SELECTOR_TAB_PANEL);
    if (!this._parent) {
      return;
    }
    this._setInitialAttributes(this._parent, this._getChildren());
    EventHandler.on(this._element, EVENT_KEYDOWN, (event) => this._keydown(event));
  }
  // Getters
  static get NAME() {
    return NAME$1;
  }
  // Public
  show() {
    const innerElem = this._element;
    if (this._elemIsActive(innerElem)) {
      return;
    }
    const active = this._getActiveElem();
    const hideEvent = active ? EventHandler.trigger(active, EVENT_HIDE$1, {
      relatedTarget: innerElem
    }) : null;
    const showEvent = EventHandler.trigger(innerElem, EVENT_SHOW$1, {
      relatedTarget: active
    });
    if (showEvent.defaultPrevented || hideEvent && hideEvent.defaultPrevented) {
      return;
    }
    this._deactivate(active, innerElem);
    this._activate(innerElem, active);
  }
  // Private
  _activate(element, relatedElem) {
    if (!element) {
      return;
    }
    element.classList.add(CLASS_NAME_ACTIVE);
    this._activate(SelectorEngine.getElementFromSelector(element));
    const complete = () => {
      if (element.getAttribute("role") !== "tab") {
        element.classList.add(CLASS_NAME_SHOW$1);
        return;
      }
      element.removeAttribute("tabindex");
      element.setAttribute("aria-selected", true);
      this._toggleDropDown(element, true);
      EventHandler.trigger(element, EVENT_SHOWN$1, {
        relatedTarget: relatedElem
      });
    };
    this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));
  }
  _deactivate(element, relatedElem) {
    if (!element) {
      return;
    }
    element.classList.remove(CLASS_NAME_ACTIVE);
    element.blur();
    this._deactivate(SelectorEngine.getElementFromSelector(element));
    const complete = () => {
      if (element.getAttribute("role") !== "tab") {
        element.classList.remove(CLASS_NAME_SHOW$1);
        return;
      }
      element.setAttribute("aria-selected", false);
      element.setAttribute("tabindex", "-1");
      this._toggleDropDown(element, false);
      EventHandler.trigger(element, EVENT_HIDDEN$1, {
        relatedTarget: relatedElem
      });
    };
    this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));
  }
  _keydown(event) {
    if (![ARROW_LEFT_KEY, ARROW_RIGHT_KEY, ARROW_UP_KEY, ARROW_DOWN_KEY, HOME_KEY, END_KEY].includes(event.key)) {
      return;
    }
    event.stopPropagation();
    event.preventDefault();
    const children2 = this._getChildren().filter((element) => !isDisabled(element));
    let nextActiveElement;
    if ([HOME_KEY, END_KEY].includes(event.key)) {
      nextActiveElement = children2[event.key === HOME_KEY ? 0 : children2.length - 1];
    } else {
      const isNext = [ARROW_RIGHT_KEY, ARROW_DOWN_KEY].includes(event.key);
      nextActiveElement = getNextActiveElement(children2, event.target, isNext, true);
    }
    if (nextActiveElement) {
      nextActiveElement.focus({
        preventScroll: true
      });
      Tab.getOrCreateInstance(nextActiveElement).show();
    }
  }
  _getChildren() {
    return SelectorEngine.find(SELECTOR_INNER_ELEM, this._parent);
  }
  _getActiveElem() {
    return this._getChildren().find((child2) => this._elemIsActive(child2)) || null;
  }
  _setInitialAttributes(parent2, children2) {
    this._setAttributeIfNotExists(parent2, "role", "tablist");
    for (const child2 of children2) {
      this._setInitialAttributesOnChild(child2);
    }
  }
  _setInitialAttributesOnChild(child2) {
    child2 = this._getInnerElement(child2);
    const isActive = this._elemIsActive(child2);
    const outerElem = this._getOuterElement(child2);
    child2.setAttribute("aria-selected", isActive);
    if (outerElem !== child2) {
      this._setAttributeIfNotExists(outerElem, "role", "presentation");
    }
    if (!isActive) {
      child2.setAttribute("tabindex", "-1");
    }
    this._setAttributeIfNotExists(child2, "role", "tab");
    this._setInitialAttributesOnTargetPanel(child2);
  }
  _setInitialAttributesOnTargetPanel(child2) {
    const target = SelectorEngine.getElementFromSelector(child2);
    if (!target) {
      return;
    }
    this._setAttributeIfNotExists(target, "role", "tabpanel");
    if (child2.id) {
      this._setAttributeIfNotExists(target, "aria-labelledby", `${child2.id}`);
    }
  }
  _toggleDropDown(element, open) {
    const outerElem = this._getOuterElement(element);
    if (!outerElem.classList.contains(CLASS_DROPDOWN)) {
      return;
    }
    const toggle2 = (selector, className) => {
      const element2 = SelectorEngine.findOne(selector, outerElem);
      if (element2) {
        element2.classList.toggle(className, open);
      }
    };
    toggle2(SELECTOR_DROPDOWN_TOGGLE, CLASS_NAME_ACTIVE);
    toggle2(SELECTOR_DROPDOWN_MENU, CLASS_NAME_SHOW$1);
    outerElem.setAttribute("aria-expanded", open);
  }
  _setAttributeIfNotExists(element, attribute, value2) {
    if (!element.hasAttribute(attribute)) {
      element.setAttribute(attribute, value2);
    }
  }
  _elemIsActive(elem) {
    return elem.classList.contains(CLASS_NAME_ACTIVE);
  }
  // Try to get the inner element (usually the .nav-link)
  _getInnerElement(elem) {
    return elem.matches(SELECTOR_INNER_ELEM) ? elem : SelectorEngine.findOne(SELECTOR_INNER_ELEM, elem);
  }
  // Try to get the outer element (usually the .nav-item)
  _getOuterElement(elem) {
    return elem.closest(SELECTOR_OUTER) || elem;
  }
  // Static
  static jQueryInterface(config) {
    return this.each(function() {
      const data2 = Tab.getOrCreateInstance(this);
      if (typeof config !== "string") {
        return;
      }
      if (data2[config] === void 0 || config.startsWith("_") || config === "constructor") {
        throw new TypeError(`No method named "${config}"`);
      }
      data2[config]();
    });
  }
}
EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function(event) {
  if (["A", "AREA"].includes(this.tagName)) {
    event.preventDefault();
  }
  if (isDisabled(this)) {
    return;
  }
  Tab.getOrCreateInstance(this).show();
});
EventHandler.on(window, EVENT_LOAD_DATA_API, () => {
  for (const element of SelectorEngine.find(SELECTOR_DATA_TOGGLE_ACTIVE)) {
    Tab.getOrCreateInstance(element);
  }
});
defineJQueryPlugin(Tab);
const NAME = "toast";
const DATA_KEY = "bs.toast";
const EVENT_KEY = `.${DATA_KEY}`;
const EVENT_MOUSEOVER = `mouseover${EVENT_KEY}`;
const EVENT_MOUSEOUT = `mouseout${EVENT_KEY}`;
const EVENT_FOCUSIN = `focusin${EVENT_KEY}`;
const EVENT_FOCUSOUT = `focusout${EVENT_KEY}`;
const EVENT_HIDE = `hide${EVENT_KEY}`;
const EVENT_HIDDEN = `hidden${EVENT_KEY}`;
const EVENT_SHOW = `show${EVENT_KEY}`;
const EVENT_SHOWN = `shown${EVENT_KEY}`;
const CLASS_NAME_FADE = "fade";
const CLASS_NAME_HIDE = "hide";
const CLASS_NAME_SHOW = "show";
const CLASS_NAME_SHOWING = "showing";
const DefaultType = {
  animation: "boolean",
  autohide: "boolean",
  delay: "number"
};
const Default = {
  animation: true,
  autohide: true,
  delay: 5e3
};
class Toast extends BaseComponent {
  constructor(element, config) {
    super(element, config);
    this._timeout = null;
    this._hasMouseInteraction = false;
    this._hasKeyboardInteraction = false;
    this._setListeners();
  }
  // Getters
  static get Default() {
    return Default;
  }
  static get DefaultType() {
    return DefaultType;
  }
  static get NAME() {
    return NAME;
  }
  // Public
  show() {
    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW);
    if (showEvent.defaultPrevented) {
      return;
    }
    this._clearTimeout();
    if (this._config.animation) {
      this._element.classList.add(CLASS_NAME_FADE);
    }
    const complete = () => {
      this._element.classList.remove(CLASS_NAME_SHOWING);
      EventHandler.trigger(this._element, EVENT_SHOWN);
      this._maybeScheduleHide();
    };
    this._element.classList.remove(CLASS_NAME_HIDE);
    reflow(this._element);
    this._element.classList.add(CLASS_NAME_SHOW, CLASS_NAME_SHOWING);
    this._queueCallback(complete, this._element, this._config.animation);
  }
  hide() {
    if (!this.isShown()) {
      return;
    }
    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE);
    if (hideEvent.defaultPrevented) {
      return;
    }
    const complete = () => {
      this._element.classList.add(CLASS_NAME_HIDE);
      this._element.classList.remove(CLASS_NAME_SHOWING, CLASS_NAME_SHOW);
      EventHandler.trigger(this._element, EVENT_HIDDEN);
    };
    this._element.classList.add(CLASS_NAME_SHOWING);
    this._queueCallback(complete, this._element, this._config.animation);
  }
  dispose() {
    this._clearTimeout();
    if (this.isShown()) {
      this._element.classList.remove(CLASS_NAME_SHOW);
    }
    super.dispose();
  }
  isShown() {
    return this._element.classList.contains(CLASS_NAME_SHOW);
  }
  // Private
  _maybeScheduleHide() {
    if (!this._config.autohide) {
      return;
    }
    if (this._hasMouseInteraction || this._hasKeyboardInteraction) {
      return;
    }
    this._timeout = setTimeout(() => {
      this.hide();
    }, this._config.delay);
  }
  _onInteraction(event, isInteracting) {
    switch (event.type) {
      case "mouseover":
      case "mouseout": {
        this._hasMouseInteraction = isInteracting;
        break;
      }
      case "focusin":
      case "focusout": {
        this._hasKeyboardInteraction = isInteracting;
        break;
      }
    }
    if (isInteracting) {
      this._clearTimeout();
      return;
    }
    const nextElement = event.relatedTarget;
    if (this._element === nextElement || this._element.contains(nextElement)) {
      return;
    }
    this._maybeScheduleHide();
  }
  _setListeners() {
    EventHandler.on(this._element, EVENT_MOUSEOVER, (event) => this._onInteraction(event, true));
    EventHandler.on(this._element, EVENT_MOUSEOUT, (event) => this._onInteraction(event, false));
    EventHandler.on(this._element, EVENT_FOCUSIN, (event) => this._onInteraction(event, true));
    EventHandler.on(this._element, EVENT_FOCUSOUT, (event) => this._onInteraction(event, false));
  }
  _clearTimeout() {
    clearTimeout(this._timeout);
    this._timeout = null;
  }
  // Static
  static jQueryInterface(config) {
    return this.each(function() {
      const data2 = Toast.getOrCreateInstance(this, config);
      if (typeof config === "string") {
        if (typeof data2[config] === "undefined") {
          throw new TypeError(`No method named "${config}"`);
        }
        data2[config](this);
      }
    });
  }
}
enableDismissTrigger(Toast);
defineJQueryPlugin(Toast);
/**
* @vue/shared v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
/*! #__NO_SIDE_EFFECTS__ */
// @__NO_SIDE_EFFECTS__
function makeMap(str) {
  const map4 = /* @__PURE__ */ Object.create(null);
  for (const key2 of str.split(",")) map4[key2] = 1;
  return (val) => val in map4;
}
const EMPTY_OBJ = {};
const EMPTY_ARR = [];
const NOOP = () => {
};
const NO = () => false;
const isOn = (key2) => key2.charCodeAt(0) === 111 && key2.charCodeAt(1) === 110 && // uppercase letter
(key2.charCodeAt(2) > 122 || key2.charCodeAt(2) < 97);
const isModelListener = (key2) => key2.startsWith("onUpdate:");
const extend$2 = Object.assign;
const remove = (arr, el) => {
  const i2 = arr.indexOf(el);
  if (i2 > -1) {
    arr.splice(i2, 1);
  }
};
const hasOwnProperty$3 = Object.prototype.hasOwnProperty;
const hasOwn$l = (val, key2) => hasOwnProperty$3.call(val, key2);
const isArray$g = Array.isArray;
const isMap = (val) => toTypeString(val) === "[object Map]";
const isSet = (val) => toTypeString(val) === "[object Set]";
const isDate = (val) => toTypeString(val) === "[object Date]";
const isRegExp$1 = (val) => toTypeString(val) === "[object RegExp]";
const isFunction = (val) => typeof val === "function";
const isString$1 = (val) => typeof val === "string";
const isSymbol$7 = (val) => typeof val === "symbol";
const isObject$l = (val) => val !== null && typeof val === "object";
const isPromise = (val) => {
  return (isObject$l(val) || isFunction(val)) && isFunction(val.then) && isFunction(val.catch);
};
const objectToString$2 = Object.prototype.toString;
const toTypeString = (value2) => objectToString$2.call(value2);
const toRawType = (value2) => {
  return toTypeString(value2).slice(8, -1);
};
const isPlainObject = (val) => toTypeString(val) === "[object Object]";
const isIntegerKey = (key2) => isString$1(key2) && key2 !== "NaN" && key2[0] !== "-" && "" + parseInt(key2, 10) === key2;
const isReservedProp = /* @__PURE__ */ makeMap(
  // the leading comma is intentional so empty string "" is also included
  ",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"
);
const isBuiltInDirective = /* @__PURE__ */ makeMap(
  "bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"
);
const cacheStringFunction = (fn2) => {
  const cache = /* @__PURE__ */ Object.create(null);
  return (str) => {
    const hit = cache[str];
    return hit || (cache[str] = fn2(str));
  };
};
const camelizeRE = /-(\w)/g;
const camelize = cacheStringFunction(
  (str) => {
    return str.replace(camelizeRE, (_, c2) => c2 ? c2.toUpperCase() : "");
  }
);
const hyphenateRE = /\B([A-Z])/g;
const hyphenate = cacheStringFunction(
  (str) => str.replace(hyphenateRE, "-$1").toLowerCase()
);
const capitalize = cacheStringFunction((str) => {
  return str.charAt(0).toUpperCase() + str.slice(1);
});
const toHandlerKey = cacheStringFunction(
  (str) => {
    const s2 = str ? `on${capitalize(str)}` : ``;
    return s2;
  }
);
const hasChanged = (value2, oldValue) => !Object.is(value2, oldValue);
const invokeArrayFns = (fns, ...arg) => {
  for (let i2 = 0; i2 < fns.length; i2++) {
    fns[i2](...arg);
  }
};
const def = (obj, key2, value2, writable = false) => {
  Object.defineProperty(obj, key2, {
    configurable: true,
    enumerable: false,
    writable,
    value: value2
  });
};
const looseToNumber = (val) => {
  const n2 = parseFloat(val);
  return isNaN(n2) ? val : n2;
};
const toNumber = (val) => {
  const n2 = isString$1(val) ? Number(val) : NaN;
  return isNaN(n2) ? val : n2;
};
let _globalThis;
const getGlobalThis = () => {
  return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
};
function genCacheKey(source, options) {
  return source + JSON.stringify(
    options,
    (_, val) => typeof val === "function" ? val.toString() : val
  );
}
const GLOBALS_ALLOWED = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console,Error,Symbol";
const isGloballyAllowed = /* @__PURE__ */ makeMap(GLOBALS_ALLOWED);
function normalizeStyle(value2) {
  if (isArray$g(value2)) {
    const res = {};
    for (let i2 = 0; i2 < value2.length; i2++) {
      const item = value2[i2];
      const normalized = isString$1(item) ? parseStringStyle(item) : normalizeStyle(item);
      if (normalized) {
        for (const key2 in normalized) {
          res[key2] = normalized[key2];
        }
      }
    }
    return res;
  } else if (isString$1(value2) || isObject$l(value2)) {
    return value2;
  }
}
const listDelimiterRE = /;(?![^(]*\))/g;
const propertyDelimiterRE = /:([^]+)/;
const styleCommentRE = /\/\*[^]*?\*\//g;
function parseStringStyle(cssText) {
  const ret = {};
  cssText.replace(styleCommentRE, "").split(listDelimiterRE).forEach((item) => {
    if (item) {
      const tmp = item.split(propertyDelimiterRE);
      tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return ret;
}
function normalizeClass(value2) {
  let res = "";
  if (isString$1(value2)) {
    res = value2;
  } else if (isArray$g(value2)) {
    for (let i2 = 0; i2 < value2.length; i2++) {
      const normalized = normalizeClass(value2[i2]);
      if (normalized) {
        res += normalized + " ";
      }
    }
  } else if (isObject$l(value2)) {
    for (const name in value2) {
      if (value2[name]) {
        res += name + " ";
      }
    }
  }
  return res.trim();
}
function normalizeProps(props) {
  if (!props) return null;
  let { class: klass, style } = props;
  if (klass && !isString$1(klass)) {
    props.class = normalizeClass(klass);
  }
  if (style) {
    props.style = normalizeStyle(style);
  }
  return props;
}
const HTML_TAGS = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
const SVG_TAGS = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
const MATH_TAGS = "annotation,annotation-xml,maction,maligngroup,malignmark,math,menclose,merror,mfenced,mfrac,mfraction,mglyph,mi,mlabeledtr,mlongdiv,mmultiscripts,mn,mo,mover,mpadded,mphantom,mprescripts,mroot,mrow,ms,mscarries,mscarry,msgroup,msline,mspace,msqrt,msrow,mstack,mstyle,msub,msubsup,msup,mtable,mtd,mtext,mtr,munder,munderover,none,semantics";
const VOID_TAGS = "area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr";
const isHTMLTag = /* @__PURE__ */ makeMap(HTML_TAGS);
const isSVGTag = /* @__PURE__ */ makeMap(SVG_TAGS);
const isMathMLTag = /* @__PURE__ */ makeMap(MATH_TAGS);
const isVoidTag = /* @__PURE__ */ makeMap(VOID_TAGS);
const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs);
function includeBooleanAttr(value2) {
  return !!value2 || value2 === "";
}
function looseCompareArrays(a2, b2) {
  if (a2.length !== b2.length) return false;
  let equal = true;
  for (let i2 = 0; equal && i2 < a2.length; i2++) {
    equal = looseEqual(a2[i2], b2[i2]);
  }
  return equal;
}
function looseEqual(a2, b2) {
  if (a2 === b2) return true;
  let aValidType = isDate(a2);
  let bValidType = isDate(b2);
  if (aValidType || bValidType) {
    return aValidType && bValidType ? a2.getTime() === b2.getTime() : false;
  }
  aValidType = isSymbol$7(a2);
  bValidType = isSymbol$7(b2);
  if (aValidType || bValidType) {
    return a2 === b2;
  }
  aValidType = isArray$g(a2);
  bValidType = isArray$g(b2);
  if (aValidType || bValidType) {
    return aValidType && bValidType ? looseCompareArrays(a2, b2) : false;
  }
  aValidType = isObject$l(a2);
  bValidType = isObject$l(b2);
  if (aValidType || bValidType) {
    if (!aValidType || !bValidType) {
      return false;
    }
    const aKeysCount = Object.keys(a2).length;
    const bKeysCount = Object.keys(b2).length;
    if (aKeysCount !== bKeysCount) {
      return false;
    }
    for (const key2 in a2) {
      const aHasKey = a2.hasOwnProperty(key2);
      const bHasKey = b2.hasOwnProperty(key2);
      if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a2[key2], b2[key2])) {
        return false;
      }
    }
  }
  return String(a2) === String(b2);
}
function looseIndexOf(arr, val) {
  return arr.findIndex((item) => looseEqual(item, val));
}
const isRef$1 = (val) => {
  return !!(val && val["__v_isRef"] === true);
};
const toDisplayString = (val) => {
  return isString$1(val) ? val : val == null ? "" : isArray$g(val) || isObject$l(val) && (val.toString === objectToString$2 || !isFunction(val.toString)) ? isRef$1(val) ? toDisplayString(val.value) : JSON.stringify(val, replacer, 2) : String(val);
};
const replacer = (_key, val) => {
  if (isRef$1(val)) {
    return replacer(_key, val.value);
  } else if (isMap(val)) {
    return {
      [`Map(${val.size})`]: [...val.entries()].reduce(
        (entries2, [key2, val2], i2) => {
          entries2[stringifySymbol(key2, i2) + " =>"] = val2;
          return entries2;
        },
        {}
      )
    };
  } else if (isSet(val)) {
    return {
      [`Set(${val.size})`]: [...val.values()].map((v2) => stringifySymbol(v2))
    };
  } else if (isSymbol$7(val)) {
    return stringifySymbol(val);
  } else if (isObject$l(val) && !isArray$g(val) && !isPlainObject(val)) {
    return String(val);
  }
  return val;
};
const stringifySymbol = (v2, i2 = "") => {
  var _a;
  return (
    // Symbol.description in es2019+ so we need to cast here to pass
    // the lib: es2016 check
    isSymbol$7(v2) ? `Symbol(${(_a = v2.description) != null ? _a : i2})` : v2
  );
};
/**
* @vue/reactivity v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
let activeEffectScope;
class EffectScope {
  constructor(detached = false) {
    this.detached = detached;
    this._active = true;
    this.effects = [];
    this.cleanups = [];
    this._isPaused = false;
    this.parent = activeEffectScope;
    if (!detached && activeEffectScope) {
      this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(
        this
      ) - 1;
    }
  }
  get active() {
    return this._active;
  }
  pause() {
    if (this._active) {
      this._isPaused = true;
      let i2, l2;
      if (this.scopes) {
        for (i2 = 0, l2 = this.scopes.length; i2 < l2; i2++) {
          this.scopes[i2].pause();
        }
      }
      for (i2 = 0, l2 = this.effects.length; i2 < l2; i2++) {
        this.effects[i2].pause();
      }
    }
  }
  /**
   * Resumes the effect scope, including all child scopes and effects.
   */
  resume() {
    if (this._active) {
      if (this._isPaused) {
        this._isPaused = false;
        let i2, l2;
        if (this.scopes) {
          for (i2 = 0, l2 = this.scopes.length; i2 < l2; i2++) {
            this.scopes[i2].resume();
          }
        }
        for (i2 = 0, l2 = this.effects.length; i2 < l2; i2++) {
          this.effects[i2].resume();
        }
      }
    }
  }
  run(fn2) {
    if (this._active) {
      const currentEffectScope = activeEffectScope;
      try {
        activeEffectScope = this;
        return fn2();
      } finally {
        activeEffectScope = currentEffectScope;
      }
    }
  }
  /**
   * This should only be called on non-detached scopes
   * @internal
   */
  on() {
    activeEffectScope = this;
  }
  /**
   * This should only be called on non-detached scopes
   * @internal
   */
  off() {
    activeEffectScope = this.parent;
  }
  stop(fromParent) {
    if (this._active) {
      this._active = false;
      let i2, l2;
      for (i2 = 0, l2 = this.effects.length; i2 < l2; i2++) {
        this.effects[i2].stop();
      }
      this.effects.length = 0;
      for (i2 = 0, l2 = this.cleanups.length; i2 < l2; i2++) {
        this.cleanups[i2]();
      }
      this.cleanups.length = 0;
      if (this.scopes) {
        for (i2 = 0, l2 = this.scopes.length; i2 < l2; i2++) {
          this.scopes[i2].stop(true);
        }
        this.scopes.length = 0;
      }
      if (!this.detached && this.parent && !fromParent) {
        const last = this.parent.scopes.pop();
        if (last && last !== this) {
          this.parent.scopes[this.index] = last;
          last.index = this.index;
        }
      }
      this.parent = void 0;
    }
  }
}
function effectScope(detached) {
  return new EffectScope(detached);
}
function getCurrentScope() {
  return activeEffectScope;
}
function onScopeDispose(fn2, failSilently = false) {
  if (activeEffectScope) {
    activeEffectScope.cleanups.push(fn2);
  }
}
let activeSub;
const pausedQueueEffects = /* @__PURE__ */ new WeakSet();
class ReactiveEffect {
  constructor(fn2) {
    this.fn = fn2;
    this.deps = void 0;
    this.depsTail = void 0;
    this.flags = 1 | 4;
    this.next = void 0;
    this.cleanup = void 0;
    this.scheduler = void 0;
    if (activeEffectScope && activeEffectScope.active) {
      activeEffectScope.effects.push(this);
    }
  }
  pause() {
    this.flags |= 64;
  }
  resume() {
    if (this.flags & 64) {
      this.flags &= ~64;
      if (pausedQueueEffects.has(this)) {
        pausedQueueEffects.delete(this);
        this.trigger();
      }
    }
  }
  /**
   * @internal
   */
  notify() {
    if (this.flags & 2 && !(this.flags & 32)) {
      return;
    }
    if (!(this.flags & 8)) {
      batch(this);
    }
  }
  run() {
    if (!(this.flags & 1)) {
      return this.fn();
    }
    this.flags |= 2;
    cleanupEffect(this);
    prepareDeps(this);
    const prevEffect = activeSub;
    const prevShouldTrack = shouldTrack;
    activeSub = this;
    shouldTrack = true;
    try {
      return this.fn();
    } finally {
      cleanupDeps(this);
      activeSub = prevEffect;
      shouldTrack = prevShouldTrack;
      this.flags &= ~2;
    }
  }
  stop() {
    if (this.flags & 1) {
      for (let link2 = this.deps; link2; link2 = link2.nextDep) {
        removeSub(link2);
      }
      this.deps = this.depsTail = void 0;
      cleanupEffect(this);
      this.onStop && this.onStop();
      this.flags &= ~1;
    }
  }
  trigger() {
    if (this.flags & 64) {
      pausedQueueEffects.add(this);
    } else if (this.scheduler) {
      this.scheduler();
    } else {
      this.runIfDirty();
    }
  }
  /**
   * @internal
   */
  runIfDirty() {
    if (isDirty(this)) {
      this.run();
    }
  }
  get dirty() {
    return isDirty(this);
  }
}
let batchDepth = 0;
let batchedSub;
let batchedComputed;
function batch(sub, isComputed = false) {
  sub.flags |= 8;
  if (isComputed) {
    sub.next = batchedComputed;
    batchedComputed = sub;
    return;
  }
  sub.next = batchedSub;
  batchedSub = sub;
}
function startBatch() {
  batchDepth++;
}
function endBatch() {
  if (--batchDepth > 0) {
    return;
  }
  if (batchedComputed) {
    let e2 = batchedComputed;
    batchedComputed = void 0;
    while (e2) {
      const next4 = e2.next;
      e2.next = void 0;
      e2.flags &= ~8;
      e2 = next4;
    }
  }
  let error;
  while (batchedSub) {
    let e2 = batchedSub;
    batchedSub = void 0;
    while (e2) {
      const next4 = e2.next;
      e2.next = void 0;
      e2.flags &= ~8;
      if (e2.flags & 1) {
        try {
          ;
          e2.trigger();
        } catch (err) {
          if (!error) error = err;
        }
      }
      e2 = next4;
    }
  }
  if (error) throw error;
}
function prepareDeps(sub) {
  for (let link2 = sub.deps; link2; link2 = link2.nextDep) {
    link2.version = -1;
    link2.prevActiveLink = link2.dep.activeLink;
    link2.dep.activeLink = link2;
  }
}
function cleanupDeps(sub) {
  let head;
  let tail = sub.depsTail;
  let link2 = tail;
  while (link2) {
    const prev = link2.prevDep;
    if (link2.version === -1) {
      if (link2 === tail) tail = prev;
      removeSub(link2);
      removeDep(link2);
    } else {
      head = link2;
    }
    link2.dep.activeLink = link2.prevActiveLink;
    link2.prevActiveLink = void 0;
    link2 = prev;
  }
  sub.deps = head;
  sub.depsTail = tail;
}
function isDirty(sub) {
  for (let link2 = sub.deps; link2; link2 = link2.nextDep) {
    if (link2.dep.version !== link2.version || link2.dep.computed && (refreshComputed(link2.dep.computed) || link2.dep.version !== link2.version)) {
      return true;
    }
  }
  if (sub._dirty) {
    return true;
  }
  return false;
}
function refreshComputed(computed2) {
  if (computed2.flags & 4 && !(computed2.flags & 16)) {
    return;
  }
  computed2.flags &= ~16;
  if (computed2.globalVersion === globalVersion) {
    return;
  }
  computed2.globalVersion = globalVersion;
  const dep = computed2.dep;
  computed2.flags |= 2;
  if (dep.version > 0 && !computed2.isSSR && computed2.deps && !isDirty(computed2)) {
    computed2.flags &= ~2;
    return;
  }
  const prevSub = activeSub;
  const prevShouldTrack = shouldTrack;
  activeSub = computed2;
  shouldTrack = true;
  try {
    prepareDeps(computed2);
    const value2 = computed2.fn(computed2._value);
    if (dep.version === 0 || hasChanged(value2, computed2._value)) {
      computed2._value = value2;
      dep.version++;
    }
  } catch (err) {
    dep.version++;
    throw err;
  } finally {
    activeSub = prevSub;
    shouldTrack = prevShouldTrack;
    cleanupDeps(computed2);
    computed2.flags &= ~2;
  }
}
function removeSub(link2, soft = false) {
  const { dep, prevSub, nextSub } = link2;
  if (prevSub) {
    prevSub.nextSub = nextSub;
    link2.prevSub = void 0;
  }
  if (nextSub) {
    nextSub.prevSub = prevSub;
    link2.nextSub = void 0;
  }
  if (dep.subs === link2) {
    dep.subs = prevSub;
    if (!prevSub && dep.computed) {
      dep.computed.flags &= ~4;
      for (let l2 = dep.computed.deps; l2; l2 = l2.nextDep) {
        removeSub(l2, true);
      }
    }
  }
  if (!soft && !--dep.sc && dep.map) {
    dep.map.delete(dep.key);
  }
}
function removeDep(link2) {
  const { prevDep, nextDep } = link2;
  if (prevDep) {
    prevDep.nextDep = nextDep;
    link2.prevDep = void 0;
  }
  if (nextDep) {
    nextDep.prevDep = prevDep;
    link2.nextDep = void 0;
  }
}
function effect(fn2, options) {
  if (fn2.effect instanceof ReactiveEffect) {
    fn2 = fn2.effect.fn;
  }
  const e2 = new ReactiveEffect(fn2);
  if (options) {
    extend$2(e2, options);
  }
  try {
    e2.run();
  } catch (err) {
    e2.stop();
    throw err;
  }
  const runner2 = e2.run.bind(e2);
  runner2.effect = e2;
  return runner2;
}
function stop$1(runner2) {
  runner2.effect.stop();
}
let shouldTrack = true;
const trackStack = [];
function pauseTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = false;
}
function resetTracking() {
  const last = trackStack.pop();
  shouldTrack = last === void 0 ? true : last;
}
function cleanupEffect(e2) {
  const { cleanup } = e2;
  e2.cleanup = void 0;
  if (cleanup) {
    const prevSub = activeSub;
    activeSub = void 0;
    try {
      cleanup();
    } finally {
      activeSub = prevSub;
    }
  }
}
let globalVersion = 0;
class Link {
  constructor(sub, dep) {
    this.sub = sub;
    this.dep = dep;
    this.version = dep.version;
    this.nextDep = this.prevDep = this.nextSub = this.prevSub = this.prevActiveLink = void 0;
  }
}
class Dep {
  constructor(computed2) {
    this.computed = computed2;
    this.version = 0;
    this.activeLink = void 0;
    this.subs = void 0;
    this.map = void 0;
    this.key = void 0;
    this.sc = 0;
  }
  track(debugInfo) {
    if (!activeSub || !shouldTrack || activeSub === this.computed) {
      return;
    }
    let link2 = this.activeLink;
    if (link2 === void 0 || link2.sub !== activeSub) {
      link2 = this.activeLink = new Link(activeSub, this);
      if (!activeSub.deps) {
        activeSub.deps = activeSub.depsTail = link2;
      } else {
        link2.prevDep = activeSub.depsTail;
        activeSub.depsTail.nextDep = link2;
        activeSub.depsTail = link2;
      }
      addSub(link2);
    } else if (link2.version === -1) {
      link2.version = this.version;
      if (link2.nextDep) {
        const next4 = link2.nextDep;
        next4.prevDep = link2.prevDep;
        if (link2.prevDep) {
          link2.prevDep.nextDep = next4;
        }
        link2.prevDep = activeSub.depsTail;
        link2.nextDep = void 0;
        activeSub.depsTail.nextDep = link2;
        activeSub.depsTail = link2;
        if (activeSub.deps === link2) {
          activeSub.deps = next4;
        }
      }
    }
    return link2;
  }
  trigger(debugInfo) {
    this.version++;
    globalVersion++;
    this.notify(debugInfo);
  }
  notify(debugInfo) {
    startBatch();
    try {
      if (false) ;
      for (let link2 = this.subs; link2; link2 = link2.prevSub) {
        if (link2.sub.notify()) {
          ;
          link2.sub.dep.notify();
        }
      }
    } finally {
      endBatch();
    }
  }
}
function addSub(link2) {
  link2.dep.sc++;
  if (link2.sub.flags & 4) {
    const computed2 = link2.dep.computed;
    if (computed2 && !link2.dep.subs) {
      computed2.flags |= 4 | 16;
      for (let l2 = computed2.deps; l2; l2 = l2.nextDep) {
        addSub(l2);
      }
    }
    const currentTail = link2.dep.subs;
    if (currentTail !== link2) {
      link2.prevSub = currentTail;
      if (currentTail) currentTail.nextSub = link2;
    }
    link2.dep.subs = link2;
  }
}
const targetMap = /* @__PURE__ */ new WeakMap();
const ITERATE_KEY = Symbol(
  ""
);
const MAP_KEY_ITERATE_KEY = Symbol(
  ""
);
const ARRAY_ITERATE_KEY = Symbol(
  ""
);
function track(target, type, key2) {
  if (shouldTrack && activeSub) {
    let depsMap = targetMap.get(target);
    if (!depsMap) {
      targetMap.set(target, depsMap = /* @__PURE__ */ new Map());
    }
    let dep = depsMap.get(key2);
    if (!dep) {
      depsMap.set(key2, dep = new Dep());
      dep.map = depsMap;
      dep.key = key2;
    }
    {
      dep.track();
    }
  }
}
function trigger(target, type, key2, newValue, oldValue, oldTarget) {
  const depsMap = targetMap.get(target);
  if (!depsMap) {
    globalVersion++;
    return;
  }
  const run2 = (dep) => {
    if (dep) {
      {
        dep.trigger();
      }
    }
  };
  startBatch();
  if (type === "clear") {
    depsMap.forEach(run2);
  } else {
    const targetIsArray = isArray$g(target);
    const isArrayIndex = targetIsArray && isIntegerKey(key2);
    if (targetIsArray && key2 === "length") {
      const newLength = Number(newValue);
      depsMap.forEach((dep, key22) => {
        if (key22 === "length" || key22 === ARRAY_ITERATE_KEY || !isSymbol$7(key22) && key22 >= newLength) {
          run2(dep);
        }
      });
    } else {
      if (key2 !== void 0 || depsMap.has(void 0)) {
        run2(depsMap.get(key2));
      }
      if (isArrayIndex) {
        run2(depsMap.get(ARRAY_ITERATE_KEY));
      }
      switch (type) {
        case "add":
          if (!targetIsArray) {
            run2(depsMap.get(ITERATE_KEY));
            if (isMap(target)) {
              run2(depsMap.get(MAP_KEY_ITERATE_KEY));
            }
          } else if (isArrayIndex) {
            run2(depsMap.get("length"));
          }
          break;
        case "delete":
          if (!targetIsArray) {
            run2(depsMap.get(ITERATE_KEY));
            if (isMap(target)) {
              run2(depsMap.get(MAP_KEY_ITERATE_KEY));
            }
          }
          break;
        case "set":
          if (isMap(target)) {
            run2(depsMap.get(ITERATE_KEY));
          }
          break;
      }
    }
  }
  endBatch();
}
function getDepFromReactive(object2, key2) {
  const depMap = targetMap.get(object2);
  return depMap && depMap.get(key2);
}
function reactiveReadArray(array2) {
  const raw = toRaw(array2);
  if (raw === array2) return raw;
  track(raw, "iterate", ARRAY_ITERATE_KEY);
  return isShallow(array2) ? raw : raw.map(toReactive);
}
function shallowReadArray(arr) {
  track(arr = toRaw(arr), "iterate", ARRAY_ITERATE_KEY);
  return arr;
}
const arrayInstrumentations = {
  __proto__: null,
  [Symbol.iterator]() {
    return iterator$7(this, Symbol.iterator, toReactive);
  },
  concat(...args) {
    return reactiveReadArray(this).concat(
      ...args.map((x2) => isArray$g(x2) ? reactiveReadArray(x2) : x2)
    );
  },
  entries() {
    return iterator$7(this, "entries", (value2) => {
      value2[1] = toReactive(value2[1]);
      return value2;
    });
  },
  every(fn2, thisArg) {
    return apply$8(this, "every", fn2, thisArg, void 0, arguments);
  },
  filter(fn2, thisArg) {
    return apply$8(this, "filter", fn2, thisArg, (v2) => v2.map(toReactive), arguments);
  },
  find(fn2, thisArg) {
    return apply$8(this, "find", fn2, thisArg, toReactive, arguments);
  },
  findIndex(fn2, thisArg) {
    return apply$8(this, "findIndex", fn2, thisArg, void 0, arguments);
  },
  findLast(fn2, thisArg) {
    return apply$8(this, "findLast", fn2, thisArg, toReactive, arguments);
  },
  findLastIndex(fn2, thisArg) {
    return apply$8(this, "findLastIndex", fn2, thisArg, void 0, arguments);
  },
  // flat, flatMap could benefit from ARRAY_ITERATE but are not straight-forward to implement
  forEach(fn2, thisArg) {
    return apply$8(this, "forEach", fn2, thisArg, void 0, arguments);
  },
  includes(...args) {
    return searchProxy(this, "includes", args);
  },
  indexOf(...args) {
    return searchProxy(this, "indexOf", args);
  },
  join(separator) {
    return reactiveReadArray(this).join(separator);
  },
  // keys() iterator only reads `length`, no optimisation required
  lastIndexOf(...args) {
    return searchProxy(this, "lastIndexOf", args);
  },
  map(fn2, thisArg) {
    return apply$8(this, "map", fn2, thisArg, void 0, arguments);
  },
  pop() {
    return noTracking(this, "pop");
  },
  push(...args) {
    return noTracking(this, "push", args);
  },
  reduce(fn2, ...args) {
    return reduce$5(this, "reduce", fn2, args);
  },
  reduceRight(fn2, ...args) {
    return reduce$5(this, "reduceRight", fn2, args);
  },
  shift() {
    return noTracking(this, "shift");
  },
  // slice could use ARRAY_ITERATE but also seems to beg for range tracking
  some(fn2, thisArg) {
    return apply$8(this, "some", fn2, thisArg, void 0, arguments);
  },
  splice(...args) {
    return noTracking(this, "splice", args);
  },
  toReversed() {
    return reactiveReadArray(this).toReversed();
  },
  toSorted(comparer) {
    return reactiveReadArray(this).toSorted(comparer);
  },
  toSpliced(...args) {
    return reactiveReadArray(this).toSpliced(...args);
  },
  unshift(...args) {
    return noTracking(this, "unshift", args);
  },
  values() {
    return iterator$7(this, "values", toReactive);
  }
};
function iterator$7(self2, method2, wrapValue) {
  const arr = shallowReadArray(self2);
  const iter = arr[method2]();
  if (arr !== self2 && !isShallow(self2)) {
    iter._next = iter.next;
    iter.next = () => {
      const result = iter._next();
      if (result.value) {
        result.value = wrapValue(result.value);
      }
      return result;
    };
  }
  return iter;
}
const arrayProto = Array.prototype;
function apply$8(self2, method2, fn2, thisArg, wrappedRetFn, args) {
  const arr = shallowReadArray(self2);
  const needsWrap = arr !== self2 && !isShallow(self2);
  const methodFn = arr[method2];
  if (methodFn !== arrayProto[method2]) {
    const result2 = methodFn.apply(self2, args);
    return needsWrap ? toReactive(result2) : result2;
  }
  let wrappedFn = fn2;
  if (arr !== self2) {
    if (needsWrap) {
      wrappedFn = function(item, index2) {
        return fn2.call(this, toReactive(item), index2, self2);
      };
    } else if (fn2.length > 2) {
      wrappedFn = function(item, index2) {
        return fn2.call(this, item, index2, self2);
      };
    }
  }
  const result = methodFn.call(arr, wrappedFn, thisArg);
  return needsWrap && wrappedRetFn ? wrappedRetFn(result) : result;
}
function reduce$5(self2, method2, fn2, args) {
  const arr = shallowReadArray(self2);
  let wrappedFn = fn2;
  if (arr !== self2) {
    if (!isShallow(self2)) {
      wrappedFn = function(acc, item, index2) {
        return fn2.call(this, acc, toReactive(item), index2, self2);
      };
    } else if (fn2.length > 3) {
      wrappedFn = function(acc, item, index2) {
        return fn2.call(this, acc, item, index2, self2);
      };
    }
  }
  return arr[method2](wrappedFn, ...args);
}
function searchProxy(self2, method2, args) {
  const arr = toRaw(self2);
  track(arr, "iterate", ARRAY_ITERATE_KEY);
  const res = arr[method2](...args);
  if ((res === -1 || res === false) && isProxy(args[0])) {
    args[0] = toRaw(args[0]);
    return arr[method2](...args);
  }
  return res;
}
function noTracking(self2, method2, args = []) {
  pauseTracking();
  startBatch();
  const res = toRaw(self2)[method2].apply(self2, args);
  endBatch();
  resetTracking();
  return res;
}
const isNonTrackableKeys = /* @__PURE__ */ makeMap(`__proto__,__v_isRef,__isVue`);
const builtInSymbols = new Set(
  /* @__PURE__ */ Object.getOwnPropertyNames(Symbol).filter((key2) => key2 !== "arguments" && key2 !== "caller").map((key2) => Symbol[key2]).filter(isSymbol$7)
);
function hasOwnProperty$2(key2) {
  if (!isSymbol$7(key2)) key2 = String(key2);
  const obj = toRaw(this);
  track(obj, "has", key2);
  return obj.hasOwnProperty(key2);
}
class BaseReactiveHandler {
  constructor(_isReadonly = false, _isShallow = false) {
    this._isReadonly = _isReadonly;
    this._isShallow = _isShallow;
  }
  get(target, key2, receiver) {
    if (key2 === "__v_skip") return target["__v_skip"];
    const isReadonly2 = this._isReadonly, isShallow2 = this._isShallow;
    if (key2 === "__v_isReactive") {
      return !isReadonly2;
    } else if (key2 === "__v_isReadonly") {
      return isReadonly2;
    } else if (key2 === "__v_isShallow") {
      return isShallow2;
    } else if (key2 === "__v_raw") {
      if (receiver === (isReadonly2 ? isShallow2 ? shallowReadonlyMap : readonlyMap : isShallow2 ? shallowReactiveMap : reactiveMap).get(target) || // receiver is not the reactive proxy, but has the same prototype
      // this means the receiver is a user proxy of the reactive proxy
      Object.getPrototypeOf(target) === Object.getPrototypeOf(receiver)) {
        return target;
      }
      return;
    }
    const targetIsArray = isArray$g(target);
    if (!isReadonly2) {
      let fn2;
      if (targetIsArray && (fn2 = arrayInstrumentations[key2])) {
        return fn2;
      }
      if (key2 === "hasOwnProperty") {
        return hasOwnProperty$2;
      }
    }
    const res = Reflect.get(
      target,
      key2,
      // if this is a proxy wrapping a ref, return methods using the raw ref
      // as receiver so that we don't have to call `toRaw` on the ref in all
      // its class methods
      isRef(target) ? target : receiver
    );
    if (isSymbol$7(key2) ? builtInSymbols.has(key2) : isNonTrackableKeys(key2)) {
      return res;
    }
    if (!isReadonly2) {
      track(target, "get", key2);
    }
    if (isShallow2) {
      return res;
    }
    if (isRef(res)) {
      return targetIsArray && isIntegerKey(key2) ? res : res.value;
    }
    if (isObject$l(res)) {
      return isReadonly2 ? readonly(res) : reactive(res);
    }
    return res;
  }
}
class MutableReactiveHandler extends BaseReactiveHandler {
  constructor(isShallow2 = false) {
    super(false, isShallow2);
  }
  set(target, key2, value2, receiver) {
    let oldValue = target[key2];
    if (!this._isShallow) {
      const isOldValueReadonly = isReadonly(oldValue);
      if (!isShallow(value2) && !isReadonly(value2)) {
        oldValue = toRaw(oldValue);
        value2 = toRaw(value2);
      }
      if (!isArray$g(target) && isRef(oldValue) && !isRef(value2)) {
        if (isOldValueReadonly) {
          return false;
        } else {
          oldValue.value = value2;
          return true;
        }
      }
    }
    const hadKey = isArray$g(target) && isIntegerKey(key2) ? Number(key2) < target.length : hasOwn$l(target, key2);
    const result = Reflect.set(
      target,
      key2,
      value2,
      isRef(target) ? target : receiver
    );
    if (target === toRaw(receiver)) {
      if (!hadKey) {
        trigger(target, "add", key2, value2);
      } else if (hasChanged(value2, oldValue)) {
        trigger(target, "set", key2, value2);
      }
    }
    return result;
  }
  deleteProperty(target, key2) {
    const hadKey = hasOwn$l(target, key2);
    target[key2];
    const result = Reflect.deleteProperty(target, key2);
    if (result && hadKey) {
      trigger(target, "delete", key2, void 0);
    }
    return result;
  }
  has(target, key2) {
    const result = Reflect.has(target, key2);
    if (!isSymbol$7(key2) || !builtInSymbols.has(key2)) {
      track(target, "has", key2);
    }
    return result;
  }
  ownKeys(target) {
    track(
      target,
      "iterate",
      isArray$g(target) ? "length" : ITERATE_KEY
    );
    return Reflect.ownKeys(target);
  }
}
class ReadonlyReactiveHandler extends BaseReactiveHandler {
  constructor(isShallow2 = false) {
    super(true, isShallow2);
  }
  set(target, key2) {
    return true;
  }
  deleteProperty(target, key2) {
    return true;
  }
}
const mutableHandlers = /* @__PURE__ */ new MutableReactiveHandler();
const readonlyHandlers = /* @__PURE__ */ new ReadonlyReactiveHandler();
const shallowReactiveHandlers = /* @__PURE__ */ new MutableReactiveHandler(true);
const shallowReadonlyHandlers = /* @__PURE__ */ new ReadonlyReactiveHandler(true);
const toShallow = (value2) => value2;
const getProto = (v2) => Reflect.getPrototypeOf(v2);
function createIterableMethod(method2, isReadonly2, isShallow2) {
  return function(...args) {
    const target = this["__v_raw"];
    const rawTarget = toRaw(target);
    const targetIsMap = isMap(rawTarget);
    const isPair = method2 === "entries" || method2 === Symbol.iterator && targetIsMap;
    const isKeyOnly = method2 === "keys" && targetIsMap;
    const innerIterator = target[method2](...args);
    const wrap2 = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(
      rawTarget,
      "iterate",
      isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY
    );
    return {
      // iterator protocol
      next() {
        const { value: value2, done } = innerIterator.next();
        return done ? { value: value2, done } : {
          value: isPair ? [wrap2(value2[0]), wrap2(value2[1])] : wrap2(value2),
          done
        };
      },
      // iterable protocol
      [Symbol.iterator]() {
        return this;
      }
    };
  };
}
function createReadonlyMethod(type) {
  return function(...args) {
    return type === "delete" ? false : type === "clear" ? void 0 : this;
  };
}
function createInstrumentations(readonly2, shallow) {
  const instrumentations = {
    get(key2) {
      const target = this["__v_raw"];
      const rawTarget = toRaw(target);
      const rawKey = toRaw(key2);
      if (!readonly2) {
        if (hasChanged(key2, rawKey)) {
          track(rawTarget, "get", key2);
        }
        track(rawTarget, "get", rawKey);
      }
      const { has: has2 } = getProto(rawTarget);
      const wrap2 = shallow ? toShallow : readonly2 ? toReadonly : toReactive;
      if (has2.call(rawTarget, key2)) {
        return wrap2(target.get(key2));
      } else if (has2.call(rawTarget, rawKey)) {
        return wrap2(target.get(rawKey));
      } else if (target !== rawTarget) {
        target.get(key2);
      }
    },
    get size() {
      const target = this["__v_raw"];
      !readonly2 && track(toRaw(target), "iterate", ITERATE_KEY);
      return Reflect.get(target, "size", target);
    },
    has(key2) {
      const target = this["__v_raw"];
      const rawTarget = toRaw(target);
      const rawKey = toRaw(key2);
      if (!readonly2) {
        if (hasChanged(key2, rawKey)) {
          track(rawTarget, "has", key2);
        }
        track(rawTarget, "has", rawKey);
      }
      return key2 === rawKey ? target.has(key2) : target.has(key2) || target.has(rawKey);
    },
    forEach(callback, thisArg) {
      const observed = this;
      const target = observed["__v_raw"];
      const rawTarget = toRaw(target);
      const wrap2 = shallow ? toShallow : readonly2 ? toReadonly : toReactive;
      !readonly2 && track(rawTarget, "iterate", ITERATE_KEY);
      return target.forEach((value2, key2) => {
        return callback.call(thisArg, wrap2(value2), wrap2(key2), observed);
      });
    }
  };
  extend$2(
    instrumentations,
    readonly2 ? {
      add: createReadonlyMethod("add"),
      set: createReadonlyMethod("set"),
      delete: createReadonlyMethod("delete"),
      clear: createReadonlyMethod("clear")
    } : {
      add(value2) {
        if (!shallow && !isShallow(value2) && !isReadonly(value2)) {
          value2 = toRaw(value2);
        }
        const target = toRaw(this);
        const proto = getProto(target);
        const hadKey = proto.has.call(target, value2);
        if (!hadKey) {
          target.add(value2);
          trigger(target, "add", value2, value2);
        }
        return this;
      },
      set(key2, value2) {
        if (!shallow && !isShallow(value2) && !isReadonly(value2)) {
          value2 = toRaw(value2);
        }
        const target = toRaw(this);
        const { has: has2, get: get2 } = getProto(target);
        let hadKey = has2.call(target, key2);
        if (!hadKey) {
          key2 = toRaw(key2);
          hadKey = has2.call(target, key2);
        }
        const oldValue = get2.call(target, key2);
        target.set(key2, value2);
        if (!hadKey) {
          trigger(target, "add", key2, value2);
        } else if (hasChanged(value2, oldValue)) {
          trigger(target, "set", key2, value2);
        }
        return this;
      },
      delete(key2) {
        const target = toRaw(this);
        const { has: has2, get: get2 } = getProto(target);
        let hadKey = has2.call(target, key2);
        if (!hadKey) {
          key2 = toRaw(key2);
          hadKey = has2.call(target, key2);
        }
        get2 ? get2.call(target, key2) : void 0;
        const result = target.delete(key2);
        if (hadKey) {
          trigger(target, "delete", key2, void 0);
        }
        return result;
      },
      clear() {
        const target = toRaw(this);
        const hadItems = target.size !== 0;
        const result = target.clear();
        if (hadItems) {
          trigger(
            target,
            "clear",
            void 0,
            void 0
          );
        }
        return result;
      }
    }
  );
  const iteratorMethods = [
    "keys",
    "values",
    "entries",
    Symbol.iterator
  ];
  iteratorMethods.forEach((method2) => {
    instrumentations[method2] = createIterableMethod(method2, readonly2, shallow);
  });
  return instrumentations;
}
function createInstrumentationGetter(isReadonly2, shallow) {
  const instrumentations = createInstrumentations(isReadonly2, shallow);
  return (target, key2, receiver) => {
    if (key2 === "__v_isReactive") {
      return !isReadonly2;
    } else if (key2 === "__v_isReadonly") {
      return isReadonly2;
    } else if (key2 === "__v_raw") {
      return target;
    }
    return Reflect.get(
      hasOwn$l(instrumentations, key2) && key2 in target ? instrumentations : target,
      key2,
      receiver
    );
  };
}
const mutableCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, false)
};
const shallowCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, true)
};
const readonlyCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(true, false)
};
const shallowReadonlyCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(true, true)
};
const reactiveMap = /* @__PURE__ */ new WeakMap();
const shallowReactiveMap = /* @__PURE__ */ new WeakMap();
const readonlyMap = /* @__PURE__ */ new WeakMap();
const shallowReadonlyMap = /* @__PURE__ */ new WeakMap();
function targetTypeMap(rawType) {
  switch (rawType) {
    case "Object":
    case "Array":
      return 1;
    case "Map":
    case "Set":
    case "WeakMap":
    case "WeakSet":
      return 2;
    default:
      return 0;
  }
}
function getTargetType(value2) {
  return value2["__v_skip"] || !Object.isExtensible(value2) ? 0 : targetTypeMap(toRawType(value2));
}
function reactive(target) {
  if (isReadonly(target)) {
    return target;
  }
  return createReactiveObject(
    target,
    false,
    mutableHandlers,
    mutableCollectionHandlers,
    reactiveMap
  );
}
function shallowReactive(target) {
  return createReactiveObject(
    target,
    false,
    shallowReactiveHandlers,
    shallowCollectionHandlers,
    shallowReactiveMap
  );
}
function readonly(target) {
  return createReactiveObject(
    target,
    true,
    readonlyHandlers,
    readonlyCollectionHandlers,
    readonlyMap
  );
}
function shallowReadonly(target) {
  return createReactiveObject(
    target,
    true,
    shallowReadonlyHandlers,
    shallowReadonlyCollectionHandlers,
    shallowReadonlyMap
  );
}
function createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
  if (!isObject$l(target)) {
    return target;
  }
  if (target["__v_raw"] && !(isReadonly2 && target["__v_isReactive"])) {
    return target;
  }
  const existingProxy = proxyMap.get(target);
  if (existingProxy) {
    return existingProxy;
  }
  const targetType = getTargetType(target);
  if (targetType === 0) {
    return target;
  }
  const proxy = new Proxy(
    target,
    targetType === 2 ? collectionHandlers : baseHandlers
  );
  proxyMap.set(target, proxy);
  return proxy;
}
function isReactive(value2) {
  if (isReadonly(value2)) {
    return isReactive(value2["__v_raw"]);
  }
  return !!(value2 && value2["__v_isReactive"]);
}
function isReadonly(value2) {
  return !!(value2 && value2["__v_isReadonly"]);
}
function isShallow(value2) {
  return !!(value2 && value2["__v_isShallow"]);
}
function isProxy(value2) {
  return value2 ? !!value2["__v_raw"] : false;
}
function toRaw(observed) {
  const raw = observed && observed["__v_raw"];
  return raw ? toRaw(raw) : observed;
}
function markRaw(value2) {
  if (!hasOwn$l(value2, "__v_skip") && Object.isExtensible(value2)) {
    def(value2, "__v_skip", true);
  }
  return value2;
}
const toReactive = (value2) => isObject$l(value2) ? reactive(value2) : value2;
const toReadonly = (value2) => isObject$l(value2) ? readonly(value2) : value2;
function isRef(r2) {
  return r2 ? r2["__v_isRef"] === true : false;
}
function ref(value2) {
  return createRef(value2, false);
}
function shallowRef(value2) {
  return createRef(value2, true);
}
function createRef(rawValue, shallow) {
  if (isRef(rawValue)) {
    return rawValue;
  }
  return new RefImpl(rawValue, shallow);
}
class RefImpl {
  constructor(value2, isShallow2) {
    this.dep = new Dep();
    this["__v_isRef"] = true;
    this["__v_isShallow"] = false;
    this._rawValue = isShallow2 ? value2 : toRaw(value2);
    this._value = isShallow2 ? value2 : toReactive(value2);
    this["__v_isShallow"] = isShallow2;
  }
  get value() {
    {
      this.dep.track();
    }
    return this._value;
  }
  set value(newValue) {
    const oldValue = this._rawValue;
    const useDirectValue = this["__v_isShallow"] || isShallow(newValue) || isReadonly(newValue);
    newValue = useDirectValue ? newValue : toRaw(newValue);
    if (hasChanged(newValue, oldValue)) {
      this._rawValue = newValue;
      this._value = useDirectValue ? newValue : toReactive(newValue);
      {
        this.dep.trigger();
      }
    }
  }
}
function triggerRef(ref2) {
  if (ref2.dep) {
    {
      ref2.dep.trigger();
    }
  }
}
function unref(ref2) {
  return isRef(ref2) ? ref2.value : ref2;
}
function toValue(source) {
  return isFunction(source) ? source() : unref(source);
}
const shallowUnwrapHandlers = {
  get: (target, key2, receiver) => key2 === "__v_raw" ? target : unref(Reflect.get(target, key2, receiver)),
  set: (target, key2, value2, receiver) => {
    const oldValue = target[key2];
    if (isRef(oldValue) && !isRef(value2)) {
      oldValue.value = value2;
      return true;
    } else {
      return Reflect.set(target, key2, value2, receiver);
    }
  }
};
function proxyRefs(objectWithRefs) {
  return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
}
class CustomRefImpl {
  constructor(factory) {
    this["__v_isRef"] = true;
    this._value = void 0;
    const dep = this.dep = new Dep();
    const { get: get2, set: set2 } = factory(dep.track.bind(dep), dep.trigger.bind(dep));
    this._get = get2;
    this._set = set2;
  }
  get value() {
    return this._value = this._get();
  }
  set value(newVal) {
    this._set(newVal);
  }
}
function customRef(factory) {
  return new CustomRefImpl(factory);
}
function toRefs(object2) {
  const ret = isArray$g(object2) ? new Array(object2.length) : {};
  for (const key2 in object2) {
    ret[key2] = propertyToRef(object2, key2);
  }
  return ret;
}
class ObjectRefImpl {
  constructor(_object, _key, _defaultValue) {
    this._object = _object;
    this._key = _key;
    this._defaultValue = _defaultValue;
    this["__v_isRef"] = true;
    this._value = void 0;
  }
  get value() {
    const val = this._object[this._key];
    return this._value = val === void 0 ? this._defaultValue : val;
  }
  set value(newVal) {
    this._object[this._key] = newVal;
  }
  get dep() {
    return getDepFromReactive(toRaw(this._object), this._key);
  }
}
class GetterRefImpl {
  constructor(_getter) {
    this._getter = _getter;
    this["__v_isRef"] = true;
    this["__v_isReadonly"] = true;
    this._value = void 0;
  }
  get value() {
    return this._value = this._getter();
  }
}
function toRef(source, key2, defaultValue) {
  if (isRef(source)) {
    return source;
  } else if (isFunction(source)) {
    return new GetterRefImpl(source);
  } else if (isObject$l(source) && arguments.length > 1) {
    return propertyToRef(source, key2, defaultValue);
  } else {
    return ref(source);
  }
}
function propertyToRef(source, key2, defaultValue) {
  const val = source[key2];
  return isRef(val) ? val : new ObjectRefImpl(source, key2, defaultValue);
}
class ComputedRefImpl {
  constructor(fn2, setter, isSSR) {
    this.fn = fn2;
    this.setter = setter;
    this._value = void 0;
    this.dep = new Dep(this);
    this.__v_isRef = true;
    this.deps = void 0;
    this.depsTail = void 0;
    this.flags = 16;
    this.globalVersion = globalVersion - 1;
    this.next = void 0;
    this.effect = this;
    this["__v_isReadonly"] = !setter;
    this.isSSR = isSSR;
  }
  /**
   * @internal
   */
  notify() {
    this.flags |= 16;
    if (!(this.flags & 8) && // avoid infinite self recursion
    activeSub !== this) {
      batch(this, true);
      return true;
    }
  }
  get value() {
    const link2 = this.dep.track();
    refreshComputed(this);
    if (link2) {
      link2.version = this.dep.version;
    }
    return this._value;
  }
  set value(newValue) {
    if (this.setter) {
      this.setter(newValue);
    }
  }
}
function computed$1(getterOrOptions, debugOptions, isSSR = false) {
  let getter;
  let setter;
  if (isFunction(getterOrOptions)) {
    getter = getterOrOptions;
  } else {
    getter = getterOrOptions.get;
    setter = getterOrOptions.set;
  }
  const cRef = new ComputedRefImpl(getter, setter, isSSR);
  return cRef;
}
const TrackOpTypes = {
  "GET": "get",
  "HAS": "has",
  "ITERATE": "iterate"
};
const TriggerOpTypes = {
  "SET": "set",
  "ADD": "add",
  "DELETE": "delete",
  "CLEAR": "clear"
};
const INITIAL_WATCHER_VALUE = {};
const cleanupMap = /* @__PURE__ */ new WeakMap();
let activeWatcher = void 0;
function getCurrentWatcher() {
  return activeWatcher;
}
function onWatcherCleanup(cleanupFn, failSilently = false, owner = activeWatcher) {
  if (owner) {
    let cleanups = cleanupMap.get(owner);
    if (!cleanups) cleanupMap.set(owner, cleanups = []);
    cleanups.push(cleanupFn);
  }
}
function watch$1(source, cb, options = EMPTY_OBJ) {
  const { immediate, deep, once, scheduler, augmentJob, call: call2 } = options;
  const reactiveGetter = (source2) => {
    if (deep) return source2;
    if (isShallow(source2) || deep === false || deep === 0)
      return traverse(source2, 1);
    return traverse(source2);
  };
  let effect2;
  let getter;
  let cleanup;
  let boundCleanup;
  let forceTrigger = false;
  let isMultiSource = false;
  if (isRef(source)) {
    getter = () => source.value;
    forceTrigger = isShallow(source);
  } else if (isReactive(source)) {
    getter = () => reactiveGetter(source);
    forceTrigger = true;
  } else if (isArray$g(source)) {
    isMultiSource = true;
    forceTrigger = source.some((s2) => isReactive(s2) || isShallow(s2));
    getter = () => source.map((s2) => {
      if (isRef(s2)) {
        return s2.value;
      } else if (isReactive(s2)) {
        return reactiveGetter(s2);
      } else if (isFunction(s2)) {
        return call2 ? call2(s2, 2) : s2();
      } else ;
    });
  } else if (isFunction(source)) {
    if (cb) {
      getter = call2 ? () => call2(source, 2) : source;
    } else {
      getter = () => {
        if (cleanup) {
          pauseTracking();
          try {
            cleanup();
          } finally {
            resetTracking();
          }
        }
        const currentEffect = activeWatcher;
        activeWatcher = effect2;
        try {
          return call2 ? call2(source, 3, [boundCleanup]) : source(boundCleanup);
        } finally {
          activeWatcher = currentEffect;
        }
      };
    }
  } else {
    getter = NOOP;
  }
  if (cb && deep) {
    const baseGetter = getter;
    const depth = deep === true ? Infinity : deep;
    getter = () => traverse(baseGetter(), depth);
  }
  const scope = getCurrentScope();
  const watchHandle = () => {
    effect2.stop();
    if (scope && scope.active) {
      remove(scope.effects, effect2);
    }
  };
  if (once && cb) {
    const _cb = cb;
    cb = (...args) => {
      _cb(...args);
      watchHandle();
    };
  }
  let oldValue = isMultiSource ? new Array(source.length).fill(INITIAL_WATCHER_VALUE) : INITIAL_WATCHER_VALUE;
  const job = (immediateFirstRun) => {
    if (!(effect2.flags & 1) || !effect2.dirty && !immediateFirstRun) {
      return;
    }
    if (cb) {
      const newValue = effect2.run();
      if (deep || forceTrigger || (isMultiSource ? newValue.some((v2, i2) => hasChanged(v2, oldValue[i2])) : hasChanged(newValue, oldValue))) {
        if (cleanup) {
          cleanup();
        }
        const currentWatcher = activeWatcher;
        activeWatcher = effect2;
        try {
          const args = [
            newValue,
            // pass undefined as the old value when it's changed for the first time
            oldValue === INITIAL_WATCHER_VALUE ? void 0 : isMultiSource && oldValue[0] === INITIAL_WATCHER_VALUE ? [] : oldValue,
            boundCleanup
          ];
          call2 ? call2(cb, 3, args) : (
            // @ts-expect-error
            cb(...args)
          );
          oldValue = newValue;
        } finally {
          activeWatcher = currentWatcher;
        }
      }
    } else {
      effect2.run();
    }
  };
  if (augmentJob) {
    augmentJob(job);
  }
  effect2 = new ReactiveEffect(getter);
  effect2.scheduler = scheduler ? () => scheduler(job, false) : job;
  boundCleanup = (fn2) => onWatcherCleanup(fn2, false, effect2);
  cleanup = effect2.onStop = () => {
    const cleanups = cleanupMap.get(effect2);
    if (cleanups) {
      if (call2) {
        call2(cleanups, 4);
      } else {
        for (const cleanup2 of cleanups) cleanup2();
      }
      cleanupMap.delete(effect2);
    }
  };
  if (cb) {
    if (immediate) {
      job(true);
    } else {
      oldValue = effect2.run();
    }
  } else if (scheduler) {
    scheduler(job.bind(null, true), true);
  } else {
    effect2.run();
  }
  watchHandle.pause = effect2.pause.bind(effect2);
  watchHandle.resume = effect2.resume.bind(effect2);
  watchHandle.stop = watchHandle;
  return watchHandle;
}
function traverse(value2, depth = Infinity, seen2) {
  if (depth <= 0 || !isObject$l(value2) || value2["__v_skip"]) {
    return value2;
  }
  seen2 = seen2 || /* @__PURE__ */ new Set();
  if (seen2.has(value2)) {
    return value2;
  }
  seen2.add(value2);
  depth--;
  if (isRef(value2)) {
    traverse(value2.value, depth, seen2);
  } else if (isArray$g(value2)) {
    for (let i2 = 0; i2 < value2.length; i2++) {
      traverse(value2[i2], depth, seen2);
    }
  } else if (isSet(value2) || isMap(value2)) {
    value2.forEach((v2) => {
      traverse(v2, depth, seen2);
    });
  } else if (isPlainObject(value2)) {
    for (const key2 in value2) {
      traverse(value2[key2], depth, seen2);
    }
    for (const key2 of Object.getOwnPropertySymbols(value2)) {
      if (Object.prototype.propertyIsEnumerable.call(value2, key2)) {
        traverse(value2[key2], depth, seen2);
      }
    }
  }
  return value2;
}
/**
* @vue/runtime-core v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
const stack$1 = [];
function pushWarningContext(vnode) {
  stack$1.push(vnode);
}
function popWarningContext() {
  stack$1.pop();
}
let isWarning = false;
function warn$1(msg, ...args) {
  if (isWarning) return;
  isWarning = true;
  pauseTracking();
  const instance = stack$1.length ? stack$1[stack$1.length - 1].component : null;
  const appWarnHandler = instance && instance.appContext.config.warnHandler;
  const trace = getComponentTrace();
  if (appWarnHandler) {
    callWithErrorHandling(
      appWarnHandler,
      instance,
      11,
      [
        // eslint-disable-next-line no-restricted-syntax
        msg + args.map((a2) => {
          var _a, _b;
          return (_b = (_a = a2.toString) == null ? void 0 : _a.call(a2)) != null ? _b : JSON.stringify(a2);
        }).join(""),
        instance && instance.proxy,
        trace.map(
          ({ vnode }) => `at <${formatComponentName(instance, vnode.type)}>`
        ).join("\n"),
        trace
      ]
    );
  } else {
    const warnArgs = [`[Vue warn]: ${msg}`, ...args];
    if (trace.length && // avoid spamming console during tests
    true) {
      warnArgs.push(`
`, ...formatTrace(trace));
    }
    console.warn(...warnArgs);
  }
  resetTracking();
  isWarning = false;
}
function getComponentTrace() {
  let currentVNode = stack$1[stack$1.length - 1];
  if (!currentVNode) {
    return [];
  }
  const normalizedStack = [];
  while (currentVNode) {
    const last = normalizedStack[0];
    if (last && last.vnode === currentVNode) {
      last.recurseCount++;
    } else {
      normalizedStack.push({
        vnode: currentVNode,
        recurseCount: 0
      });
    }
    const parentInstance = currentVNode.component && currentVNode.component.parent;
    currentVNode = parentInstance && parentInstance.vnode;
  }
  return normalizedStack;
}
function formatTrace(trace) {
  const logs = [];
  trace.forEach((entry, i2) => {
    logs.push(...i2 === 0 ? [] : [`
`], ...formatTraceEntry(entry));
  });
  return logs;
}
function formatTraceEntry({ vnode, recurseCount }) {
  const postfix2 = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;
  const isRoot = vnode.component ? vnode.component.parent == null : false;
  const open = ` at <${formatComponentName(
    vnode.component,
    vnode.type,
    isRoot
  )}`;
  const close = `>` + postfix2;
  return vnode.props ? [open, ...formatProps(vnode.props), close] : [open + close];
}
function formatProps(props) {
  const res = [];
  const keys6 = Object.keys(props);
  keys6.slice(0, 3).forEach((key2) => {
    res.push(...formatProp(key2, props[key2]));
  });
  if (keys6.length > 3) {
    res.push(` ...`);
  }
  return res;
}
function formatProp(key2, value2, raw) {
  if (isString$1(value2)) {
    value2 = JSON.stringify(value2);
    return raw ? value2 : [`${key2}=${value2}`];
  } else if (typeof value2 === "number" || typeof value2 === "boolean" || value2 == null) {
    return raw ? value2 : [`${key2}=${value2}`];
  } else if (isRef(value2)) {
    value2 = formatProp(key2, toRaw(value2.value), true);
    return raw ? value2 : [`${key2}=Ref<`, value2, `>`];
  } else if (isFunction(value2)) {
    return [`${key2}=fn${value2.name ? `<${value2.name}>` : ``}`];
  } else {
    value2 = toRaw(value2);
    return raw ? value2 : [`${key2}=`, value2];
  }
}
function assertNumber(val, type) {
  return;
}
const ErrorCodes = {
  "SETUP_FUNCTION": 0,
  "0": "SETUP_FUNCTION",
  "RENDER_FUNCTION": 1,
  "1": "RENDER_FUNCTION",
  "NATIVE_EVENT_HANDLER": 5,
  "5": "NATIVE_EVENT_HANDLER",
  "COMPONENT_EVENT_HANDLER": 6,
  "6": "COMPONENT_EVENT_HANDLER",
  "VNODE_HOOK": 7,
  "7": "VNODE_HOOK",
  "DIRECTIVE_HOOK": 8,
  "8": "DIRECTIVE_HOOK",
  "TRANSITION_HOOK": 9,
  "9": "TRANSITION_HOOK",
  "APP_ERROR_HANDLER": 10,
  "10": "APP_ERROR_HANDLER",
  "APP_WARN_HANDLER": 11,
  "11": "APP_WARN_HANDLER",
  "FUNCTION_REF": 12,
  "12": "FUNCTION_REF",
  "ASYNC_COMPONENT_LOADER": 13,
  "13": "ASYNC_COMPONENT_LOADER",
  "SCHEDULER": 14,
  "14": "SCHEDULER",
  "COMPONENT_UPDATE": 15,
  "15": "COMPONENT_UPDATE",
  "APP_UNMOUNT_CLEANUP": 16,
  "16": "APP_UNMOUNT_CLEANUP"
};
const ErrorTypeStrings$1 = {
  ["sp"]: "serverPrefetch hook",
  ["bc"]: "beforeCreate hook",
  ["c"]: "created hook",
  ["bm"]: "beforeMount hook",
  ["m"]: "mounted hook",
  ["bu"]: "beforeUpdate hook",
  ["u"]: "updated",
  ["bum"]: "beforeUnmount hook",
  ["um"]: "unmounted hook",
  ["a"]: "activated hook",
  ["da"]: "deactivated hook",
  ["ec"]: "errorCaptured hook",
  ["rtc"]: "renderTracked hook",
  ["rtg"]: "renderTriggered hook",
  [0]: "setup function",
  [1]: "render function",
  [2]: "watcher getter",
  [3]: "watcher callback",
  [4]: "watcher cleanup function",
  [5]: "native event handler",
  [6]: "component event handler",
  [7]: "vnode hook",
  [8]: "directive hook",
  [9]: "transition hook",
  [10]: "app errorHandler",
  [11]: "app warnHandler",
  [12]: "ref function",
  [13]: "async component loader",
  [14]: "scheduler flush",
  [15]: "component update",
  [16]: "app unmount cleanup function"
};
function callWithErrorHandling(fn2, instance, type, args) {
  try {
    return args ? fn2(...args) : fn2();
  } catch (err) {
    handleError(err, instance, type);
  }
}
function callWithAsyncErrorHandling(fn2, instance, type, args) {
  if (isFunction(fn2)) {
    const res = callWithErrorHandling(fn2, instance, type, args);
    if (res && isPromise(res)) {
      res.catch((err) => {
        handleError(err, instance, type);
      });
    }
    return res;
  }
  if (isArray$g(fn2)) {
    const values2 = [];
    for (let i2 = 0; i2 < fn2.length; i2++) {
      values2.push(callWithAsyncErrorHandling(fn2[i2], instance, type, args));
    }
    return values2;
  }
}
function handleError(err, instance, type, throwInDev = true) {
  const contextVNode = instance ? instance.vnode : null;
  const { errorHandler, throwUnhandledErrorInProduction } = instance && instance.appContext.config || EMPTY_OBJ;
  if (instance) {
    let cur = instance.parent;
    const exposedInstance = instance.proxy;
    const errorInfo = `https://vuejs.org/error-reference/#runtime-${type}`;
    while (cur) {
      const errorCapturedHooks = cur.ec;
      if (errorCapturedHooks) {
        for (let i2 = 0; i2 < errorCapturedHooks.length; i2++) {
          if (errorCapturedHooks[i2](err, exposedInstance, errorInfo) === false) {
            return;
          }
        }
      }
      cur = cur.parent;
    }
    if (errorHandler) {
      pauseTracking();
      callWithErrorHandling(errorHandler, null, 10, [
        err,
        exposedInstance,
        errorInfo
      ]);
      resetTracking();
      return;
    }
  }
  logError(err, type, contextVNode, throwInDev, throwUnhandledErrorInProduction);
}
function logError(err, type, contextVNode, throwInDev = true, throwInProd = false) {
  if (throwInProd) {
    throw err;
  } else {
    console.error(err);
  }
}
const queue$3 = [];
let flushIndex = -1;
const pendingPostFlushCbs = [];
let activePostFlushCbs = null;
let postFlushIndex = 0;
const resolvedPromise = /* @__PURE__ */ Promise.resolve();
let currentFlushPromise = null;
function nextTick(fn2) {
  const p2 = currentFlushPromise || resolvedPromise;
  return fn2 ? p2.then(this ? fn2.bind(this) : fn2) : p2;
}
function findInsertionIndex(id2) {
  let start2 = flushIndex + 1;
  let end2 = queue$3.length;
  while (start2 < end2) {
    const middle = start2 + end2 >>> 1;
    const middleJob = queue$3[middle];
    const middleJobId = getId(middleJob);
    if (middleJobId < id2 || middleJobId === id2 && middleJob.flags & 2) {
      start2 = middle + 1;
    } else {
      end2 = middle;
    }
  }
  return start2;
}
function queueJob(job) {
  if (!(job.flags & 1)) {
    const jobId = getId(job);
    const lastJob = queue$3[queue$3.length - 1];
    if (!lastJob || // fast path when the job id is larger than the tail
    !(job.flags & 2) && jobId >= getId(lastJob)) {
      queue$3.push(job);
    } else {
      queue$3.splice(findInsertionIndex(jobId), 0, job);
    }
    job.flags |= 1;
    queueFlush();
  }
}
function queueFlush() {
  if (!currentFlushPromise) {
    currentFlushPromise = resolvedPromise.then(flushJobs);
  }
}
function queuePostFlushCb(cb) {
  if (!isArray$g(cb)) {
    if (activePostFlushCbs && cb.id === -1) {
      activePostFlushCbs.splice(postFlushIndex + 1, 0, cb);
    } else if (!(cb.flags & 1)) {
      pendingPostFlushCbs.push(cb);
      cb.flags |= 1;
    }
  } else {
    pendingPostFlushCbs.push(...cb);
  }
  queueFlush();
}
function flushPreFlushCbs(instance, seen2, i2 = flushIndex + 1) {
  for (; i2 < queue$3.length; i2++) {
    const cb = queue$3[i2];
    if (cb && cb.flags & 2) {
      if (instance && cb.id !== instance.uid) {
        continue;
      }
      queue$3.splice(i2, 1);
      i2--;
      if (cb.flags & 4) {
        cb.flags &= ~1;
      }
      cb();
      if (!(cb.flags & 4)) {
        cb.flags &= ~1;
      }
    }
  }
}
function flushPostFlushCbs(seen2) {
  if (pendingPostFlushCbs.length) {
    const deduped = [...new Set(pendingPostFlushCbs)].sort(
      (a2, b2) => getId(a2) - getId(b2)
    );
    pendingPostFlushCbs.length = 0;
    if (activePostFlushCbs) {
      activePostFlushCbs.push(...deduped);
      return;
    }
    activePostFlushCbs = deduped;
    for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {
      const cb = activePostFlushCbs[postFlushIndex];
      if (cb.flags & 4) {
        cb.flags &= ~1;
      }
      if (!(cb.flags & 8)) cb();
      cb.flags &= ~1;
    }
    activePostFlushCbs = null;
    postFlushIndex = 0;
  }
}
const getId = (job) => job.id == null ? job.flags & 2 ? -1 : Infinity : job.id;
function flushJobs(seen2) {
  try {
    for (flushIndex = 0; flushIndex < queue$3.length; flushIndex++) {
      const job = queue$3[flushIndex];
      if (job && !(job.flags & 8)) {
        if (false) ;
        if (job.flags & 4) {
          job.flags &= ~1;
        }
        callWithErrorHandling(
          job,
          job.i,
          job.i ? 15 : 14
        );
        if (!(job.flags & 4)) {
          job.flags &= ~1;
        }
      }
    }
  } finally {
    for (; flushIndex < queue$3.length; flushIndex++) {
      const job = queue$3[flushIndex];
      if (job) {
        job.flags &= ~1;
      }
    }
    flushIndex = -1;
    queue$3.length = 0;
    flushPostFlushCbs();
    currentFlushPromise = null;
    if (queue$3.length || pendingPostFlushCbs.length) {
      flushJobs();
    }
  }
}
let devtools$1;
let buffer$1 = [];
function setDevtoolsHook$1(hook, target) {
  var _a, _b;
  devtools$1 = hook;
  if (devtools$1) {
    devtools$1.enabled = true;
    buffer$1.forEach(({ event, args }) => devtools$1.emit(event, ...args));
    buffer$1 = [];
  } else if (
    // handle late devtools injection - only do this if we are in an actual
    // browser environment to avoid the timer handle stalling test runner exit
    // (#4815)
    typeof window !== "undefined" && // some envs mock window but not fully
    window.HTMLElement && // also exclude jsdom
    // eslint-disable-next-line no-restricted-syntax
    !((_b = (_a = window.navigator) == null ? void 0 : _a.userAgent) == null ? void 0 : _b.includes("jsdom"))
  ) {
    const replay = target.__VUE_DEVTOOLS_HOOK_REPLAY__ = target.__VUE_DEVTOOLS_HOOK_REPLAY__ || [];
    replay.push((newHook) => {
      setDevtoolsHook$1(newHook, target);
    });
    setTimeout(() => {
      if (!devtools$1) {
        target.__VUE_DEVTOOLS_HOOK_REPLAY__ = null;
        buffer$1 = [];
      }
    }, 3e3);
  } else {
    buffer$1 = [];
  }
}
let currentRenderingInstance = null;
let currentScopeId = null;
function setCurrentRenderingInstance(instance) {
  const prev = currentRenderingInstance;
  currentRenderingInstance = instance;
  currentScopeId = instance && instance.type.__scopeId || null;
  return prev;
}
function pushScopeId(id2) {
  currentScopeId = id2;
}
function popScopeId() {
  currentScopeId = null;
}
const withScopeId = (_id) => withCtx;
function withCtx(fn2, ctx = currentRenderingInstance, isNonScopedSlot) {
  if (!ctx) return fn2;
  if (fn2._n) {
    return fn2;
  }
  const renderFnWithContext = (...args) => {
    if (renderFnWithContext._d) {
      setBlockTracking(-1);
    }
    const prevInstance = setCurrentRenderingInstance(ctx);
    let res;
    try {
      res = fn2(...args);
    } finally {
      setCurrentRenderingInstance(prevInstance);
      if (renderFnWithContext._d) {
        setBlockTracking(1);
      }
    }
    return res;
  };
  renderFnWithContext._n = true;
  renderFnWithContext._c = true;
  renderFnWithContext._d = true;
  return renderFnWithContext;
}
function withDirectives(vnode, directives) {
  if (currentRenderingInstance === null) {
    return vnode;
  }
  const instance = getComponentPublicInstance(currentRenderingInstance);
  const bindings = vnode.dirs || (vnode.dirs = []);
  for (let i2 = 0; i2 < directives.length; i2++) {
    let [dir, value2, arg, modifiers = EMPTY_OBJ] = directives[i2];
    if (dir) {
      if (isFunction(dir)) {
        dir = {
          mounted: dir,
          updated: dir
        };
      }
      if (dir.deep) {
        traverse(value2);
      }
      bindings.push({
        dir,
        instance,
        value: value2,
        oldValue: void 0,
        arg,
        modifiers
      });
    }
  }
  return vnode;
}
function invokeDirectiveHook(vnode, prevVNode, instance, name) {
  const bindings = vnode.dirs;
  const oldBindings = prevVNode && prevVNode.dirs;
  for (let i2 = 0; i2 < bindings.length; i2++) {
    const binding = bindings[i2];
    if (oldBindings) {
      binding.oldValue = oldBindings[i2].value;
    }
    let hook = binding.dir[name];
    if (hook) {
      pauseTracking();
      callWithAsyncErrorHandling(hook, instance, 8, [
        vnode.el,
        binding,
        vnode,
        prevVNode
      ]);
      resetTracking();
    }
  }
}
const TeleportEndKey = Symbol("_vte");
const isTeleport = (type) => type.__isTeleport;
const isTeleportDisabled = (props) => props && (props.disabled || props.disabled === "");
const isTeleportDeferred = (props) => props && (props.defer || props.defer === "");
const isTargetSVG = (target) => typeof SVGElement !== "undefined" && target instanceof SVGElement;
const isTargetMathML = (target) => typeof MathMLElement === "function" && target instanceof MathMLElement;
const resolveTarget = (props, select) => {
  const targetSelector = props && props.to;
  if (isString$1(targetSelector)) {
    if (!select) {
      return null;
    } else {
      const target = select(targetSelector);
      return target;
    }
  } else {
    return targetSelector;
  }
};
const TeleportImpl = {
  name: "Teleport",
  __isTeleport: true,
  process(n1, n2, container, anchor2, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, internals) {
    const {
      mc: mountChildren,
      pc: patchChildren,
      pbc: patchBlockChildren,
      o: { insert, querySelector, createText, createComment }
    } = internals;
    const disabled = isTeleportDisabled(n2.props);
    let { shapeFlag, children: children2, dynamicChildren } = n2;
    if (n1 == null) {
      const placeholder = n2.el = createText("");
      const mainAnchor = n2.anchor = createText("");
      insert(placeholder, container, anchor2);
      insert(mainAnchor, container, anchor2);
      const mount = (container2, anchor22) => {
        if (shapeFlag & 16) {
          if (parentComponent && parentComponent.isCE) {
            parentComponent.ce._teleportTarget = container2;
          }
          mountChildren(
            children2,
            container2,
            anchor22,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        }
      };
      const mountToTarget = () => {
        const target = n2.target = resolveTarget(n2.props, querySelector);
        const targetAnchor = prepareAnchor(target, n2, createText, insert);
        if (target) {
          if (namespace !== "svg" && isTargetSVG(target)) {
            namespace = "svg";
          } else if (namespace !== "mathml" && isTargetMathML(target)) {
            namespace = "mathml";
          }
          if (!disabled) {
            mount(target, targetAnchor);
            updateCssVars(n2, false);
          }
        }
      };
      if (disabled) {
        mount(container, mainAnchor);
        updateCssVars(n2, true);
      }
      if (isTeleportDeferred(n2.props)) {
        queuePostRenderEffect(() => {
          mountToTarget();
          n2.el.__isMounted = true;
        }, parentSuspense);
      } else {
        mountToTarget();
      }
    } else {
      if (isTeleportDeferred(n2.props) && !n1.el.__isMounted) {
        queuePostRenderEffect(() => {
          TeleportImpl.process(
            n1,
            n2,
            container,
            anchor2,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized,
            internals
          );
          delete n1.el.__isMounted;
        }, parentSuspense);
        return;
      }
      n2.el = n1.el;
      n2.targetStart = n1.targetStart;
      const mainAnchor = n2.anchor = n1.anchor;
      const target = n2.target = n1.target;
      const targetAnchor = n2.targetAnchor = n1.targetAnchor;
      const wasDisabled = isTeleportDisabled(n1.props);
      const currentContainer = wasDisabled ? container : target;
      const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;
      if (namespace === "svg" || isTargetSVG(target)) {
        namespace = "svg";
      } else if (namespace === "mathml" || isTargetMathML(target)) {
        namespace = "mathml";
      }
      if (dynamicChildren) {
        patchBlockChildren(
          n1.dynamicChildren,
          dynamicChildren,
          currentContainer,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds
        );
        traverseStaticChildren(n1, n2, true);
      } else if (!optimized) {
        patchChildren(
          n1,
          n2,
          currentContainer,
          currentAnchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          false
        );
      }
      if (disabled) {
        if (!wasDisabled) {
          moveTeleport(
            n2,
            container,
            mainAnchor,
            internals,
            1
          );
        } else {
          if (n2.props && n1.props && n2.props.to !== n1.props.to) {
            n2.props.to = n1.props.to;
          }
        }
      } else {
        if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {
          const nextTarget = n2.target = resolveTarget(
            n2.props,
            querySelector
          );
          if (nextTarget) {
            moveTeleport(
              n2,
              nextTarget,
              null,
              internals,
              0
            );
          }
        } else if (wasDisabled) {
          moveTeleport(
            n2,
            target,
            targetAnchor,
            internals,
            1
          );
        }
      }
      updateCssVars(n2, disabled);
    }
  },
  remove(vnode, parentComponent, parentSuspense, { um: unmount, o: { remove: hostRemove } }, doRemove) {
    const {
      shapeFlag,
      children: children2,
      anchor: anchor2,
      targetStart,
      targetAnchor,
      target,
      props
    } = vnode;
    if (target) {
      hostRemove(targetStart);
      hostRemove(targetAnchor);
    }
    doRemove && hostRemove(anchor2);
    if (shapeFlag & 16) {
      const shouldRemove = doRemove || !isTeleportDisabled(props);
      for (let i2 = 0; i2 < children2.length; i2++) {
        const child2 = children2[i2];
        unmount(
          child2,
          parentComponent,
          parentSuspense,
          shouldRemove,
          !!child2.dynamicChildren
        );
      }
    }
  },
  move: moveTeleport,
  hydrate: hydrateTeleport
};
function moveTeleport(vnode, container, parentAnchor, { o: { insert }, m: move }, moveType = 2) {
  if (moveType === 0) {
    insert(vnode.targetAnchor, container, parentAnchor);
  }
  const { el, anchor: anchor2, shapeFlag, children: children2, props } = vnode;
  const isReorder = moveType === 2;
  if (isReorder) {
    insert(el, container, parentAnchor);
  }
  if (!isReorder || isTeleportDisabled(props)) {
    if (shapeFlag & 16) {
      for (let i2 = 0; i2 < children2.length; i2++) {
        move(
          children2[i2],
          container,
          parentAnchor,
          2
        );
      }
    }
  }
  if (isReorder) {
    insert(anchor2, container, parentAnchor);
  }
}
function hydrateTeleport(node2, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, {
  o: { nextSibling, parentNode, querySelector, insert, createText }
}, hydrateChildren) {
  const target = vnode.target = resolveTarget(
    vnode.props,
    querySelector
  );
  if (target) {
    const disabled = isTeleportDisabled(vnode.props);
    const targetNode = target._lpa || target.firstChild;
    if (vnode.shapeFlag & 16) {
      if (disabled) {
        vnode.anchor = hydrateChildren(
          nextSibling(node2),
          vnode,
          parentNode(node2),
          parentComponent,
          parentSuspense,
          slotScopeIds,
          optimized
        );
        vnode.targetStart = targetNode;
        vnode.targetAnchor = targetNode && nextSibling(targetNode);
      } else {
        vnode.anchor = nextSibling(node2);
        let targetAnchor = targetNode;
        while (targetAnchor) {
          if (targetAnchor && targetAnchor.nodeType === 8) {
            if (targetAnchor.data === "teleport start anchor") {
              vnode.targetStart = targetAnchor;
            } else if (targetAnchor.data === "teleport anchor") {
              vnode.targetAnchor = targetAnchor;
              target._lpa = vnode.targetAnchor && nextSibling(vnode.targetAnchor);
              break;
            }
          }
          targetAnchor = nextSibling(targetAnchor);
        }
        if (!vnode.targetAnchor) {
          prepareAnchor(target, vnode, createText, insert);
        }
        hydrateChildren(
          targetNode && nextSibling(targetNode),
          vnode,
          target,
          parentComponent,
          parentSuspense,
          slotScopeIds,
          optimized
        );
      }
    }
    updateCssVars(vnode, disabled);
  }
  return vnode.anchor && nextSibling(vnode.anchor);
}
const Teleport = TeleportImpl;
function updateCssVars(vnode, isDisabled2) {
  const ctx = vnode.ctx;
  if (ctx && ctx.ut) {
    let node2, anchor2;
    if (isDisabled2) {
      node2 = vnode.el;
      anchor2 = vnode.anchor;
    } else {
      node2 = vnode.targetStart;
      anchor2 = vnode.targetAnchor;
    }
    while (node2 && node2 !== anchor2) {
      if (node2.nodeType === 1) node2.setAttribute("data-v-owner", ctx.uid);
      node2 = node2.nextSibling;
    }
    ctx.ut();
  }
}
function prepareAnchor(target, vnode, createText, insert) {
  const targetStart = vnode.targetStart = createText("");
  const targetAnchor = vnode.targetAnchor = createText("");
  targetStart[TeleportEndKey] = targetAnchor;
  if (target) {
    insert(targetStart, target);
    insert(targetAnchor, target);
  }
  return targetAnchor;
}
const leaveCbKey = Symbol("_leaveCb");
const enterCbKey$1 = Symbol("_enterCb");
function useTransitionState() {
  const state = {
    isMounted: false,
    isLeaving: false,
    isUnmounting: false,
    leavingVNodes: /* @__PURE__ */ new Map()
  };
  onMounted(() => {
    state.isMounted = true;
  });
  onBeforeUnmount(() => {
    state.isUnmounting = true;
  });
  return state;
}
const TransitionHookValidator = [Function, Array];
const BaseTransitionPropsValidators = {
  mode: String,
  appear: Boolean,
  persisted: Boolean,
  // enter
  onBeforeEnter: TransitionHookValidator,
  onEnter: TransitionHookValidator,
  onAfterEnter: TransitionHookValidator,
  onEnterCancelled: TransitionHookValidator,
  // leave
  onBeforeLeave: TransitionHookValidator,
  onLeave: TransitionHookValidator,
  onAfterLeave: TransitionHookValidator,
  onLeaveCancelled: TransitionHookValidator,
  // appear
  onBeforeAppear: TransitionHookValidator,
  onAppear: TransitionHookValidator,
  onAfterAppear: TransitionHookValidator,
  onAppearCancelled: TransitionHookValidator
};
const recursiveGetSubtree = (instance) => {
  const subTree = instance.subTree;
  return subTree.component ? recursiveGetSubtree(subTree.component) : subTree;
};
const BaseTransitionImpl = {
  name: `BaseTransition`,
  props: BaseTransitionPropsValidators,
  setup(props, { slots }) {
    const instance = getCurrentInstance();
    const state = useTransitionState();
    return () => {
      const children2 = slots.default && getTransitionRawChildren(slots.default(), true);
      if (!children2 || !children2.length) {
        return;
      }
      const child2 = findNonCommentChild(children2);
      const rawProps = toRaw(props);
      const { mode } = rawProps;
      if (state.isLeaving) {
        return emptyPlaceholder(child2);
      }
      const innerChild = getInnerChild$1(child2);
      if (!innerChild) {
        return emptyPlaceholder(child2);
      }
      let enterHooks = resolveTransitionHooks(
        innerChild,
        rawProps,
        state,
        instance,
        // #11061, ensure enterHooks is fresh after clone
        (hooks) => enterHooks = hooks
      );
      if (innerChild.type !== Comment) {
        setTransitionHooks(innerChild, enterHooks);
      }
      let oldInnerChild = instance.subTree && getInnerChild$1(instance.subTree);
      if (oldInnerChild && oldInnerChild.type !== Comment && !isSameVNodeType(innerChild, oldInnerChild) && recursiveGetSubtree(instance).type !== Comment) {
        let leavingHooks = resolveTransitionHooks(
          oldInnerChild,
          rawProps,
          state,
          instance
        );
        setTransitionHooks(oldInnerChild, leavingHooks);
        if (mode === "out-in" && innerChild.type !== Comment) {
          state.isLeaving = true;
          leavingHooks.afterLeave = () => {
            state.isLeaving = false;
            if (!(instance.job.flags & 8)) {
              instance.update();
            }
            delete leavingHooks.afterLeave;
            oldInnerChild = void 0;
          };
          return emptyPlaceholder(child2);
        } else if (mode === "in-out" && innerChild.type !== Comment) {
          leavingHooks.delayLeave = (el, earlyRemove, delayedLeave) => {
            const leavingVNodesCache = getLeavingNodesForType(
              state,
              oldInnerChild
            );
            leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
            el[leaveCbKey] = () => {
              earlyRemove();
              el[leaveCbKey] = void 0;
              delete enterHooks.delayedLeave;
              oldInnerChild = void 0;
            };
            enterHooks.delayedLeave = () => {
              delayedLeave();
              delete enterHooks.delayedLeave;
              oldInnerChild = void 0;
            };
          };
        } else {
          oldInnerChild = void 0;
        }
      } else if (oldInnerChild) {
        oldInnerChild = void 0;
      }
      return child2;
    };
  }
};
function findNonCommentChild(children2) {
  let child2 = children2[0];
  if (children2.length > 1) {
    for (const c2 of children2) {
      if (c2.type !== Comment) {
        child2 = c2;
        break;
      }
    }
  }
  return child2;
}
const BaseTransition = BaseTransitionImpl;
function getLeavingNodesForType(state, vnode) {
  const { leavingVNodes } = state;
  let leavingVNodesCache = leavingVNodes.get(vnode.type);
  if (!leavingVNodesCache) {
    leavingVNodesCache = /* @__PURE__ */ Object.create(null);
    leavingVNodes.set(vnode.type, leavingVNodesCache);
  }
  return leavingVNodesCache;
}
function resolveTransitionHooks(vnode, props, state, instance, postClone) {
  const {
    appear,
    mode,
    persisted = false,
    onBeforeEnter,
    onEnter,
    onAfterEnter,
    onEnterCancelled,
    onBeforeLeave,
    onLeave,
    onAfterLeave,
    onLeaveCancelled,
    onBeforeAppear,
    onAppear,
    onAfterAppear,
    onAppearCancelled
  } = props;
  const key2 = String(vnode.key);
  const leavingVNodesCache = getLeavingNodesForType(state, vnode);
  const callHook2 = (hook, args) => {
    hook && callWithAsyncErrorHandling(
      hook,
      instance,
      9,
      args
    );
  };
  const callAsyncHook = (hook, args) => {
    const done = args[1];
    callHook2(hook, args);
    if (isArray$g(hook)) {
      if (hook.every((hook2) => hook2.length <= 1)) done();
    } else if (hook.length <= 1) {
      done();
    }
  };
  const hooks = {
    mode,
    persisted,
    beforeEnter(el) {
      let hook = onBeforeEnter;
      if (!state.isMounted) {
        if (appear) {
          hook = onBeforeAppear || onBeforeEnter;
        } else {
          return;
        }
      }
      if (el[leaveCbKey]) {
        el[leaveCbKey](
          true
          /* cancelled */
        );
      }
      const leavingVNode = leavingVNodesCache[key2];
      if (leavingVNode && isSameVNodeType(vnode, leavingVNode) && leavingVNode.el[leaveCbKey]) {
        leavingVNode.el[leaveCbKey]();
      }
      callHook2(hook, [el]);
    },
    enter(el) {
      let hook = onEnter;
      let afterHook = onAfterEnter;
      let cancelHook = onEnterCancelled;
      if (!state.isMounted) {
        if (appear) {
          hook = onAppear || onEnter;
          afterHook = onAfterAppear || onAfterEnter;
          cancelHook = onAppearCancelled || onEnterCancelled;
        } else {
          return;
        }
      }
      let called2 = false;
      const done = el[enterCbKey$1] = (cancelled) => {
        if (called2) return;
        called2 = true;
        if (cancelled) {
          callHook2(cancelHook, [el]);
        } else {
          callHook2(afterHook, [el]);
        }
        if (hooks.delayedLeave) {
          hooks.delayedLeave();
        }
        el[enterCbKey$1] = void 0;
      };
      if (hook) {
        callAsyncHook(hook, [el, done]);
      } else {
        done();
      }
    },
    leave(el, remove2) {
      const key22 = String(vnode.key);
      if (el[enterCbKey$1]) {
        el[enterCbKey$1](
          true
          /* cancelled */
        );
      }
      if (state.isUnmounting) {
        return remove2();
      }
      callHook2(onBeforeLeave, [el]);
      let called2 = false;
      const done = el[leaveCbKey] = (cancelled) => {
        if (called2) return;
        called2 = true;
        remove2();
        if (cancelled) {
          callHook2(onLeaveCancelled, [el]);
        } else {
          callHook2(onAfterLeave, [el]);
        }
        el[leaveCbKey] = void 0;
        if (leavingVNodesCache[key22] === vnode) {
          delete leavingVNodesCache[key22];
        }
      };
      leavingVNodesCache[key22] = vnode;
      if (onLeave) {
        callAsyncHook(onLeave, [el, done]);
      } else {
        done();
      }
    },
    clone(vnode2) {
      const hooks2 = resolveTransitionHooks(
        vnode2,
        props,
        state,
        instance,
        postClone
      );
      if (postClone) postClone(hooks2);
      return hooks2;
    }
  };
  return hooks;
}
function emptyPlaceholder(vnode) {
  if (isKeepAlive(vnode)) {
    vnode = cloneVNode(vnode);
    vnode.children = null;
    return vnode;
  }
}
function getInnerChild$1(vnode) {
  if (!isKeepAlive(vnode)) {
    if (isTeleport(vnode.type) && vnode.children) {
      return findNonCommentChild(vnode.children);
    }
    return vnode;
  }
  const { shapeFlag, children: children2 } = vnode;
  if (children2) {
    if (shapeFlag & 16) {
      return children2[0];
    }
    if (shapeFlag & 32 && isFunction(children2.default)) {
      return children2.default();
    }
  }
}
function setTransitionHooks(vnode, hooks) {
  if (vnode.shapeFlag & 6 && vnode.component) {
    vnode.transition = hooks;
    setTransitionHooks(vnode.component.subTree, hooks);
  } else if (vnode.shapeFlag & 128) {
    vnode.ssContent.transition = hooks.clone(vnode.ssContent);
    vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
  } else {
    vnode.transition = hooks;
  }
}
function getTransitionRawChildren(children2, keepComment = false, parentKey) {
  let ret = [];
  let keyedFragmentCount = 0;
  for (let i2 = 0; i2 < children2.length; i2++) {
    let child2 = children2[i2];
    const key2 = parentKey == null ? child2.key : String(parentKey) + String(child2.key != null ? child2.key : i2);
    if (child2.type === Fragment) {
      if (child2.patchFlag & 128) keyedFragmentCount++;
      ret = ret.concat(
        getTransitionRawChildren(child2.children, keepComment, key2)
      );
    } else if (keepComment || child2.type !== Comment) {
      ret.push(key2 != null ? cloneVNode(child2, { key: key2 }) : child2);
    }
  }
  if (keyedFragmentCount > 1) {
    for (let i2 = 0; i2 < ret.length; i2++) {
      ret[i2].patchFlag = -2;
    }
  }
  return ret;
}
/*! #__NO_SIDE_EFFECTS__ */
// @__NO_SIDE_EFFECTS__
function defineComponent(options, extraOptions) {
  return isFunction(options) ? (
    // #8236: extend call and options.name access are considered side-effects
    // by Rollup, so we have to wrap it in a pure-annotated IIFE.
    /* @__PURE__ */ (() => extend$2({ name: options.name }, extraOptions, { setup: options }))()
  ) : options;
}
function useId() {
  const i2 = getCurrentInstance();
  if (i2) {
    return (i2.appContext.config.idPrefix || "v") + "-" + i2.ids[0] + i2.ids[1]++;
  }
  return "";
}
function markAsyncBoundary(instance) {
  instance.ids = [instance.ids[0] + instance.ids[2]++ + "-", 0, 0];
}
function useTemplateRef(key2) {
  const i2 = getCurrentInstance();
  const r2 = shallowRef(null);
  if (i2) {
    const refs = i2.refs === EMPTY_OBJ ? i2.refs = {} : i2.refs;
    {
      Object.defineProperty(refs, key2, {
        enumerable: true,
        get: () => r2.value,
        set: (val) => r2.value = val
      });
    }
  }
  const ret = r2;
  return ret;
}
function setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
  if (isArray$g(rawRef)) {
    rawRef.forEach(
      (r2, i2) => setRef(
        r2,
        oldRawRef && (isArray$g(oldRawRef) ? oldRawRef[i2] : oldRawRef),
        parentSuspense,
        vnode,
        isUnmount
      )
    );
    return;
  }
  if (isAsyncWrapper(vnode) && !isUnmount) {
    if (vnode.shapeFlag & 512 && vnode.type.__asyncResolved && vnode.component.subTree.component) {
      setRef(rawRef, oldRawRef, parentSuspense, vnode.component.subTree);
    }
    return;
  }
  const refValue = vnode.shapeFlag & 4 ? getComponentPublicInstance(vnode.component) : vnode.el;
  const value2 = isUnmount ? null : refValue;
  const { i: owner, r: ref3 } = rawRef;
  const oldRef = oldRawRef && oldRawRef.r;
  const refs = owner.refs === EMPTY_OBJ ? owner.refs = {} : owner.refs;
  const setupState = owner.setupState;
  const rawSetupState = toRaw(setupState);
  const canSetSetupRef = setupState === EMPTY_OBJ ? () => false : (key2) => {
    return hasOwn$l(rawSetupState, key2);
  };
  if (oldRef != null && oldRef !== ref3) {
    if (isString$1(oldRef)) {
      refs[oldRef] = null;
      if (canSetSetupRef(oldRef)) {
        setupState[oldRef] = null;
      }
    } else if (isRef(oldRef)) {
      oldRef.value = null;
    }
  }
  if (isFunction(ref3)) {
    callWithErrorHandling(ref3, owner, 12, [value2, refs]);
  } else {
    const _isString = isString$1(ref3);
    const _isRef = isRef(ref3);
    if (_isString || _isRef) {
      const doSet = () => {
        if (rawRef.f) {
          const existing = _isString ? canSetSetupRef(ref3) ? setupState[ref3] : refs[ref3] : ref3.value;
          if (isUnmount) {
            isArray$g(existing) && remove(existing, refValue);
          } else {
            if (!isArray$g(existing)) {
              if (_isString) {
                refs[ref3] = [refValue];
                if (canSetSetupRef(ref3)) {
                  setupState[ref3] = refs[ref3];
                }
              } else {
                ref3.value = [refValue];
                if (rawRef.k) refs[rawRef.k] = ref3.value;
              }
            } else if (!existing.includes(refValue)) {
              existing.push(refValue);
            }
          }
        } else if (_isString) {
          refs[ref3] = value2;
          if (canSetSetupRef(ref3)) {
            setupState[ref3] = value2;
          }
        } else if (_isRef) {
          ref3.value = value2;
          if (rawRef.k) refs[rawRef.k] = value2;
        } else ;
      };
      if (value2) {
        doSet.id = -1;
        queuePostRenderEffect(doSet, parentSuspense);
      } else {
        doSet();
      }
    }
  }
}
let hasLoggedMismatchError = false;
const logMismatchError = () => {
  if (hasLoggedMismatchError) {
    return;
  }
  console.error("Hydration completed but contains mismatches.");
  hasLoggedMismatchError = true;
};
const isSVGContainer = (container) => container.namespaceURI.includes("svg") && container.tagName !== "foreignObject";
const isMathMLContainer = (container) => container.namespaceURI.includes("MathML");
const getContainerType = (container) => {
  if (container.nodeType !== 1) return void 0;
  if (isSVGContainer(container)) return "svg";
  if (isMathMLContainer(container)) return "mathml";
  return void 0;
};
const isComment = (node2) => node2.nodeType === 8;
function createHydrationFunctions(rendererInternals) {
  const {
    mt: mountComponent,
    p: patch,
    o: {
      patchProp: patchProp2,
      createText,
      nextSibling,
      parentNode,
      remove: remove2,
      insert,
      createComment
    }
  } = rendererInternals;
  const hydrate2 = (vnode, container) => {
    if (!container.hasChildNodes()) {
      patch(null, vnode, container);
      flushPostFlushCbs();
      container._vnode = vnode;
      return;
    }
    hydrateNode(container.firstChild, vnode, null, null, null);
    flushPostFlushCbs();
    container._vnode = vnode;
  };
  const hydrateNode = (node2, vnode, parentComponent, parentSuspense, slotScopeIds, optimized = false) => {
    optimized = optimized || !!vnode.dynamicChildren;
    const isFragmentStart = isComment(node2) && node2.data === "[";
    const onMismatch = () => handleMismatch(
      node2,
      vnode,
      parentComponent,
      parentSuspense,
      slotScopeIds,
      isFragmentStart
    );
    const { type, ref: ref3, shapeFlag, patchFlag } = vnode;
    let domType = node2.nodeType;
    vnode.el = node2;
    if (patchFlag === -2) {
      optimized = false;
      vnode.dynamicChildren = null;
    }
    let nextNode = null;
    switch (type) {
      case Text$1:
        if (domType !== 3) {
          if (vnode.children === "") {
            insert(vnode.el = createText(""), parentNode(node2), node2);
            nextNode = node2;
          } else {
            nextNode = onMismatch();
          }
        } else {
          if (node2.data !== vnode.children) {
            logMismatchError();
            node2.data = vnode.children;
          }
          nextNode = nextSibling(node2);
        }
        break;
      case Comment:
        if (isTemplateNode2(node2)) {
          nextNode = nextSibling(node2);
          replaceNode(
            vnode.el = node2.content.firstChild,
            node2,
            parentComponent
          );
        } else if (domType !== 8 || isFragmentStart) {
          nextNode = onMismatch();
        } else {
          nextNode = nextSibling(node2);
        }
        break;
      case Static:
        if (isFragmentStart) {
          node2 = nextSibling(node2);
          domType = node2.nodeType;
        }
        if (domType === 1 || domType === 3) {
          nextNode = node2;
          const needToAdoptContent = !vnode.children.length;
          for (let i2 = 0; i2 < vnode.staticCount; i2++) {
            if (needToAdoptContent)
              vnode.children += nextNode.nodeType === 1 ? nextNode.outerHTML : nextNode.data;
            if (i2 === vnode.staticCount - 1) {
              vnode.anchor = nextNode;
            }
            nextNode = nextSibling(nextNode);
          }
          return isFragmentStart ? nextSibling(nextNode) : nextNode;
        } else {
          onMismatch();
        }
        break;
      case Fragment:
        if (!isFragmentStart) {
          nextNode = onMismatch();
        } else {
          nextNode = hydrateFragment(
            node2,
            vnode,
            parentComponent,
            parentSuspense,
            slotScopeIds,
            optimized
          );
        }
        break;
      default:
        if (shapeFlag & 1) {
          if ((domType !== 1 || vnode.type.toLowerCase() !== node2.tagName.toLowerCase()) && !isTemplateNode2(node2)) {
            nextNode = onMismatch();
          } else {
            nextNode = hydrateElement(
              node2,
              vnode,
              parentComponent,
              parentSuspense,
              slotScopeIds,
              optimized
            );
          }
        } else if (shapeFlag & 6) {
          vnode.slotScopeIds = slotScopeIds;
          const container = parentNode(node2);
          if (isFragmentStart) {
            nextNode = locateClosingAnchor(node2);
          } else if (isComment(node2) && node2.data === "teleport start") {
            nextNode = locateClosingAnchor(node2, node2.data, "teleport end");
          } else {
            nextNode = nextSibling(node2);
          }
          mountComponent(
            vnode,
            container,
            null,
            parentComponent,
            parentSuspense,
            getContainerType(container),
            optimized
          );
          if (isAsyncWrapper(vnode) && !vnode.type.__asyncResolved) {
            let subTree;
            if (isFragmentStart) {
              subTree = createVNode(Fragment);
              subTree.anchor = nextNode ? nextNode.previousSibling : container.lastChild;
            } else {
              subTree = node2.nodeType === 3 ? createTextVNode("") : createVNode("div");
            }
            subTree.el = node2;
            vnode.component.subTree = subTree;
          }
        } else if (shapeFlag & 64) {
          if (domType !== 8) {
            nextNode = onMismatch();
          } else {
            nextNode = vnode.type.hydrate(
              node2,
              vnode,
              parentComponent,
              parentSuspense,
              slotScopeIds,
              optimized,
              rendererInternals,
              hydrateChildren
            );
          }
        } else if (shapeFlag & 128) {
          nextNode = vnode.type.hydrate(
            node2,
            vnode,
            parentComponent,
            parentSuspense,
            getContainerType(parentNode(node2)),
            slotScopeIds,
            optimized,
            rendererInternals,
            hydrateNode
          );
        } else ;
    }
    if (ref3 != null) {
      setRef(ref3, null, parentSuspense, vnode);
    }
    return nextNode;
  };
  const hydrateElement = (el, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {
    optimized = optimized || !!vnode.dynamicChildren;
    const { type, props, patchFlag, shapeFlag, dirs, transition } = vnode;
    const forcePatch = type === "input" || type === "option";
    if (forcePatch || patchFlag !== -1) {
      if (dirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "created");
      }
      let needCallTransitionHooks = false;
      if (isTemplateNode2(el)) {
        needCallTransitionHooks = needTransition(
          null,
          // no need check parentSuspense in hydration
          transition
        ) && parentComponent && parentComponent.vnode.props && parentComponent.vnode.props.appear;
        const content = el.content.firstChild;
        if (needCallTransitionHooks) {
          transition.beforeEnter(content);
        }
        replaceNode(content, el, parentComponent);
        vnode.el = el = content;
      }
      if (shapeFlag & 16 && // skip if element has innerHTML / textContent
      !(props && (props.innerHTML || props.textContent))) {
        let next4 = hydrateChildren(
          el.firstChild,
          vnode,
          el,
          parentComponent,
          parentSuspense,
          slotScopeIds,
          optimized
        );
        while (next4) {
          if (!isMismatchAllowed(
            el,
            1
            /* CHILDREN */
          )) {
            logMismatchError();
          }
          const cur = next4;
          next4 = next4.nextSibling;
          remove2(cur);
        }
      } else if (shapeFlag & 8) {
        let clientText = vnode.children;
        if (clientText[0] === "\n" && (el.tagName === "PRE" || el.tagName === "TEXTAREA")) {
          clientText = clientText.slice(1);
        }
        if (el.textContent !== clientText) {
          if (!isMismatchAllowed(
            el,
            0
            /* TEXT */
          )) {
            logMismatchError();
          }
          el.textContent = vnode.children;
        }
      }
      if (props) {
        if (forcePatch || !optimized || patchFlag & (16 | 32)) {
          const isCustomElement = el.tagName.includes("-");
          for (const key2 in props) {
            if (forcePatch && (key2.endsWith("value") || key2 === "indeterminate") || isOn(key2) && !isReservedProp(key2) || // force hydrate v-bind with .prop modifiers
            key2[0] === "." || isCustomElement) {
              patchProp2(el, key2, null, props[key2], void 0, parentComponent);
            }
          }
        } else if (props.onClick) {
          patchProp2(
            el,
            "onClick",
            null,
            props.onClick,
            void 0,
            parentComponent
          );
        } else if (patchFlag & 4 && isReactive(props.style)) {
          for (const key2 in props.style) props.style[key2];
        }
      }
      let vnodeHooks;
      if (vnodeHooks = props && props.onVnodeBeforeMount) {
        invokeVNodeHook(vnodeHooks, parentComponent, vnode);
      }
      if (dirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
      }
      if ((vnodeHooks = props && props.onVnodeMounted) || dirs || needCallTransitionHooks) {
        queueEffectWithSuspense(() => {
          vnodeHooks && invokeVNodeHook(vnodeHooks, parentComponent, vnode);
          needCallTransitionHooks && transition.enter(el);
          dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
        }, parentSuspense);
      }
    }
    return el.nextSibling;
  };
  const hydrateChildren = (node2, parentVNode, container, parentComponent, parentSuspense, slotScopeIds, optimized) => {
    optimized = optimized || !!parentVNode.dynamicChildren;
    const children2 = parentVNode.children;
    const l2 = children2.length;
    for (let i2 = 0; i2 < l2; i2++) {
      const vnode = optimized ? children2[i2] : children2[i2] = normalizeVNode(children2[i2]);
      const isText = vnode.type === Text$1;
      if (node2) {
        if (isText && !optimized) {
          if (i2 + 1 < l2 && normalizeVNode(children2[i2 + 1]).type === Text$1) {
            insert(
              createText(
                node2.data.slice(vnode.children.length)
              ),
              container,
              nextSibling(node2)
            );
            node2.data = vnode.children;
          }
        }
        node2 = hydrateNode(
          node2,
          vnode,
          parentComponent,
          parentSuspense,
          slotScopeIds,
          optimized
        );
      } else if (isText && !vnode.children) {
        insert(vnode.el = createText(""), container);
      } else {
        if (!isMismatchAllowed(
          container,
          1
          /* CHILDREN */
        )) {
          logMismatchError();
        }
        patch(
          null,
          vnode,
          container,
          null,
          parentComponent,
          parentSuspense,
          getContainerType(container),
          slotScopeIds
        );
      }
    }
    return node2;
  };
  const hydrateFragment = (node2, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {
    const { slotScopeIds: fragmentSlotScopeIds } = vnode;
    if (fragmentSlotScopeIds) {
      slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
    }
    const container = parentNode(node2);
    const next4 = hydrateChildren(
      nextSibling(node2),
      vnode,
      container,
      parentComponent,
      parentSuspense,
      slotScopeIds,
      optimized
    );
    if (next4 && isComment(next4) && next4.data === "]") {
      return nextSibling(vnode.anchor = next4);
    } else {
      logMismatchError();
      insert(vnode.anchor = createComment(`]`), container, next4);
      return next4;
    }
  };
  const handleMismatch = (node2, vnode, parentComponent, parentSuspense, slotScopeIds, isFragment) => {
    if (!isMismatchAllowed(
      node2.parentElement,
      1
      /* CHILDREN */
    )) {
      logMismatchError();
    }
    vnode.el = null;
    if (isFragment) {
      const end2 = locateClosingAnchor(node2);
      while (true) {
        const next22 = nextSibling(node2);
        if (next22 && next22 !== end2) {
          remove2(next22);
        } else {
          break;
        }
      }
    }
    const next4 = nextSibling(node2);
    const container = parentNode(node2);
    remove2(node2);
    patch(
      null,
      vnode,
      container,
      next4,
      parentComponent,
      parentSuspense,
      getContainerType(container),
      slotScopeIds
    );
    if (parentComponent) {
      parentComponent.vnode.el = vnode.el;
      updateHOCHostEl(parentComponent, vnode.el);
    }
    return next4;
  };
  const locateClosingAnchor = (node2, open = "[", close = "]") => {
    let match2 = 0;
    while (node2) {
      node2 = nextSibling(node2);
      if (node2 && isComment(node2)) {
        if (node2.data === open) match2++;
        if (node2.data === close) {
          if (match2 === 0) {
            return nextSibling(node2);
          } else {
            match2--;
          }
        }
      }
    }
    return node2;
  };
  const replaceNode = (newNode, oldNode, parentComponent) => {
    const parentNode2 = oldNode.parentNode;
    if (parentNode2) {
      parentNode2.replaceChild(newNode, oldNode);
    }
    let parent2 = parentComponent;
    while (parent2) {
      if (parent2.vnode.el === oldNode) {
        parent2.vnode.el = parent2.subTree.el = newNode;
      }
      parent2 = parent2.parent;
    }
  };
  const isTemplateNode2 = (node2) => {
    return node2.nodeType === 1 && node2.tagName === "TEMPLATE";
  };
  return [hydrate2, hydrateNode];
}
const allowMismatchAttr = "data-allow-mismatch";
const MismatchTypeString = {
  [
    0
    /* TEXT */
  ]: "text",
  [
    1
    /* CHILDREN */
  ]: "children",
  [
    2
    /* CLASS */
  ]: "class",
  [
    3
    /* STYLE */
  ]: "style",
  [
    4
    /* ATTRIBUTE */
  ]: "attribute"
};
function isMismatchAllowed(el, allowedType) {
  if (allowedType === 0 || allowedType === 1) {
    while (el && !el.hasAttribute(allowMismatchAttr)) {
      el = el.parentElement;
    }
  }
  const allowedAttr = el && el.getAttribute(allowMismatchAttr);
  if (allowedAttr == null) {
    return false;
  } else if (allowedAttr === "") {
    return true;
  } else {
    const list2 = allowedAttr.split(",");
    if (allowedType === 0 && list2.includes("children")) {
      return true;
    }
    return allowedAttr.split(",").includes(MismatchTypeString[allowedType]);
  }
}
const requestIdleCallback = getGlobalThis().requestIdleCallback || ((cb) => setTimeout(cb, 1));
const cancelIdleCallback = getGlobalThis().cancelIdleCallback || ((id2) => clearTimeout(id2));
const hydrateOnIdle = (timeout = 1e4) => (hydrate2) => {
  const id2 = requestIdleCallback(hydrate2, { timeout });
  return () => cancelIdleCallback(id2);
};
function elementIsVisibleInViewport(el) {
  const { top: top2, left: left2, bottom: bottom2, right: right2 } = el.getBoundingClientRect();
  const { innerHeight, innerWidth } = window;
  return (top2 > 0 && top2 < innerHeight || bottom2 > 0 && bottom2 < innerHeight) && (left2 > 0 && left2 < innerWidth || right2 > 0 && right2 < innerWidth);
}
const hydrateOnVisible = (opts) => (hydrate2, forEach5) => {
  const ob = new IntersectionObserver((entries2) => {
    for (const e2 of entries2) {
      if (!e2.isIntersecting) continue;
      ob.disconnect();
      hydrate2();
      break;
    }
  }, opts);
  forEach5((el) => {
    if (!(el instanceof Element)) return;
    if (elementIsVisibleInViewport(el)) {
      hydrate2();
      ob.disconnect();
      return false;
    }
    ob.observe(el);
  });
  return () => ob.disconnect();
};
const hydrateOnMediaQuery = (query) => (hydrate2) => {
  if (query) {
    const mql = matchMedia(query);
    if (mql.matches) {
      hydrate2();
    } else {
      mql.addEventListener("change", hydrate2, { once: true });
      return () => mql.removeEventListener("change", hydrate2);
    }
  }
};
const hydrateOnInteraction = (interactions = []) => (hydrate2, forEach5) => {
  if (isString$1(interactions)) interactions = [interactions];
  let hasHydrated = false;
  const doHydrate = (e2) => {
    if (!hasHydrated) {
      hasHydrated = true;
      teardown();
      hydrate2();
      e2.target.dispatchEvent(new e2.constructor(e2.type, e2));
    }
  };
  const teardown = () => {
    forEach5((el) => {
      for (const i2 of interactions) {
        el.removeEventListener(i2, doHydrate);
      }
    });
  };
  forEach5((el) => {
    for (const i2 of interactions) {
      el.addEventListener(i2, doHydrate, { once: true });
    }
  });
  return teardown;
};
function forEachElement(node2, cb) {
  if (isComment(node2) && node2.data === "[") {
    let depth = 1;
    let next4 = node2.nextSibling;
    while (next4) {
      if (next4.nodeType === 1) {
        const result = cb(next4);
        if (result === false) {
          break;
        }
      } else if (isComment(next4)) {
        if (next4.data === "]") {
          if (--depth === 0) break;
        } else if (next4.data === "[") {
          depth++;
        }
      }
      next4 = next4.nextSibling;
    }
  } else {
    cb(node2);
  }
}
const isAsyncWrapper = (i2) => !!i2.type.__asyncLoader;
/*! #__NO_SIDE_EFFECTS__ */
// @__NO_SIDE_EFFECTS__
function defineAsyncComponent(source) {
  if (isFunction(source)) {
    source = { loader: source };
  }
  const {
    loader,
    loadingComponent,
    errorComponent,
    delay = 200,
    hydrate: hydrateStrategy,
    timeout,
    // undefined = never times out
    suspensible = true,
    onError: userOnError
  } = source;
  let pendingRequest = null;
  let resolvedComp;
  let retries = 0;
  const retry = () => {
    retries++;
    pendingRequest = null;
    return load();
  };
  const load = () => {
    let thisRequest;
    return pendingRequest || (thisRequest = pendingRequest = loader().catch((err) => {
      err = err instanceof Error ? err : new Error(String(err));
      if (userOnError) {
        return new Promise((resolve22, reject2) => {
          const userRetry = () => resolve22(retry());
          const userFail = () => reject2(err);
          userOnError(err, userRetry, userFail, retries + 1);
        });
      } else {
        throw err;
      }
    }).then((comp) => {
      if (thisRequest !== pendingRequest && pendingRequest) {
        return pendingRequest;
      }
      if (comp && (comp.__esModule || comp[Symbol.toStringTag] === "Module")) {
        comp = comp.default;
      }
      resolvedComp = comp;
      return comp;
    }));
  };
  return /* @__PURE__ */ defineComponent({
    name: "AsyncComponentWrapper",
    __asyncLoader: load,
    __asyncHydrate(el, instance, hydrate2) {
      const doHydrate = hydrateStrategy ? () => {
        const teardown = hydrateStrategy(
          hydrate2,
          (cb) => forEachElement(el, cb)
        );
        if (teardown) {
          (instance.bum || (instance.bum = [])).push(teardown);
        }
      } : hydrate2;
      if (resolvedComp) {
        doHydrate();
      } else {
        load().then(() => !instance.isUnmounted && doHydrate());
      }
    },
    get __asyncResolved() {
      return resolvedComp;
    },
    setup() {
      const instance = currentInstance;
      markAsyncBoundary(instance);
      if (resolvedComp) {
        return () => createInnerComp(resolvedComp, instance);
      }
      const onError = (err) => {
        pendingRequest = null;
        handleError(
          err,
          instance,
          13,
          !errorComponent
        );
      };
      if (suspensible && instance.suspense || isInSSRComponentSetup) {
        return load().then((comp) => {
          return () => createInnerComp(comp, instance);
        }).catch((err) => {
          onError(err);
          return () => errorComponent ? createVNode(errorComponent, {
            error: err
          }) : null;
        });
      }
      const loaded = ref(false);
      const error = ref();
      const delayed = ref(!!delay);
      if (delay) {
        setTimeout(() => {
          delayed.value = false;
        }, delay);
      }
      if (timeout != null) {
        setTimeout(() => {
          if (!loaded.value && !error.value) {
            const err = new Error(
              `Async component timed out after ${timeout}ms.`
            );
            onError(err);
            error.value = err;
          }
        }, timeout);
      }
      load().then(() => {
        loaded.value = true;
        if (instance.parent && isKeepAlive(instance.parent.vnode)) {
          instance.parent.update();
        }
      }).catch((err) => {
        onError(err);
        error.value = err;
      });
      return () => {
        if (loaded.value && resolvedComp) {
          return createInnerComp(resolvedComp, instance);
        } else if (error.value && errorComponent) {
          return createVNode(errorComponent, {
            error: error.value
          });
        } else if (loadingComponent && !delayed.value) {
          return createVNode(loadingComponent);
        }
      };
    }
  });
}
function createInnerComp(comp, parent2) {
  const { ref: ref22, props, children: children2, ce } = parent2.vnode;
  const vnode = createVNode(comp, props, children2);
  vnode.ref = ref22;
  vnode.ce = ce;
  delete parent2.vnode.ce;
  return vnode;
}
const isKeepAlive = (vnode) => vnode.type.__isKeepAlive;
const KeepAliveImpl = {
  name: `KeepAlive`,
  // Marker for special handling inside the renderer. We are not using a ===
  // check directly on KeepAlive in the renderer, because importing it directly
  // would prevent it from being tree-shaken.
  __isKeepAlive: true,
  props: {
    include: [String, RegExp, Array],
    exclude: [String, RegExp, Array],
    max: [String, Number]
  },
  setup(props, { slots }) {
    const instance = getCurrentInstance();
    const sharedContext = instance.ctx;
    if (!sharedContext.renderer) {
      return () => {
        const children2 = slots.default && slots.default();
        return children2 && children2.length === 1 ? children2[0] : children2;
      };
    }
    const cache = /* @__PURE__ */ new Map();
    const keys6 = /* @__PURE__ */ new Set();
    let current = null;
    const parentSuspense = instance.suspense;
    const {
      renderer: {
        p: patch,
        m: move,
        um: _unmount,
        o: { createElement: createElement2 }
      }
    } = sharedContext;
    const storageContainer = createElement2("div");
    sharedContext.activate = (vnode, container, anchor2, namespace, optimized) => {
      const instance2 = vnode.component;
      move(vnode, container, anchor2, 0, parentSuspense);
      patch(
        instance2.vnode,
        vnode,
        container,
        anchor2,
        instance2,
        parentSuspense,
        namespace,
        vnode.slotScopeIds,
        optimized
      );
      queuePostRenderEffect(() => {
        instance2.isDeactivated = false;
        if (instance2.a) {
          invokeArrayFns(instance2.a);
        }
        const vnodeHook = vnode.props && vnode.props.onVnodeMounted;
        if (vnodeHook) {
          invokeVNodeHook(vnodeHook, instance2.parent, vnode);
        }
      }, parentSuspense);
    };
    sharedContext.deactivate = (vnode) => {
      const instance2 = vnode.component;
      invalidateMount(instance2.m);
      invalidateMount(instance2.a);
      move(vnode, storageContainer, null, 1, parentSuspense);
      queuePostRenderEffect(() => {
        if (instance2.da) {
          invokeArrayFns(instance2.da);
        }
        const vnodeHook = vnode.props && vnode.props.onVnodeUnmounted;
        if (vnodeHook) {
          invokeVNodeHook(vnodeHook, instance2.parent, vnode);
        }
        instance2.isDeactivated = true;
      }, parentSuspense);
    };
    function unmount(vnode) {
      resetShapeFlag(vnode);
      _unmount(vnode, instance, parentSuspense, true);
    }
    function pruneCache(filter4) {
      cache.forEach((vnode, key2) => {
        const name = getComponentName(vnode.type);
        if (name && !filter4(name)) {
          pruneCacheEntry(key2);
        }
      });
    }
    function pruneCacheEntry(key2) {
      const cached = cache.get(key2);
      if (cached && (!current || !isSameVNodeType(cached, current))) {
        unmount(cached);
      } else if (current) {
        resetShapeFlag(current);
      }
      cache.delete(key2);
      keys6.delete(key2);
    }
    watch(
      () => [props.include, props.exclude],
      ([include, exclude]) => {
        include && pruneCache((name) => matches(include, name));
        exclude && pruneCache((name) => !matches(exclude, name));
      },
      // prune post-render after `current` has been updated
      { flush: "post", deep: true }
    );
    let pendingCacheKey = null;
    const cacheSubtree = () => {
      if (pendingCacheKey != null) {
        if (isSuspense(instance.subTree.type)) {
          queuePostRenderEffect(() => {
            cache.set(pendingCacheKey, getInnerChild(instance.subTree));
          }, instance.subTree.suspense);
        } else {
          cache.set(pendingCacheKey, getInnerChild(instance.subTree));
        }
      }
    };
    onMounted(cacheSubtree);
    onUpdated(cacheSubtree);
    onBeforeUnmount(() => {
      cache.forEach((cached) => {
        const { subTree, suspense } = instance;
        const vnode = getInnerChild(subTree);
        if (cached.type === vnode.type && cached.key === vnode.key) {
          resetShapeFlag(vnode);
          const da = vnode.component.da;
          da && queuePostRenderEffect(da, suspense);
          return;
        }
        unmount(cached);
      });
    });
    return () => {
      pendingCacheKey = null;
      if (!slots.default) {
        return current = null;
      }
      const children2 = slots.default();
      const rawVNode = children2[0];
      if (children2.length > 1) {
        current = null;
        return children2;
      } else if (!isVNode(rawVNode) || !(rawVNode.shapeFlag & 4) && !(rawVNode.shapeFlag & 128)) {
        current = null;
        return rawVNode;
      }
      let vnode = getInnerChild(rawVNode);
      if (vnode.type === Comment) {
        current = null;
        return vnode;
      }
      const comp = vnode.type;
      const name = getComponentName(
        isAsyncWrapper(vnode) ? vnode.type.__asyncResolved || {} : comp
      );
      const { include, exclude, max: max2 } = props;
      if (include && (!name || !matches(include, name)) || exclude && name && matches(exclude, name)) {
        vnode.shapeFlag &= ~256;
        current = vnode;
        return rawVNode;
      }
      const key2 = vnode.key == null ? comp : vnode.key;
      const cachedVNode = cache.get(key2);
      if (vnode.el) {
        vnode = cloneVNode(vnode);
        if (rawVNode.shapeFlag & 128) {
          rawVNode.ssContent = vnode;
        }
      }
      pendingCacheKey = key2;
      if (cachedVNode) {
        vnode.el = cachedVNode.el;
        vnode.component = cachedVNode.component;
        if (vnode.transition) {
          setTransitionHooks(vnode, vnode.transition);
        }
        vnode.shapeFlag |= 512;
        keys6.delete(key2);
        keys6.add(key2);
      } else {
        keys6.add(key2);
        if (max2 && keys6.size > parseInt(max2, 10)) {
          pruneCacheEntry(keys6.values().next().value);
        }
      }
      vnode.shapeFlag |= 256;
      current = vnode;
      return isSuspense(rawVNode.type) ? rawVNode : vnode;
    };
  }
};
const KeepAlive = KeepAliveImpl;
function matches(pattern, name) {
  if (isArray$g(pattern)) {
    return pattern.some((p2) => matches(p2, name));
  } else if (isString$1(pattern)) {
    return pattern.split(",").includes(name);
  } else if (isRegExp$1(pattern)) {
    pattern.lastIndex = 0;
    return pattern.test(name);
  }
  return false;
}
function onActivated(hook, target) {
  registerKeepAliveHook(hook, "a", target);
}
function onDeactivated(hook, target) {
  registerKeepAliveHook(hook, "da", target);
}
function registerKeepAliveHook(hook, type, target = currentInstance) {
  const wrappedHook = hook.__wdc || (hook.__wdc = () => {
    let current = target;
    while (current) {
      if (current.isDeactivated) {
        return;
      }
      current = current.parent;
    }
    return hook();
  });
  injectHook(type, wrappedHook, target);
  if (target) {
    let current = target.parent;
    while (current && current.parent) {
      if (isKeepAlive(current.parent.vnode)) {
        injectToKeepAliveRoot(wrappedHook, type, target, current);
      }
      current = current.parent;
    }
  }
}
function injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {
  const injected = injectHook(
    type,
    hook,
    keepAliveRoot,
    true
    /* prepend */
  );
  onUnmounted(() => {
    remove(keepAliveRoot[type], injected);
  }, target);
}
function resetShapeFlag(vnode) {
  vnode.shapeFlag &= ~256;
  vnode.shapeFlag &= ~512;
}
function getInnerChild(vnode) {
  return vnode.shapeFlag & 128 ? vnode.ssContent : vnode;
}
function injectHook(type, hook, target = currentInstance, prepend = false) {
  if (target) {
    const hooks = target[type] || (target[type] = []);
    const wrappedHook = hook.__weh || (hook.__weh = (...args) => {
      pauseTracking();
      const reset2 = setCurrentInstance(target);
      const res = callWithAsyncErrorHandling(hook, target, type, args);
      reset2();
      resetTracking();
      return res;
    });
    if (prepend) {
      hooks.unshift(wrappedHook);
    } else {
      hooks.push(wrappedHook);
    }
    return wrappedHook;
  }
}
const createHook = (lifecycle) => (hook, target = currentInstance) => {
  if (!isInSSRComponentSetup || lifecycle === "sp") {
    injectHook(lifecycle, (...args) => hook(...args), target);
  }
};
const onBeforeMount = createHook("bm");
const onMounted = createHook("m");
const onBeforeUpdate = createHook(
  "bu"
);
const onUpdated = createHook("u");
const onBeforeUnmount = createHook(
  "bum"
);
const onUnmounted = createHook("um");
const onServerPrefetch = createHook(
  "sp"
);
const onRenderTriggered = createHook("rtg");
const onRenderTracked = createHook("rtc");
function onErrorCaptured(hook, target = currentInstance) {
  injectHook("ec", hook, target);
}
const COMPONENTS = "components";
const DIRECTIVES = "directives";
function resolveComponent(name, maybeSelfReference) {
  return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;
}
const NULL_DYNAMIC_COMPONENT = Symbol.for("v-ndc");
function resolveDynamicComponent(component) {
  if (isString$1(component)) {
    return resolveAsset(COMPONENTS, component, false) || component;
  } else {
    return component || NULL_DYNAMIC_COMPONENT;
  }
}
function resolveDirective(name) {
  return resolveAsset(DIRECTIVES, name);
}
function resolveAsset(type, name, warnMissing = true, maybeSelfReference = false) {
  const instance = currentRenderingInstance || currentInstance;
  if (instance) {
    const Component = instance.type;
    if (type === COMPONENTS) {
      const selfName = getComponentName(
        Component,
        false
      );
      if (selfName && (selfName === name || selfName === camelize(name) || selfName === capitalize(camelize(name)))) {
        return Component;
      }
    }
    const res = (
      // local registration
      // check instance[type] first which is resolved for options API
      resolve(instance[type] || Component[type], name) || // global registration
      resolve(instance.appContext[type], name)
    );
    if (!res && maybeSelfReference) {
      return Component;
    }
    return res;
  }
}
function resolve(registry, name) {
  return registry && (registry[name] || registry[camelize(name)] || registry[capitalize(camelize(name))]);
}
function renderList(source, renderItem, cache, index2) {
  let ret;
  const cached = cache && cache[index2];
  const sourceIsArray = isArray$g(source);
  if (sourceIsArray || isString$1(source)) {
    const sourceIsReactiveArray = sourceIsArray && isReactive(source);
    let needsWrap = false;
    if (sourceIsReactiveArray) {
      needsWrap = !isShallow(source);
      source = shallowReadArray(source);
    }
    ret = new Array(source.length);
    for (let i2 = 0, l2 = source.length; i2 < l2; i2++) {
      ret[i2] = renderItem(
        needsWrap ? toReactive(source[i2]) : source[i2],
        i2,
        void 0,
        cached && cached[i2]
      );
    }
  } else if (typeof source === "number") {
    ret = new Array(source);
    for (let i2 = 0; i2 < source; i2++) {
      ret[i2] = renderItem(i2 + 1, i2, void 0, cached && cached[i2]);
    }
  } else if (isObject$l(source)) {
    if (source[Symbol.iterator]) {
      ret = Array.from(
        source,
        (item, i2) => renderItem(item, i2, void 0, cached && cached[i2])
      );
    } else {
      const keys6 = Object.keys(source);
      ret = new Array(keys6.length);
      for (let i2 = 0, l2 = keys6.length; i2 < l2; i2++) {
        const key2 = keys6[i2];
        ret[i2] = renderItem(source[key2], key2, i2, cached && cached[i2]);
      }
    }
  } else {
    ret = [];
  }
  if (cache) {
    cache[index2] = ret;
  }
  return ret;
}
function createSlots(slots, dynamicSlots) {
  for (let i2 = 0; i2 < dynamicSlots.length; i2++) {
    const slot = dynamicSlots[i2];
    if (isArray$g(slot)) {
      for (let j2 = 0; j2 < slot.length; j2++) {
        slots[slot[j2].name] = slot[j2].fn;
      }
    } else if (slot) {
      slots[slot.name] = slot.key ? (...args) => {
        const res = slot.fn(...args);
        if (res) res.key = slot.key;
        return res;
      } : slot.fn;
    }
  }
  return slots;
}
function renderSlot(slots, name, props = {}, fallback, noSlotted) {
  if (currentRenderingInstance.ce || currentRenderingInstance.parent && isAsyncWrapper(currentRenderingInstance.parent) && currentRenderingInstance.parent.ce) {
    if (name !== "default") props.name = name;
    return openBlock(), createBlock(
      Fragment,
      null,
      [createVNode("slot", props, fallback && fallback())],
      64
    );
  }
  let slot = slots[name];
  if (slot && slot._c) {
    slot._d = false;
  }
  openBlock();
  const validSlotContent = slot && ensureValidVNode(slot(props));
  const slotKey = props.key || // slot content array of a dynamic conditional slot may have a branch
  // key attached in the `createSlots` helper, respect that
  validSlotContent && validSlotContent.key;
  const rendered = createBlock(
    Fragment,
    {
      key: (slotKey && !isSymbol$7(slotKey) ? slotKey : `_${name}`) + // #7256 force differentiate fallback content from actual content
      (!validSlotContent && fallback ? "_fb" : "")
    },
    validSlotContent || (fallback ? fallback() : []),
    validSlotContent && slots._ === 1 ? 64 : -2
  );
  if (!noSlotted && rendered.scopeId) {
    rendered.slotScopeIds = [rendered.scopeId + "-s"];
  }
  if (slot && slot._c) {
    slot._d = true;
  }
  return rendered;
}
function ensureValidVNode(vnodes) {
  return vnodes.some((child2) => {
    if (!isVNode(child2)) return true;
    if (child2.type === Comment) return false;
    if (child2.type === Fragment && !ensureValidVNode(child2.children))
      return false;
    return true;
  }) ? vnodes : null;
}
function toHandlers(obj, preserveCaseIfNecessary) {
  const ret = {};
  for (const key2 in obj) {
    ret[preserveCaseIfNecessary && /[A-Z]/.test(key2) ? `on:${key2}` : toHandlerKey(key2)] = obj[key2];
  }
  return ret;
}
const getPublicInstance = (i2) => {
  if (!i2) return null;
  if (isStatefulComponent(i2)) return getComponentPublicInstance(i2);
  return getPublicInstance(i2.parent);
};
const publicPropertiesMap = (
  // Move PURE marker to new line to workaround compiler discarding it
  // due to type annotation
  /* @__PURE__ */ extend$2(/* @__PURE__ */ Object.create(null), {
    $: (i2) => i2,
    $el: (i2) => i2.vnode.el,
    $data: (i2) => i2.data,
    $props: (i2) => i2.props,
    $attrs: (i2) => i2.attrs,
    $slots: (i2) => i2.slots,
    $refs: (i2) => i2.refs,
    $parent: (i2) => getPublicInstance(i2.parent),
    $root: (i2) => getPublicInstance(i2.root),
    $host: (i2) => i2.ce,
    $emit: (i2) => i2.emit,
    $options: (i2) => resolveMergedOptions(i2),
    $forceUpdate: (i2) => i2.f || (i2.f = () => {
      queueJob(i2.update);
    }),
    $nextTick: (i2) => i2.n || (i2.n = nextTick.bind(i2.proxy)),
    $watch: (i2) => instanceWatch.bind(i2)
  })
);
const hasSetupBinding = (state, key2) => state !== EMPTY_OBJ && !state.__isScriptSetup && hasOwn$l(state, key2);
const PublicInstanceProxyHandlers = {
  get({ _: instance }, key2) {
    if (key2 === "__v_skip") {
      return true;
    }
    const { ctx, setupState, data: data2, props, accessCache, type, appContext } = instance;
    let normalizedProps;
    if (key2[0] !== "$") {
      const n2 = accessCache[key2];
      if (n2 !== void 0) {
        switch (n2) {
          case 1:
            return setupState[key2];
          case 2:
            return data2[key2];
          case 4:
            return ctx[key2];
          case 3:
            return props[key2];
        }
      } else if (hasSetupBinding(setupState, key2)) {
        accessCache[key2] = 1;
        return setupState[key2];
      } else if (data2 !== EMPTY_OBJ && hasOwn$l(data2, key2)) {
        accessCache[key2] = 2;
        return data2[key2];
      } else if (
        // only cache other properties when instance has declared (thus stable)
        // props
        (normalizedProps = instance.propsOptions[0]) && hasOwn$l(normalizedProps, key2)
      ) {
        accessCache[key2] = 3;
        return props[key2];
      } else if (ctx !== EMPTY_OBJ && hasOwn$l(ctx, key2)) {
        accessCache[key2] = 4;
        return ctx[key2];
      } else if (shouldCacheAccess) {
        accessCache[key2] = 0;
      }
    }
    const publicGetter = publicPropertiesMap[key2];
    let cssModule, globalProperties;
    if (publicGetter) {
      if (key2 === "$attrs") {
        track(instance.attrs, "get", "");
      }
      return publicGetter(instance);
    } else if (
      // css module (injected by vue-loader)
      (cssModule = type.__cssModules) && (cssModule = cssModule[key2])
    ) {
      return cssModule;
    } else if (ctx !== EMPTY_OBJ && hasOwn$l(ctx, key2)) {
      accessCache[key2] = 4;
      return ctx[key2];
    } else if (
      // global properties
      globalProperties = appContext.config.globalProperties, hasOwn$l(globalProperties, key2)
    ) {
      {
        return globalProperties[key2];
      }
    } else ;
  },
  set({ _: instance }, key2, value2) {
    const { data: data2, setupState, ctx } = instance;
    if (hasSetupBinding(setupState, key2)) {
      setupState[key2] = value2;
      return true;
    } else if (data2 !== EMPTY_OBJ && hasOwn$l(data2, key2)) {
      data2[key2] = value2;
      return true;
    } else if (hasOwn$l(instance.props, key2)) {
      return false;
    }
    if (key2[0] === "$" && key2.slice(1) in instance) {
      return false;
    } else {
      {
        ctx[key2] = value2;
      }
    }
    return true;
  },
  has({
    _: { data: data2, setupState, accessCache, ctx, appContext, propsOptions }
  }, key2) {
    let normalizedProps;
    return !!accessCache[key2] || data2 !== EMPTY_OBJ && hasOwn$l(data2, key2) || hasSetupBinding(setupState, key2) || (normalizedProps = propsOptions[0]) && hasOwn$l(normalizedProps, key2) || hasOwn$l(ctx, key2) || hasOwn$l(publicPropertiesMap, key2) || hasOwn$l(appContext.config.globalProperties, key2);
  },
  defineProperty(target, key2, descriptor) {
    if (descriptor.get != null) {
      target._.accessCache[key2] = 0;
    } else if (hasOwn$l(descriptor, "value")) {
      this.set(target, key2, descriptor.value, null);
    }
    return Reflect.defineProperty(target, key2, descriptor);
  }
};
const RuntimeCompiledPublicInstanceProxyHandlers = /* @__PURE__ */ extend$2({}, PublicInstanceProxyHandlers, {
  get(target, key2) {
    if (key2 === Symbol.unscopables) {
      return;
    }
    return PublicInstanceProxyHandlers.get(target, key2, target);
  },
  has(_, key2) {
    const has2 = key2[0] !== "_" && !isGloballyAllowed(key2);
    return has2;
  }
});
function defineProps() {
  return null;
}
function defineEmits() {
  return null;
}
function defineExpose(exposed) {
}
function defineOptions(options) {
}
function defineSlots() {
  return null;
}
function defineModel() {
}
function withDefaults(props, defaults2) {
  return null;
}
function useSlots() {
  return getContext().slots;
}
function useAttrs() {
  return getContext().attrs;
}
function getContext() {
  const i2 = getCurrentInstance();
  return i2.setupContext || (i2.setupContext = createSetupContext(i2));
}
function normalizePropsOrEmits(props) {
  return isArray$g(props) ? props.reduce(
    (normalized, p2) => (normalized[p2] = null, normalized),
    {}
  ) : props;
}
function mergeDefaults(raw, defaults2) {
  const props = normalizePropsOrEmits(raw);
  for (const key2 in defaults2) {
    if (key2.startsWith("__skip")) continue;
    let opt = props[key2];
    if (opt) {
      if (isArray$g(opt) || isFunction(opt)) {
        opt = props[key2] = { type: opt, default: defaults2[key2] };
      } else {
        opt.default = defaults2[key2];
      }
    } else if (opt === null) {
      opt = props[key2] = { default: defaults2[key2] };
    } else ;
    if (opt && defaults2[`__skip_${key2}`]) {
      opt.skipFactory = true;
    }
  }
  return props;
}
function mergeModels(a2, b2) {
  if (!a2 || !b2) return a2 || b2;
  if (isArray$g(a2) && isArray$g(b2)) return a2.concat(b2);
  return extend$2({}, normalizePropsOrEmits(a2), normalizePropsOrEmits(b2));
}
function createPropsRestProxy(props, excludedKeys) {
  const ret = {};
  for (const key2 in props) {
    if (!excludedKeys.includes(key2)) {
      Object.defineProperty(ret, key2, {
        enumerable: true,
        get: () => props[key2]
      });
    }
  }
  return ret;
}
function withAsyncContext(getAwaitable) {
  const ctx = getCurrentInstance();
  let awaitable = getAwaitable();
  unsetCurrentInstance();
  if (isPromise(awaitable)) {
    awaitable = awaitable.catch((e2) => {
      setCurrentInstance(ctx);
      throw e2;
    });
  }
  return [awaitable, () => setCurrentInstance(ctx)];
}
let shouldCacheAccess = true;
function applyOptions(instance) {
  const options = resolveMergedOptions(instance);
  const publicThis = instance.proxy;
  const ctx = instance.ctx;
  shouldCacheAccess = false;
  if (options.beforeCreate) {
    callHook$1(options.beforeCreate, instance, "bc");
  }
  const {
    // state
    data: dataOptions,
    computed: computedOptions,
    methods,
    watch: watchOptions,
    provide: provideOptions,
    inject: injectOptions,
    // lifecycle
    created,
    beforeMount,
    mounted,
    beforeUpdate,
    updated,
    activated,
    deactivated,
    beforeDestroy,
    beforeUnmount,
    destroyed,
    unmounted,
    render: render2,
    renderTracked,
    renderTriggered,
    errorCaptured,
    serverPrefetch,
    // public API
    expose,
    inheritAttrs,
    // assets
    components,
    directives,
    filters
  } = options;
  const checkDuplicateProperties = null;
  if (injectOptions) {
    resolveInjections(injectOptions, ctx, checkDuplicateProperties);
  }
  if (methods) {
    for (const key2 in methods) {
      const methodHandler = methods[key2];
      if (isFunction(methodHandler)) {
        {
          ctx[key2] = methodHandler.bind(publicThis);
        }
      }
    }
  }
  if (dataOptions) {
    const data2 = dataOptions.call(publicThis, publicThis);
    if (!isObject$l(data2)) ;
    else {
      instance.data = reactive(data2);
    }
  }
  shouldCacheAccess = true;
  if (computedOptions) {
    for (const key2 in computedOptions) {
      const opt = computedOptions[key2];
      const get2 = isFunction(opt) ? opt.bind(publicThis, publicThis) : isFunction(opt.get) ? opt.get.bind(publicThis, publicThis) : NOOP;
      const set2 = !isFunction(opt) && isFunction(opt.set) ? opt.set.bind(publicThis) : NOOP;
      const c2 = computed({
        get: get2,
        set: set2
      });
      Object.defineProperty(ctx, key2, {
        enumerable: true,
        configurable: true,
        get: () => c2.value,
        set: (v2) => c2.value = v2
      });
    }
  }
  if (watchOptions) {
    for (const key2 in watchOptions) {
      createWatcher(watchOptions[key2], ctx, publicThis, key2);
    }
  }
  if (provideOptions) {
    const provides = isFunction(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
    Reflect.ownKeys(provides).forEach((key2) => {
      provide(key2, provides[key2]);
    });
  }
  if (created) {
    callHook$1(created, instance, "c");
  }
  function registerLifecycleHook(register, hook) {
    if (isArray$g(hook)) {
      hook.forEach((_hook) => register(_hook.bind(publicThis)));
    } else if (hook) {
      register(hook.bind(publicThis));
    }
  }
  registerLifecycleHook(onBeforeMount, beforeMount);
  registerLifecycleHook(onMounted, mounted);
  registerLifecycleHook(onBeforeUpdate, beforeUpdate);
  registerLifecycleHook(onUpdated, updated);
  registerLifecycleHook(onActivated, activated);
  registerLifecycleHook(onDeactivated, deactivated);
  registerLifecycleHook(onErrorCaptured, errorCaptured);
  registerLifecycleHook(onRenderTracked, renderTracked);
  registerLifecycleHook(onRenderTriggered, renderTriggered);
  registerLifecycleHook(onBeforeUnmount, beforeUnmount);
  registerLifecycleHook(onUnmounted, unmounted);
  registerLifecycleHook(onServerPrefetch, serverPrefetch);
  if (isArray$g(expose)) {
    if (expose.length) {
      const exposed = instance.exposed || (instance.exposed = {});
      expose.forEach((key2) => {
        Object.defineProperty(exposed, key2, {
          get: () => publicThis[key2],
          set: (val) => publicThis[key2] = val
        });
      });
    } else if (!instance.exposed) {
      instance.exposed = {};
    }
  }
  if (render2 && instance.render === NOOP) {
    instance.render = render2;
  }
  if (inheritAttrs != null) {
    instance.inheritAttrs = inheritAttrs;
  }
  if (components) instance.components = components;
  if (directives) instance.directives = directives;
  if (serverPrefetch) {
    markAsyncBoundary(instance);
  }
}
function resolveInjections(injectOptions, ctx, checkDuplicateProperties = NOOP) {
  if (isArray$g(injectOptions)) {
    injectOptions = normalizeInject(injectOptions);
  }
  for (const key2 in injectOptions) {
    const opt = injectOptions[key2];
    let injected;
    if (isObject$l(opt)) {
      if ("default" in opt) {
        injected = inject(
          opt.from || key2,
          opt.default,
          true
        );
      } else {
        injected = inject(opt.from || key2);
      }
    } else {
      injected = inject(opt);
    }
    if (isRef(injected)) {
      Object.defineProperty(ctx, key2, {
        enumerable: true,
        configurable: true,
        get: () => injected.value,
        set: (v2) => injected.value = v2
      });
    } else {
      ctx[key2] = injected;
    }
  }
}
function callHook$1(hook, instance, type) {
  callWithAsyncErrorHandling(
    isArray$g(hook) ? hook.map((h2) => h2.bind(instance.proxy)) : hook.bind(instance.proxy),
    instance,
    type
  );
}
function createWatcher(raw, ctx, publicThis, key2) {
  let getter = key2.includes(".") ? createPathGetter(publicThis, key2) : () => publicThis[key2];
  if (isString$1(raw)) {
    const handler = ctx[raw];
    if (isFunction(handler)) {
      {
        watch(getter, handler);
      }
    }
  } else if (isFunction(raw)) {
    {
      watch(getter, raw.bind(publicThis));
    }
  } else if (isObject$l(raw)) {
    if (isArray$g(raw)) {
      raw.forEach((r2) => createWatcher(r2, ctx, publicThis, key2));
    } else {
      const handler = isFunction(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
      if (isFunction(handler)) {
        watch(getter, handler, raw);
      }
    }
  } else ;
}
function resolveMergedOptions(instance) {
  const base = instance.type;
  const { mixins, extends: extendsOptions } = base;
  const {
    mixins: globalMixins,
    optionsCache: cache,
    config: { optionMergeStrategies }
  } = instance.appContext;
  const cached = cache.get(base);
  let resolved;
  if (cached) {
    resolved = cached;
  } else if (!globalMixins.length && !mixins && !extendsOptions) {
    {
      resolved = base;
    }
  } else {
    resolved = {};
    if (globalMixins.length) {
      globalMixins.forEach(
        (m2) => mergeOptions$1(resolved, m2, optionMergeStrategies, true)
      );
    }
    mergeOptions$1(resolved, base, optionMergeStrategies);
  }
  if (isObject$l(base)) {
    cache.set(base, resolved);
  }
  return resolved;
}
function mergeOptions$1(to, from4, strats, asMixin = false) {
  const { mixins, extends: extendsOptions } = from4;
  if (extendsOptions) {
    mergeOptions$1(to, extendsOptions, strats, true);
  }
  if (mixins) {
    mixins.forEach(
      (m2) => mergeOptions$1(to, m2, strats, true)
    );
  }
  for (const key2 in from4) {
    if (asMixin && key2 === "expose") ;
    else {
      const strat = internalOptionMergeStrats[key2] || strats && strats[key2];
      to[key2] = strat ? strat(to[key2], from4[key2]) : from4[key2];
    }
  }
  return to;
}
const internalOptionMergeStrats = {
  data: mergeDataFn,
  props: mergeEmitsOrPropsOptions,
  emits: mergeEmitsOrPropsOptions,
  // objects
  methods: mergeObjectOptions,
  computed: mergeObjectOptions,
  // lifecycle
  beforeCreate: mergeAsArray$1,
  created: mergeAsArray$1,
  beforeMount: mergeAsArray$1,
  mounted: mergeAsArray$1,
  beforeUpdate: mergeAsArray$1,
  updated: mergeAsArray$1,
  beforeDestroy: mergeAsArray$1,
  beforeUnmount: mergeAsArray$1,
  destroyed: mergeAsArray$1,
  unmounted: mergeAsArray$1,
  activated: mergeAsArray$1,
  deactivated: mergeAsArray$1,
  errorCaptured: mergeAsArray$1,
  serverPrefetch: mergeAsArray$1,
  // assets
  components: mergeObjectOptions,
  directives: mergeObjectOptions,
  // watch
  watch: mergeWatchOptions,
  // provide / inject
  provide: mergeDataFn,
  inject: mergeInject
};
function mergeDataFn(to, from4) {
  if (!from4) {
    return to;
  }
  if (!to) {
    return from4;
  }
  return function mergedDataFn() {
    return extend$2(
      isFunction(to) ? to.call(this, this) : to,
      isFunction(from4) ? from4.call(this, this) : from4
    );
  };
}
function mergeInject(to, from4) {
  return mergeObjectOptions(normalizeInject(to), normalizeInject(from4));
}
function normalizeInject(raw) {
  if (isArray$g(raw)) {
    const res = {};
    for (let i2 = 0; i2 < raw.length; i2++) {
      res[raw[i2]] = raw[i2];
    }
    return res;
  }
  return raw;
}
function mergeAsArray$1(to, from4) {
  return to ? [...new Set([].concat(to, from4))] : from4;
}
function mergeObjectOptions(to, from4) {
  return to ? extend$2(/* @__PURE__ */ Object.create(null), to, from4) : from4;
}
function mergeEmitsOrPropsOptions(to, from4) {
  if (to) {
    if (isArray$g(to) && isArray$g(from4)) {
      return [.../* @__PURE__ */ new Set([...to, ...from4])];
    }
    return extend$2(
      /* @__PURE__ */ Object.create(null),
      normalizePropsOrEmits(to),
      normalizePropsOrEmits(from4 != null ? from4 : {})
    );
  } else {
    return from4;
  }
}
function mergeWatchOptions(to, from4) {
  if (!to) return from4;
  if (!from4) return to;
  const merged = extend$2(/* @__PURE__ */ Object.create(null), to);
  for (const key2 in from4) {
    merged[key2] = mergeAsArray$1(to[key2], from4[key2]);
  }
  return merged;
}
function createAppContext() {
  return {
    app: null,
    config: {
      isNativeTag: NO,
      performance: false,
      globalProperties: {},
      optionMergeStrategies: {},
      errorHandler: void 0,
      warnHandler: void 0,
      compilerOptions: {}
    },
    mixins: [],
    components: {},
    directives: {},
    provides: /* @__PURE__ */ Object.create(null),
    optionsCache: /* @__PURE__ */ new WeakMap(),
    propsCache: /* @__PURE__ */ new WeakMap(),
    emitsCache: /* @__PURE__ */ new WeakMap()
  };
}
let uid$1$2 = 0;
function createAppAPI(render2, hydrate2) {
  return function createApp2(rootComponent, rootProps = null) {
    if (!isFunction(rootComponent)) {
      rootComponent = extend$2({}, rootComponent);
    }
    if (rootProps != null && !isObject$l(rootProps)) {
      rootProps = null;
    }
    const context = createAppContext();
    const installedPlugins = /* @__PURE__ */ new WeakSet();
    const pluginCleanupFns = [];
    let isMounted = false;
    const app2 = context.app = {
      _uid: uid$1$2++,
      _component: rootComponent,
      _props: rootProps,
      _container: null,
      _context: context,
      _instance: null,
      version: version$2,
      get config() {
        return context.config;
      },
      set config(v2) {
      },
      use(plugin, ...options) {
        if (installedPlugins.has(plugin)) ;
        else if (plugin && isFunction(plugin.install)) {
          installedPlugins.add(plugin);
          plugin.install(app2, ...options);
        } else if (isFunction(plugin)) {
          installedPlugins.add(plugin);
          plugin(app2, ...options);
        } else ;
        return app2;
      },
      mixin(mixin) {
        {
          if (!context.mixins.includes(mixin)) {
            context.mixins.push(mixin);
          }
        }
        return app2;
      },
      component(name, component) {
        if (!component) {
          return context.components[name];
        }
        context.components[name] = component;
        return app2;
      },
      directive(name, directive) {
        if (!directive) {
          return context.directives[name];
        }
        context.directives[name] = directive;
        return app2;
      },
      mount(rootContainer, isHydrate, namespace) {
        if (!isMounted) {
          const vnode = app2._ceVNode || createVNode(rootComponent, rootProps);
          vnode.appContext = context;
          if (namespace === true) {
            namespace = "svg";
          } else if (namespace === false) {
            namespace = void 0;
          }
          if (isHydrate && hydrate2) {
            hydrate2(vnode, rootContainer);
          } else {
            render2(vnode, rootContainer, namespace);
          }
          isMounted = true;
          app2._container = rootContainer;
          rootContainer.__vue_app__ = app2;
          return getComponentPublicInstance(vnode.component);
        }
      },
      onUnmount(cleanupFn) {
        pluginCleanupFns.push(cleanupFn);
      },
      unmount() {
        if (isMounted) {
          callWithAsyncErrorHandling(
            pluginCleanupFns,
            app2._instance,
            16
          );
          render2(null, app2._container);
          delete app2._container.__vue_app__;
        }
      },
      provide(key2, value2) {
        context.provides[key2] = value2;
        return app2;
      },
      runWithContext(fn2) {
        const lastApp = currentApp;
        currentApp = app2;
        try {
          return fn2();
        } finally {
          currentApp = lastApp;
        }
      }
    };
    return app2;
  };
}
let currentApp = null;
function provide(key2, value2) {
  if (!currentInstance) ;
  else {
    let provides = currentInstance.provides;
    const parentProvides = currentInstance.parent && currentInstance.parent.provides;
    if (parentProvides === provides) {
      provides = currentInstance.provides = Object.create(parentProvides);
    }
    provides[key2] = value2;
  }
}
function inject(key2, defaultValue, treatDefaultAsFactory = false) {
  const instance = currentInstance || currentRenderingInstance;
  if (instance || currentApp) {
    const provides = currentApp ? currentApp._context.provides : instance ? instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides : void 0;
    if (provides && key2 in provides) {
      return provides[key2];
    } else if (arguments.length > 1) {
      return treatDefaultAsFactory && isFunction(defaultValue) ? defaultValue.call(instance && instance.proxy) : defaultValue;
    } else ;
  }
}
function hasInjectionContext() {
  return !!(currentInstance || currentRenderingInstance || currentApp);
}
const internalObjectProto = {};
const createInternalObject = () => Object.create(internalObjectProto);
const isInternalObject = (obj) => Object.getPrototypeOf(obj) === internalObjectProto;
function initProps(instance, rawProps, isStateful, isSSR = false) {
  const props = {};
  const attrs = createInternalObject();
  instance.propsDefaults = /* @__PURE__ */ Object.create(null);
  setFullProps(instance, rawProps, props, attrs);
  for (const key2 in instance.propsOptions[0]) {
    if (!(key2 in props)) {
      props[key2] = void 0;
    }
  }
  if (isStateful) {
    instance.props = isSSR ? props : shallowReactive(props);
  } else {
    if (!instance.type.props) {
      instance.props = attrs;
    } else {
      instance.props = props;
    }
  }
  instance.attrs = attrs;
}
function updateProps(instance, rawProps, rawPrevProps, optimized) {
  const {
    props,
    attrs,
    vnode: { patchFlag }
  } = instance;
  const rawCurrentProps = toRaw(props);
  const [options] = instance.propsOptions;
  let hasAttrsChanged = false;
  if (
    // always force full diff in dev
    // - #1942 if hmr is enabled with sfc component
    // - vite#872 non-sfc component used by sfc component
    (optimized || patchFlag > 0) && !(patchFlag & 16)
  ) {
    if (patchFlag & 8) {
      const propsToUpdate = instance.vnode.dynamicProps;
      for (let i2 = 0; i2 < propsToUpdate.length; i2++) {
        let key2 = propsToUpdate[i2];
        if (isEmitListener(instance.emitsOptions, key2)) {
          continue;
        }
        const value2 = rawProps[key2];
        if (options) {
          if (hasOwn$l(attrs, key2)) {
            if (value2 !== attrs[key2]) {
              attrs[key2] = value2;
              hasAttrsChanged = true;
            }
          } else {
            const camelizedKey = camelize(key2);
            props[camelizedKey] = resolvePropValue(
              options,
              rawCurrentProps,
              camelizedKey,
              value2,
              instance,
              false
            );
          }
        } else {
          if (value2 !== attrs[key2]) {
            attrs[key2] = value2;
            hasAttrsChanged = true;
          }
        }
      }
    }
  } else {
    if (setFullProps(instance, rawProps, props, attrs)) {
      hasAttrsChanged = true;
    }
    let kebabKey;
    for (const key2 in rawCurrentProps) {
      if (!rawProps || // for camelCase
      !hasOwn$l(rawProps, key2) && // it's possible the original props was passed in as kebab-case
      // and converted to camelCase (#955)
      ((kebabKey = hyphenate(key2)) === key2 || !hasOwn$l(rawProps, kebabKey))) {
        if (options) {
          if (rawPrevProps && // for camelCase
          (rawPrevProps[key2] !== void 0 || // for kebab-case
          rawPrevProps[kebabKey] !== void 0)) {
            props[key2] = resolvePropValue(
              options,
              rawCurrentProps,
              key2,
              void 0,
              instance,
              true
            );
          }
        } else {
          delete props[key2];
        }
      }
    }
    if (attrs !== rawCurrentProps) {
      for (const key2 in attrs) {
        if (!rawProps || !hasOwn$l(rawProps, key2) && true) {
          delete attrs[key2];
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (hasAttrsChanged) {
    trigger(instance.attrs, "set", "");
  }
}
function setFullProps(instance, rawProps, props, attrs) {
  const [options, needCastKeys] = instance.propsOptions;
  let hasAttrsChanged = false;
  let rawCastValues;
  if (rawProps) {
    for (let key2 in rawProps) {
      if (isReservedProp(key2)) {
        continue;
      }
      const value2 = rawProps[key2];
      let camelKey;
      if (options && hasOwn$l(options, camelKey = camelize(key2))) {
        if (!needCastKeys || !needCastKeys.includes(camelKey)) {
          props[camelKey] = value2;
        } else {
          (rawCastValues || (rawCastValues = {}))[camelKey] = value2;
        }
      } else if (!isEmitListener(instance.emitsOptions, key2)) {
        if (!(key2 in attrs) || value2 !== attrs[key2]) {
          attrs[key2] = value2;
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (needCastKeys) {
    const rawCurrentProps = toRaw(props);
    const castValues = rawCastValues || EMPTY_OBJ;
    for (let i2 = 0; i2 < needCastKeys.length; i2++) {
      const key2 = needCastKeys[i2];
      props[key2] = resolvePropValue(
        options,
        rawCurrentProps,
        key2,
        castValues[key2],
        instance,
        !hasOwn$l(castValues, key2)
      );
    }
  }
  return hasAttrsChanged;
}
function resolvePropValue(options, props, key2, value2, instance, isAbsent) {
  const opt = options[key2];
  if (opt != null) {
    const hasDefault = hasOwn$l(opt, "default");
    if (hasDefault && value2 === void 0) {
      const defaultValue = opt.default;
      if (opt.type !== Function && !opt.skipFactory && isFunction(defaultValue)) {
        const { propsDefaults } = instance;
        if (key2 in propsDefaults) {
          value2 = propsDefaults[key2];
        } else {
          const reset2 = setCurrentInstance(instance);
          value2 = propsDefaults[key2] = defaultValue.call(
            null,
            props
          );
          reset2();
        }
      } else {
        value2 = defaultValue;
      }
      if (instance.ce) {
        instance.ce._setProp(key2, value2);
      }
    }
    if (opt[
      0
      /* shouldCast */
    ]) {
      if (isAbsent && !hasDefault) {
        value2 = false;
      } else if (opt[
        1
        /* shouldCastTrue */
      ] && (value2 === "" || value2 === hyphenate(key2))) {
        value2 = true;
      }
    }
  }
  return value2;
}
const mixinPropsCache = /* @__PURE__ */ new WeakMap();
function normalizePropsOptions(comp, appContext, asMixin = false) {
  const cache = asMixin ? mixinPropsCache : appContext.propsCache;
  const cached = cache.get(comp);
  if (cached) {
    return cached;
  }
  const raw = comp.props;
  const normalized = {};
  const needCastKeys = [];
  let hasExtends = false;
  if (!isFunction(comp)) {
    const extendProps = (raw2) => {
      hasExtends = true;
      const [props, keys6] = normalizePropsOptions(raw2, appContext, true);
      extend$2(normalized, props);
      if (keys6) needCastKeys.push(...keys6);
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendProps);
    }
    if (comp.extends) {
      extendProps(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendProps);
    }
  }
  if (!raw && !hasExtends) {
    if (isObject$l(comp)) {
      cache.set(comp, EMPTY_ARR);
    }
    return EMPTY_ARR;
  }
  if (isArray$g(raw)) {
    for (let i2 = 0; i2 < raw.length; i2++) {
      const normalizedKey = camelize(raw[i2]);
      if (validatePropName(normalizedKey)) {
        normalized[normalizedKey] = EMPTY_OBJ;
      }
    }
  } else if (raw) {
    for (const key2 in raw) {
      const normalizedKey = camelize(key2);
      if (validatePropName(normalizedKey)) {
        const opt = raw[key2];
        const prop = normalized[normalizedKey] = isArray$g(opt) || isFunction(opt) ? { type: opt } : extend$2({}, opt);
        const propType = prop.type;
        let shouldCast = false;
        let shouldCastTrue = true;
        if (isArray$g(propType)) {
          for (let index2 = 0; index2 < propType.length; ++index2) {
            const type = propType[index2];
            const typeName = isFunction(type) && type.name;
            if (typeName === "Boolean") {
              shouldCast = true;
              break;
            } else if (typeName === "String") {
              shouldCastTrue = false;
            }
          }
        } else {
          shouldCast = isFunction(propType) && propType.name === "Boolean";
        }
        prop[
          0
          /* shouldCast */
        ] = shouldCast;
        prop[
          1
          /* shouldCastTrue */
        ] = shouldCastTrue;
        if (shouldCast || hasOwn$l(prop, "default")) {
          needCastKeys.push(normalizedKey);
        }
      }
    }
  }
  const res = [normalized, needCastKeys];
  if (isObject$l(comp)) {
    cache.set(comp, res);
  }
  return res;
}
function validatePropName(key2) {
  if (key2[0] !== "$" && !isReservedProp(key2)) {
    return true;
  }
  return false;
}
const isInternalKey = (key2) => key2[0] === "_" || key2 === "$stable";
const normalizeSlotValue = (value2) => isArray$g(value2) ? value2.map(normalizeVNode) : [normalizeVNode(value2)];
const normalizeSlot = (key2, rawSlot, ctx) => {
  if (rawSlot._n) {
    return rawSlot;
  }
  const normalized = withCtx((...args) => {
    if (false) ;
    return normalizeSlotValue(rawSlot(...args));
  }, ctx);
  normalized._c = false;
  return normalized;
};
const normalizeObjectSlots = (rawSlots, slots, instance) => {
  const ctx = rawSlots._ctx;
  for (const key2 in rawSlots) {
    if (isInternalKey(key2)) continue;
    const value2 = rawSlots[key2];
    if (isFunction(value2)) {
      slots[key2] = normalizeSlot(key2, value2, ctx);
    } else if (value2 != null) {
      const normalized = normalizeSlotValue(value2);
      slots[key2] = () => normalized;
    }
  }
};
const normalizeVNodeSlots = (instance, children2) => {
  const normalized = normalizeSlotValue(children2);
  instance.slots.default = () => normalized;
};
const assignSlots = (slots, children2, optimized) => {
  for (const key2 in children2) {
    if (optimized || key2 !== "_") {
      slots[key2] = children2[key2];
    }
  }
};
const initSlots = (instance, children2, optimized) => {
  const slots = instance.slots = createInternalObject();
  if (instance.vnode.shapeFlag & 32) {
    const type = children2._;
    if (type) {
      assignSlots(slots, children2, optimized);
      if (optimized) {
        def(slots, "_", type, true);
      }
    } else {
      normalizeObjectSlots(children2, slots);
    }
  } else if (children2) {
    normalizeVNodeSlots(instance, children2);
  }
};
const updateSlots = (instance, children2, optimized) => {
  const { vnode, slots } = instance;
  let needDeletionCheck = true;
  let deletionComparisonTarget = EMPTY_OBJ;
  if (vnode.shapeFlag & 32) {
    const type = children2._;
    if (type) {
      if (optimized && type === 1) {
        needDeletionCheck = false;
      } else {
        assignSlots(slots, children2, optimized);
      }
    } else {
      needDeletionCheck = !children2.$stable;
      normalizeObjectSlots(children2, slots);
    }
    deletionComparisonTarget = children2;
  } else if (children2) {
    normalizeVNodeSlots(instance, children2);
    deletionComparisonTarget = { default: 1 };
  }
  if (needDeletionCheck) {
    for (const key2 in slots) {
      if (!isInternalKey(key2) && deletionComparisonTarget[key2] == null) {
        delete slots[key2];
      }
    }
  }
};
const queuePostRenderEffect = queueEffectWithSuspense;
function createRenderer(options) {
  return baseCreateRenderer(options);
}
function createHydrationRenderer(options) {
  return baseCreateRenderer(options, createHydrationFunctions);
}
function baseCreateRenderer(options, createHydrationFns) {
  const target = getGlobalThis();
  target.__VUE__ = true;
  const {
    insert: hostInsert,
    remove: hostRemove,
    patchProp: hostPatchProp,
    createElement: hostCreateElement,
    createText: hostCreateText,
    createComment: hostCreateComment,
    setText: hostSetText,
    setElementText: hostSetElementText,
    parentNode: hostParentNode,
    nextSibling: hostNextSibling,
    setScopeId: hostSetScopeId = NOOP,
    insertStaticContent: hostInsertStaticContent
  } = options;
  const patch = (n1, n2, container, anchor2 = null, parentComponent = null, parentSuspense = null, namespace = void 0, slotScopeIds = null, optimized = !!n2.dynamicChildren) => {
    if (n1 === n2) {
      return;
    }
    if (n1 && !isSameVNodeType(n1, n2)) {
      anchor2 = getNextHostNode(n1);
      unmount(n1, parentComponent, parentSuspense, true);
      n1 = null;
    }
    if (n2.patchFlag === -2) {
      optimized = false;
      n2.dynamicChildren = null;
    }
    const { type, ref: ref3, shapeFlag } = n2;
    switch (type) {
      case Text$1:
        processText(n1, n2, container, anchor2);
        break;
      case Comment:
        processCommentNode(n1, n2, container, anchor2);
        break;
      case Static:
        if (n1 == null) {
          mountStaticNode(n2, container, anchor2, namespace);
        }
        break;
      case Fragment:
        processFragment(
          n1,
          n2,
          container,
          anchor2,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
        break;
      default:
        if (shapeFlag & 1) {
          processElement(
            n1,
            n2,
            container,
            anchor2,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        } else if (shapeFlag & 6) {
          processComponent(
            n1,
            n2,
            container,
            anchor2,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        } else if (shapeFlag & 64) {
          type.process(
            n1,
            n2,
            container,
            anchor2,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized,
            internals
          );
        } else if (shapeFlag & 128) {
          type.process(
            n1,
            n2,
            container,
            anchor2,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized,
            internals
          );
        } else ;
    }
    if (ref3 != null && parentComponent) {
      setRef(ref3, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
    }
  };
  const processText = (n1, n2, container, anchor2) => {
    if (n1 == null) {
      hostInsert(
        n2.el = hostCreateText(n2.children),
        container,
        anchor2
      );
    } else {
      const el = n2.el = n1.el;
      if (n2.children !== n1.children) {
        hostSetText(el, n2.children);
      }
    }
  };
  const processCommentNode = (n1, n2, container, anchor2) => {
    if (n1 == null) {
      hostInsert(
        n2.el = hostCreateComment(n2.children || ""),
        container,
        anchor2
      );
    } else {
      n2.el = n1.el;
    }
  };
  const mountStaticNode = (n2, container, anchor2, namespace) => {
    [n2.el, n2.anchor] = hostInsertStaticContent(
      n2.children,
      container,
      anchor2,
      namespace,
      n2.el,
      n2.anchor
    );
  };
  const moveStaticNode = ({ el, anchor: anchor2 }, container, nextSibling) => {
    let next4;
    while (el && el !== anchor2) {
      next4 = hostNextSibling(el);
      hostInsert(el, container, nextSibling);
      el = next4;
    }
    hostInsert(anchor2, container, nextSibling);
  };
  const removeStaticNode = ({ el, anchor: anchor2 }) => {
    let next4;
    while (el && el !== anchor2) {
      next4 = hostNextSibling(el);
      hostRemove(el);
      el = next4;
    }
    hostRemove(anchor2);
  };
  const processElement = (n1, n2, container, anchor2, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    if (n2.type === "svg") {
      namespace = "svg";
    } else if (n2.type === "math") {
      namespace = "mathml";
    }
    if (n1 == null) {
      mountElement(
        n2,
        container,
        anchor2,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    } else {
      patchElement(
        n1,
        n2,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    }
  };
  const mountElement = (vnode, container, anchor2, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    let el;
    let vnodeHook;
    const { props, shapeFlag, transition, dirs } = vnode;
    el = vnode.el = hostCreateElement(
      vnode.type,
      namespace,
      props && props.is,
      props
    );
    if (shapeFlag & 8) {
      hostSetElementText(el, vnode.children);
    } else if (shapeFlag & 16) {
      mountChildren(
        vnode.children,
        el,
        null,
        parentComponent,
        parentSuspense,
        resolveChildrenNamespace(vnode, namespace),
        slotScopeIds,
        optimized
      );
    }
    if (dirs) {
      invokeDirectiveHook(vnode, null, parentComponent, "created");
    }
    setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);
    if (props) {
      for (const key2 in props) {
        if (key2 !== "value" && !isReservedProp(key2)) {
          hostPatchProp(el, key2, null, props[key2], namespace, parentComponent);
        }
      }
      if ("value" in props) {
        hostPatchProp(el, "value", null, props.value, namespace);
      }
      if (vnodeHook = props.onVnodeBeforeMount) {
        invokeVNodeHook(vnodeHook, parentComponent, vnode);
      }
    }
    if (dirs) {
      invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
    }
    const needCallTransitionHooks = needTransition(parentSuspense, transition);
    if (needCallTransitionHooks) {
      transition.beforeEnter(el);
    }
    hostInsert(el, container, anchor2);
    if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        needCallTransitionHooks && transition.enter(el);
        dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
      }, parentSuspense);
    }
  };
  const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent) => {
    if (scopeId) {
      hostSetScopeId(el, scopeId);
    }
    if (slotScopeIds) {
      for (let i2 = 0; i2 < slotScopeIds.length; i2++) {
        hostSetScopeId(el, slotScopeIds[i2]);
      }
    }
    if (parentComponent) {
      let subTree = parentComponent.subTree;
      if (vnode === subTree || isSuspense(subTree.type) && (subTree.ssContent === vnode || subTree.ssFallback === vnode)) {
        const parentVNode = parentComponent.vnode;
        setScopeId(
          el,
          parentVNode,
          parentVNode.scopeId,
          parentVNode.slotScopeIds,
          parentComponent.parent
        );
      }
    }
  };
  const mountChildren = (children2, container, anchor2, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, start2 = 0) => {
    for (let i2 = start2; i2 < children2.length; i2++) {
      const child2 = children2[i2] = optimized ? cloneIfMounted(children2[i2]) : normalizeVNode(children2[i2]);
      patch(
        null,
        child2,
        container,
        anchor2,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    }
  };
  const patchElement = (n1, n2, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    const el = n2.el = n1.el;
    let { patchFlag, dynamicChildren, dirs } = n2;
    patchFlag |= n1.patchFlag & 16;
    const oldProps = n1.props || EMPTY_OBJ;
    const newProps = n2.props || EMPTY_OBJ;
    let vnodeHook;
    parentComponent && toggleRecurse(parentComponent, false);
    if (vnodeHook = newProps.onVnodeBeforeUpdate) {
      invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
    }
    if (dirs) {
      invokeDirectiveHook(n2, n1, parentComponent, "beforeUpdate");
    }
    parentComponent && toggleRecurse(parentComponent, true);
    if (oldProps.innerHTML && newProps.innerHTML == null || oldProps.textContent && newProps.textContent == null) {
      hostSetElementText(el, "");
    }
    if (dynamicChildren) {
      patchBlockChildren(
        n1.dynamicChildren,
        dynamicChildren,
        el,
        parentComponent,
        parentSuspense,
        resolveChildrenNamespace(n2, namespace),
        slotScopeIds
      );
    } else if (!optimized) {
      patchChildren(
        n1,
        n2,
        el,
        null,
        parentComponent,
        parentSuspense,
        resolveChildrenNamespace(n2, namespace),
        slotScopeIds,
        false
      );
    }
    if (patchFlag > 0) {
      if (patchFlag & 16) {
        patchProps(el, oldProps, newProps, parentComponent, namespace);
      } else {
        if (patchFlag & 2) {
          if (oldProps.class !== newProps.class) {
            hostPatchProp(el, "class", null, newProps.class, namespace);
          }
        }
        if (patchFlag & 4) {
          hostPatchProp(el, "style", oldProps.style, newProps.style, namespace);
        }
        if (patchFlag & 8) {
          const propsToUpdate = n2.dynamicProps;
          for (let i2 = 0; i2 < propsToUpdate.length; i2++) {
            const key2 = propsToUpdate[i2];
            const prev = oldProps[key2];
            const next4 = newProps[key2];
            if (next4 !== prev || key2 === "value") {
              hostPatchProp(el, key2, prev, next4, namespace, parentComponent);
            }
          }
        }
      }
      if (patchFlag & 1) {
        if (n1.children !== n2.children) {
          hostSetElementText(el, n2.children);
        }
      }
    } else if (!optimized && dynamicChildren == null) {
      patchProps(el, oldProps, newProps, parentComponent, namespace);
    }
    if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
        dirs && invokeDirectiveHook(n2, n1, parentComponent, "updated");
      }, parentSuspense);
    }
  };
  const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, namespace, slotScopeIds) => {
    for (let i2 = 0; i2 < newChildren.length; i2++) {
      const oldVNode = oldChildren[i2];
      const newVNode = newChildren[i2];
      const container = (
        // oldVNode may be an errored async setup() component inside Suspense
        // which will not have a mounted element
        oldVNode.el && // - In the case of a Fragment, we need to provide the actual parent
        // of the Fragment itself so it can move its children.
        (oldVNode.type === Fragment || // - In the case of different nodes, there is going to be a replacement
        // which also requires the correct parent container
        !isSameVNodeType(oldVNode, newVNode) || // - In the case of a component, it could contain anything.
        oldVNode.shapeFlag & (6 | 64)) ? hostParentNode(oldVNode.el) : (
          // In other cases, the parent container is not actually used so we
          // just pass the block element here to avoid a DOM parentNode call.
          fallbackContainer
        )
      );
      patch(
        oldVNode,
        newVNode,
        container,
        null,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        true
      );
    }
  };
  const patchProps = (el, oldProps, newProps, parentComponent, namespace) => {
    if (oldProps !== newProps) {
      if (oldProps !== EMPTY_OBJ) {
        for (const key2 in oldProps) {
          if (!isReservedProp(key2) && !(key2 in newProps)) {
            hostPatchProp(
              el,
              key2,
              oldProps[key2],
              null,
              namespace,
              parentComponent
            );
          }
        }
      }
      for (const key2 in newProps) {
        if (isReservedProp(key2)) continue;
        const next4 = newProps[key2];
        const prev = oldProps[key2];
        if (next4 !== prev && key2 !== "value") {
          hostPatchProp(el, key2, prev, next4, namespace, parentComponent);
        }
      }
      if ("value" in newProps) {
        hostPatchProp(el, "value", oldProps.value, newProps.value, namespace);
      }
    }
  };
  const processFragment = (n1, n2, container, anchor2, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText("");
    const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText("");
    let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;
    if (fragmentSlotScopeIds) {
      slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
    }
    if (n1 == null) {
      hostInsert(fragmentStartAnchor, container, anchor2);
      hostInsert(fragmentEndAnchor, container, anchor2);
      mountChildren(
        // #10007
        // such fragment like `<></>` will be compiled into
        // a fragment which doesn't have a children.
        // In this case fallback to an empty array
        n2.children || [],
        container,
        fragmentEndAnchor,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    } else {
      if (patchFlag > 0 && patchFlag & 64 && dynamicChildren && // #2715 the previous fragment could've been a BAILed one as a result
      // of renderSlot() with no valid children
      n1.dynamicChildren) {
        patchBlockChildren(
          n1.dynamicChildren,
          dynamicChildren,
          container,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds
        );
        if (
          // #2080 if the stable fragment has a key, it's a <template v-for> that may
          //  get moved around. Make sure all root level vnodes inherit el.
          // #2134 or if it's a component root, it may also get moved around
          // as the component is being moved.
          n2.key != null || parentComponent && n2 === parentComponent.subTree
        ) {
          traverseStaticChildren(
            n1,
            n2,
            true
            /* shallow */
          );
        }
      } else {
        patchChildren(
          n1,
          n2,
          container,
          fragmentEndAnchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
      }
    }
  };
  const processComponent = (n1, n2, container, anchor2, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    n2.slotScopeIds = slotScopeIds;
    if (n1 == null) {
      if (n2.shapeFlag & 512) {
        parentComponent.ctx.activate(
          n2,
          container,
          anchor2,
          namespace,
          optimized
        );
      } else {
        mountComponent(
          n2,
          container,
          anchor2,
          parentComponent,
          parentSuspense,
          namespace,
          optimized
        );
      }
    } else {
      updateComponent(n1, n2, optimized);
    }
  };
  const mountComponent = (initialVNode, container, anchor2, parentComponent, parentSuspense, namespace, optimized) => {
    const instance = initialVNode.component = createComponentInstance(
      initialVNode,
      parentComponent,
      parentSuspense
    );
    if (isKeepAlive(initialVNode)) {
      instance.ctx.renderer = internals;
    }
    {
      setupComponent(instance, false, optimized);
    }
    if (instance.asyncDep) {
      parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect, optimized);
      if (!initialVNode.el) {
        const placeholder = instance.subTree = createVNode(Comment);
        processCommentNode(null, placeholder, container, anchor2);
      }
    } else {
      setupRenderEffect(
        instance,
        initialVNode,
        container,
        anchor2,
        parentSuspense,
        namespace,
        optimized
      );
    }
  };
  const updateComponent = (n1, n2, optimized) => {
    const instance = n2.component = n1.component;
    if (shouldUpdateComponent(n1, n2, optimized)) {
      if (instance.asyncDep && !instance.asyncResolved) {
        updateComponentPreRender(instance, n2, optimized);
        return;
      } else {
        instance.next = n2;
        instance.update();
      }
    } else {
      n2.el = n1.el;
      instance.vnode = n2;
    }
  };
  const setupRenderEffect = (instance, initialVNode, container, anchor2, parentSuspense, namespace, optimized) => {
    const componentUpdateFn = () => {
      if (!instance.isMounted) {
        let vnodeHook;
        const { el, props } = initialVNode;
        const { bm, m: m2, parent: parent2, root, type } = instance;
        const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);
        toggleRecurse(instance, false);
        if (bm) {
          invokeArrayFns(bm);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeBeforeMount)) {
          invokeVNodeHook(vnodeHook, parent2, initialVNode);
        }
        toggleRecurse(instance, true);
        if (el && hydrateNode) {
          const hydrateSubTree = () => {
            instance.subTree = renderComponentRoot(instance);
            hydrateNode(
              el,
              instance.subTree,
              instance,
              parentSuspense,
              null
            );
          };
          if (isAsyncWrapperVNode && type.__asyncHydrate) {
            type.__asyncHydrate(
              el,
              instance,
              hydrateSubTree
            );
          } else {
            hydrateSubTree();
          }
        } else {
          if (root.ce) {
            root.ce._injectChildStyle(type);
          }
          const subTree = instance.subTree = renderComponentRoot(instance);
          patch(
            null,
            subTree,
            container,
            anchor2,
            instance,
            parentSuspense,
            namespace
          );
          initialVNode.el = subTree.el;
        }
        if (m2) {
          queuePostRenderEffect(m2, parentSuspense);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeMounted)) {
          const scopedInitialVNode = initialVNode;
          queuePostRenderEffect(
            () => invokeVNodeHook(vnodeHook, parent2, scopedInitialVNode),
            parentSuspense
          );
        }
        if (initialVNode.shapeFlag & 256 || parent2 && isAsyncWrapper(parent2.vnode) && parent2.vnode.shapeFlag & 256) {
          instance.a && queuePostRenderEffect(instance.a, parentSuspense);
        }
        instance.isMounted = true;
        initialVNode = container = anchor2 = null;
      } else {
        let { next: next4, bu, u: u2, parent: parent2, vnode } = instance;
        {
          const nonHydratedAsyncRoot = locateNonHydratedAsyncRoot(instance);
          if (nonHydratedAsyncRoot) {
            if (next4) {
              next4.el = vnode.el;
              updateComponentPreRender(instance, next4, optimized);
            }
            nonHydratedAsyncRoot.asyncDep.then(() => {
              if (!instance.isUnmounted) {
                componentUpdateFn();
              }
            });
            return;
          }
        }
        let originNext = next4;
        let vnodeHook;
        toggleRecurse(instance, false);
        if (next4) {
          next4.el = vnode.el;
          updateComponentPreRender(instance, next4, optimized);
        } else {
          next4 = vnode;
        }
        if (bu) {
          invokeArrayFns(bu);
        }
        if (vnodeHook = next4.props && next4.props.onVnodeBeforeUpdate) {
          invokeVNodeHook(vnodeHook, parent2, next4, vnode);
        }
        toggleRecurse(instance, true);
        const nextTree = renderComponentRoot(instance);
        const prevTree = instance.subTree;
        instance.subTree = nextTree;
        patch(
          prevTree,
          nextTree,
          // parent may have changed if it's in a teleport
          hostParentNode(prevTree.el),
          // anchor may have changed if it's in a fragment
          getNextHostNode(prevTree),
          instance,
          parentSuspense,
          namespace
        );
        next4.el = nextTree.el;
        if (originNext === null) {
          updateHOCHostEl(instance, nextTree.el);
        }
        if (u2) {
          queuePostRenderEffect(u2, parentSuspense);
        }
        if (vnodeHook = next4.props && next4.props.onVnodeUpdated) {
          queuePostRenderEffect(
            () => invokeVNodeHook(vnodeHook, parent2, next4, vnode),
            parentSuspense
          );
        }
      }
    };
    instance.scope.on();
    const effect2 = instance.effect = new ReactiveEffect(componentUpdateFn);
    instance.scope.off();
    const update = instance.update = effect2.run.bind(effect2);
    const job = instance.job = effect2.runIfDirty.bind(effect2);
    job.i = instance;
    job.id = instance.uid;
    effect2.scheduler = () => queueJob(job);
    toggleRecurse(instance, true);
    update();
  };
  const updateComponentPreRender = (instance, nextVNode, optimized) => {
    nextVNode.component = instance;
    const prevProps = instance.vnode.props;
    instance.vnode = nextVNode;
    instance.next = null;
    updateProps(instance, nextVNode.props, prevProps, optimized);
    updateSlots(instance, nextVNode.children, optimized);
    pauseTracking();
    flushPreFlushCbs(instance);
    resetTracking();
  };
  const patchChildren = (n1, n2, container, anchor2, parentComponent, parentSuspense, namespace, slotScopeIds, optimized = false) => {
    const c1 = n1 && n1.children;
    const prevShapeFlag = n1 ? n1.shapeFlag : 0;
    const c2 = n2.children;
    const { patchFlag, shapeFlag } = n2;
    if (patchFlag > 0) {
      if (patchFlag & 128) {
        patchKeyedChildren(
          c1,
          c2,
          container,
          anchor2,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
        return;
      } else if (patchFlag & 256) {
        patchUnkeyedChildren(
          c1,
          c2,
          container,
          anchor2,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
        return;
      }
    }
    if (shapeFlag & 8) {
      if (prevShapeFlag & 16) {
        unmountChildren(c1, parentComponent, parentSuspense);
      }
      if (c2 !== c1) {
        hostSetElementText(container, c2);
      }
    } else {
      if (prevShapeFlag & 16) {
        if (shapeFlag & 16) {
          patchKeyedChildren(
            c1,
            c2,
            container,
            anchor2,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        } else {
          unmountChildren(c1, parentComponent, parentSuspense, true);
        }
      } else {
        if (prevShapeFlag & 8) {
          hostSetElementText(container, "");
        }
        if (shapeFlag & 16) {
          mountChildren(
            c2,
            container,
            anchor2,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        }
      }
    }
  };
  const patchUnkeyedChildren = (c1, c2, container, anchor2, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    c1 = c1 || EMPTY_ARR;
    c2 = c2 || EMPTY_ARR;
    const oldLength = c1.length;
    const newLength = c2.length;
    const commonLength = Math.min(oldLength, newLength);
    let i2;
    for (i2 = 0; i2 < commonLength; i2++) {
      const nextChild = c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]);
      patch(
        c1[i2],
        nextChild,
        container,
        null,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    }
    if (oldLength > newLength) {
      unmountChildren(
        c1,
        parentComponent,
        parentSuspense,
        true,
        false,
        commonLength
      );
    } else {
      mountChildren(
        c2,
        container,
        anchor2,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized,
        commonLength
      );
    }
  };
  const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    let i2 = 0;
    const l2 = c2.length;
    let e1 = c1.length - 1;
    let e2 = l2 - 1;
    while (i2 <= e1 && i2 <= e2) {
      const n1 = c1[i2];
      const n2 = c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]);
      if (isSameVNodeType(n1, n2)) {
        patch(
          n1,
          n2,
          container,
          null,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
      } else {
        break;
      }
      i2++;
    }
    while (i2 <= e1 && i2 <= e2) {
      const n1 = c1[e1];
      const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);
      if (isSameVNodeType(n1, n2)) {
        patch(
          n1,
          n2,
          container,
          null,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
      } else {
        break;
      }
      e1--;
      e2--;
    }
    if (i2 > e1) {
      if (i2 <= e2) {
        const nextPos = e2 + 1;
        const anchor2 = nextPos < l2 ? c2[nextPos].el : parentAnchor;
        while (i2 <= e2) {
          patch(
            null,
            c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]),
            container,
            anchor2,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
          i2++;
        }
      }
    } else if (i2 > e2) {
      while (i2 <= e1) {
        unmount(c1[i2], parentComponent, parentSuspense, true);
        i2++;
      }
    } else {
      const s1 = i2;
      const s2 = i2;
      const keyToNewIndexMap = /* @__PURE__ */ new Map();
      for (i2 = s2; i2 <= e2; i2++) {
        const nextChild = c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]);
        if (nextChild.key != null) {
          keyToNewIndexMap.set(nextChild.key, i2);
        }
      }
      let j2;
      let patched = 0;
      const toBePatched = e2 - s2 + 1;
      let moved = false;
      let maxNewIndexSoFar = 0;
      const newIndexToOldIndexMap = new Array(toBePatched);
      for (i2 = 0; i2 < toBePatched; i2++) newIndexToOldIndexMap[i2] = 0;
      for (i2 = s1; i2 <= e1; i2++) {
        const prevChild = c1[i2];
        if (patched >= toBePatched) {
          unmount(prevChild, parentComponent, parentSuspense, true);
          continue;
        }
        let newIndex;
        if (prevChild.key != null) {
          newIndex = keyToNewIndexMap.get(prevChild.key);
        } else {
          for (j2 = s2; j2 <= e2; j2++) {
            if (newIndexToOldIndexMap[j2 - s2] === 0 && isSameVNodeType(prevChild, c2[j2])) {
              newIndex = j2;
              break;
            }
          }
        }
        if (newIndex === void 0) {
          unmount(prevChild, parentComponent, parentSuspense, true);
        } else {
          newIndexToOldIndexMap[newIndex - s2] = i2 + 1;
          if (newIndex >= maxNewIndexSoFar) {
            maxNewIndexSoFar = newIndex;
          } else {
            moved = true;
          }
          patch(
            prevChild,
            c2[newIndex],
            container,
            null,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
          patched++;
        }
      }
      const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : EMPTY_ARR;
      j2 = increasingNewIndexSequence.length - 1;
      for (i2 = toBePatched - 1; i2 >= 0; i2--) {
        const nextIndex = s2 + i2;
        const nextChild = c2[nextIndex];
        const anchor2 = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
        if (newIndexToOldIndexMap[i2] === 0) {
          patch(
            null,
            nextChild,
            container,
            anchor2,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        } else if (moved) {
          if (j2 < 0 || i2 !== increasingNewIndexSequence[j2]) {
            move(nextChild, container, anchor2, 2);
          } else {
            j2--;
          }
        }
      }
    }
  };
  const move = (vnode, container, anchor2, moveType, parentSuspense = null) => {
    const { el, type, transition, children: children2, shapeFlag } = vnode;
    if (shapeFlag & 6) {
      move(vnode.component.subTree, container, anchor2, moveType);
      return;
    }
    if (shapeFlag & 128) {
      vnode.suspense.move(container, anchor2, moveType);
      return;
    }
    if (shapeFlag & 64) {
      type.move(vnode, container, anchor2, internals);
      return;
    }
    if (type === Fragment) {
      hostInsert(el, container, anchor2);
      for (let i2 = 0; i2 < children2.length; i2++) {
        move(children2[i2], container, anchor2, moveType);
      }
      hostInsert(vnode.anchor, container, anchor2);
      return;
    }
    if (type === Static) {
      moveStaticNode(vnode, container, anchor2);
      return;
    }
    const needTransition2 = moveType !== 2 && shapeFlag & 1 && transition;
    if (needTransition2) {
      if (moveType === 0) {
        transition.beforeEnter(el);
        hostInsert(el, container, anchor2);
        queuePostRenderEffect(() => transition.enter(el), parentSuspense);
      } else {
        const { leave, delayLeave, afterLeave } = transition;
        const remove22 = () => hostInsert(el, container, anchor2);
        const performLeave = () => {
          leave(el, () => {
            remove22();
            afterLeave && afterLeave();
          });
        };
        if (delayLeave) {
          delayLeave(el, remove22, performLeave);
        } else {
          performLeave();
        }
      }
    } else {
      hostInsert(el, container, anchor2);
    }
  };
  const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {
    const {
      type,
      props,
      ref: ref3,
      children: children2,
      dynamicChildren,
      shapeFlag,
      patchFlag,
      dirs,
      cacheIndex
    } = vnode;
    if (patchFlag === -2) {
      optimized = false;
    }
    if (ref3 != null) {
      setRef(ref3, null, parentSuspense, vnode, true);
    }
    if (cacheIndex != null) {
      parentComponent.renderCache[cacheIndex] = void 0;
    }
    if (shapeFlag & 256) {
      parentComponent.ctx.deactivate(vnode);
      return;
    }
    const shouldInvokeDirs = shapeFlag & 1 && dirs;
    const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);
    let vnodeHook;
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeBeforeUnmount)) {
      invokeVNodeHook(vnodeHook, parentComponent, vnode);
    }
    if (shapeFlag & 6) {
      unmountComponent(vnode.component, parentSuspense, doRemove);
    } else {
      if (shapeFlag & 128) {
        vnode.suspense.unmount(parentSuspense, doRemove);
        return;
      }
      if (shouldInvokeDirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "beforeUnmount");
      }
      if (shapeFlag & 64) {
        vnode.type.remove(
          vnode,
          parentComponent,
          parentSuspense,
          internals,
          doRemove
        );
      } else if (dynamicChildren && // #5154
      // when v-once is used inside a block, setBlockTracking(-1) marks the
      // parent block with hasOnce: true
      // so that it doesn't take the fast path during unmount - otherwise
      // components nested in v-once are never unmounted.
      !dynamicChildren.hasOnce && // #1153: fast path should not be taken for non-stable (v-for) fragments
      (type !== Fragment || patchFlag > 0 && patchFlag & 64)) {
        unmountChildren(
          dynamicChildren,
          parentComponent,
          parentSuspense,
          false,
          true
        );
      } else if (type === Fragment && patchFlag & (128 | 256) || !optimized && shapeFlag & 16) {
        unmountChildren(children2, parentComponent, parentSuspense);
      }
      if (doRemove) {
        remove2(vnode);
      }
    }
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, "unmounted");
      }, parentSuspense);
    }
  };
  const remove2 = (vnode) => {
    const { type, el, anchor: anchor2, transition } = vnode;
    if (type === Fragment) {
      {
        removeFragment(el, anchor2);
      }
      return;
    }
    if (type === Static) {
      removeStaticNode(vnode);
      return;
    }
    const performRemove = () => {
      hostRemove(el);
      if (transition && !transition.persisted && transition.afterLeave) {
        transition.afterLeave();
      }
    };
    if (vnode.shapeFlag & 1 && transition && !transition.persisted) {
      const { leave, delayLeave } = transition;
      const performLeave = () => leave(el, performRemove);
      if (delayLeave) {
        delayLeave(vnode.el, performRemove, performLeave);
      } else {
        performLeave();
      }
    } else {
      performRemove();
    }
  };
  const removeFragment = (cur, end2) => {
    let next4;
    while (cur !== end2) {
      next4 = hostNextSibling(cur);
      hostRemove(cur);
      cur = next4;
    }
    hostRemove(end2);
  };
  const unmountComponent = (instance, parentSuspense, doRemove) => {
    const { bum, scope, job, subTree, um, m: m2, a: a2 } = instance;
    invalidateMount(m2);
    invalidateMount(a2);
    if (bum) {
      invokeArrayFns(bum);
    }
    scope.stop();
    if (job) {
      job.flags |= 8;
      unmount(subTree, instance, parentSuspense, doRemove);
    }
    if (um) {
      queuePostRenderEffect(um, parentSuspense);
    }
    queuePostRenderEffect(() => {
      instance.isUnmounted = true;
    }, parentSuspense);
    if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
      parentSuspense.deps--;
      if (parentSuspense.deps === 0) {
        parentSuspense.resolve();
      }
    }
  };
  const unmountChildren = (children2, parentComponent, parentSuspense, doRemove = false, optimized = false, start2 = 0) => {
    for (let i2 = start2; i2 < children2.length; i2++) {
      unmount(children2[i2], parentComponent, parentSuspense, doRemove, optimized);
    }
  };
  const getNextHostNode = (vnode) => {
    if (vnode.shapeFlag & 6) {
      return getNextHostNode(vnode.component.subTree);
    }
    if (vnode.shapeFlag & 128) {
      return vnode.suspense.next();
    }
    const el = hostNextSibling(vnode.anchor || vnode.el);
    const teleportEnd = el && el[TeleportEndKey];
    return teleportEnd ? hostNextSibling(teleportEnd) : el;
  };
  let isFlushing = false;
  const render2 = (vnode, container, namespace) => {
    if (vnode == null) {
      if (container._vnode) {
        unmount(container._vnode, null, null, true);
      }
    } else {
      patch(
        container._vnode || null,
        vnode,
        container,
        null,
        null,
        null,
        namespace
      );
    }
    container._vnode = vnode;
    if (!isFlushing) {
      isFlushing = true;
      flushPreFlushCbs();
      flushPostFlushCbs();
      isFlushing = false;
    }
  };
  const internals = {
    p: patch,
    um: unmount,
    m: move,
    r: remove2,
    mt: mountComponent,
    mc: mountChildren,
    pc: patchChildren,
    pbc: patchBlockChildren,
    n: getNextHostNode,
    o: options
  };
  let hydrate2;
  let hydrateNode;
  if (createHydrationFns) {
    [hydrate2, hydrateNode] = createHydrationFns(
      internals
    );
  }
  return {
    render: render2,
    hydrate: hydrate2,
    createApp: createAppAPI(render2, hydrate2)
  };
}
function resolveChildrenNamespace({ type, props }, currentNamespace) {
  return currentNamespace === "svg" && type === "foreignObject" || currentNamespace === "mathml" && type === "annotation-xml" && props && props.encoding && props.encoding.includes("html") ? void 0 : currentNamespace;
}
function toggleRecurse({ effect: effect2, job }, allowed) {
  if (allowed) {
    effect2.flags |= 32;
    job.flags |= 4;
  } else {
    effect2.flags &= ~32;
    job.flags &= ~4;
  }
}
function needTransition(parentSuspense, transition) {
  return (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
}
function traverseStaticChildren(n1, n2, shallow = false) {
  const ch1 = n1.children;
  const ch2 = n2.children;
  if (isArray$g(ch1) && isArray$g(ch2)) {
    for (let i2 = 0; i2 < ch1.length; i2++) {
      const c1 = ch1[i2];
      let c2 = ch2[i2];
      if (c2.shapeFlag & 1 && !c2.dynamicChildren) {
        if (c2.patchFlag <= 0 || c2.patchFlag === 32) {
          c2 = ch2[i2] = cloneIfMounted(ch2[i2]);
          c2.el = c1.el;
        }
        if (!shallow && c2.patchFlag !== -2)
          traverseStaticChildren(c1, c2);
      }
      if (c2.type === Text$1) {
        c2.el = c1.el;
      }
    }
  }
}
function getSequence(arr) {
  const p2 = arr.slice();
  const result = [0];
  let i2, j2, u2, v2, c2;
  const len = arr.length;
  for (i2 = 0; i2 < len; i2++) {
    const arrI = arr[i2];
    if (arrI !== 0) {
      j2 = result[result.length - 1];
      if (arr[j2] < arrI) {
        p2[i2] = j2;
        result.push(i2);
        continue;
      }
      u2 = 0;
      v2 = result.length - 1;
      while (u2 < v2) {
        c2 = u2 + v2 >> 1;
        if (arr[result[c2]] < arrI) {
          u2 = c2 + 1;
        } else {
          v2 = c2;
        }
      }
      if (arrI < arr[result[u2]]) {
        if (u2 > 0) {
          p2[i2] = result[u2 - 1];
        }
        result[u2] = i2;
      }
    }
  }
  u2 = result.length;
  v2 = result[u2 - 1];
  while (u2-- > 0) {
    result[u2] = v2;
    v2 = p2[v2];
  }
  return result;
}
function locateNonHydratedAsyncRoot(instance) {
  const subComponent = instance.subTree.component;
  if (subComponent) {
    if (subComponent.asyncDep && !subComponent.asyncResolved) {
      return subComponent;
    } else {
      return locateNonHydratedAsyncRoot(subComponent);
    }
  }
}
function invalidateMount(hooks) {
  if (hooks) {
    for (let i2 = 0; i2 < hooks.length; i2++)
      hooks[i2].flags |= 8;
  }
}
const ssrContextKey = Symbol.for("v-scx");
const useSSRContext = () => {
  {
    const ctx = inject(ssrContextKey);
    return ctx;
  }
};
function watchEffect(effect2, options) {
  return doWatch(effect2, null, options);
}
function watchPostEffect(effect2, options) {
  return doWatch(
    effect2,
    null,
    { flush: "post" }
  );
}
function watchSyncEffect(effect2, options) {
  return doWatch(
    effect2,
    null,
    { flush: "sync" }
  );
}
function watch(source, cb, options) {
  return doWatch(source, cb, options);
}
function doWatch(source, cb, options = EMPTY_OBJ) {
  const { immediate, deep, flush: flush2, once } = options;
  const baseWatchOptions = extend$2({}, options);
  const runsImmediately = cb && immediate || !cb && flush2 !== "post";
  let ssrCleanup;
  if (isInSSRComponentSetup) {
    if (flush2 === "sync") {
      const ctx = useSSRContext();
      ssrCleanup = ctx.__watcherHandles || (ctx.__watcherHandles = []);
    } else if (!runsImmediately) {
      const watchStopHandle = () => {
      };
      watchStopHandle.stop = NOOP;
      watchStopHandle.resume = NOOP;
      watchStopHandle.pause = NOOP;
      return watchStopHandle;
    }
  }
  const instance = currentInstance;
  baseWatchOptions.call = (fn2, type, args) => callWithAsyncErrorHandling(fn2, instance, type, args);
  let isPre = false;
  if (flush2 === "post") {
    baseWatchOptions.scheduler = (job) => {
      queuePostRenderEffect(job, instance && instance.suspense);
    };
  } else if (flush2 !== "sync") {
    isPre = true;
    baseWatchOptions.scheduler = (job, isFirstRun) => {
      if (isFirstRun) {
        job();
      } else {
        queueJob(job);
      }
    };
  }
  baseWatchOptions.augmentJob = (job) => {
    if (cb) {
      job.flags |= 4;
    }
    if (isPre) {
      job.flags |= 2;
      if (instance) {
        job.id = instance.uid;
        job.i = instance;
      }
    }
  };
  const watchHandle = watch$1(source, cb, baseWatchOptions);
  if (isInSSRComponentSetup) {
    if (ssrCleanup) {
      ssrCleanup.push(watchHandle);
    } else if (runsImmediately) {
      watchHandle();
    }
  }
  return watchHandle;
}
function instanceWatch(source, value2, options) {
  const publicThis = this.proxy;
  const getter = isString$1(source) ? source.includes(".") ? createPathGetter(publicThis, source) : () => publicThis[source] : source.bind(publicThis, publicThis);
  let cb;
  if (isFunction(value2)) {
    cb = value2;
  } else {
    cb = value2.handler;
    options = value2;
  }
  const reset2 = setCurrentInstance(this);
  const res = doWatch(getter, cb.bind(publicThis), options);
  reset2();
  return res;
}
function createPathGetter(ctx, path2) {
  const segments = path2.split(".");
  return () => {
    let cur = ctx;
    for (let i2 = 0; i2 < segments.length && cur; i2++) {
      cur = cur[segments[i2]];
    }
    return cur;
  };
}
function useModel(props, name, options = EMPTY_OBJ) {
  const i2 = getCurrentInstance();
  const camelizedName = camelize(name);
  const hyphenatedName = hyphenate(name);
  const modifiers = getModelModifiers(props, camelizedName);
  const res = customRef((track2, trigger2) => {
    let localValue;
    let prevSetValue = EMPTY_OBJ;
    let prevEmittedValue;
    watchSyncEffect(() => {
      const propValue = props[camelizedName];
      if (hasChanged(localValue, propValue)) {
        localValue = propValue;
        trigger2();
      }
    });
    return {
      get() {
        track2();
        return options.get ? options.get(localValue) : localValue;
      },
      set(value2) {
        const emittedValue = options.set ? options.set(value2) : value2;
        if (!hasChanged(emittedValue, localValue) && !(prevSetValue !== EMPTY_OBJ && hasChanged(value2, prevSetValue))) {
          return;
        }
        const rawProps = i2.vnode.props;
        if (!(rawProps && // check if parent has passed v-model
        (name in rawProps || camelizedName in rawProps || hyphenatedName in rawProps) && (`onUpdate:${name}` in rawProps || `onUpdate:${camelizedName}` in rawProps || `onUpdate:${hyphenatedName}` in rawProps))) {
          localValue = value2;
          trigger2();
        }
        i2.emit(`update:${name}`, emittedValue);
        if (hasChanged(value2, emittedValue) && hasChanged(value2, prevSetValue) && !hasChanged(emittedValue, prevEmittedValue)) {
          trigger2();
        }
        prevSetValue = value2;
        prevEmittedValue = emittedValue;
      }
    };
  });
  res[Symbol.iterator] = () => {
    let i22 = 0;
    return {
      next() {
        if (i22 < 2) {
          return { value: i22++ ? modifiers || EMPTY_OBJ : res, done: false };
        } else {
          return { done: true };
        }
      }
    };
  };
  return res;
}
const getModelModifiers = (props, modelName) => {
  return modelName === "modelValue" || modelName === "model-value" ? props.modelModifiers : props[`${modelName}Modifiers`] || props[`${camelize(modelName)}Modifiers`] || props[`${hyphenate(modelName)}Modifiers`];
};
function emit(instance, event, ...rawArgs) {
  if (instance.isUnmounted) return;
  const props = instance.vnode.props || EMPTY_OBJ;
  let args = rawArgs;
  const isModelListener2 = event.startsWith("update:");
  const modifiers = isModelListener2 && getModelModifiers(props, event.slice(7));
  if (modifiers) {
    if (modifiers.trim) {
      args = rawArgs.map((a2) => isString$1(a2) ? a2.trim() : a2);
    }
    if (modifiers.number) {
      args = rawArgs.map(looseToNumber);
    }
  }
  let handlerName;
  let handler = props[handlerName = toHandlerKey(event)] || // also try camelCase event handler (#2249)
  props[handlerName = toHandlerKey(camelize(event))];
  if (!handler && isModelListener2) {
    handler = props[handlerName = toHandlerKey(hyphenate(event))];
  }
  if (handler) {
    callWithAsyncErrorHandling(
      handler,
      instance,
      6,
      args
    );
  }
  const onceHandler = props[handlerName + `Once`];
  if (onceHandler) {
    if (!instance.emitted) {
      instance.emitted = {};
    } else if (instance.emitted[handlerName]) {
      return;
    }
    instance.emitted[handlerName] = true;
    callWithAsyncErrorHandling(
      onceHandler,
      instance,
      6,
      args
    );
  }
}
function normalizeEmitsOptions(comp, appContext, asMixin = false) {
  const cache = appContext.emitsCache;
  const cached = cache.get(comp);
  if (cached !== void 0) {
    return cached;
  }
  const raw = comp.emits;
  let normalized = {};
  let hasExtends = false;
  if (!isFunction(comp)) {
    const extendEmits = (raw2) => {
      const normalizedFromExtend = normalizeEmitsOptions(raw2, appContext, true);
      if (normalizedFromExtend) {
        hasExtends = true;
        extend$2(normalized, normalizedFromExtend);
      }
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendEmits);
    }
    if (comp.extends) {
      extendEmits(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendEmits);
    }
  }
  if (!raw && !hasExtends) {
    if (isObject$l(comp)) {
      cache.set(comp, null);
    }
    return null;
  }
  if (isArray$g(raw)) {
    raw.forEach((key2) => normalized[key2] = null);
  } else {
    extend$2(normalized, raw);
  }
  if (isObject$l(comp)) {
    cache.set(comp, normalized);
  }
  return normalized;
}
function isEmitListener(options, key2) {
  if (!options || !isOn(key2)) {
    return false;
  }
  key2 = key2.slice(2).replace(/Once$/, "");
  return hasOwn$l(options, key2[0].toLowerCase() + key2.slice(1)) || hasOwn$l(options, hyphenate(key2)) || hasOwn$l(options, key2);
}
function markAttrsAccessed() {
}
function renderComponentRoot(instance) {
  const {
    type: Component,
    vnode,
    proxy,
    withProxy,
    propsOptions: [propsOptions],
    slots,
    attrs,
    emit: emit2,
    render: render2,
    renderCache,
    props,
    data: data2,
    setupState,
    ctx,
    inheritAttrs
  } = instance;
  const prev = setCurrentRenderingInstance(instance);
  let result;
  let fallthroughAttrs;
  try {
    if (vnode.shapeFlag & 4) {
      const proxyToUse = withProxy || proxy;
      const thisProxy = false ? new Proxy(proxyToUse, {
        get(target, key2, receiver) {
          warn$1(
            `Property '${String(
              key2
            )}' was accessed via 'this'. Avoid using 'this' in templates.`
          );
          return Reflect.get(target, key2, receiver);
        }
      }) : proxyToUse;
      result = normalizeVNode(
        render2.call(
          thisProxy,
          proxyToUse,
          renderCache,
          false ? shallowReadonly(props) : props,
          setupState,
          data2,
          ctx
        )
      );
      fallthroughAttrs = attrs;
    } else {
      const render22 = Component;
      if (false) ;
      result = normalizeVNode(
        render22.length > 1 ? render22(
          false ? shallowReadonly(props) : props,
          false ? {
            get attrs() {
              markAttrsAccessed();
              return shallowReadonly(attrs);
            },
            slots,
            emit: emit2
          } : { attrs, slots, emit: emit2 }
        ) : render22(
          false ? shallowReadonly(props) : props,
          null
        )
      );
      fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);
    }
  } catch (err) {
    blockStack.length = 0;
    handleError(err, instance, 1);
    result = createVNode(Comment);
  }
  let root = result;
  if (fallthroughAttrs && inheritAttrs !== false) {
    const keys6 = Object.keys(fallthroughAttrs);
    const { shapeFlag } = root;
    if (keys6.length) {
      if (shapeFlag & (1 | 6)) {
        if (propsOptions && keys6.some(isModelListener)) {
          fallthroughAttrs = filterModelListeners(
            fallthroughAttrs,
            propsOptions
          );
        }
        root = cloneVNode(root, fallthroughAttrs, false, true);
      }
    }
  }
  if (vnode.dirs) {
    root = cloneVNode(root, null, false, true);
    root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;
  }
  if (vnode.transition) {
    setTransitionHooks(root, vnode.transition);
  }
  {
    result = root;
  }
  setCurrentRenderingInstance(prev);
  return result;
}
function filterSingleRoot(children2, recurse = true) {
  let singleRoot;
  for (let i2 = 0; i2 < children2.length; i2++) {
    const child2 = children2[i2];
    if (isVNode(child2)) {
      if (child2.type !== Comment || child2.children === "v-if") {
        if (singleRoot) {
          return;
        } else {
          singleRoot = child2;
        }
      }
    } else {
      return;
    }
  }
  return singleRoot;
}
const getFunctionalFallthrough = (attrs) => {
  let res;
  for (const key2 in attrs) {
    if (key2 === "class" || key2 === "style" || isOn(key2)) {
      (res || (res = {}))[key2] = attrs[key2];
    }
  }
  return res;
};
const filterModelListeners = (attrs, props) => {
  const res = {};
  for (const key2 in attrs) {
    if (!isModelListener(key2) || !(key2.slice(9) in props)) {
      res[key2] = attrs[key2];
    }
  }
  return res;
};
function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
  const { props: prevProps, children: prevChildren, component } = prevVNode;
  const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;
  const emits = component.emitsOptions;
  if (nextVNode.dirs || nextVNode.transition) {
    return true;
  }
  if (optimized && patchFlag >= 0) {
    if (patchFlag & 1024) {
      return true;
    }
    if (patchFlag & 16) {
      if (!prevProps) {
        return !!nextProps;
      }
      return hasPropsChanged(prevProps, nextProps, emits);
    } else if (patchFlag & 8) {
      const dynamicProps = nextVNode.dynamicProps;
      for (let i2 = 0; i2 < dynamicProps.length; i2++) {
        const key2 = dynamicProps[i2];
        if (nextProps[key2] !== prevProps[key2] && !isEmitListener(emits, key2)) {
          return true;
        }
      }
    }
  } else {
    if (prevChildren || nextChildren) {
      if (!nextChildren || !nextChildren.$stable) {
        return true;
      }
    }
    if (prevProps === nextProps) {
      return false;
    }
    if (!prevProps) {
      return !!nextProps;
    }
    if (!nextProps) {
      return true;
    }
    return hasPropsChanged(prevProps, nextProps, emits);
  }
  return false;
}
function hasPropsChanged(prevProps, nextProps, emitsOptions) {
  const nextKeys = Object.keys(nextProps);
  if (nextKeys.length !== Object.keys(prevProps).length) {
    return true;
  }
  for (let i2 = 0; i2 < nextKeys.length; i2++) {
    const key2 = nextKeys[i2];
    if (nextProps[key2] !== prevProps[key2] && !isEmitListener(emitsOptions, key2)) {
      return true;
    }
  }
  return false;
}
function updateHOCHostEl({ vnode, parent: parent2 }, el) {
  while (parent2) {
    const root = parent2.subTree;
    if (root.suspense && root.suspense.activeBranch === vnode) {
      root.el = vnode.el;
    }
    if (root === vnode) {
      (vnode = parent2.vnode).el = el;
      parent2 = parent2.parent;
    } else {
      break;
    }
  }
}
const isSuspense = (type) => type.__isSuspense;
let suspenseId = 0;
const SuspenseImpl = {
  name: "Suspense",
  // In order to make Suspense tree-shakable, we need to avoid importing it
  // directly in the renderer. The renderer checks for the __isSuspense flag
  // on a vnode's type and calls the `process` method, passing in renderer
  // internals.
  __isSuspense: true,
  process(n1, n2, container, anchor2, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, rendererInternals) {
    if (n1 == null) {
      mountSuspense(
        n2,
        container,
        anchor2,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized,
        rendererInternals
      );
    } else {
      if (parentSuspense && parentSuspense.deps > 0 && !n1.suspense.isInFallback) {
        n2.suspense = n1.suspense;
        n2.suspense.vnode = n2;
        n2.el = n1.el;
        return;
      }
      patchSuspense(
        n1,
        n2,
        container,
        anchor2,
        parentComponent,
        namespace,
        slotScopeIds,
        optimized,
        rendererInternals
      );
    }
  },
  hydrate: hydrateSuspense,
  normalize: normalizeSuspenseChildren
};
const Suspense = SuspenseImpl;
function triggerEvent(vnode, name) {
  const eventListener2 = vnode.props && vnode.props[name];
  if (isFunction(eventListener2)) {
    eventListener2();
  }
}
function mountSuspense(vnode, container, anchor2, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, rendererInternals) {
  const {
    p: patch,
    o: { createElement: createElement2 }
  } = rendererInternals;
  const hiddenContainer = createElement2("div");
  const suspense = vnode.suspense = createSuspenseBoundary(
    vnode,
    parentSuspense,
    parentComponent,
    container,
    hiddenContainer,
    anchor2,
    namespace,
    slotScopeIds,
    optimized,
    rendererInternals
  );
  patch(
    null,
    suspense.pendingBranch = vnode.ssContent,
    hiddenContainer,
    null,
    parentComponent,
    suspense,
    namespace,
    slotScopeIds
  );
  if (suspense.deps > 0) {
    triggerEvent(vnode, "onPending");
    triggerEvent(vnode, "onFallback");
    patch(
      null,
      vnode.ssFallback,
      container,
      anchor2,
      parentComponent,
      null,
      // fallback tree will not have suspense context
      namespace,
      slotScopeIds
    );
    setActiveBranch(suspense, vnode.ssFallback);
  } else {
    suspense.resolve(false, true);
  }
}
function patchSuspense(n1, n2, container, anchor2, parentComponent, namespace, slotScopeIds, optimized, { p: patch, um: unmount, o: { createElement: createElement2 } }) {
  const suspense = n2.suspense = n1.suspense;
  suspense.vnode = n2;
  n2.el = n1.el;
  const newBranch = n2.ssContent;
  const newFallback = n2.ssFallback;
  const { activeBranch, pendingBranch, isInFallback, isHydrating } = suspense;
  if (pendingBranch) {
    suspense.pendingBranch = newBranch;
    if (isSameVNodeType(newBranch, pendingBranch)) {
      patch(
        pendingBranch,
        newBranch,
        suspense.hiddenContainer,
        null,
        parentComponent,
        suspense,
        namespace,
        slotScopeIds,
        optimized
      );
      if (suspense.deps <= 0) {
        suspense.resolve();
      } else if (isInFallback) {
        if (!isHydrating) {
          patch(
            activeBranch,
            newFallback,
            container,
            anchor2,
            parentComponent,
            null,
            // fallback tree will not have suspense context
            namespace,
            slotScopeIds,
            optimized
          );
          setActiveBranch(suspense, newFallback);
        }
      }
    } else {
      suspense.pendingId = suspenseId++;
      if (isHydrating) {
        suspense.isHydrating = false;
        suspense.activeBranch = pendingBranch;
      } else {
        unmount(pendingBranch, parentComponent, suspense);
      }
      suspense.deps = 0;
      suspense.effects.length = 0;
      suspense.hiddenContainer = createElement2("div");
      if (isInFallback) {
        patch(
          null,
          newBranch,
          suspense.hiddenContainer,
          null,
          parentComponent,
          suspense,
          namespace,
          slotScopeIds,
          optimized
        );
        if (suspense.deps <= 0) {
          suspense.resolve();
        } else {
          patch(
            activeBranch,
            newFallback,
            container,
            anchor2,
            parentComponent,
            null,
            // fallback tree will not have suspense context
            namespace,
            slotScopeIds,
            optimized
          );
          setActiveBranch(suspense, newFallback);
        }
      } else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
        patch(
          activeBranch,
          newBranch,
          container,
          anchor2,
          parentComponent,
          suspense,
          namespace,
          slotScopeIds,
          optimized
        );
        suspense.resolve(true);
      } else {
        patch(
          null,
          newBranch,
          suspense.hiddenContainer,
          null,
          parentComponent,
          suspense,
          namespace,
          slotScopeIds,
          optimized
        );
        if (suspense.deps <= 0) {
          suspense.resolve();
        }
      }
    }
  } else {
    if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
      patch(
        activeBranch,
        newBranch,
        container,
        anchor2,
        parentComponent,
        suspense,
        namespace,
        slotScopeIds,
        optimized
      );
      setActiveBranch(suspense, newBranch);
    } else {
      triggerEvent(n2, "onPending");
      suspense.pendingBranch = newBranch;
      if (newBranch.shapeFlag & 512) {
        suspense.pendingId = newBranch.component.suspenseId;
      } else {
        suspense.pendingId = suspenseId++;
      }
      patch(
        null,
        newBranch,
        suspense.hiddenContainer,
        null,
        parentComponent,
        suspense,
        namespace,
        slotScopeIds,
        optimized
      );
      if (suspense.deps <= 0) {
        suspense.resolve();
      } else {
        const { timeout, pendingId } = suspense;
        if (timeout > 0) {
          setTimeout(() => {
            if (suspense.pendingId === pendingId) {
              suspense.fallback(newFallback);
            }
          }, timeout);
        } else if (timeout === 0) {
          suspense.fallback(newFallback);
        }
      }
    }
  }
}
function createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor2, namespace, slotScopeIds, optimized, rendererInternals, isHydrating = false) {
  const {
    p: patch,
    m: move,
    um: unmount,
    n: next4,
    o: { parentNode, remove: remove2 }
  } = rendererInternals;
  let parentSuspenseId;
  const isSuspensible = isVNodeSuspensible(vnode);
  if (isSuspensible) {
    if (parentSuspense && parentSuspense.pendingBranch) {
      parentSuspenseId = parentSuspense.pendingId;
      parentSuspense.deps++;
    }
  }
  const timeout = vnode.props ? toNumber(vnode.props.timeout) : void 0;
  const initialAnchor = anchor2;
  const suspense = {
    vnode,
    parent: parentSuspense,
    parentComponent,
    namespace,
    container,
    hiddenContainer,
    deps: 0,
    pendingId: suspenseId++,
    timeout: typeof timeout === "number" ? timeout : -1,
    activeBranch: null,
    pendingBranch: null,
    isInFallback: !isHydrating,
    isHydrating,
    isUnmounted: false,
    effects: [],
    resolve(resume = false, sync = false) {
      const {
        vnode: vnode2,
        activeBranch,
        pendingBranch,
        pendingId,
        effects,
        parentComponent: parentComponent2,
        container: container2
      } = suspense;
      let delayEnter = false;
      if (suspense.isHydrating) {
        suspense.isHydrating = false;
      } else if (!resume) {
        delayEnter = activeBranch && pendingBranch.transition && pendingBranch.transition.mode === "out-in";
        if (delayEnter) {
          activeBranch.transition.afterLeave = () => {
            if (pendingId === suspense.pendingId) {
              move(
                pendingBranch,
                container2,
                anchor2 === initialAnchor ? next4(activeBranch) : anchor2,
                0
              );
              queuePostFlushCb(effects);
            }
          };
        }
        if (activeBranch) {
          if (parentNode(activeBranch.el) === container2) {
            anchor2 = next4(activeBranch);
          }
          unmount(activeBranch, parentComponent2, suspense, true);
        }
        if (!delayEnter) {
          move(pendingBranch, container2, anchor2, 0);
        }
      }
      setActiveBranch(suspense, pendingBranch);
      suspense.pendingBranch = null;
      suspense.isInFallback = false;
      let parent2 = suspense.parent;
      let hasUnresolvedAncestor = false;
      while (parent2) {
        if (parent2.pendingBranch) {
          parent2.effects.push(...effects);
          hasUnresolvedAncestor = true;
          break;
        }
        parent2 = parent2.parent;
      }
      if (!hasUnresolvedAncestor && !delayEnter) {
        queuePostFlushCb(effects);
      }
      suspense.effects = [];
      if (isSuspensible) {
        if (parentSuspense && parentSuspense.pendingBranch && parentSuspenseId === parentSuspense.pendingId) {
          parentSuspense.deps--;
          if (parentSuspense.deps === 0 && !sync) {
            parentSuspense.resolve();
          }
        }
      }
      triggerEvent(vnode2, "onResolve");
    },
    fallback(fallbackVNode) {
      if (!suspense.pendingBranch) {
        return;
      }
      const { vnode: vnode2, activeBranch, parentComponent: parentComponent2, container: container2, namespace: namespace2 } = suspense;
      triggerEvent(vnode2, "onFallback");
      const anchor22 = next4(activeBranch);
      const mountFallback = () => {
        if (!suspense.isInFallback) {
          return;
        }
        patch(
          null,
          fallbackVNode,
          container2,
          anchor22,
          parentComponent2,
          null,
          // fallback tree will not have suspense context
          namespace2,
          slotScopeIds,
          optimized
        );
        setActiveBranch(suspense, fallbackVNode);
      };
      const delayEnter = fallbackVNode.transition && fallbackVNode.transition.mode === "out-in";
      if (delayEnter) {
        activeBranch.transition.afterLeave = mountFallback;
      }
      suspense.isInFallback = true;
      unmount(
        activeBranch,
        parentComponent2,
        null,
        // no suspense so unmount hooks fire now
        true
        // shouldRemove
      );
      if (!delayEnter) {
        mountFallback();
      }
    },
    move(container2, anchor22, type) {
      suspense.activeBranch && move(suspense.activeBranch, container2, anchor22, type);
      suspense.container = container2;
    },
    next() {
      return suspense.activeBranch && next4(suspense.activeBranch);
    },
    registerDep(instance, setupRenderEffect, optimized2) {
      const isInPendingSuspense = !!suspense.pendingBranch;
      if (isInPendingSuspense) {
        suspense.deps++;
      }
      const hydratedEl = instance.vnode.el;
      instance.asyncDep.catch((err) => {
        handleError(err, instance, 0);
      }).then((asyncSetupResult) => {
        if (instance.isUnmounted || suspense.isUnmounted || suspense.pendingId !== instance.suspenseId) {
          return;
        }
        instance.asyncResolved = true;
        const { vnode: vnode2 } = instance;
        handleSetupResult(instance, asyncSetupResult, false);
        if (hydratedEl) {
          vnode2.el = hydratedEl;
        }
        const placeholder = !hydratedEl && instance.subTree.el;
        setupRenderEffect(
          instance,
          vnode2,
          // component may have been moved before resolve.
          // if this is not a hydration, instance.subTree will be the comment
          // placeholder.
          parentNode(hydratedEl || instance.subTree.el),
          // anchor will not be used if this is hydration, so only need to
          // consider the comment placeholder case.
          hydratedEl ? null : next4(instance.subTree),
          suspense,
          namespace,
          optimized2
        );
        if (placeholder) {
          remove2(placeholder);
        }
        updateHOCHostEl(instance, vnode2.el);
        if (isInPendingSuspense && --suspense.deps === 0) {
          suspense.resolve();
        }
      });
    },
    unmount(parentSuspense2, doRemove) {
      suspense.isUnmounted = true;
      if (suspense.activeBranch) {
        unmount(
          suspense.activeBranch,
          parentComponent,
          parentSuspense2,
          doRemove
        );
      }
      if (suspense.pendingBranch) {
        unmount(
          suspense.pendingBranch,
          parentComponent,
          parentSuspense2,
          doRemove
        );
      }
    }
  };
  return suspense;
}
function hydrateSuspense(node2, vnode, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, rendererInternals, hydrateNode) {
  const suspense = vnode.suspense = createSuspenseBoundary(
    vnode,
    parentSuspense,
    parentComponent,
    node2.parentNode,
    // eslint-disable-next-line no-restricted-globals
    document.createElement("div"),
    null,
    namespace,
    slotScopeIds,
    optimized,
    rendererInternals,
    true
  );
  const result = hydrateNode(
    node2,
    suspense.pendingBranch = vnode.ssContent,
    parentComponent,
    suspense,
    slotScopeIds,
    optimized
  );
  if (suspense.deps === 0) {
    suspense.resolve(false, true);
  }
  return result;
}
function normalizeSuspenseChildren(vnode) {
  const { shapeFlag, children: children2 } = vnode;
  const isSlotChildren = shapeFlag & 32;
  vnode.ssContent = normalizeSuspenseSlot(
    isSlotChildren ? children2.default : children2
  );
  vnode.ssFallback = isSlotChildren ? normalizeSuspenseSlot(children2.fallback) : createVNode(Comment);
}
function normalizeSuspenseSlot(s2) {
  let block;
  if (isFunction(s2)) {
    const trackBlock = isBlockTreeEnabled && s2._c;
    if (trackBlock) {
      s2._d = false;
      openBlock();
    }
    s2 = s2();
    if (trackBlock) {
      s2._d = true;
      block = currentBlock;
      closeBlock();
    }
  }
  if (isArray$g(s2)) {
    const singleChild = filterSingleRoot(s2);
    s2 = singleChild;
  }
  s2 = normalizeVNode(s2);
  if (block && !s2.dynamicChildren) {
    s2.dynamicChildren = block.filter((c2) => c2 !== s2);
  }
  return s2;
}
function queueEffectWithSuspense(fn2, suspense) {
  if (suspense && suspense.pendingBranch) {
    if (isArray$g(fn2)) {
      suspense.effects.push(...fn2);
    } else {
      suspense.effects.push(fn2);
    }
  } else {
    queuePostFlushCb(fn2);
  }
}
function setActiveBranch(suspense, branch) {
  suspense.activeBranch = branch;
  const { vnode, parentComponent } = suspense;
  let el = branch.el;
  while (!el && branch.component) {
    branch = branch.component.subTree;
    el = branch.el;
  }
  vnode.el = el;
  if (parentComponent && parentComponent.subTree === vnode) {
    parentComponent.vnode.el = el;
    updateHOCHostEl(parentComponent, el);
  }
}
function isVNodeSuspensible(vnode) {
  const suspensible = vnode.props && vnode.props.suspensible;
  return suspensible != null && suspensible !== false;
}
const Fragment = Symbol.for("v-fgt");
const Text$1 = Symbol.for("v-txt");
const Comment = Symbol.for("v-cmt");
const Static = Symbol.for("v-stc");
const blockStack = [];
let currentBlock = null;
function openBlock(disableTracking = false) {
  blockStack.push(currentBlock = disableTracking ? null : []);
}
function closeBlock() {
  blockStack.pop();
  currentBlock = blockStack[blockStack.length - 1] || null;
}
let isBlockTreeEnabled = 1;
function setBlockTracking(value2, inVOnce = false) {
  isBlockTreeEnabled += value2;
  if (value2 < 0 && currentBlock && inVOnce) {
    currentBlock.hasOnce = true;
  }
}
function setupBlock(vnode) {
  vnode.dynamicChildren = isBlockTreeEnabled > 0 ? currentBlock || EMPTY_ARR : null;
  closeBlock();
  if (isBlockTreeEnabled > 0 && currentBlock) {
    currentBlock.push(vnode);
  }
  return vnode;
}
function createElementBlock(type, props, children2, patchFlag, dynamicProps, shapeFlag) {
  return setupBlock(
    createBaseVNode(
      type,
      props,
      children2,
      patchFlag,
      dynamicProps,
      shapeFlag,
      true
    )
  );
}
function createBlock(type, props, children2, patchFlag, dynamicProps) {
  return setupBlock(
    createVNode(
      type,
      props,
      children2,
      patchFlag,
      dynamicProps,
      true
    )
  );
}
function isVNode(value2) {
  return value2 ? value2.__v_isVNode === true : false;
}
function isSameVNodeType(n1, n2) {
  return n1.type === n2.type && n1.key === n2.key;
}
function transformVNodeArgs(transformer) {
}
const normalizeKey = ({ key: key2 }) => key2 != null ? key2 : null;
const normalizeRef = ({
  ref: ref3,
  ref_key,
  ref_for
}) => {
  if (typeof ref3 === "number") {
    ref3 = "" + ref3;
  }
  return ref3 != null ? isString$1(ref3) || isRef(ref3) || isFunction(ref3) ? { i: currentRenderingInstance, r: ref3, k: ref_key, f: !!ref_for } : ref3 : null;
};
function createBaseVNode(type, props = null, children2 = null, patchFlag = 0, dynamicProps = null, shapeFlag = type === Fragment ? 0 : 1, isBlockNode = false, needFullChildrenNormalization = false) {
  const vnode = {
    __v_isVNode: true,
    __v_skip: true,
    type,
    props,
    key: props && normalizeKey(props),
    ref: props && normalizeRef(props),
    scopeId: currentScopeId,
    slotScopeIds: null,
    children: children2,
    component: null,
    suspense: null,
    ssContent: null,
    ssFallback: null,
    dirs: null,
    transition: null,
    el: null,
    anchor: null,
    target: null,
    targetStart: null,
    targetAnchor: null,
    staticCount: 0,
    shapeFlag,
    patchFlag,
    dynamicProps,
    dynamicChildren: null,
    appContext: null,
    ctx: currentRenderingInstance
  };
  if (needFullChildrenNormalization) {
    normalizeChildren(vnode, children2);
    if (shapeFlag & 128) {
      type.normalize(vnode);
    }
  } else if (children2) {
    vnode.shapeFlag |= isString$1(children2) ? 8 : 16;
  }
  if (isBlockTreeEnabled > 0 && // avoid a block node from tracking itself
  !isBlockNode && // has current parent block
  currentBlock && // presence of a patch flag indicates this node needs patching on updates.
  // component nodes also should always be patched, because even if the
  // component doesn't need to update, it needs to persist the instance on to
  // the next vnode so that it can be properly unmounted later.
  (vnode.patchFlag > 0 || shapeFlag & 6) && // the EVENTS flag is only for hydration and if it is the only flag, the
  // vnode should not be considered dynamic due to handler caching.
  vnode.patchFlag !== 32) {
    currentBlock.push(vnode);
  }
  return vnode;
}
const createVNode = _createVNode;
function _createVNode(type, props = null, children2 = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
  if (!type || type === NULL_DYNAMIC_COMPONENT) {
    type = Comment;
  }
  if (isVNode(type)) {
    const cloned = cloneVNode(
      type,
      props,
      true
      /* mergeRef: true */
    );
    if (children2) {
      normalizeChildren(cloned, children2);
    }
    if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock) {
      if (cloned.shapeFlag & 6) {
        currentBlock[currentBlock.indexOf(type)] = cloned;
      } else {
        currentBlock.push(cloned);
      }
    }
    cloned.patchFlag = -2;
    return cloned;
  }
  if (isClassComponent(type)) {
    type = type.__vccOpts;
  }
  if (props) {
    props = guardReactiveProps(props);
    let { class: klass, style } = props;
    if (klass && !isString$1(klass)) {
      props.class = normalizeClass(klass);
    }
    if (isObject$l(style)) {
      if (isProxy(style) && !isArray$g(style)) {
        style = extend$2({}, style);
      }
      props.style = normalizeStyle(style);
    }
  }
  const shapeFlag = isString$1(type) ? 1 : isSuspense(type) ? 128 : isTeleport(type) ? 64 : isObject$l(type) ? 4 : isFunction(type) ? 2 : 0;
  return createBaseVNode(
    type,
    props,
    children2,
    patchFlag,
    dynamicProps,
    shapeFlag,
    isBlockNode,
    true
  );
}
function guardReactiveProps(props) {
  if (!props) return null;
  return isProxy(props) || isInternalObject(props) ? extend$2({}, props) : props;
}
function cloneVNode(vnode, extraProps, mergeRef = false, cloneTransition = false) {
  const { props, ref: ref3, patchFlag, children: children2, transition } = vnode;
  const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;
  const cloned = {
    __v_isVNode: true,
    __v_skip: true,
    type: vnode.type,
    props: mergedProps,
    key: mergedProps && normalizeKey(mergedProps),
    ref: extraProps && extraProps.ref ? (
      // #2078 in the case of <component :is="vnode" ref="extra"/>
      // if the vnode itself already has a ref, cloneVNode will need to merge
      // the refs so the single vnode can be set on multiple refs
      mergeRef && ref3 ? isArray$g(ref3) ? ref3.concat(normalizeRef(extraProps)) : [ref3, normalizeRef(extraProps)] : normalizeRef(extraProps)
    ) : ref3,
    scopeId: vnode.scopeId,
    slotScopeIds: vnode.slotScopeIds,
    children: children2,
    target: vnode.target,
    targetStart: vnode.targetStart,
    targetAnchor: vnode.targetAnchor,
    staticCount: vnode.staticCount,
    shapeFlag: vnode.shapeFlag,
    // if the vnode is cloned with extra props, we can no longer assume its
    // existing patch flag to be reliable and need to add the FULL_PROPS flag.
    // note: preserve flag for fragments since they use the flag for children
    // fast paths only.
    patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 ? 16 : patchFlag | 16 : patchFlag,
    dynamicProps: vnode.dynamicProps,
    dynamicChildren: vnode.dynamicChildren,
    appContext: vnode.appContext,
    dirs: vnode.dirs,
    transition,
    // These should technically only be non-null on mounted VNodes. However,
    // they *should* be copied for kept-alive vnodes. So we just always copy
    // them since them being non-null during a mount doesn't affect the logic as
    // they will simply be overwritten.
    component: vnode.component,
    suspense: vnode.suspense,
    ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
    ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
    el: vnode.el,
    anchor: vnode.anchor,
    ctx: vnode.ctx,
    ce: vnode.ce
  };
  if (transition && cloneTransition) {
    setTransitionHooks(
      cloned,
      transition.clone(cloned)
    );
  }
  return cloned;
}
function createTextVNode(text = " ", flag2 = 0) {
  return createVNode(Text$1, null, text, flag2);
}
function createStaticVNode(content, numberOfNodes) {
  const vnode = createVNode(Static, null, content);
  vnode.staticCount = numberOfNodes;
  return vnode;
}
function createCommentVNode(text = "", asBlock = false) {
  return asBlock ? (openBlock(), createBlock(Comment, null, text)) : createVNode(Comment, null, text);
}
function normalizeVNode(child2) {
  if (child2 == null || typeof child2 === "boolean") {
    return createVNode(Comment);
  } else if (isArray$g(child2)) {
    return createVNode(
      Fragment,
      null,
      // #3666, avoid reference pollution when reusing vnode
      child2.slice()
    );
  } else if (isVNode(child2)) {
    return cloneIfMounted(child2);
  } else {
    return createVNode(Text$1, null, String(child2));
  }
}
function cloneIfMounted(child2) {
  return child2.el === null && child2.patchFlag !== -1 || child2.memo ? child2 : cloneVNode(child2);
}
function normalizeChildren(vnode, children2) {
  let type = 0;
  const { shapeFlag } = vnode;
  if (children2 == null) {
    children2 = null;
  } else if (isArray$g(children2)) {
    type = 16;
  } else if (typeof children2 === "object") {
    if (shapeFlag & (1 | 64)) {
      const slot = children2.default;
      if (slot) {
        slot._c && (slot._d = false);
        normalizeChildren(vnode, slot());
        slot._c && (slot._d = true);
      }
      return;
    } else {
      type = 32;
      const slotFlag = children2._;
      if (!slotFlag && !isInternalObject(children2)) {
        children2._ctx = currentRenderingInstance;
      } else if (slotFlag === 3 && currentRenderingInstance) {
        if (currentRenderingInstance.slots._ === 1) {
          children2._ = 1;
        } else {
          children2._ = 2;
          vnode.patchFlag |= 1024;
        }
      }
    }
  } else if (isFunction(children2)) {
    children2 = { default: children2, _ctx: currentRenderingInstance };
    type = 32;
  } else {
    children2 = String(children2);
    if (shapeFlag & 64) {
      type = 16;
      children2 = [createTextVNode(children2)];
    } else {
      type = 8;
    }
  }
  vnode.children = children2;
  vnode.shapeFlag |= type;
}
function mergeProps(...args) {
  const ret = {};
  for (let i2 = 0; i2 < args.length; i2++) {
    const toMerge = args[i2];
    for (const key2 in toMerge) {
      if (key2 === "class") {
        if (ret.class !== toMerge.class) {
          ret.class = normalizeClass([ret.class, toMerge.class]);
        }
      } else if (key2 === "style") {
        ret.style = normalizeStyle([ret.style, toMerge.style]);
      } else if (isOn(key2)) {
        const existing = ret[key2];
        const incoming = toMerge[key2];
        if (incoming && existing !== incoming && !(isArray$g(existing) && existing.includes(incoming))) {
          ret[key2] = existing ? [].concat(existing, incoming) : incoming;
        }
      } else if (key2 !== "") {
        ret[key2] = toMerge[key2];
      }
    }
  }
  return ret;
}
function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
  callWithAsyncErrorHandling(hook, instance, 7, [
    vnode,
    prevVNode
  ]);
}
const emptyAppContext = createAppContext();
let uid$6 = 0;
function createComponentInstance(vnode, parent2, suspense) {
  const type = vnode.type;
  const appContext = (parent2 ? parent2.appContext : vnode.appContext) || emptyAppContext;
  const instance = {
    uid: uid$6++,
    vnode,
    type,
    parent: parent2,
    appContext,
    root: null,
    // to be immediately set
    next: null,
    subTree: null,
    // will be set synchronously right after creation
    effect: null,
    update: null,
    // will be set synchronously right after creation
    job: null,
    scope: new EffectScope(
      true
      /* detached */
    ),
    render: null,
    proxy: null,
    exposed: null,
    exposeProxy: null,
    withProxy: null,
    provides: parent2 ? parent2.provides : Object.create(appContext.provides),
    ids: parent2 ? parent2.ids : ["", 0, 0],
    accessCache: null,
    renderCache: [],
    // local resolved assets
    components: null,
    directives: null,
    // resolved props and emits options
    propsOptions: normalizePropsOptions(type, appContext),
    emitsOptions: normalizeEmitsOptions(type, appContext),
    // emit
    emit: null,
    // to be set immediately
    emitted: null,
    // props default value
    propsDefaults: EMPTY_OBJ,
    // inheritAttrs
    inheritAttrs: type.inheritAttrs,
    // state
    ctx: EMPTY_OBJ,
    data: EMPTY_OBJ,
    props: EMPTY_OBJ,
    attrs: EMPTY_OBJ,
    slots: EMPTY_OBJ,
    refs: EMPTY_OBJ,
    setupState: EMPTY_OBJ,
    setupContext: null,
    // suspense related
    suspense,
    suspenseId: suspense ? suspense.pendingId : 0,
    asyncDep: null,
    asyncResolved: false,
    // lifecycle hooks
    // not using enums here because it results in computed properties
    isMounted: false,
    isUnmounted: false,
    isDeactivated: false,
    bc: null,
    c: null,
    bm: null,
    m: null,
    bu: null,
    u: null,
    um: null,
    bum: null,
    da: null,
    a: null,
    rtg: null,
    rtc: null,
    ec: null,
    sp: null
  };
  {
    instance.ctx = { _: instance };
  }
  instance.root = parent2 ? parent2.root : instance;
  instance.emit = emit.bind(null, instance);
  if (vnode.ce) {
    vnode.ce(instance);
  }
  return instance;
}
let currentInstance = null;
const getCurrentInstance = () => currentInstance || currentRenderingInstance;
let internalSetCurrentInstance;
let setInSSRSetupState;
{
  const g2 = getGlobalThis();
  const registerGlobalSetter = (key2, setter) => {
    let setters;
    if (!(setters = g2[key2])) setters = g2[key2] = [];
    setters.push(setter);
    return (v2) => {
      if (setters.length > 1) setters.forEach((set2) => set2(v2));
      else setters[0](v2);
    };
  };
  internalSetCurrentInstance = registerGlobalSetter(
    `__VUE_INSTANCE_SETTERS__`,
    (v2) => currentInstance = v2
  );
  setInSSRSetupState = registerGlobalSetter(
    `__VUE_SSR_SETTERS__`,
    (v2) => isInSSRComponentSetup = v2
  );
}
const setCurrentInstance = (instance) => {
  const prev = currentInstance;
  internalSetCurrentInstance(instance);
  instance.scope.on();
  return () => {
    instance.scope.off();
    internalSetCurrentInstance(prev);
  };
};
const unsetCurrentInstance = () => {
  currentInstance && currentInstance.scope.off();
  internalSetCurrentInstance(null);
};
function isStatefulComponent(instance) {
  return instance.vnode.shapeFlag & 4;
}
let isInSSRComponentSetup = false;
function setupComponent(instance, isSSR = false, optimized = false) {
  isSSR && setInSSRSetupState(isSSR);
  const { props, children: children2 } = instance.vnode;
  const isStateful = isStatefulComponent(instance);
  initProps(instance, props, isStateful, isSSR);
  initSlots(instance, children2, optimized);
  const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : void 0;
  isSSR && setInSSRSetupState(false);
  return setupResult;
}
function setupStatefulComponent(instance, isSSR) {
  const Component = instance.type;
  instance.accessCache = /* @__PURE__ */ Object.create(null);
  instance.proxy = new Proxy(instance.ctx, PublicInstanceProxyHandlers);
  const { setup } = Component;
  if (setup) {
    pauseTracking();
    const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;
    const reset2 = setCurrentInstance(instance);
    const setupResult = callWithErrorHandling(
      setup,
      instance,
      0,
      [
        instance.props,
        setupContext
      ]
    );
    const isAsyncSetup = isPromise(setupResult);
    resetTracking();
    reset2();
    if ((isAsyncSetup || instance.sp) && !isAsyncWrapper(instance)) {
      markAsyncBoundary(instance);
    }
    if (isAsyncSetup) {
      setupResult.then(unsetCurrentInstance, unsetCurrentInstance);
      if (isSSR) {
        return setupResult.then((resolvedResult) => {
          handleSetupResult(instance, resolvedResult, isSSR);
        }).catch((e2) => {
          handleError(e2, instance, 0);
        });
      } else {
        instance.asyncDep = setupResult;
      }
    } else {
      handleSetupResult(instance, setupResult, isSSR);
    }
  } else {
    finishComponentSetup(instance, isSSR);
  }
}
function handleSetupResult(instance, setupResult, isSSR) {
  if (isFunction(setupResult)) {
    if (instance.type.__ssrInlineRender) {
      instance.ssrRender = setupResult;
    } else {
      instance.render = setupResult;
    }
  } else if (isObject$l(setupResult)) {
    instance.setupState = proxyRefs(setupResult);
  } else ;
  finishComponentSetup(instance, isSSR);
}
let compile$1;
let installWithProxy;
function registerRuntimeCompiler(_compile) {
  compile$1 = _compile;
  installWithProxy = (i2) => {
    if (i2.render._rc) {
      i2.withProxy = new Proxy(i2.ctx, RuntimeCompiledPublicInstanceProxyHandlers);
    }
  };
}
const isRuntimeOnly = () => !compile$1;
function finishComponentSetup(instance, isSSR, skipOptions) {
  const Component = instance.type;
  if (!instance.render) {
    if (!isSSR && compile$1 && !Component.render) {
      const template = Component.template || resolveMergedOptions(instance).template;
      if (template) {
        const { isCustomElement, compilerOptions } = instance.appContext.config;
        const { delimiters, compilerOptions: componentCompilerOptions } = Component;
        const finalCompilerOptions = extend$2(
          extend$2(
            {
              isCustomElement,
              delimiters
            },
            compilerOptions
          ),
          componentCompilerOptions
        );
        Component.render = compile$1(template, finalCompilerOptions);
      }
    }
    instance.render = Component.render || NOOP;
    if (installWithProxy) {
      installWithProxy(instance);
    }
  }
  {
    const reset2 = setCurrentInstance(instance);
    pauseTracking();
    try {
      applyOptions(instance);
    } finally {
      resetTracking();
      reset2();
    }
  }
}
const attrsProxyHandlers = {
  get(target, key2) {
    track(target, "get", "");
    return target[key2];
  }
};
function createSetupContext(instance) {
  const expose = (exposed) => {
    instance.exposed = exposed || {};
  };
  {
    return {
      attrs: new Proxy(instance.attrs, attrsProxyHandlers),
      slots: instance.slots,
      emit: instance.emit,
      expose
    };
  }
}
function getComponentPublicInstance(instance) {
  if (instance.exposed) {
    return instance.exposeProxy || (instance.exposeProxy = new Proxy(proxyRefs(markRaw(instance.exposed)), {
      get(target, key2) {
        if (key2 in target) {
          return target[key2];
        } else if (key2 in publicPropertiesMap) {
          return publicPropertiesMap[key2](instance);
        }
      },
      has(target, key2) {
        return key2 in target || key2 in publicPropertiesMap;
      }
    }));
  } else {
    return instance.proxy;
  }
}
const classifyRE = /(?:^|[-_])(\w)/g;
const classify = (str) => str.replace(classifyRE, (c2) => c2.toUpperCase()).replace(/[-_]/g, "");
function getComponentName(Component, includeInferred = true) {
  return isFunction(Component) ? Component.displayName || Component.name : Component.name || includeInferred && Component.__name;
}
function formatComponentName(instance, Component, isRoot = false) {
  let name = getComponentName(Component);
  if (!name && Component.__file) {
    const match2 = Component.__file.match(/([^/\\]+)\.\w+$/);
    if (match2) {
      name = match2[1];
    }
  }
  if (!name && instance && instance.parent) {
    const inferFromRegistry = (registry) => {
      for (const key2 in registry) {
        if (registry[key2] === Component) {
          return key2;
        }
      }
    };
    name = inferFromRegistry(
      instance.components || instance.parent.type.components
    ) || inferFromRegistry(instance.appContext.components);
  }
  return name ? classify(name) : isRoot ? `App` : `Anonymous`;
}
function isClassComponent(value2) {
  return isFunction(value2) && "__vccOpts" in value2;
}
const computed = (getterOrOptions, debugOptions) => {
  const c2 = computed$1(getterOrOptions, debugOptions, isInSSRComponentSetup);
  return c2;
};
function h$1(type, propsOrChildren, children2) {
  const l2 = arguments.length;
  if (l2 === 2) {
    if (isObject$l(propsOrChildren) && !isArray$g(propsOrChildren)) {
      if (isVNode(propsOrChildren)) {
        return createVNode(type, null, [propsOrChildren]);
      }
      return createVNode(type, propsOrChildren);
    } else {
      return createVNode(type, null, propsOrChildren);
    }
  } else {
    if (l2 > 3) {
      children2 = Array.prototype.slice.call(arguments, 2);
    } else if (l2 === 3 && isVNode(children2)) {
      children2 = [children2];
    }
    return createVNode(type, propsOrChildren, children2);
  }
}
function initCustomFormatter() {
  {
    return;
  }
}
function withMemo(memo, render2, cache, index2) {
  const cached = cache[index2];
  if (cached && isMemoSame(cached, memo)) {
    return cached;
  }
  const ret = render2();
  ret.memo = memo.slice();
  ret.cacheIndex = index2;
  return cache[index2] = ret;
}
function isMemoSame(cached, memo) {
  const prev = cached.memo;
  if (prev.length != memo.length) {
    return false;
  }
  for (let i2 = 0; i2 < prev.length; i2++) {
    if (hasChanged(prev[i2], memo[i2])) {
      return false;
    }
  }
  if (isBlockTreeEnabled > 0 && currentBlock) {
    currentBlock.push(cached);
  }
  return true;
}
const version$2 = "3.5.13";
const warn = NOOP;
const ErrorTypeStrings = ErrorTypeStrings$1;
const devtools = devtools$1;
const setDevtoolsHook = setDevtoolsHook$1;
const _ssrUtils = {
  createComponentInstance,
  setupComponent,
  renderComponentRoot,
  setCurrentRenderingInstance,
  isVNode,
  normalizeVNode,
  getComponentPublicInstance,
  ensureValidVNode,
  pushWarningContext,
  popWarningContext
};
const ssrUtils = _ssrUtils;
const resolveFilter = null;
const compatUtils = null;
const DeprecationTypes = null;
/**
* @vue/runtime-dom v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
let policy = void 0;
const tt = typeof window !== "undefined" && window.trustedTypes;
if (tt) {
  try {
    policy = /* @__PURE__ */ tt.createPolicy("vue", {
      createHTML: (val) => val
    });
  } catch (e2) {
  }
}
const unsafeToTrustedHTML = policy ? (val) => policy.createHTML(val) : (val) => val;
const svgNS = "http://www.w3.org/2000/svg";
const mathmlNS = "http://www.w3.org/1998/Math/MathML";
const doc = typeof document !== "undefined" ? document : null;
const templateContainer = doc && /* @__PURE__ */ doc.createElement("template");
const nodeOps = {
  insert: (child2, parent2, anchor2) => {
    parent2.insertBefore(child2, anchor2 || null);
  },
  remove: (child2) => {
    const parent2 = child2.parentNode;
    if (parent2) {
      parent2.removeChild(child2);
    }
  },
  createElement: (tag2, namespace, is, props) => {
    const el = namespace === "svg" ? doc.createElementNS(svgNS, tag2) : namespace === "mathml" ? doc.createElementNS(mathmlNS, tag2) : is ? doc.createElement(tag2, { is }) : doc.createElement(tag2);
    if (tag2 === "select" && props && props.multiple != null) {
      el.setAttribute("multiple", props.multiple);
    }
    return el;
  },
  createText: (text) => doc.createTextNode(text),
  createComment: (text) => doc.createComment(text),
  setText: (node2, text) => {
    node2.nodeValue = text;
  },
  setElementText: (el, text) => {
    el.textContent = text;
  },
  parentNode: (node2) => node2.parentNode,
  nextSibling: (node2) => node2.nextSibling,
  querySelector: (selector) => doc.querySelector(selector),
  setScopeId(el, id2) {
    el.setAttribute(id2, "");
  },
  // __UNSAFE__
  // Reason: innerHTML.
  // Static content here can only come from compiled templates.
  // As long as the user only uses trusted templates, this is safe.
  insertStaticContent(content, parent2, anchor2, namespace, start2, end2) {
    const before = anchor2 ? anchor2.previousSibling : parent2.lastChild;
    if (start2 && (start2 === end2 || start2.nextSibling)) {
      while (true) {
        parent2.insertBefore(start2.cloneNode(true), anchor2);
        if (start2 === end2 || !(start2 = start2.nextSibling)) break;
      }
    } else {
      templateContainer.innerHTML = unsafeToTrustedHTML(
        namespace === "svg" ? `<svg>${content}</svg>` : namespace === "mathml" ? `<math>${content}</math>` : content
      );
      const template = templateContainer.content;
      if (namespace === "svg" || namespace === "mathml") {
        const wrapper2 = template.firstChild;
        while (wrapper2.firstChild) {
          template.appendChild(wrapper2.firstChild);
        }
        template.removeChild(wrapper2);
      }
      parent2.insertBefore(template, anchor2);
    }
    return [
      // first
      before ? before.nextSibling : parent2.firstChild,
      // last
      anchor2 ? anchor2.previousSibling : parent2.lastChild
    ];
  }
};
const TRANSITION$1 = "transition";
const ANIMATION = "animation";
const vtcKey = Symbol("_vtc");
const DOMTransitionPropsValidators = {
  name: String,
  type: String,
  css: {
    type: Boolean,
    default: true
  },
  duration: [String, Number, Object],
  enterFromClass: String,
  enterActiveClass: String,
  enterToClass: String,
  appearFromClass: String,
  appearActiveClass: String,
  appearToClass: String,
  leaveFromClass: String,
  leaveActiveClass: String,
  leaveToClass: String
};
const TransitionPropsValidators = /* @__PURE__ */ extend$2(
  {},
  BaseTransitionPropsValidators,
  DOMTransitionPropsValidators
);
const decorate$1 = (t2) => {
  t2.displayName = "Transition";
  t2.props = TransitionPropsValidators;
  return t2;
};
const Transition = /* @__PURE__ */ decorate$1(
  (props, { slots }) => h$1(BaseTransition, resolveTransitionProps(props), slots)
);
const callHook = (hook, args = []) => {
  if (isArray$g(hook)) {
    hook.forEach((h2) => h2(...args));
  } else if (hook) {
    hook(...args);
  }
};
const hasExplicitCallback = (hook) => {
  return hook ? isArray$g(hook) ? hook.some((h2) => h2.length > 1) : hook.length > 1 : false;
};
function resolveTransitionProps(rawProps) {
  const baseProps = {};
  for (const key2 in rawProps) {
    if (!(key2 in DOMTransitionPropsValidators)) {
      baseProps[key2] = rawProps[key2];
    }
  }
  if (rawProps.css === false) {
    return baseProps;
  }
  const {
    name = "v",
    type,
    duration,
    enterFromClass = `${name}-enter-from`,
    enterActiveClass = `${name}-enter-active`,
    enterToClass = `${name}-enter-to`,
    appearFromClass = enterFromClass,
    appearActiveClass = enterActiveClass,
    appearToClass = enterToClass,
    leaveFromClass = `${name}-leave-from`,
    leaveActiveClass = `${name}-leave-active`,
    leaveToClass = `${name}-leave-to`
  } = rawProps;
  const durations = normalizeDuration(duration);
  const enterDuration = durations && durations[0];
  const leaveDuration = durations && durations[1];
  const {
    onBeforeEnter,
    onEnter,
    onEnterCancelled,
    onLeave,
    onLeaveCancelled,
    onBeforeAppear = onBeforeEnter,
    onAppear = onEnter,
    onAppearCancelled = onEnterCancelled
  } = baseProps;
  const finishEnter = (el, isAppear, done, isCancelled) => {
    el._enterCancelled = isCancelled;
    removeTransitionClass(el, isAppear ? appearToClass : enterToClass);
    removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);
    done && done();
  };
  const finishLeave = (el, done) => {
    el._isLeaving = false;
    removeTransitionClass(el, leaveFromClass);
    removeTransitionClass(el, leaveToClass);
    removeTransitionClass(el, leaveActiveClass);
    done && done();
  };
  const makeEnterHook = (isAppear) => {
    return (el, done) => {
      const hook = isAppear ? onAppear : onEnter;
      const resolve3 = () => finishEnter(el, isAppear, done);
      callHook(hook, [el, resolve3]);
      nextFrame(() => {
        removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);
        addTransitionClass(el, isAppear ? appearToClass : enterToClass);
        if (!hasExplicitCallback(hook)) {
          whenTransitionEnds(el, type, enterDuration, resolve3);
        }
      });
    };
  };
  return extend$2(baseProps, {
    onBeforeEnter(el) {
      callHook(onBeforeEnter, [el]);
      addTransitionClass(el, enterFromClass);
      addTransitionClass(el, enterActiveClass);
    },
    onBeforeAppear(el) {
      callHook(onBeforeAppear, [el]);
      addTransitionClass(el, appearFromClass);
      addTransitionClass(el, appearActiveClass);
    },
    onEnter: makeEnterHook(false),
    onAppear: makeEnterHook(true),
    onLeave(el, done) {
      el._isLeaving = true;
      const resolve3 = () => finishLeave(el, done);
      addTransitionClass(el, leaveFromClass);
      if (!el._enterCancelled) {
        forceReflow();
        addTransitionClass(el, leaveActiveClass);
      } else {
        addTransitionClass(el, leaveActiveClass);
        forceReflow();
      }
      nextFrame(() => {
        if (!el._isLeaving) {
          return;
        }
        removeTransitionClass(el, leaveFromClass);
        addTransitionClass(el, leaveToClass);
        if (!hasExplicitCallback(onLeave)) {
          whenTransitionEnds(el, type, leaveDuration, resolve3);
        }
      });
      callHook(onLeave, [el, resolve3]);
    },
    onEnterCancelled(el) {
      finishEnter(el, false, void 0, true);
      callHook(onEnterCancelled, [el]);
    },
    onAppearCancelled(el) {
      finishEnter(el, true, void 0, true);
      callHook(onAppearCancelled, [el]);
    },
    onLeaveCancelled(el) {
      finishLeave(el);
      callHook(onLeaveCancelled, [el]);
    }
  });
}
function normalizeDuration(duration) {
  if (duration == null) {
    return null;
  } else if (isObject$l(duration)) {
    return [NumberOf(duration.enter), NumberOf(duration.leave)];
  } else {
    const n2 = NumberOf(duration);
    return [n2, n2];
  }
}
function NumberOf(val) {
  const res = toNumber(val);
  return res;
}
function addTransitionClass(el, cls) {
  cls.split(/\s+/).forEach((c2) => c2 && el.classList.add(c2));
  (el[vtcKey] || (el[vtcKey] = /* @__PURE__ */ new Set())).add(cls);
}
function removeTransitionClass(el, cls) {
  cls.split(/\s+/).forEach((c2) => c2 && el.classList.remove(c2));
  const _vtc = el[vtcKey];
  if (_vtc) {
    _vtc.delete(cls);
    if (!_vtc.size) {
      el[vtcKey] = void 0;
    }
  }
}
function nextFrame(cb) {
  requestAnimationFrame(() => {
    requestAnimationFrame(cb);
  });
}
let endId = 0;
function whenTransitionEnds(el, expectedType, explicitTimeout, resolve3) {
  const id2 = el._endId = ++endId;
  const resolveIfNotStale = () => {
    if (id2 === el._endId) {
      resolve3();
    }
  };
  if (explicitTimeout != null) {
    return setTimeout(resolveIfNotStale, explicitTimeout);
  }
  const { type, timeout, propCount } = getTransitionInfo(el, expectedType);
  if (!type) {
    return resolve3();
  }
  const endEvent = type + "end";
  let ended = 0;
  const end2 = () => {
    el.removeEventListener(endEvent, onEnd);
    resolveIfNotStale();
  };
  const onEnd = (e2) => {
    if (e2.target === el && ++ended >= propCount) {
      end2();
    }
  };
  setTimeout(() => {
    if (ended < propCount) {
      end2();
    }
  }, timeout + 1);
  el.addEventListener(endEvent, onEnd);
}
function getTransitionInfo(el, expectedType) {
  const styles = window.getComputedStyle(el);
  const getStyleProperties = (key2) => (styles[key2] || "").split(", ");
  const transitionDelays = getStyleProperties(`${TRANSITION$1}Delay`);
  const transitionDurations = getStyleProperties(`${TRANSITION$1}Duration`);
  const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  const animationDelays = getStyleProperties(`${ANIMATION}Delay`);
  const animationDurations = getStyleProperties(`${ANIMATION}Duration`);
  const animationTimeout = getTimeout(animationDelays, animationDurations);
  let type = null;
  let timeout = 0;
  let propCount = 0;
  if (expectedType === TRANSITION$1) {
    if (transitionTimeout > 0) {
      type = TRANSITION$1;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION$1 : ANIMATION : null;
    propCount = type ? type === TRANSITION$1 ? transitionDurations.length : animationDurations.length : 0;
  }
  const hasTransform = type === TRANSITION$1 && /\b(transform|all)(,|$)/.test(
    getStyleProperties(`${TRANSITION$1}Property`).toString()
  );
  return {
    type,
    timeout,
    propCount,
    hasTransform
  };
}
function getTimeout(delays, durations) {
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }
  return Math.max(...durations.map((d2, i2) => toMs(d2) + toMs(delays[i2])));
}
function toMs(s2) {
  if (s2 === "auto") return 0;
  return Number(s2.slice(0, -1).replace(",", ".")) * 1e3;
}
function forceReflow() {
  return document.body.offsetHeight;
}
function patchClass(el, value2, isSVG) {
  const transitionClasses = el[vtcKey];
  if (transitionClasses) {
    value2 = (value2 ? [value2, ...transitionClasses] : [...transitionClasses]).join(" ");
  }
  if (value2 == null) {
    el.removeAttribute("class");
  } else if (isSVG) {
    el.setAttribute("class", value2);
  } else {
    el.className = value2;
  }
}
const vShowOriginalDisplay = Symbol("_vod");
const vShowHidden = Symbol("_vsh");
const vShow = {
  beforeMount(el, { value: value2 }, { transition }) {
    el[vShowOriginalDisplay] = el.style.display === "none" ? "" : el.style.display;
    if (transition && value2) {
      transition.beforeEnter(el);
    } else {
      setDisplay(el, value2);
    }
  },
  mounted(el, { value: value2 }, { transition }) {
    if (transition && value2) {
      transition.enter(el);
    }
  },
  updated(el, { value: value2, oldValue }, { transition }) {
    if (!value2 === !oldValue) return;
    if (transition) {
      if (value2) {
        transition.beforeEnter(el);
        setDisplay(el, true);
        transition.enter(el);
      } else {
        transition.leave(el, () => {
          setDisplay(el, false);
        });
      }
    } else {
      setDisplay(el, value2);
    }
  },
  beforeUnmount(el, { value: value2 }) {
    setDisplay(el, value2);
  }
};
function setDisplay(el, value2) {
  el.style.display = value2 ? el[vShowOriginalDisplay] : "none";
  el[vShowHidden] = !value2;
}
function initVShowForSSR() {
  vShow.getSSRProps = ({ value: value2 }) => {
    if (!value2) {
      return { style: { display: "none" } };
    }
  };
}
const CSS_VAR_TEXT = Symbol("");
function useCssVars(getter) {
  const instance = getCurrentInstance();
  if (!instance) {
    return;
  }
  const updateTeleports = instance.ut = (vars = getter(instance.proxy)) => {
    Array.from(
      document.querySelectorAll(`[data-v-owner="${instance.uid}"]`)
    ).forEach((node2) => setVarsOnNode(node2, vars));
  };
  const setVars = () => {
    const vars = getter(instance.proxy);
    if (instance.ce) {
      setVarsOnNode(instance.ce, vars);
    } else {
      setVarsOnVNode(instance.subTree, vars);
    }
    updateTeleports(vars);
  };
  onBeforeUpdate(() => {
    queuePostFlushCb(setVars);
  });
  onMounted(() => {
    watch(setVars, NOOP, { flush: "post" });
    const ob = new MutationObserver(setVars);
    ob.observe(instance.subTree.el.parentNode, { childList: true });
    onUnmounted(() => ob.disconnect());
  });
}
function setVarsOnVNode(vnode, vars) {
  if (vnode.shapeFlag & 128) {
    const suspense = vnode.suspense;
    vnode = suspense.activeBranch;
    if (suspense.pendingBranch && !suspense.isHydrating) {
      suspense.effects.push(() => {
        setVarsOnVNode(suspense.activeBranch, vars);
      });
    }
  }
  while (vnode.component) {
    vnode = vnode.component.subTree;
  }
  if (vnode.shapeFlag & 1 && vnode.el) {
    setVarsOnNode(vnode.el, vars);
  } else if (vnode.type === Fragment) {
    vnode.children.forEach((c2) => setVarsOnVNode(c2, vars));
  } else if (vnode.type === Static) {
    let { el, anchor: anchor2 } = vnode;
    while (el) {
      setVarsOnNode(el, vars);
      if (el === anchor2) break;
      el = el.nextSibling;
    }
  }
}
function setVarsOnNode(el, vars) {
  if (el.nodeType === 1) {
    const style = el.style;
    let cssText = "";
    for (const key2 in vars) {
      style.setProperty(`--${key2}`, vars[key2]);
      cssText += `--${key2}: ${vars[key2]};`;
    }
    style[CSS_VAR_TEXT] = cssText;
  }
}
const displayRE = /(^|;)\s*display\s*:/;
function patchStyle(el, prev, next4) {
  const style = el.style;
  const isCssString = isString$1(next4);
  let hasControlledDisplay = false;
  if (next4 && !isCssString) {
    if (prev) {
      if (!isString$1(prev)) {
        for (const key2 in prev) {
          if (next4[key2] == null) {
            setStyle(style, key2, "");
          }
        }
      } else {
        for (const prevStyle of prev.split(";")) {
          const key2 = prevStyle.slice(0, prevStyle.indexOf(":")).trim();
          if (next4[key2] == null) {
            setStyle(style, key2, "");
          }
        }
      }
    }
    for (const key2 in next4) {
      if (key2 === "display") {
        hasControlledDisplay = true;
      }
      setStyle(style, key2, next4[key2]);
    }
  } else {
    if (isCssString) {
      if (prev !== next4) {
        const cssVarText = style[CSS_VAR_TEXT];
        if (cssVarText) {
          next4 += ";" + cssVarText;
        }
        style.cssText = next4;
        hasControlledDisplay = displayRE.test(next4);
      }
    } else if (prev) {
      el.removeAttribute("style");
    }
  }
  if (vShowOriginalDisplay in el) {
    el[vShowOriginalDisplay] = hasControlledDisplay ? style.display : "";
    if (el[vShowHidden]) {
      style.display = "none";
    }
  }
}
const importantRE = /\s*!important$/;
function setStyle(style, name, val) {
  if (isArray$g(val)) {
    val.forEach((v2) => setStyle(style, name, v2));
  } else {
    if (val == null) val = "";
    if (name.startsWith("--")) {
      style.setProperty(name, val);
    } else {
      const prefixed2 = autoPrefix(style, name);
      if (importantRE.test(val)) {
        style.setProperty(
          hyphenate(prefixed2),
          val.replace(importantRE, ""),
          "important"
        );
      } else {
        style[prefixed2] = val;
      }
    }
  }
}
const prefixes = ["Webkit", "Moz", "ms"];
const prefixCache = {};
function autoPrefix(style, rawName) {
  const cached = prefixCache[rawName];
  if (cached) {
    return cached;
  }
  let name = camelize(rawName);
  if (name !== "filter" && name in style) {
    return prefixCache[rawName] = name;
  }
  name = capitalize(name);
  for (let i2 = 0; i2 < prefixes.length; i2++) {
    const prefixed2 = prefixes[i2] + name;
    if (prefixed2 in style) {
      return prefixCache[rawName] = prefixed2;
    }
  }
  return rawName;
}
const xlinkNS = "http://www.w3.org/1999/xlink";
function patchAttr(el, key2, value2, isSVG, instance, isBoolean = isSpecialBooleanAttr(key2)) {
  if (isSVG && key2.startsWith("xlink:")) {
    if (value2 == null) {
      el.removeAttributeNS(xlinkNS, key2.slice(6, key2.length));
    } else {
      el.setAttributeNS(xlinkNS, key2, value2);
    }
  } else {
    if (value2 == null || isBoolean && !includeBooleanAttr(value2)) {
      el.removeAttribute(key2);
    } else {
      el.setAttribute(
        key2,
        isBoolean ? "" : isSymbol$7(value2) ? String(value2) : value2
      );
    }
  }
}
function patchDOMProp(el, key2, value2, parentComponent, attrName) {
  if (key2 === "innerHTML" || key2 === "textContent") {
    if (value2 != null) {
      el[key2] = key2 === "innerHTML" ? unsafeToTrustedHTML(value2) : value2;
    }
    return;
  }
  const tag2 = el.tagName;
  if (key2 === "value" && tag2 !== "PROGRESS" && // custom elements may use _value internally
  !tag2.includes("-")) {
    const oldValue = tag2 === "OPTION" ? el.getAttribute("value") || "" : el.value;
    const newValue = value2 == null ? (
      // #11647: value should be set as empty string for null and undefined,
      // but <input type="checkbox"> should be set as 'on'.
      el.type === "checkbox" ? "on" : ""
    ) : String(value2);
    if (oldValue !== newValue || !("_value" in el)) {
      el.value = newValue;
    }
    if (value2 == null) {
      el.removeAttribute(key2);
    }
    el._value = value2;
    return;
  }
  let needRemove = false;
  if (value2 === "" || value2 == null) {
    const type = typeof el[key2];
    if (type === "boolean") {
      value2 = includeBooleanAttr(value2);
    } else if (value2 == null && type === "string") {
      value2 = "";
      needRemove = true;
    } else if (type === "number") {
      value2 = 0;
      needRemove = true;
    }
  }
  try {
    el[key2] = value2;
  } catch (e2) {
  }
  needRemove && el.removeAttribute(attrName || key2);
}
function addEventListener(el, event, handler, options) {
  el.addEventListener(event, handler, options);
}
function removeEventListener(el, event, handler, options) {
  el.removeEventListener(event, handler, options);
}
const veiKey = Symbol("_vei");
function patchEvent(el, rawName, prevValue, nextValue, instance = null) {
  const invokers = el[veiKey] || (el[veiKey] = {});
  const existingInvoker = invokers[rawName];
  if (nextValue && existingInvoker) {
    existingInvoker.value = nextValue;
  } else {
    const [name, options] = parseName(rawName);
    if (nextValue) {
      const invoker = invokers[rawName] = createInvoker(
        nextValue,
        instance
      );
      addEventListener(el, name, invoker, options);
    } else if (existingInvoker) {
      removeEventListener(el, name, existingInvoker, options);
      invokers[rawName] = void 0;
    }
  }
}
const optionsModifierRE = /(?:Once|Passive|Capture)$/;
function parseName(name) {
  let options;
  if (optionsModifierRE.test(name)) {
    options = {};
    let m2;
    while (m2 = name.match(optionsModifierRE)) {
      name = name.slice(0, name.length - m2[0].length);
      options[m2[0].toLowerCase()] = true;
    }
  }
  const event = name[2] === ":" ? name.slice(3) : hyphenate(name.slice(2));
  return [event, options];
}
let cachedNow = 0;
const p$1 = /* @__PURE__ */ Promise.resolve();
const getNow = () => cachedNow || (p$1.then(() => cachedNow = 0), cachedNow = Date.now());
function createInvoker(initialValue, instance) {
  const invoker = (e2) => {
    if (!e2._vts) {
      e2._vts = Date.now();
    } else if (e2._vts <= invoker.attached) {
      return;
    }
    callWithAsyncErrorHandling(
      patchStopImmediatePropagation(e2, invoker.value),
      instance,
      5,
      [e2]
    );
  };
  invoker.value = initialValue;
  invoker.attached = getNow();
  return invoker;
}
function patchStopImmediatePropagation(e2, value2) {
  if (isArray$g(value2)) {
    const originalStop = e2.stopImmediatePropagation;
    e2.stopImmediatePropagation = () => {
      originalStop.call(e2);
      e2._stopped = true;
    };
    return value2.map(
      (fn2) => (e22) => !e22._stopped && fn2 && fn2(e22)
    );
  } else {
    return value2;
  }
}
const isNativeOn = (key2) => key2.charCodeAt(0) === 111 && key2.charCodeAt(1) === 110 && // lowercase letter
key2.charCodeAt(2) > 96 && key2.charCodeAt(2) < 123;
const patchProp = (el, key2, prevValue, nextValue, namespace, parentComponent) => {
  const isSVG = namespace === "svg";
  if (key2 === "class") {
    patchClass(el, nextValue, isSVG);
  } else if (key2 === "style") {
    patchStyle(el, prevValue, nextValue);
  } else if (isOn(key2)) {
    if (!isModelListener(key2)) {
      patchEvent(el, key2, prevValue, nextValue, parentComponent);
    }
  } else if (key2[0] === "." ? (key2 = key2.slice(1), true) : key2[0] === "^" ? (key2 = key2.slice(1), false) : shouldSetAsProp(el, key2, nextValue, isSVG)) {
    patchDOMProp(el, key2, nextValue);
    if (!el.tagName.includes("-") && (key2 === "value" || key2 === "checked" || key2 === "selected")) {
      patchAttr(el, key2, nextValue, isSVG, parentComponent, key2 !== "value");
    }
  } else if (
    // #11081 force set props for possible async custom element
    el._isVueCE && (/[A-Z]/.test(key2) || !isString$1(nextValue))
  ) {
    patchDOMProp(el, camelize(key2), nextValue, parentComponent, key2);
  } else {
    if (key2 === "true-value") {
      el._trueValue = nextValue;
    } else if (key2 === "false-value") {
      el._falseValue = nextValue;
    }
    patchAttr(el, key2, nextValue, isSVG);
  }
};
function shouldSetAsProp(el, key2, value2, isSVG) {
  if (isSVG) {
    if (key2 === "innerHTML" || key2 === "textContent") {
      return true;
    }
    if (key2 in el && isNativeOn(key2) && isFunction(value2)) {
      return true;
    }
    return false;
  }
  if (key2 === "spellcheck" || key2 === "draggable" || key2 === "translate") {
    return false;
  }
  if (key2 === "form") {
    return false;
  }
  if (key2 === "list" && el.tagName === "INPUT") {
    return false;
  }
  if (key2 === "type" && el.tagName === "TEXTAREA") {
    return false;
  }
  if (key2 === "width" || key2 === "height") {
    const tag2 = el.tagName;
    if (tag2 === "IMG" || tag2 === "VIDEO" || tag2 === "CANVAS" || tag2 === "SOURCE") {
      return false;
    }
  }
  if (isNativeOn(key2) && isString$1(value2)) {
    return false;
  }
  return key2 in el;
}
const REMOVAL = {};
/*! #__NO_SIDE_EFFECTS__ */
// @__NO_SIDE_EFFECTS__
function defineCustomElement(options, extraOptions, _createApp) {
  const Comp = /* @__PURE__ */ defineComponent(options, extraOptions);
  if (isPlainObject(Comp)) extend$2(Comp, extraOptions);
  class VueCustomElement extends VueElement {
    constructor(initialProps) {
      super(Comp, initialProps, _createApp);
    }
  }
  VueCustomElement.def = Comp;
  return VueCustomElement;
}
/*! #__NO_SIDE_EFFECTS__ */
const defineSSRCustomElement = /* @__NO_SIDE_EFFECTS__ */ (options, extraOptions) => {
  return /* @__PURE__ */ defineCustomElement(options, extraOptions, createSSRApp);
};
const BaseClass = typeof HTMLElement !== "undefined" ? HTMLElement : class {
};
class VueElement extends BaseClass {
  constructor(_def, _props = {}, _createApp = createApp) {
    super();
    this._def = _def;
    this._props = _props;
    this._createApp = _createApp;
    this._isVueCE = true;
    this._instance = null;
    this._app = null;
    this._nonce = this._def.nonce;
    this._connected = false;
    this._resolved = false;
    this._numberProps = null;
    this._styleChildren = /* @__PURE__ */ new WeakSet();
    this._ob = null;
    if (this.shadowRoot && _createApp !== createApp) {
      this._root = this.shadowRoot;
    } else {
      if (_def.shadowRoot !== false) {
        this.attachShadow({ mode: "open" });
        this._root = this.shadowRoot;
      } else {
        this._root = this;
      }
    }
    if (!this._def.__asyncLoader) {
      this._resolveProps(this._def);
    }
  }
  connectedCallback() {
    if (!this.isConnected) return;
    if (!this.shadowRoot) {
      this._parseSlots();
    }
    this._connected = true;
    let parent2 = this;
    while (parent2 = parent2 && (parent2.parentNode || parent2.host)) {
      if (parent2 instanceof VueElement) {
        this._parent = parent2;
        break;
      }
    }
    if (!this._instance) {
      if (this._resolved) {
        this._setParent();
        this._update();
      } else {
        if (parent2 && parent2._pendingResolve) {
          this._pendingResolve = parent2._pendingResolve.then(() => {
            this._pendingResolve = void 0;
            this._resolveDef();
          });
        } else {
          this._resolveDef();
        }
      }
    }
  }
  _setParent(parent2 = this._parent) {
    if (parent2) {
      this._instance.parent = parent2._instance;
      this._instance.provides = parent2._instance.provides;
    }
  }
  disconnectedCallback() {
    this._connected = false;
    nextTick(() => {
      if (!this._connected) {
        if (this._ob) {
          this._ob.disconnect();
          this._ob = null;
        }
        this._app && this._app.unmount();
        if (this._instance) this._instance.ce = void 0;
        this._app = this._instance = null;
      }
    });
  }
  /**
   * resolve inner component definition (handle possible async component)
   */
  _resolveDef() {
    if (this._pendingResolve) {
      return;
    }
    for (let i2 = 0; i2 < this.attributes.length; i2++) {
      this._setAttr(this.attributes[i2].name);
    }
    this._ob = new MutationObserver((mutations) => {
      for (const m2 of mutations) {
        this._setAttr(m2.attributeName);
      }
    });
    this._ob.observe(this, { attributes: true });
    const resolve3 = (def2, isAsync = false) => {
      this._resolved = true;
      this._pendingResolve = void 0;
      const { props, styles } = def2;
      let numberProps;
      if (props && !isArray$g(props)) {
        for (const key2 in props) {
          const opt = props[key2];
          if (opt === Number || opt && opt.type === Number) {
            if (key2 in this._props) {
              this._props[key2] = toNumber(this._props[key2]);
            }
            (numberProps || (numberProps = /* @__PURE__ */ Object.create(null)))[camelize(key2)] = true;
          }
        }
      }
      this._numberProps = numberProps;
      if (isAsync) {
        this._resolveProps(def2);
      }
      if (this.shadowRoot) {
        this._applyStyles(styles);
      }
      this._mount(def2);
    };
    const asyncDef = this._def.__asyncLoader;
    if (asyncDef) {
      this._pendingResolve = asyncDef().then(
        (def2) => resolve3(this._def = def2, true)
      );
    } else {
      resolve3(this._def);
    }
  }
  _mount(def2) {
    this._app = this._createApp(def2);
    if (def2.configureApp) {
      def2.configureApp(this._app);
    }
    this._app._ceVNode = this._createVNode();
    this._app.mount(this._root);
    const exposed = this._instance && this._instance.exposed;
    if (!exposed) return;
    for (const key2 in exposed) {
      if (!hasOwn$l(this, key2)) {
        Object.defineProperty(this, key2, {
          // unwrap ref to be consistent with public instance behavior
          get: () => unref(exposed[key2])
        });
      }
    }
  }
  _resolveProps(def2) {
    const { props } = def2;
    const declaredPropKeys = isArray$g(props) ? props : Object.keys(props || {});
    for (const key2 of Object.keys(this)) {
      if (key2[0] !== "_" && declaredPropKeys.includes(key2)) {
        this._setProp(key2, this[key2]);
      }
    }
    for (const key2 of declaredPropKeys.map(camelize)) {
      Object.defineProperty(this, key2, {
        get() {
          return this._getProp(key2);
        },
        set(val) {
          this._setProp(key2, val, true, true);
        }
      });
    }
  }
  _setAttr(key2) {
    if (key2.startsWith("data-v-")) return;
    const has2 = this.hasAttribute(key2);
    let value2 = has2 ? this.getAttribute(key2) : REMOVAL;
    const camelKey = camelize(key2);
    if (has2 && this._numberProps && this._numberProps[camelKey]) {
      value2 = toNumber(value2);
    }
    this._setProp(camelKey, value2, false, true);
  }
  /**
   * @internal
   */
  _getProp(key2) {
    return this._props[key2];
  }
  /**
   * @internal
   */
  _setProp(key2, val, shouldReflect = true, shouldUpdate = false) {
    if (val !== this._props[key2]) {
      if (val === REMOVAL) {
        delete this._props[key2];
      } else {
        this._props[key2] = val;
        if (key2 === "key" && this._app) {
          this._app._ceVNode.key = val;
        }
      }
      if (shouldUpdate && this._instance) {
        this._update();
      }
      if (shouldReflect) {
        const ob = this._ob;
        ob && ob.disconnect();
        if (val === true) {
          this.setAttribute(hyphenate(key2), "");
        } else if (typeof val === "string" || typeof val === "number") {
          this.setAttribute(hyphenate(key2), val + "");
        } else if (!val) {
          this.removeAttribute(hyphenate(key2));
        }
        ob && ob.observe(this, { attributes: true });
      }
    }
  }
  _update() {
    render$1(this._createVNode(), this._root);
  }
  _createVNode() {
    const baseProps = {};
    if (!this.shadowRoot) {
      baseProps.onVnodeMounted = baseProps.onVnodeUpdated = this._renderSlots.bind(this);
    }
    const vnode = createVNode(this._def, extend$2(baseProps, this._props));
    if (!this._instance) {
      vnode.ce = (instance) => {
        this._instance = instance;
        instance.ce = this;
        instance.isCE = true;
        const dispatch = (event, args) => {
          this.dispatchEvent(
            new CustomEvent(
              event,
              isPlainObject(args[0]) ? extend$2({ detail: args }, args[0]) : { detail: args }
            )
          );
        };
        instance.emit = (event, ...args) => {
          dispatch(event, args);
          if (hyphenate(event) !== event) {
            dispatch(hyphenate(event), args);
          }
        };
        this._setParent();
      };
    }
    return vnode;
  }
  _applyStyles(styles, owner) {
    if (!styles) return;
    if (owner) {
      if (owner === this._def || this._styleChildren.has(owner)) {
        return;
      }
      this._styleChildren.add(owner);
    }
    const nonce = this._nonce;
    for (let i2 = styles.length - 1; i2 >= 0; i2--) {
      const s2 = document.createElement("style");
      if (nonce) s2.setAttribute("nonce", nonce);
      s2.textContent = styles[i2];
      this.shadowRoot.prepend(s2);
    }
  }
  /**
   * Only called when shadowRoot is false
   */
  _parseSlots() {
    const slots = this._slots = {};
    let n2;
    while (n2 = this.firstChild) {
      const slotName = n2.nodeType === 1 && n2.getAttribute("slot") || "default";
      (slots[slotName] || (slots[slotName] = [])).push(n2);
      this.removeChild(n2);
    }
  }
  /**
   * Only called when shadowRoot is false
   */
  _renderSlots() {
    const outlets = (this._teleportTarget || this).querySelectorAll("slot");
    const scopeId = this._instance.type.__scopeId;
    for (let i2 = 0; i2 < outlets.length; i2++) {
      const o2 = outlets[i2];
      const slotName = o2.getAttribute("name") || "default";
      const content = this._slots[slotName];
      const parent2 = o2.parentNode;
      if (content) {
        for (const n2 of content) {
          if (scopeId && n2.nodeType === 1) {
            const id2 = scopeId + "-s";
            const walker = document.createTreeWalker(n2, 1);
            n2.setAttribute(id2, "");
            let child2;
            while (child2 = walker.nextNode()) {
              child2.setAttribute(id2, "");
            }
          }
          parent2.insertBefore(n2, o2);
        }
      } else {
        while (o2.firstChild) parent2.insertBefore(o2.firstChild, o2);
      }
      parent2.removeChild(o2);
    }
  }
  /**
   * @internal
   */
  _injectChildStyle(comp) {
    this._applyStyles(comp.styles, comp);
  }
  /**
   * @internal
   */
  _removeChildStyle(comp) {
  }
}
function useHost(caller) {
  const instance = getCurrentInstance();
  const el = instance && instance.ce;
  if (el) {
    return el;
  }
  return null;
}
function useShadowRoot() {
  const el = useHost();
  return el && el.shadowRoot;
}
function useCssModule(name = "$style") {
  {
    const instance = getCurrentInstance();
    if (!instance) {
      return EMPTY_OBJ;
    }
    const modules = instance.type.__cssModules;
    if (!modules) {
      return EMPTY_OBJ;
    }
    const mod = modules[name];
    if (!mod) {
      return EMPTY_OBJ;
    }
    return mod;
  }
}
const positionMap = /* @__PURE__ */ new WeakMap();
const newPositionMap = /* @__PURE__ */ new WeakMap();
const moveCbKey = Symbol("_moveCb");
const enterCbKey = Symbol("_enterCb");
const decorate = (t2) => {
  delete t2.props.mode;
  return t2;
};
const TransitionGroupImpl = /* @__PURE__ */ decorate({
  name: "TransitionGroup",
  props: /* @__PURE__ */ extend$2({}, TransitionPropsValidators, {
    tag: String,
    moveClass: String
  }),
  setup(props, { slots }) {
    const instance = getCurrentInstance();
    const state = useTransitionState();
    let prevChildren;
    let children2;
    onUpdated(() => {
      if (!prevChildren.length) {
        return;
      }
      const moveClass = props.moveClass || `${props.name || "v"}-move`;
      if (!hasCSSTransform(
        prevChildren[0].el,
        instance.vnode.el,
        moveClass
      )) {
        return;
      }
      prevChildren.forEach(callPendingCbs);
      prevChildren.forEach(recordPosition);
      const movedChildren = prevChildren.filter(applyTranslation);
      forceReflow();
      movedChildren.forEach((c2) => {
        const el = c2.el;
        const style = el.style;
        addTransitionClass(el, moveClass);
        style.transform = style.webkitTransform = style.transitionDuration = "";
        const cb = el[moveCbKey] = (e2) => {
          if (e2 && e2.target !== el) {
            return;
          }
          if (!e2 || /transform$/.test(e2.propertyName)) {
            el.removeEventListener("transitionend", cb);
            el[moveCbKey] = null;
            removeTransitionClass(el, moveClass);
          }
        };
        el.addEventListener("transitionend", cb);
      });
    });
    return () => {
      const rawProps = toRaw(props);
      const cssTransitionProps = resolveTransitionProps(rawProps);
      let tag2 = rawProps.tag || Fragment;
      prevChildren = [];
      if (children2) {
        for (let i2 = 0; i2 < children2.length; i2++) {
          const child2 = children2[i2];
          if (child2.el && child2.el instanceof Element) {
            prevChildren.push(child2);
            setTransitionHooks(
              child2,
              resolveTransitionHooks(
                child2,
                cssTransitionProps,
                state,
                instance
              )
            );
            positionMap.set(
              child2,
              child2.el.getBoundingClientRect()
            );
          }
        }
      }
      children2 = slots.default ? getTransitionRawChildren(slots.default()) : [];
      for (let i2 = 0; i2 < children2.length; i2++) {
        const child2 = children2[i2];
        if (child2.key != null) {
          setTransitionHooks(
            child2,
            resolveTransitionHooks(child2, cssTransitionProps, state, instance)
          );
        }
      }
      return createVNode(tag2, null, children2);
    };
  }
});
const TransitionGroup = TransitionGroupImpl;
function callPendingCbs(c2) {
  const el = c2.el;
  if (el[moveCbKey]) {
    el[moveCbKey]();
  }
  if (el[enterCbKey]) {
    el[enterCbKey]();
  }
}
function recordPosition(c2) {
  newPositionMap.set(c2, c2.el.getBoundingClientRect());
}
function applyTranslation(c2) {
  const oldPos = positionMap.get(c2);
  const newPos = newPositionMap.get(c2);
  const dx = oldPos.left - newPos.left;
  const dy = oldPos.top - newPos.top;
  if (dx || dy) {
    const s2 = c2.el.style;
    s2.transform = s2.webkitTransform = `translate(${dx}px,${dy}px)`;
    s2.transitionDuration = "0s";
    return c2;
  }
}
function hasCSSTransform(el, root, moveClass) {
  const clone2 = el.cloneNode();
  const _vtc = el[vtcKey];
  if (_vtc) {
    _vtc.forEach((cls) => {
      cls.split(/\s+/).forEach((c2) => c2 && clone2.classList.remove(c2));
    });
  }
  moveClass.split(/\s+/).forEach((c2) => c2 && clone2.classList.add(c2));
  clone2.style.display = "none";
  const container = root.nodeType === 1 ? root : root.parentNode;
  container.appendChild(clone2);
  const { hasTransform } = getTransitionInfo(clone2);
  container.removeChild(clone2);
  return hasTransform;
}
const getModelAssigner = (vnode) => {
  const fn2 = vnode.props["onUpdate:modelValue"] || false;
  return isArray$g(fn2) ? (value2) => invokeArrayFns(fn2, value2) : fn2;
};
function onCompositionStart(e2) {
  e2.target.composing = true;
}
function onCompositionEnd(e2) {
  const target = e2.target;
  if (target.composing) {
    target.composing = false;
    target.dispatchEvent(new Event("input"));
  }
}
const assignKey = Symbol("_assign");
const vModelText = {
  created(el, { modifiers: { lazy, trim: trim2, number: number2 } }, vnode) {
    el[assignKey] = getModelAssigner(vnode);
    const castToNumber = number2 || vnode.props && vnode.props.type === "number";
    addEventListener(el, lazy ? "change" : "input", (e2) => {
      if (e2.target.composing) return;
      let domValue = el.value;
      if (trim2) {
        domValue = domValue.trim();
      }
      if (castToNumber) {
        domValue = looseToNumber(domValue);
      }
      el[assignKey](domValue);
    });
    if (trim2) {
      addEventListener(el, "change", () => {
        el.value = el.value.trim();
      });
    }
    if (!lazy) {
      addEventListener(el, "compositionstart", onCompositionStart);
      addEventListener(el, "compositionend", onCompositionEnd);
      addEventListener(el, "change", onCompositionEnd);
    }
  },
  // set value on mounted so it's after min/max for type="range"
  mounted(el, { value: value2 }) {
    el.value = value2 == null ? "" : value2;
  },
  beforeUpdate(el, { value: value2, oldValue, modifiers: { lazy, trim: trim2, number: number2 } }, vnode) {
    el[assignKey] = getModelAssigner(vnode);
    if (el.composing) return;
    const elValue = (number2 || el.type === "number") && !/^0\d/.test(el.value) ? looseToNumber(el.value) : el.value;
    const newValue = value2 == null ? "" : value2;
    if (elValue === newValue) {
      return;
    }
    if (document.activeElement === el && el.type !== "range") {
      if (lazy && value2 === oldValue) {
        return;
      }
      if (trim2 && el.value.trim() === newValue) {
        return;
      }
    }
    el.value = newValue;
  }
};
const vModelCheckbox = {
  // #4096 array checkboxes need to be deep traversed
  deep: true,
  created(el, _, vnode) {
    el[assignKey] = getModelAssigner(vnode);
    addEventListener(el, "change", () => {
      const modelValue = el._modelValue;
      const elementValue = getValue(el);
      const checked = el.checked;
      const assign4 = el[assignKey];
      if (isArray$g(modelValue)) {
        const index2 = looseIndexOf(modelValue, elementValue);
        const found = index2 !== -1;
        if (checked && !found) {
          assign4(modelValue.concat(elementValue));
        } else if (!checked && found) {
          const filtered = [...modelValue];
          filtered.splice(index2, 1);
          assign4(filtered);
        }
      } else if (isSet(modelValue)) {
        const cloned = new Set(modelValue);
        if (checked) {
          cloned.add(elementValue);
        } else {
          cloned.delete(elementValue);
        }
        assign4(cloned);
      } else {
        assign4(getCheckboxValue(el, checked));
      }
    });
  },
  // set initial checked on mount to wait for true-value/false-value
  mounted: setChecked,
  beforeUpdate(el, binding, vnode) {
    el[assignKey] = getModelAssigner(vnode);
    setChecked(el, binding, vnode);
  }
};
function setChecked(el, { value: value2, oldValue }, vnode) {
  el._modelValue = value2;
  let checked;
  if (isArray$g(value2)) {
    checked = looseIndexOf(value2, vnode.props.value) > -1;
  } else if (isSet(value2)) {
    checked = value2.has(vnode.props.value);
  } else {
    if (value2 === oldValue) return;
    checked = looseEqual(value2, getCheckboxValue(el, true));
  }
  if (el.checked !== checked) {
    el.checked = checked;
  }
}
const vModelRadio = {
  created(el, { value: value2 }, vnode) {
    el.checked = looseEqual(value2, vnode.props.value);
    el[assignKey] = getModelAssigner(vnode);
    addEventListener(el, "change", () => {
      el[assignKey](getValue(el));
    });
  },
  beforeUpdate(el, { value: value2, oldValue }, vnode) {
    el[assignKey] = getModelAssigner(vnode);
    if (value2 !== oldValue) {
      el.checked = looseEqual(value2, vnode.props.value);
    }
  }
};
const vModelSelect = {
  // <select multiple> value need to be deep traversed
  deep: true,
  created(el, { value: value2, modifiers: { number: number2 } }, vnode) {
    const isSetModel = isSet(value2);
    addEventListener(el, "change", () => {
      const selectedVal = Array.prototype.filter.call(el.options, (o2) => o2.selected).map(
        (o2) => number2 ? looseToNumber(getValue(o2)) : getValue(o2)
      );
      el[assignKey](
        el.multiple ? isSetModel ? new Set(selectedVal) : selectedVal : selectedVal[0]
      );
      el._assigning = true;
      nextTick(() => {
        el._assigning = false;
      });
    });
    el[assignKey] = getModelAssigner(vnode);
  },
  // set value in mounted & updated because <select> relies on its children
  // <option>s.
  mounted(el, { value: value2 }) {
    setSelected(el, value2);
  },
  beforeUpdate(el, _binding, vnode) {
    el[assignKey] = getModelAssigner(vnode);
  },
  updated(el, { value: value2 }) {
    if (!el._assigning) {
      setSelected(el, value2);
    }
  }
};
function setSelected(el, value2) {
  const isMultiple = el.multiple;
  const isArrayValue = isArray$g(value2);
  if (isMultiple && !isArrayValue && !isSet(value2)) {
    return;
  }
  for (let i2 = 0, l2 = el.options.length; i2 < l2; i2++) {
    const option = el.options[i2];
    const optionValue = getValue(option);
    if (isMultiple) {
      if (isArrayValue) {
        const optionType = typeof optionValue;
        if (optionType === "string" || optionType === "number") {
          option.selected = value2.some((v2) => String(v2) === String(optionValue));
        } else {
          option.selected = looseIndexOf(value2, optionValue) > -1;
        }
      } else {
        option.selected = value2.has(optionValue);
      }
    } else if (looseEqual(getValue(option), value2)) {
      if (el.selectedIndex !== i2) el.selectedIndex = i2;
      return;
    }
  }
  if (!isMultiple && el.selectedIndex !== -1) {
    el.selectedIndex = -1;
  }
}
function getValue(el) {
  return "_value" in el ? el._value : el.value;
}
function getCheckboxValue(el, checked) {
  const key2 = checked ? "_trueValue" : "_falseValue";
  return key2 in el ? el[key2] : checked;
}
const vModelDynamic = {
  created(el, binding, vnode) {
    callModelHook(el, binding, vnode, null, "created");
  },
  mounted(el, binding, vnode) {
    callModelHook(el, binding, vnode, null, "mounted");
  },
  beforeUpdate(el, binding, vnode, prevVNode) {
    callModelHook(el, binding, vnode, prevVNode, "beforeUpdate");
  },
  updated(el, binding, vnode, prevVNode) {
    callModelHook(el, binding, vnode, prevVNode, "updated");
  }
};
function resolveDynamicModel(tagName, type) {
  switch (tagName) {
    case "SELECT":
      return vModelSelect;
    case "TEXTAREA":
      return vModelText;
    default:
      switch (type) {
        case "checkbox":
          return vModelCheckbox;
        case "radio":
          return vModelRadio;
        default:
          return vModelText;
      }
  }
}
function callModelHook(el, binding, vnode, prevVNode, hook) {
  const modelToUse = resolveDynamicModel(
    el.tagName,
    vnode.props && vnode.props.type
  );
  const fn2 = modelToUse[hook];
  fn2 && fn2(el, binding, vnode, prevVNode);
}
function initVModelForSSR() {
  vModelText.getSSRProps = ({ value: value2 }) => ({ value: value2 });
  vModelRadio.getSSRProps = ({ value: value2 }, vnode) => {
    if (vnode.props && looseEqual(vnode.props.value, value2)) {
      return { checked: true };
    }
  };
  vModelCheckbox.getSSRProps = ({ value: value2 }, vnode) => {
    if (isArray$g(value2)) {
      if (vnode.props && looseIndexOf(value2, vnode.props.value) > -1) {
        return { checked: true };
      }
    } else if (isSet(value2)) {
      if (vnode.props && value2.has(vnode.props.value)) {
        return { checked: true };
      }
    } else if (value2) {
      return { checked: true };
    }
  };
  vModelDynamic.getSSRProps = (binding, vnode) => {
    if (typeof vnode.type !== "string") {
      return;
    }
    const modelToUse = resolveDynamicModel(
      // resolveDynamicModel expects an uppercase tag name, but vnode.type is lowercase
      vnode.type.toUpperCase(),
      vnode.props && vnode.props.type
    );
    if (modelToUse.getSSRProps) {
      return modelToUse.getSSRProps(binding, vnode);
    }
  };
}
const systemModifiers = ["ctrl", "shift", "alt", "meta"];
const modifierGuards = {
  stop: (e2) => e2.stopPropagation(),
  prevent: (e2) => e2.preventDefault(),
  self: (e2) => e2.target !== e2.currentTarget,
  ctrl: (e2) => !e2.ctrlKey,
  shift: (e2) => !e2.shiftKey,
  alt: (e2) => !e2.altKey,
  meta: (e2) => !e2.metaKey,
  left: (e2) => "button" in e2 && e2.button !== 0,
  middle: (e2) => "button" in e2 && e2.button !== 1,
  right: (e2) => "button" in e2 && e2.button !== 2,
  exact: (e2, modifiers) => systemModifiers.some((m2) => e2[`${m2}Key`] && !modifiers.includes(m2))
};
const withModifiers = (fn2, modifiers) => {
  const cache = fn2._withMods || (fn2._withMods = {});
  const cacheKey = modifiers.join(".");
  return cache[cacheKey] || (cache[cacheKey] = (event, ...args) => {
    for (let i2 = 0; i2 < modifiers.length; i2++) {
      const guard = modifierGuards[modifiers[i2]];
      if (guard && guard(event, modifiers)) return;
    }
    return fn2(event, ...args);
  });
};
const keyNames = {
  esc: "escape",
  space: " ",
  up: "arrow-up",
  left: "arrow-left",
  right: "arrow-right",
  down: "arrow-down",
  delete: "backspace"
};
const withKeys = (fn2, modifiers) => {
  const cache = fn2._withKeys || (fn2._withKeys = {});
  const cacheKey = modifiers.join(".");
  return cache[cacheKey] || (cache[cacheKey] = (event) => {
    if (!("key" in event)) {
      return;
    }
    const eventKey = hyphenate(event.key);
    if (modifiers.some(
      (k2) => k2 === eventKey || keyNames[k2] === eventKey
    )) {
      return fn2(event);
    }
  });
};
const rendererOptions = /* @__PURE__ */ extend$2({ patchProp }, nodeOps);
let renderer;
let enabledHydration = false;
function ensureRenderer() {
  return renderer || (renderer = createRenderer(rendererOptions));
}
function ensureHydrationRenderer() {
  renderer = enabledHydration ? renderer : createHydrationRenderer(rendererOptions);
  enabledHydration = true;
  return renderer;
}
const render$1 = (...args) => {
  ensureRenderer().render(...args);
};
const hydrate = (...args) => {
  ensureHydrationRenderer().hydrate(...args);
};
const createApp = (...args) => {
  const app2 = ensureRenderer().createApp(...args);
  const { mount } = app2;
  app2.mount = (containerOrSelector) => {
    const container = normalizeContainer(containerOrSelector);
    if (!container) return;
    const component = app2._component;
    if (!isFunction(component) && !component.render && !component.template) {
      component.template = container.innerHTML;
    }
    if (container.nodeType === 1) {
      container.textContent = "";
    }
    const proxy = mount(container, false, resolveRootNamespace(container));
    if (container instanceof Element) {
      container.removeAttribute("v-cloak");
      container.setAttribute("data-v-app", "");
    }
    return proxy;
  };
  return app2;
};
const createSSRApp = (...args) => {
  const app2 = ensureHydrationRenderer().createApp(...args);
  const { mount } = app2;
  app2.mount = (containerOrSelector) => {
    const container = normalizeContainer(containerOrSelector);
    if (container) {
      return mount(container, true, resolveRootNamespace(container));
    }
  };
  return app2;
};
function resolveRootNamespace(container) {
  if (container instanceof SVGElement) {
    return "svg";
  }
  if (typeof MathMLElement === "function" && container instanceof MathMLElement) {
    return "mathml";
  }
}
function normalizeContainer(container) {
  if (isString$1(container)) {
    const res = document.querySelector(container);
    return res;
  }
  return container;
}
let ssrDirectiveInitialized = false;
const initDirectivesForSSR = () => {
  if (!ssrDirectiveInitialized) {
    ssrDirectiveInitialized = true;
    initVModelForSSR();
    initVShowForSSR();
  }
};
const runtimeDom = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  BaseTransition,
  BaseTransitionPropsValidators,
  Comment,
  DeprecationTypes,
  EffectScope,
  ErrorCodes,
  ErrorTypeStrings,
  Fragment,
  KeepAlive,
  ReactiveEffect,
  Static,
  Suspense,
  Teleport,
  Text: Text$1,
  TrackOpTypes,
  Transition,
  TransitionGroup,
  TriggerOpTypes,
  VueElement,
  assertNumber,
  callWithAsyncErrorHandling,
  callWithErrorHandling,
  camelize,
  capitalize,
  cloneVNode,
  compatUtils,
  computed,
  createApp,
  createBlock,
  createCommentVNode,
  createElementBlock,
  createElementVNode: createBaseVNode,
  createHydrationRenderer,
  createPropsRestProxy,
  createRenderer,
  createSSRApp,
  createSlots,
  createStaticVNode,
  createTextVNode,
  createVNode,
  customRef,
  defineAsyncComponent,
  defineComponent,
  defineCustomElement,
  defineEmits,
  defineExpose,
  defineModel,
  defineOptions,
  defineProps,
  defineSSRCustomElement,
  defineSlots,
  devtools,
  effect,
  effectScope,
  getCurrentInstance,
  getCurrentScope,
  getCurrentWatcher,
  getTransitionRawChildren,
  guardReactiveProps,
  h: h$1,
  handleError,
  hasInjectionContext,
  hydrate,
  hydrateOnIdle,
  hydrateOnInteraction,
  hydrateOnMediaQuery,
  hydrateOnVisible,
  initCustomFormatter,
  initDirectivesForSSR,
  inject,
  isMemoSame,
  isProxy,
  isReactive,
  isReadonly,
  isRef,
  isRuntimeOnly,
  isShallow,
  isVNode,
  markRaw,
  mergeDefaults,
  mergeModels,
  mergeProps,
  nextTick,
  normalizeClass,
  normalizeProps,
  normalizeStyle,
  onActivated,
  onBeforeMount,
  onBeforeUnmount,
  onBeforeUpdate,
  onDeactivated,
  onErrorCaptured,
  onMounted,
  onRenderTracked,
  onRenderTriggered,
  onScopeDispose,
  onServerPrefetch,
  onUnmounted,
  onUpdated,
  onWatcherCleanup,
  openBlock,
  popScopeId,
  provide,
  proxyRefs,
  pushScopeId,
  queuePostFlushCb,
  reactive,
  readonly,
  ref,
  registerRuntimeCompiler,
  render: render$1,
  renderList,
  renderSlot,
  resolveComponent,
  resolveDirective,
  resolveDynamicComponent,
  resolveFilter,
  resolveTransitionHooks,
  setBlockTracking,
  setDevtoolsHook,
  setTransitionHooks,
  shallowReactive,
  shallowReadonly,
  shallowRef,
  ssrContextKey,
  ssrUtils,
  stop: stop$1,
  toDisplayString,
  toHandlerKey,
  toHandlers,
  toRaw,
  toRef,
  toRefs,
  toValue,
  transformVNodeArgs,
  triggerRef,
  unref,
  useAttrs,
  useCssModule,
  useCssVars,
  useHost,
  useId,
  useModel,
  useSSRContext,
  useShadowRoot,
  useSlots,
  useTemplateRef,
  useTransitionState,
  vModelCheckbox,
  vModelDynamic,
  vModelRadio,
  vModelSelect,
  vModelText,
  vShow,
  version: version$2,
  warn,
  watch,
  watchEffect,
  watchPostEffect,
  watchSyncEffect,
  withAsyncContext,
  withCtx,
  withDefaults,
  withDirectives,
  withKeys,
  withMemo,
  withModifiers,
  withScopeId
}, Symbol.toStringTag, { value: "Module" }));
/**
* @vue/compiler-core v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
const FRAGMENT = Symbol(``);
const TELEPORT = Symbol(``);
const SUSPENSE = Symbol(``);
const KEEP_ALIVE = Symbol(``);
const BASE_TRANSITION = Symbol(
  ``
);
const OPEN_BLOCK = Symbol(``);
const CREATE_BLOCK = Symbol(``);
const CREATE_ELEMENT_BLOCK = Symbol(
  ``
);
const CREATE_VNODE = Symbol(``);
const CREATE_ELEMENT_VNODE = Symbol(
  ``
);
const CREATE_COMMENT = Symbol(
  ``
);
const CREATE_TEXT = Symbol(
  ``
);
const CREATE_STATIC = Symbol(
  ``
);
const RESOLVE_COMPONENT = Symbol(
  ``
);
const RESOLVE_DYNAMIC_COMPONENT = Symbol(
  ``
);
const RESOLVE_DIRECTIVE = Symbol(
  ``
);
const RESOLVE_FILTER = Symbol(
  ``
);
const WITH_DIRECTIVES = Symbol(
  ``
);
const RENDER_LIST = Symbol(``);
const RENDER_SLOT = Symbol(``);
const CREATE_SLOTS = Symbol(``);
const TO_DISPLAY_STRING = Symbol(
  ``
);
const MERGE_PROPS = Symbol(``);
const NORMALIZE_CLASS = Symbol(
  ``
);
const NORMALIZE_STYLE = Symbol(
  ``
);
const NORMALIZE_PROPS = Symbol(
  ``
);
const GUARD_REACTIVE_PROPS = Symbol(
  ``
);
const TO_HANDLERS = Symbol(``);
const CAMELIZE = Symbol(``);
const CAPITALIZE = Symbol(``);
const TO_HANDLER_KEY = Symbol(
  ``
);
const SET_BLOCK_TRACKING = Symbol(
  ``
);
const PUSH_SCOPE_ID = Symbol(``);
const POP_SCOPE_ID = Symbol(``);
const WITH_CTX = Symbol(``);
const UNREF = Symbol(``);
const IS_REF = Symbol(``);
const WITH_MEMO = Symbol(``);
const IS_MEMO_SAME = Symbol(``);
const helperNameMap = {
  [FRAGMENT]: `Fragment`,
  [TELEPORT]: `Teleport`,
  [SUSPENSE]: `Suspense`,
  [KEEP_ALIVE]: `KeepAlive`,
  [BASE_TRANSITION]: `BaseTransition`,
  [OPEN_BLOCK]: `openBlock`,
  [CREATE_BLOCK]: `createBlock`,
  [CREATE_ELEMENT_BLOCK]: `createElementBlock`,
  [CREATE_VNODE]: `createVNode`,
  [CREATE_ELEMENT_VNODE]: `createElementVNode`,
  [CREATE_COMMENT]: `createCommentVNode`,
  [CREATE_TEXT]: `createTextVNode`,
  [CREATE_STATIC]: `createStaticVNode`,
  [RESOLVE_COMPONENT]: `resolveComponent`,
  [RESOLVE_DYNAMIC_COMPONENT]: `resolveDynamicComponent`,
  [RESOLVE_DIRECTIVE]: `resolveDirective`,
  [RESOLVE_FILTER]: `resolveFilter`,
  [WITH_DIRECTIVES]: `withDirectives`,
  [RENDER_LIST]: `renderList`,
  [RENDER_SLOT]: `renderSlot`,
  [CREATE_SLOTS]: `createSlots`,
  [TO_DISPLAY_STRING]: `toDisplayString`,
  [MERGE_PROPS]: `mergeProps`,
  [NORMALIZE_CLASS]: `normalizeClass`,
  [NORMALIZE_STYLE]: `normalizeStyle`,
  [NORMALIZE_PROPS]: `normalizeProps`,
  [GUARD_REACTIVE_PROPS]: `guardReactiveProps`,
  [TO_HANDLERS]: `toHandlers`,
  [CAMELIZE]: `camelize`,
  [CAPITALIZE]: `capitalize`,
  [TO_HANDLER_KEY]: `toHandlerKey`,
  [SET_BLOCK_TRACKING]: `setBlockTracking`,
  [PUSH_SCOPE_ID]: `pushScopeId`,
  [POP_SCOPE_ID]: `popScopeId`,
  [WITH_CTX]: `withCtx`,
  [UNREF]: `unref`,
  [IS_REF]: `isRef`,
  [WITH_MEMO]: `withMemo`,
  [IS_MEMO_SAME]: `isMemoSame`
};
function registerRuntimeHelpers(helpers) {
  Object.getOwnPropertySymbols(helpers).forEach((s2) => {
    helperNameMap[s2] = helpers[s2];
  });
}
const locStub = {
  start: { line: 1, column: 1, offset: 0 },
  end: { line: 1, column: 1, offset: 0 },
  source: ""
};
function createRoot(children2, source = "") {
  return {
    type: 0,
    source,
    children: children2,
    helpers: /* @__PURE__ */ new Set(),
    components: [],
    directives: [],
    hoists: [],
    imports: [],
    cached: [],
    temps: 0,
    codegenNode: void 0,
    loc: locStub
  };
}
function createVNodeCall(context, tag2, props, children2, patchFlag, dynamicProps, directives, isBlock = false, disableTracking = false, isComponent2 = false, loc = locStub) {
  if (context) {
    if (isBlock) {
      context.helper(OPEN_BLOCK);
      context.helper(getVNodeBlockHelper(context.inSSR, isComponent2));
    } else {
      context.helper(getVNodeHelper(context.inSSR, isComponent2));
    }
    if (directives) {
      context.helper(WITH_DIRECTIVES);
    }
  }
  return {
    type: 13,
    tag: tag2,
    props,
    children: children2,
    patchFlag,
    dynamicProps,
    directives,
    isBlock,
    disableTracking,
    isComponent: isComponent2,
    loc
  };
}
function createArrayExpression(elements, loc = locStub) {
  return {
    type: 17,
    loc,
    elements
  };
}
function createObjectExpression(properties, loc = locStub) {
  return {
    type: 15,
    loc,
    properties
  };
}
function createObjectProperty(key2, value2) {
  return {
    type: 16,
    loc: locStub,
    key: isString$1(key2) ? createSimpleExpression(key2, true) : key2,
    value: value2
  };
}
function createSimpleExpression(content, isStatic = false, loc = locStub, constType = 0) {
  return {
    type: 4,
    loc,
    content,
    isStatic,
    constType: isStatic ? 3 : constType
  };
}
function createCompoundExpression(children2, loc = locStub) {
  return {
    type: 8,
    loc,
    children: children2
  };
}
function createCallExpression(callee, args = [], loc = locStub) {
  return {
    type: 14,
    loc,
    callee,
    arguments: args
  };
}
function createFunctionExpression(params, returns = void 0, newline = false, isSlot = false, loc = locStub) {
  return {
    type: 18,
    params,
    returns,
    newline,
    isSlot,
    loc
  };
}
function createConditionalExpression(test2, consequent, alternate, newline = true) {
  return {
    type: 19,
    test: test2,
    consequent,
    alternate,
    newline,
    loc: locStub
  };
}
function createCacheExpression(index2, value2, needPauseTracking = false, inVOnce = false) {
  return {
    type: 20,
    index: index2,
    value: value2,
    needPauseTracking,
    inVOnce,
    needArraySpread: false,
    loc: locStub
  };
}
function createBlockStatement(body) {
  return {
    type: 21,
    body,
    loc: locStub
  };
}
function getVNodeHelper(ssr, isComponent2) {
  return ssr || isComponent2 ? CREATE_VNODE : CREATE_ELEMENT_VNODE;
}
function getVNodeBlockHelper(ssr, isComponent2) {
  return ssr || isComponent2 ? CREATE_BLOCK : CREATE_ELEMENT_BLOCK;
}
function convertToBlock(node2, { helper, removeHelper, inSSR }) {
  if (!node2.isBlock) {
    node2.isBlock = true;
    removeHelper(getVNodeHelper(inSSR, node2.isComponent));
    helper(OPEN_BLOCK);
    helper(getVNodeBlockHelper(inSSR, node2.isComponent));
  }
}
const defaultDelimitersOpen = new Uint8Array([123, 123]);
const defaultDelimitersClose = new Uint8Array([125, 125]);
function isTagStartChar(c2) {
  return c2 >= 97 && c2 <= 122 || c2 >= 65 && c2 <= 90;
}
function isWhitespace(c2) {
  return c2 === 32 || c2 === 10 || c2 === 9 || c2 === 12 || c2 === 13;
}
function isEndOfTagSection(c2) {
  return c2 === 47 || c2 === 62 || isWhitespace(c2);
}
function toCharCodes(str) {
  const ret = new Uint8Array(str.length);
  for (let i2 = 0; i2 < str.length; i2++) {
    ret[i2] = str.charCodeAt(i2);
  }
  return ret;
}
const Sequences = {
  Cdata: new Uint8Array([67, 68, 65, 84, 65, 91]),
  // CDATA[
  CdataEnd: new Uint8Array([93, 93, 62]),
  // ]]>
  CommentEnd: new Uint8Array([45, 45, 62]),
  // `-->`
  ScriptEnd: new Uint8Array([60, 47, 115, 99, 114, 105, 112, 116]),
  // `<\/script`
  StyleEnd: new Uint8Array([60, 47, 115, 116, 121, 108, 101]),
  // `</style`
  TitleEnd: new Uint8Array([60, 47, 116, 105, 116, 108, 101]),
  // `</title`
  TextareaEnd: new Uint8Array([
    60,
    47,
    116,
    101,
    120,
    116,
    97,
    114,
    101,
    97
  ])
  // `</textarea
};
class Tokenizer {
  constructor(stack2, cbs) {
    this.stack = stack2;
    this.cbs = cbs;
    this.state = 1;
    this.buffer = "";
    this.sectionStart = 0;
    this.index = 0;
    this.entityStart = 0;
    this.baseState = 1;
    this.inRCDATA = false;
    this.inXML = false;
    this.inVPre = false;
    this.newlines = [];
    this.mode = 0;
    this.delimiterOpen = defaultDelimitersOpen;
    this.delimiterClose = defaultDelimitersClose;
    this.delimiterIndex = -1;
    this.currentSequence = void 0;
    this.sequenceIndex = 0;
  }
  get inSFCRoot() {
    return this.mode === 2 && this.stack.length === 0;
  }
  reset() {
    this.state = 1;
    this.mode = 0;
    this.buffer = "";
    this.sectionStart = 0;
    this.index = 0;
    this.baseState = 1;
    this.inRCDATA = false;
    this.currentSequence = void 0;
    this.newlines.length = 0;
    this.delimiterOpen = defaultDelimitersOpen;
    this.delimiterClose = defaultDelimitersClose;
  }
  /**
   * Generate Position object with line / column information using recorded
   * newline positions. We know the index is always going to be an already
   * processed index, so all the newlines up to this index should have been
   * recorded.
   */
  getPos(index2) {
    let line2 = 1;
    let column = index2 + 1;
    for (let i2 = this.newlines.length - 1; i2 >= 0; i2--) {
      const newlineIndex = this.newlines[i2];
      if (index2 > newlineIndex) {
        line2 = i2 + 2;
        column = index2 - newlineIndex;
        break;
      }
    }
    return {
      column,
      line: line2,
      offset: index2
    };
  }
  peek() {
    return this.buffer.charCodeAt(this.index + 1);
  }
  stateText(c2) {
    if (c2 === 60) {
      if (this.index > this.sectionStart) {
        this.cbs.ontext(this.sectionStart, this.index);
      }
      this.state = 5;
      this.sectionStart = this.index;
    } else if (!this.inVPre && c2 === this.delimiterOpen[0]) {
      this.state = 2;
      this.delimiterIndex = 0;
      this.stateInterpolationOpen(c2);
    }
  }
  stateInterpolationOpen(c2) {
    if (c2 === this.delimiterOpen[this.delimiterIndex]) {
      if (this.delimiterIndex === this.delimiterOpen.length - 1) {
        const start2 = this.index + 1 - this.delimiterOpen.length;
        if (start2 > this.sectionStart) {
          this.cbs.ontext(this.sectionStart, start2);
        }
        this.state = 3;
        this.sectionStart = start2;
      } else {
        this.delimiterIndex++;
      }
    } else if (this.inRCDATA) {
      this.state = 32;
      this.stateInRCDATA(c2);
    } else {
      this.state = 1;
      this.stateText(c2);
    }
  }
  stateInterpolation(c2) {
    if (c2 === this.delimiterClose[0]) {
      this.state = 4;
      this.delimiterIndex = 0;
      this.stateInterpolationClose(c2);
    }
  }
  stateInterpolationClose(c2) {
    if (c2 === this.delimiterClose[this.delimiterIndex]) {
      if (this.delimiterIndex === this.delimiterClose.length - 1) {
        this.cbs.oninterpolation(this.sectionStart, this.index + 1);
        if (this.inRCDATA) {
          this.state = 32;
        } else {
          this.state = 1;
        }
        this.sectionStart = this.index + 1;
      } else {
        this.delimiterIndex++;
      }
    } else {
      this.state = 3;
      this.stateInterpolation(c2);
    }
  }
  stateSpecialStartSequence(c2) {
    const isEnd = this.sequenceIndex === this.currentSequence.length;
    const isMatch = isEnd ? (
      // If we are at the end of the sequence, make sure the tag name has ended
      isEndOfTagSection(c2)
    ) : (
      // Otherwise, do a case-insensitive comparison
      (c2 | 32) === this.currentSequence[this.sequenceIndex]
    );
    if (!isMatch) {
      this.inRCDATA = false;
    } else if (!isEnd) {
      this.sequenceIndex++;
      return;
    }
    this.sequenceIndex = 0;
    this.state = 6;
    this.stateInTagName(c2);
  }
  /** Look for an end tag. For <title> and <textarea>, also decode entities. */
  stateInRCDATA(c2) {
    if (this.sequenceIndex === this.currentSequence.length) {
      if (c2 === 62 || isWhitespace(c2)) {
        const endOfText = this.index - this.currentSequence.length;
        if (this.sectionStart < endOfText) {
          const actualIndex = this.index;
          this.index = endOfText;
          this.cbs.ontext(this.sectionStart, endOfText);
          this.index = actualIndex;
        }
        this.sectionStart = endOfText + 2;
        this.stateInClosingTagName(c2);
        this.inRCDATA = false;
        return;
      }
      this.sequenceIndex = 0;
    }
    if ((c2 | 32) === this.currentSequence[this.sequenceIndex]) {
      this.sequenceIndex += 1;
    } else if (this.sequenceIndex === 0) {
      if (this.currentSequence === Sequences.TitleEnd || this.currentSequence === Sequences.TextareaEnd && !this.inSFCRoot) {
        if (!this.inVPre && c2 === this.delimiterOpen[0]) {
          this.state = 2;
          this.delimiterIndex = 0;
          this.stateInterpolationOpen(c2);
        }
      } else if (this.fastForwardTo(60)) {
        this.sequenceIndex = 1;
      }
    } else {
      this.sequenceIndex = Number(c2 === 60);
    }
  }
  stateCDATASequence(c2) {
    if (c2 === Sequences.Cdata[this.sequenceIndex]) {
      if (++this.sequenceIndex === Sequences.Cdata.length) {
        this.state = 28;
        this.currentSequence = Sequences.CdataEnd;
        this.sequenceIndex = 0;
        this.sectionStart = this.index + 1;
      }
    } else {
      this.sequenceIndex = 0;
      this.state = 23;
      this.stateInDeclaration(c2);
    }
  }
  /**
   * When we wait for one specific character, we can speed things up
   * by skipping through the buffer until we find it.
   *
   * @returns Whether the character was found.
   */
  fastForwardTo(c2) {
    while (++this.index < this.buffer.length) {
      const cc = this.buffer.charCodeAt(this.index);
      if (cc === 10) {
        this.newlines.push(this.index);
      }
      if (cc === c2) {
        return true;
      }
    }
    this.index = this.buffer.length - 1;
    return false;
  }
  /**
   * Comments and CDATA end with `-->` and `]]>`.
   *
   * Their common qualities are:
   * - Their end sequences have a distinct character they start with.
   * - That character is then repeated, so we have to check multiple repeats.
   * - All characters but the start character of the sequence can be skipped.
   */
  stateInCommentLike(c2) {
    if (c2 === this.currentSequence[this.sequenceIndex]) {
      if (++this.sequenceIndex === this.currentSequence.length) {
        if (this.currentSequence === Sequences.CdataEnd) {
          this.cbs.oncdata(this.sectionStart, this.index - 2);
        } else {
          this.cbs.oncomment(this.sectionStart, this.index - 2);
        }
        this.sequenceIndex = 0;
        this.sectionStart = this.index + 1;
        this.state = 1;
      }
    } else if (this.sequenceIndex === 0) {
      if (this.fastForwardTo(this.currentSequence[0])) {
        this.sequenceIndex = 1;
      }
    } else if (c2 !== this.currentSequence[this.sequenceIndex - 1]) {
      this.sequenceIndex = 0;
    }
  }
  startSpecial(sequence, offset2) {
    this.enterRCDATA(sequence, offset2);
    this.state = 31;
  }
  enterRCDATA(sequence, offset2) {
    this.inRCDATA = true;
    this.currentSequence = sequence;
    this.sequenceIndex = offset2;
  }
  stateBeforeTagName(c2) {
    if (c2 === 33) {
      this.state = 22;
      this.sectionStart = this.index + 1;
    } else if (c2 === 63) {
      this.state = 24;
      this.sectionStart = this.index + 1;
    } else if (isTagStartChar(c2)) {
      this.sectionStart = this.index;
      if (this.mode === 0) {
        this.state = 6;
      } else if (this.inSFCRoot) {
        this.state = 34;
      } else if (!this.inXML) {
        if (c2 === 116) {
          this.state = 30;
        } else {
          this.state = c2 === 115 ? 29 : 6;
        }
      } else {
        this.state = 6;
      }
    } else if (c2 === 47) {
      this.state = 8;
    } else {
      this.state = 1;
      this.stateText(c2);
    }
  }
  stateInTagName(c2) {
    if (isEndOfTagSection(c2)) {
      this.handleTagName(c2);
    }
  }
  stateInSFCRootTagName(c2) {
    if (isEndOfTagSection(c2)) {
      const tag2 = this.buffer.slice(this.sectionStart, this.index);
      if (tag2 !== "template") {
        this.enterRCDATA(toCharCodes(`</` + tag2), 0);
      }
      this.handleTagName(c2);
    }
  }
  handleTagName(c2) {
    this.cbs.onopentagname(this.sectionStart, this.index);
    this.sectionStart = -1;
    this.state = 11;
    this.stateBeforeAttrName(c2);
  }
  stateBeforeClosingTagName(c2) {
    if (isWhitespace(c2)) ;
    else if (c2 === 62) {
      this.state = 1;
      this.sectionStart = this.index + 1;
    } else {
      this.state = isTagStartChar(c2) ? 9 : 27;
      this.sectionStart = this.index;
    }
  }
  stateInClosingTagName(c2) {
    if (c2 === 62 || isWhitespace(c2)) {
      this.cbs.onclosetag(this.sectionStart, this.index);
      this.sectionStart = -1;
      this.state = 10;
      this.stateAfterClosingTagName(c2);
    }
  }
  stateAfterClosingTagName(c2) {
    if (c2 === 62) {
      this.state = 1;
      this.sectionStart = this.index + 1;
    }
  }
  stateBeforeAttrName(c2) {
    if (c2 === 62) {
      this.cbs.onopentagend(this.index);
      if (this.inRCDATA) {
        this.state = 32;
      } else {
        this.state = 1;
      }
      this.sectionStart = this.index + 1;
    } else if (c2 === 47) {
      this.state = 7;
    } else if (c2 === 60 && this.peek() === 47) {
      this.cbs.onopentagend(this.index);
      this.state = 5;
      this.sectionStart = this.index;
    } else if (!isWhitespace(c2)) {
      this.handleAttrStart(c2);
    }
  }
  handleAttrStart(c2) {
    if (c2 === 118 && this.peek() === 45) {
      this.state = 13;
      this.sectionStart = this.index;
    } else if (c2 === 46 || c2 === 58 || c2 === 64 || c2 === 35) {
      this.cbs.ondirname(this.index, this.index + 1);
      this.state = 14;
      this.sectionStart = this.index + 1;
    } else {
      this.state = 12;
      this.sectionStart = this.index;
    }
  }
  stateInSelfClosingTag(c2) {
    if (c2 === 62) {
      this.cbs.onselfclosingtag(this.index);
      this.state = 1;
      this.sectionStart = this.index + 1;
      this.inRCDATA = false;
    } else if (!isWhitespace(c2)) {
      this.state = 11;
      this.stateBeforeAttrName(c2);
    }
  }
  stateInAttrName(c2) {
    if (c2 === 61 || isEndOfTagSection(c2)) {
      this.cbs.onattribname(this.sectionStart, this.index);
      this.handleAttrNameEnd(c2);
    }
  }
  stateInDirName(c2) {
    if (c2 === 61 || isEndOfTagSection(c2)) {
      this.cbs.ondirname(this.sectionStart, this.index);
      this.handleAttrNameEnd(c2);
    } else if (c2 === 58) {
      this.cbs.ondirname(this.sectionStart, this.index);
      this.state = 14;
      this.sectionStart = this.index + 1;
    } else if (c2 === 46) {
      this.cbs.ondirname(this.sectionStart, this.index);
      this.state = 16;
      this.sectionStart = this.index + 1;
    }
  }
  stateInDirArg(c2) {
    if (c2 === 61 || isEndOfTagSection(c2)) {
      this.cbs.ondirarg(this.sectionStart, this.index);
      this.handleAttrNameEnd(c2);
    } else if (c2 === 91) {
      this.state = 15;
    } else if (c2 === 46) {
      this.cbs.ondirarg(this.sectionStart, this.index);
      this.state = 16;
      this.sectionStart = this.index + 1;
    }
  }
  stateInDynamicDirArg(c2) {
    if (c2 === 93) {
      this.state = 14;
    } else if (c2 === 61 || isEndOfTagSection(c2)) {
      this.cbs.ondirarg(this.sectionStart, this.index + 1);
      this.handleAttrNameEnd(c2);
    }
  }
  stateInDirModifier(c2) {
    if (c2 === 61 || isEndOfTagSection(c2)) {
      this.cbs.ondirmodifier(this.sectionStart, this.index);
      this.handleAttrNameEnd(c2);
    } else if (c2 === 46) {
      this.cbs.ondirmodifier(this.sectionStart, this.index);
      this.sectionStart = this.index + 1;
    }
  }
  handleAttrNameEnd(c2) {
    this.sectionStart = this.index;
    this.state = 17;
    this.cbs.onattribnameend(this.index);
    this.stateAfterAttrName(c2);
  }
  stateAfterAttrName(c2) {
    if (c2 === 61) {
      this.state = 18;
    } else if (c2 === 47 || c2 === 62) {
      this.cbs.onattribend(0, this.sectionStart);
      this.sectionStart = -1;
      this.state = 11;
      this.stateBeforeAttrName(c2);
    } else if (!isWhitespace(c2)) {
      this.cbs.onattribend(0, this.sectionStart);
      this.handleAttrStart(c2);
    }
  }
  stateBeforeAttrValue(c2) {
    if (c2 === 34) {
      this.state = 19;
      this.sectionStart = this.index + 1;
    } else if (c2 === 39) {
      this.state = 20;
      this.sectionStart = this.index + 1;
    } else if (!isWhitespace(c2)) {
      this.sectionStart = this.index;
      this.state = 21;
      this.stateInAttrValueNoQuotes(c2);
    }
  }
  handleInAttrValue(c2, quote) {
    if (c2 === quote || this.fastForwardTo(quote)) {
      this.cbs.onattribdata(this.sectionStart, this.index);
      this.sectionStart = -1;
      this.cbs.onattribend(
        quote === 34 ? 3 : 2,
        this.index + 1
      );
      this.state = 11;
    }
  }
  stateInAttrValueDoubleQuotes(c2) {
    this.handleInAttrValue(c2, 34);
  }
  stateInAttrValueSingleQuotes(c2) {
    this.handleInAttrValue(c2, 39);
  }
  stateInAttrValueNoQuotes(c2) {
    if (isWhitespace(c2) || c2 === 62) {
      this.cbs.onattribdata(this.sectionStart, this.index);
      this.sectionStart = -1;
      this.cbs.onattribend(1, this.index);
      this.state = 11;
      this.stateBeforeAttrName(c2);
    } else if (c2 === 39 || c2 === 60 || c2 === 61 || c2 === 96) {
      this.cbs.onerr(
        18,
        this.index
      );
    } else ;
  }
  stateBeforeDeclaration(c2) {
    if (c2 === 91) {
      this.state = 26;
      this.sequenceIndex = 0;
    } else {
      this.state = c2 === 45 ? 25 : 23;
    }
  }
  stateInDeclaration(c2) {
    if (c2 === 62 || this.fastForwardTo(62)) {
      this.state = 1;
      this.sectionStart = this.index + 1;
    }
  }
  stateInProcessingInstruction(c2) {
    if (c2 === 62 || this.fastForwardTo(62)) {
      this.cbs.onprocessinginstruction(this.sectionStart, this.index);
      this.state = 1;
      this.sectionStart = this.index + 1;
    }
  }
  stateBeforeComment(c2) {
    if (c2 === 45) {
      this.state = 28;
      this.currentSequence = Sequences.CommentEnd;
      this.sequenceIndex = 2;
      this.sectionStart = this.index + 1;
    } else {
      this.state = 23;
    }
  }
  stateInSpecialComment(c2) {
    if (c2 === 62 || this.fastForwardTo(62)) {
      this.cbs.oncomment(this.sectionStart, this.index);
      this.state = 1;
      this.sectionStart = this.index + 1;
    }
  }
  stateBeforeSpecialS(c2) {
    if (c2 === Sequences.ScriptEnd[3]) {
      this.startSpecial(Sequences.ScriptEnd, 4);
    } else if (c2 === Sequences.StyleEnd[3]) {
      this.startSpecial(Sequences.StyleEnd, 4);
    } else {
      this.state = 6;
      this.stateInTagName(c2);
    }
  }
  stateBeforeSpecialT(c2) {
    if (c2 === Sequences.TitleEnd[3]) {
      this.startSpecial(Sequences.TitleEnd, 4);
    } else if (c2 === Sequences.TextareaEnd[3]) {
      this.startSpecial(Sequences.TextareaEnd, 4);
    } else {
      this.state = 6;
      this.stateInTagName(c2);
    }
  }
  startEntity() {
  }
  stateInEntity() {
  }
  /**
   * Iterates through the buffer, calling the function corresponding to the current state.
   *
   * States that are more likely to be hit are higher up, as a performance improvement.
   */
  parse(input) {
    this.buffer = input;
    while (this.index < this.buffer.length) {
      const c2 = this.buffer.charCodeAt(this.index);
      if (c2 === 10) {
        this.newlines.push(this.index);
      }
      switch (this.state) {
        case 1: {
          this.stateText(c2);
          break;
        }
        case 2: {
          this.stateInterpolationOpen(c2);
          break;
        }
        case 3: {
          this.stateInterpolation(c2);
          break;
        }
        case 4: {
          this.stateInterpolationClose(c2);
          break;
        }
        case 31: {
          this.stateSpecialStartSequence(c2);
          break;
        }
        case 32: {
          this.stateInRCDATA(c2);
          break;
        }
        case 26: {
          this.stateCDATASequence(c2);
          break;
        }
        case 19: {
          this.stateInAttrValueDoubleQuotes(c2);
          break;
        }
        case 12: {
          this.stateInAttrName(c2);
          break;
        }
        case 13: {
          this.stateInDirName(c2);
          break;
        }
        case 14: {
          this.stateInDirArg(c2);
          break;
        }
        case 15: {
          this.stateInDynamicDirArg(c2);
          break;
        }
        case 16: {
          this.stateInDirModifier(c2);
          break;
        }
        case 28: {
          this.stateInCommentLike(c2);
          break;
        }
        case 27: {
          this.stateInSpecialComment(c2);
          break;
        }
        case 11: {
          this.stateBeforeAttrName(c2);
          break;
        }
        case 6: {
          this.stateInTagName(c2);
          break;
        }
        case 34: {
          this.stateInSFCRootTagName(c2);
          break;
        }
        case 9: {
          this.stateInClosingTagName(c2);
          break;
        }
        case 5: {
          this.stateBeforeTagName(c2);
          break;
        }
        case 17: {
          this.stateAfterAttrName(c2);
          break;
        }
        case 20: {
          this.stateInAttrValueSingleQuotes(c2);
          break;
        }
        case 18: {
          this.stateBeforeAttrValue(c2);
          break;
        }
        case 8: {
          this.stateBeforeClosingTagName(c2);
          break;
        }
        case 10: {
          this.stateAfterClosingTagName(c2);
          break;
        }
        case 29: {
          this.stateBeforeSpecialS(c2);
          break;
        }
        case 30: {
          this.stateBeforeSpecialT(c2);
          break;
        }
        case 21: {
          this.stateInAttrValueNoQuotes(c2);
          break;
        }
        case 7: {
          this.stateInSelfClosingTag(c2);
          break;
        }
        case 23: {
          this.stateInDeclaration(c2);
          break;
        }
        case 22: {
          this.stateBeforeDeclaration(c2);
          break;
        }
        case 25: {
          this.stateBeforeComment(c2);
          break;
        }
        case 24: {
          this.stateInProcessingInstruction(c2);
          break;
        }
        case 33: {
          this.stateInEntity();
          break;
        }
      }
      this.index++;
    }
    this.cleanup();
    this.finish();
  }
  /**
   * Remove data that has already been consumed from the buffer.
   */
  cleanup() {
    if (this.sectionStart !== this.index) {
      if (this.state === 1 || this.state === 32 && this.sequenceIndex === 0) {
        this.cbs.ontext(this.sectionStart, this.index);
        this.sectionStart = this.index;
      } else if (this.state === 19 || this.state === 20 || this.state === 21) {
        this.cbs.onattribdata(this.sectionStart, this.index);
        this.sectionStart = this.index;
      }
    }
  }
  finish() {
    this.handleTrailingData();
    this.cbs.onend();
  }
  /** Handle any trailing data. */
  handleTrailingData() {
    const endIndex = this.buffer.length;
    if (this.sectionStart >= endIndex) {
      return;
    }
    if (this.state === 28) {
      if (this.currentSequence === Sequences.CdataEnd) {
        this.cbs.oncdata(this.sectionStart, endIndex);
      } else {
        this.cbs.oncomment(this.sectionStart, endIndex);
      }
    } else if (this.state === 6 || this.state === 11 || this.state === 18 || this.state === 17 || this.state === 12 || this.state === 13 || this.state === 14 || this.state === 15 || this.state === 16 || this.state === 20 || this.state === 19 || this.state === 21 || this.state === 9) ;
    else {
      this.cbs.ontext(this.sectionStart, endIndex);
    }
  }
  emitCodePoint(cp, consumed) {
  }
}
function getCompatValue(key2, { compatConfig }) {
  const value2 = compatConfig && compatConfig[key2];
  if (key2 === "MODE") {
    return value2 || 3;
  } else {
    return value2;
  }
}
function isCompatEnabled(key2, context) {
  const mode = getCompatValue("MODE", context);
  const value2 = getCompatValue(key2, context);
  return mode === 3 ? value2 === true : value2 !== false;
}
function checkCompatEnabled(key2, context, loc, ...args) {
  const enabled = isCompatEnabled(key2, context);
  return enabled;
}
function defaultOnError(error) {
  throw error;
}
function defaultOnWarn(msg) {
}
function createCompilerError(code2, loc, messages, additionalMessage) {
  const msg = `https://vuejs.org/error-reference/#compiler-${code2}`;
  const error = new SyntaxError(String(msg));
  error.code = code2;
  error.loc = loc;
  return error;
}
const isStaticExp = (p2) => p2.type === 4 && p2.isStatic;
function isCoreComponent(tag2) {
  switch (tag2) {
    case "Teleport":
    case "teleport":
      return TELEPORT;
    case "Suspense":
    case "suspense":
      return SUSPENSE;
    case "KeepAlive":
    case "keep-alive":
      return KEEP_ALIVE;
    case "BaseTransition":
    case "base-transition":
      return BASE_TRANSITION;
  }
}
const nonIdentifierRE = /^\d|[^\$\w\xA0-\uFFFF]/;
const isSimpleIdentifier = (name) => !nonIdentifierRE.test(name);
const validFirstIdentCharRE = /[A-Za-z_$\xA0-\uFFFF]/;
const validIdentCharRE = /[\.\?\w$\xA0-\uFFFF]/;
const whitespaceRE = /\s+[.[]\s*|\s*[.[]\s+/g;
const getExpSource = (exp) => exp.type === 4 ? exp.content : exp.loc.source;
const isMemberExpressionBrowser = (exp) => {
  const path2 = getExpSource(exp).trim().replace(whitespaceRE, (s2) => s2.trim());
  let state = 0;
  let stateStack = [];
  let currentOpenBracketCount = 0;
  let currentOpenParensCount = 0;
  let currentStringType = null;
  for (let i2 = 0; i2 < path2.length; i2++) {
    const char = path2.charAt(i2);
    switch (state) {
      case 0:
        if (char === "[") {
          stateStack.push(state);
          state = 1;
          currentOpenBracketCount++;
        } else if (char === "(") {
          stateStack.push(state);
          state = 2;
          currentOpenParensCount++;
        } else if (!(i2 === 0 ? validFirstIdentCharRE : validIdentCharRE).test(char)) {
          return false;
        }
        break;
      case 1:
        if (char === `'` || char === `"` || char === "`") {
          stateStack.push(state);
          state = 3;
          currentStringType = char;
        } else if (char === `[`) {
          currentOpenBracketCount++;
        } else if (char === `]`) {
          if (!--currentOpenBracketCount) {
            state = stateStack.pop();
          }
        }
        break;
      case 2:
        if (char === `'` || char === `"` || char === "`") {
          stateStack.push(state);
          state = 3;
          currentStringType = char;
        } else if (char === `(`) {
          currentOpenParensCount++;
        } else if (char === `)`) {
          if (i2 === path2.length - 1) {
            return false;
          }
          if (!--currentOpenParensCount) {
            state = stateStack.pop();
          }
        }
        break;
      case 3:
        if (char === currentStringType) {
          state = stateStack.pop();
          currentStringType = null;
        }
        break;
    }
  }
  return !currentOpenBracketCount && !currentOpenParensCount;
};
const isMemberExpression = isMemberExpressionBrowser;
const fnExpRE = /^\s*(async\s*)?(\([^)]*?\)|[\w$_]+)\s*(:[^=]+)?=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/;
const isFnExpressionBrowser = (exp) => fnExpRE.test(getExpSource(exp));
const isFnExpression = isFnExpressionBrowser;
function findDir(node2, name, allowEmpty = false) {
  for (let i2 = 0; i2 < node2.props.length; i2++) {
    const p2 = node2.props[i2];
    if (p2.type === 7 && (allowEmpty || p2.exp) && (isString$1(name) ? p2.name === name : name.test(p2.name))) {
      return p2;
    }
  }
}
function findProp(node2, name, dynamicOnly = false, allowEmpty = false) {
  for (let i2 = 0; i2 < node2.props.length; i2++) {
    const p2 = node2.props[i2];
    if (p2.type === 6) {
      if (dynamicOnly) continue;
      if (p2.name === name && (p2.value || allowEmpty)) {
        return p2;
      }
    } else if (p2.name === "bind" && (p2.exp || allowEmpty) && isStaticArgOf(p2.arg, name)) {
      return p2;
    }
  }
}
function isStaticArgOf(arg, name) {
  return !!(arg && isStaticExp(arg) && arg.content === name);
}
function hasDynamicKeyVBind(node2) {
  return node2.props.some(
    (p2) => p2.type === 7 && p2.name === "bind" && (!p2.arg || // v-bind="obj"
    p2.arg.type !== 4 || // v-bind:[_ctx.foo]
    !p2.arg.isStatic)
    // v-bind:[foo]
  );
}
function isText$1(node2) {
  return node2.type === 5 || node2.type === 2;
}
function isVSlot(p2) {
  return p2.type === 7 && p2.name === "slot";
}
function isTemplateNode(node2) {
  return node2.type === 1 && node2.tagType === 3;
}
function isSlotOutlet(node2) {
  return node2.type === 1 && node2.tagType === 2;
}
const propsHelperSet = /* @__PURE__ */ new Set([NORMALIZE_PROPS, GUARD_REACTIVE_PROPS]);
function getUnnormalizedProps(props, callPath = []) {
  if (props && !isString$1(props) && props.type === 14) {
    const callee = props.callee;
    if (!isString$1(callee) && propsHelperSet.has(callee)) {
      return getUnnormalizedProps(
        props.arguments[0],
        callPath.concat(props)
      );
    }
  }
  return [props, callPath];
}
function injectProp(node2, prop, context) {
  let propsWithInjection;
  let props = node2.type === 13 ? node2.props : node2.arguments[2];
  let callPath = [];
  let parentCall;
  if (props && !isString$1(props) && props.type === 14) {
    const ret = getUnnormalizedProps(props);
    props = ret[0];
    callPath = ret[1];
    parentCall = callPath[callPath.length - 1];
  }
  if (props == null || isString$1(props)) {
    propsWithInjection = createObjectExpression([prop]);
  } else if (props.type === 14) {
    const first2 = props.arguments[0];
    if (!isString$1(first2) && first2.type === 15) {
      if (!hasProp(prop, first2)) {
        first2.properties.unshift(prop);
      }
    } else {
      if (props.callee === TO_HANDLERS) {
        propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [
          createObjectExpression([prop]),
          props
        ]);
      } else {
        props.arguments.unshift(createObjectExpression([prop]));
      }
    }
    !propsWithInjection && (propsWithInjection = props);
  } else if (props.type === 15) {
    if (!hasProp(prop, props)) {
      props.properties.unshift(prop);
    }
    propsWithInjection = props;
  } else {
    propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [
      createObjectExpression([prop]),
      props
    ]);
    if (parentCall && parentCall.callee === GUARD_REACTIVE_PROPS) {
      parentCall = callPath[callPath.length - 2];
    }
  }
  if (node2.type === 13) {
    if (parentCall) {
      parentCall.arguments[0] = propsWithInjection;
    } else {
      node2.props = propsWithInjection;
    }
  } else {
    if (parentCall) {
      parentCall.arguments[0] = propsWithInjection;
    } else {
      node2.arguments[2] = propsWithInjection;
    }
  }
}
function hasProp(prop, props) {
  let result = false;
  if (prop.key.type === 4) {
    const propKeyName = prop.key.content;
    result = props.properties.some(
      (p2) => p2.key.type === 4 && p2.key.content === propKeyName
    );
  }
  return result;
}
function toValidAssetId(name, type) {
  return `_${type}_${name.replace(/[^\w]/g, (searchValue, replaceValue) => {
    return searchValue === "-" ? "_" : name.charCodeAt(replaceValue).toString();
  })}`;
}
function getMemoedVNodeCall(node2) {
  if (node2.type === 14 && node2.callee === WITH_MEMO) {
    return node2.arguments[1].returns;
  } else {
    return node2;
  }
}
const forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+(\S[\s\S]*)/;
const defaultParserOptions = {
  parseMode: "base",
  ns: 0,
  delimiters: [`{{`, `}}`],
  getNamespace: () => 0,
  isVoidTag: NO,
  isPreTag: NO,
  isIgnoreNewlineTag: NO,
  isCustomElement: NO,
  onError: defaultOnError,
  onWarn: defaultOnWarn,
  comments: false,
  prefixIdentifiers: false
};
let currentOptions = defaultParserOptions;
let currentRoot = null;
let currentInput = "";
let currentOpenTag = null;
let currentProp = null;
let currentAttrValue = "";
let currentAttrStartIndex = -1;
let currentAttrEndIndex = -1;
let inPre = 0;
let inVPre = false;
let currentVPreBoundary = null;
const stack = [];
const tokenizer = new Tokenizer(stack, {
  onerr: emitError,
  ontext(start2, end2) {
    onText(getSlice(start2, end2), start2, end2);
  },
  ontextentity(char, start2, end2) {
    onText(char, start2, end2);
  },
  oninterpolation(start2, end2) {
    if (inVPre) {
      return onText(getSlice(start2, end2), start2, end2);
    }
    let innerStart = start2 + tokenizer.delimiterOpen.length;
    let innerEnd = end2 - tokenizer.delimiterClose.length;
    while (isWhitespace(currentInput.charCodeAt(innerStart))) {
      innerStart++;
    }
    while (isWhitespace(currentInput.charCodeAt(innerEnd - 1))) {
      innerEnd--;
    }
    let exp = getSlice(innerStart, innerEnd);
    if (exp.includes("&")) {
      {
        exp = currentOptions.decodeEntities(exp, false);
      }
    }
    addNode$1({
      type: 5,
      content: createExp(exp, false, getLoc(innerStart, innerEnd)),
      loc: getLoc(start2, end2)
    });
  },
  onopentagname(start2, end2) {
    const name = getSlice(start2, end2);
    currentOpenTag = {
      type: 1,
      tag: name,
      ns: currentOptions.getNamespace(name, stack[0], currentOptions.ns),
      tagType: 0,
      // will be refined on tag close
      props: [],
      children: [],
      loc: getLoc(start2 - 1, end2),
      codegenNode: void 0
    };
  },
  onopentagend(end2) {
    endOpenTag(end2);
  },
  onclosetag(start2, end2) {
    const name = getSlice(start2, end2);
    if (!currentOptions.isVoidTag(name)) {
      let found = false;
      for (let i2 = 0; i2 < stack.length; i2++) {
        const e2 = stack[i2];
        if (e2.tag.toLowerCase() === name.toLowerCase()) {
          found = true;
          if (i2 > 0) {
            emitError(24, stack[0].loc.start.offset);
          }
          for (let j2 = 0; j2 <= i2; j2++) {
            const el = stack.shift();
            onCloseTag(el, end2, j2 < i2);
          }
          break;
        }
      }
      if (!found) {
        emitError(23, backTrack(start2, 60));
      }
    }
  },
  onselfclosingtag(end2) {
    const name = currentOpenTag.tag;
    currentOpenTag.isSelfClosing = true;
    endOpenTag(end2);
    if (stack[0] && stack[0].tag === name) {
      onCloseTag(stack.shift(), end2);
    }
  },
  onattribname(start2, end2) {
    currentProp = {
      type: 6,
      name: getSlice(start2, end2),
      nameLoc: getLoc(start2, end2),
      value: void 0,
      loc: getLoc(start2)
    };
  },
  ondirname(start2, end2) {
    const raw = getSlice(start2, end2);
    const name = raw === "." || raw === ":" ? "bind" : raw === "@" ? "on" : raw === "#" ? "slot" : raw.slice(2);
    if (!inVPre && name === "") {
      emitError(26, start2);
    }
    if (inVPre || name === "") {
      currentProp = {
        type: 6,
        name: raw,
        nameLoc: getLoc(start2, end2),
        value: void 0,
        loc: getLoc(start2)
      };
    } else {
      currentProp = {
        type: 7,
        name,
        rawName: raw,
        exp: void 0,
        arg: void 0,
        modifiers: raw === "." ? [createSimpleExpression("prop")] : [],
        loc: getLoc(start2)
      };
      if (name === "pre") {
        inVPre = tokenizer.inVPre = true;
        currentVPreBoundary = currentOpenTag;
        const props = currentOpenTag.props;
        for (let i2 = 0; i2 < props.length; i2++) {
          if (props[i2].type === 7) {
            props[i2] = dirToAttr(props[i2]);
          }
        }
      }
    }
  },
  ondirarg(start2, end2) {
    if (start2 === end2) return;
    const arg = getSlice(start2, end2);
    if (inVPre) {
      currentProp.name += arg;
      setLocEnd(currentProp.nameLoc, end2);
    } else {
      const isStatic = arg[0] !== `[`;
      currentProp.arg = createExp(
        isStatic ? arg : arg.slice(1, -1),
        isStatic,
        getLoc(start2, end2),
        isStatic ? 3 : 0
      );
    }
  },
  ondirmodifier(start2, end2) {
    const mod = getSlice(start2, end2);
    if (inVPre) {
      currentProp.name += "." + mod;
      setLocEnd(currentProp.nameLoc, end2);
    } else if (currentProp.name === "slot") {
      const arg = currentProp.arg;
      if (arg) {
        arg.content += "." + mod;
        setLocEnd(arg.loc, end2);
      }
    } else {
      const exp = createSimpleExpression(mod, true, getLoc(start2, end2));
      currentProp.modifiers.push(exp);
    }
  },
  onattribdata(start2, end2) {
    currentAttrValue += getSlice(start2, end2);
    if (currentAttrStartIndex < 0) currentAttrStartIndex = start2;
    currentAttrEndIndex = end2;
  },
  onattribentity(char, start2, end2) {
    currentAttrValue += char;
    if (currentAttrStartIndex < 0) currentAttrStartIndex = start2;
    currentAttrEndIndex = end2;
  },
  onattribnameend(end2) {
    const start2 = currentProp.loc.start.offset;
    const name = getSlice(start2, end2);
    if (currentProp.type === 7) {
      currentProp.rawName = name;
    }
    if (currentOpenTag.props.some(
      (p2) => (p2.type === 7 ? p2.rawName : p2.name) === name
    )) {
      emitError(2, start2);
    }
  },
  onattribend(quote, end2) {
    if (currentOpenTag && currentProp) {
      setLocEnd(currentProp.loc, end2);
      if (quote !== 0) {
        if (currentAttrValue.includes("&")) {
          currentAttrValue = currentOptions.decodeEntities(
            currentAttrValue,
            true
          );
        }
        if (currentProp.type === 6) {
          if (currentProp.name === "class") {
            currentAttrValue = condense(currentAttrValue).trim();
          }
          if (quote === 1 && !currentAttrValue) {
            emitError(13, end2);
          }
          currentProp.value = {
            type: 2,
            content: currentAttrValue,
            loc: quote === 1 ? getLoc(currentAttrStartIndex, currentAttrEndIndex) : getLoc(currentAttrStartIndex - 1, currentAttrEndIndex + 1)
          };
          if (tokenizer.inSFCRoot && currentOpenTag.tag === "template" && currentProp.name === "lang" && currentAttrValue && currentAttrValue !== "html") {
            tokenizer.enterRCDATA(toCharCodes(`</template`), 0);
          }
        } else {
          let expParseMode = 0;
          currentProp.exp = createExp(
            currentAttrValue,
            false,
            getLoc(currentAttrStartIndex, currentAttrEndIndex),
            0,
            expParseMode
          );
          if (currentProp.name === "for") {
            currentProp.forParseResult = parseForExpression(currentProp.exp);
          }
          let syncIndex = -1;
          if (currentProp.name === "bind" && (syncIndex = currentProp.modifiers.findIndex(
            (mod) => mod.content === "sync"
          )) > -1 && checkCompatEnabled(
            "COMPILER_V_BIND_SYNC",
            currentOptions,
            currentProp.loc,
            currentProp.rawName
          )) {
            currentProp.name = "model";
            currentProp.modifiers.splice(syncIndex, 1);
          }
        }
      }
      if (currentProp.type !== 7 || currentProp.name !== "pre") {
        currentOpenTag.props.push(currentProp);
      }
    }
    currentAttrValue = "";
    currentAttrStartIndex = currentAttrEndIndex = -1;
  },
  oncomment(start2, end2) {
    if (currentOptions.comments) {
      addNode$1({
        type: 3,
        content: getSlice(start2, end2),
        loc: getLoc(start2 - 4, end2 + 3)
      });
    }
  },
  onend() {
    const end2 = currentInput.length;
    for (let index2 = 0; index2 < stack.length; index2++) {
      onCloseTag(stack[index2], end2 - 1);
      emitError(24, stack[index2].loc.start.offset);
    }
  },
  oncdata(start2, end2) {
    if (stack[0].ns !== 0) {
      onText(getSlice(start2, end2), start2, end2);
    } else {
      emitError(1, start2 - 9);
    }
  },
  onprocessinginstruction(start2) {
    if ((stack[0] ? stack[0].ns : currentOptions.ns) === 0) {
      emitError(
        21,
        start2 - 1
      );
    }
  }
});
const forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
const stripParensRE = /^\(|\)$/g;
function parseForExpression(input) {
  const loc = input.loc;
  const exp = input.content;
  const inMatch = exp.match(forAliasRE);
  if (!inMatch) return;
  const [, LHS, RHS] = inMatch;
  const createAliasExpression = (content, offset2, asParam = false) => {
    const start2 = loc.start.offset + offset2;
    const end2 = start2 + content.length;
    return createExp(
      content,
      false,
      getLoc(start2, end2),
      0,
      asParam ? 1 : 0
      /* Normal */
    );
  };
  const result = {
    source: createAliasExpression(RHS.trim(), exp.indexOf(RHS, LHS.length)),
    value: void 0,
    key: void 0,
    index: void 0,
    finalized: false
  };
  let valueContent = LHS.trim().replace(stripParensRE, "").trim();
  const trimmedOffset = LHS.indexOf(valueContent);
  const iteratorMatch = valueContent.match(forIteratorRE);
  if (iteratorMatch) {
    valueContent = valueContent.replace(forIteratorRE, "").trim();
    const keyContent = iteratorMatch[1].trim();
    let keyOffset;
    if (keyContent) {
      keyOffset = exp.indexOf(keyContent, trimmedOffset + valueContent.length);
      result.key = createAliasExpression(keyContent, keyOffset, true);
    }
    if (iteratorMatch[2]) {
      const indexContent = iteratorMatch[2].trim();
      if (indexContent) {
        result.index = createAliasExpression(
          indexContent,
          exp.indexOf(
            indexContent,
            result.key ? keyOffset + keyContent.length : trimmedOffset + valueContent.length
          ),
          true
        );
      }
    }
  }
  if (valueContent) {
    result.value = createAliasExpression(valueContent, trimmedOffset, true);
  }
  return result;
}
function getSlice(start2, end2) {
  return currentInput.slice(start2, end2);
}
function endOpenTag(end2) {
  if (tokenizer.inSFCRoot) {
    currentOpenTag.innerLoc = getLoc(end2 + 1, end2 + 1);
  }
  addNode$1(currentOpenTag);
  const { tag: tag2, ns } = currentOpenTag;
  if (ns === 0 && currentOptions.isPreTag(tag2)) {
    inPre++;
  }
  if (currentOptions.isVoidTag(tag2)) {
    onCloseTag(currentOpenTag, end2);
  } else {
    stack.unshift(currentOpenTag);
    if (ns === 1 || ns === 2) {
      tokenizer.inXML = true;
    }
  }
  currentOpenTag = null;
}
function onText(content, start2, end2) {
  {
    const tag2 = stack[0] && stack[0].tag;
    if (tag2 !== "script" && tag2 !== "style" && content.includes("&")) {
      content = currentOptions.decodeEntities(content, false);
    }
  }
  const parent2 = stack[0] || currentRoot;
  const lastNode = parent2.children[parent2.children.length - 1];
  if (lastNode && lastNode.type === 2) {
    lastNode.content += content;
    setLocEnd(lastNode.loc, end2);
  } else {
    parent2.children.push({
      type: 2,
      content,
      loc: getLoc(start2, end2)
    });
  }
}
function onCloseTag(el, end2, isImplied = false) {
  if (isImplied) {
    setLocEnd(el.loc, backTrack(end2, 60));
  } else {
    setLocEnd(el.loc, lookAhead(end2, 62) + 1);
  }
  if (tokenizer.inSFCRoot) {
    if (el.children.length) {
      el.innerLoc.end = extend$2({}, el.children[el.children.length - 1].loc.end);
    } else {
      el.innerLoc.end = extend$2({}, el.innerLoc.start);
    }
    el.innerLoc.source = getSlice(
      el.innerLoc.start.offset,
      el.innerLoc.end.offset
    );
  }
  const { tag: tag2, ns, children: children2 } = el;
  if (!inVPre) {
    if (tag2 === "slot") {
      el.tagType = 2;
    } else if (isFragmentTemplate(el)) {
      el.tagType = 3;
    } else if (isComponent(el)) {
      el.tagType = 1;
    }
  }
  if (!tokenizer.inRCDATA) {
    el.children = condenseWhitespace(children2);
  }
  if (ns === 0 && currentOptions.isIgnoreNewlineTag(tag2)) {
    const first2 = children2[0];
    if (first2 && first2.type === 2) {
      first2.content = first2.content.replace(/^\r?\n/, "");
    }
  }
  if (ns === 0 && currentOptions.isPreTag(tag2)) {
    inPre--;
  }
  if (currentVPreBoundary === el) {
    inVPre = tokenizer.inVPre = false;
    currentVPreBoundary = null;
  }
  if (tokenizer.inXML && (stack[0] ? stack[0].ns : currentOptions.ns) === 0) {
    tokenizer.inXML = false;
  }
  {
    const props = el.props;
    if (!tokenizer.inSFCRoot && isCompatEnabled(
      "COMPILER_NATIVE_TEMPLATE",
      currentOptions
    ) && el.tag === "template" && !isFragmentTemplate(el)) {
      const parent2 = stack[0] || currentRoot;
      const index2 = parent2.children.indexOf(el);
      parent2.children.splice(index2, 1, ...el.children);
    }
    const inlineTemplateProp = props.find(
      (p2) => p2.type === 6 && p2.name === "inline-template"
    );
    if (inlineTemplateProp && checkCompatEnabled(
      "COMPILER_INLINE_TEMPLATE",
      currentOptions,
      inlineTemplateProp.loc
    ) && el.children.length) {
      inlineTemplateProp.value = {
        type: 2,
        content: getSlice(
          el.children[0].loc.start.offset,
          el.children[el.children.length - 1].loc.end.offset
        ),
        loc: inlineTemplateProp.loc
      };
    }
  }
}
function lookAhead(index2, c2) {
  let i2 = index2;
  while (currentInput.charCodeAt(i2) !== c2 && i2 < currentInput.length - 1) i2++;
  return i2;
}
function backTrack(index2, c2) {
  let i2 = index2;
  while (currentInput.charCodeAt(i2) !== c2 && i2 >= 0) i2--;
  return i2;
}
const specialTemplateDir = /* @__PURE__ */ new Set(["if", "else", "else-if", "for", "slot"]);
function isFragmentTemplate({ tag: tag2, props }) {
  if (tag2 === "template") {
    for (let i2 = 0; i2 < props.length; i2++) {
      if (props[i2].type === 7 && specialTemplateDir.has(props[i2].name)) {
        return true;
      }
    }
  }
  return false;
}
function isComponent({ tag: tag2, props }) {
  if (currentOptions.isCustomElement(tag2)) {
    return false;
  }
  if (tag2 === "component" || isUpperCase(tag2.charCodeAt(0)) || isCoreComponent(tag2) || currentOptions.isBuiltInComponent && currentOptions.isBuiltInComponent(tag2) || currentOptions.isNativeTag && !currentOptions.isNativeTag(tag2)) {
    return true;
  }
  for (let i2 = 0; i2 < props.length; i2++) {
    const p2 = props[i2];
    if (p2.type === 6) {
      if (p2.name === "is" && p2.value) {
        if (p2.value.content.startsWith("vue:")) {
          return true;
        } else if (checkCompatEnabled(
          "COMPILER_IS_ON_ELEMENT",
          currentOptions,
          p2.loc
        )) {
          return true;
        }
      }
    } else if (
      // :is on plain element - only treat as component in compat mode
      p2.name === "bind" && isStaticArgOf(p2.arg, "is") && checkCompatEnabled(
        "COMPILER_IS_ON_ELEMENT",
        currentOptions,
        p2.loc
      )
    ) {
      return true;
    }
  }
  return false;
}
function isUpperCase(c2) {
  return c2 > 64 && c2 < 91;
}
const windowsNewlineRE = /\r\n/g;
function condenseWhitespace(nodes2, tag2) {
  const shouldCondense = currentOptions.whitespace !== "preserve";
  let removedWhitespace = false;
  for (let i2 = 0; i2 < nodes2.length; i2++) {
    const node2 = nodes2[i2];
    if (node2.type === 2) {
      if (!inPre) {
        if (isAllWhitespace(node2.content)) {
          const prev = nodes2[i2 - 1] && nodes2[i2 - 1].type;
          const next4 = nodes2[i2 + 1] && nodes2[i2 + 1].type;
          if (!prev || !next4 || shouldCondense && (prev === 3 && (next4 === 3 || next4 === 1) || prev === 1 && (next4 === 3 || next4 === 1 && hasNewlineChar(node2.content)))) {
            removedWhitespace = true;
            nodes2[i2] = null;
          } else {
            node2.content = " ";
          }
        } else if (shouldCondense) {
          node2.content = condense(node2.content);
        }
      } else {
        node2.content = node2.content.replace(windowsNewlineRE, "\n");
      }
    }
  }
  return removedWhitespace ? nodes2.filter(Boolean) : nodes2;
}
function isAllWhitespace(str) {
  for (let i2 = 0; i2 < str.length; i2++) {
    if (!isWhitespace(str.charCodeAt(i2))) {
      return false;
    }
  }
  return true;
}
function hasNewlineChar(str) {
  for (let i2 = 0; i2 < str.length; i2++) {
    const c2 = str.charCodeAt(i2);
    if (c2 === 10 || c2 === 13) {
      return true;
    }
  }
  return false;
}
function condense(str) {
  let ret = "";
  let prevCharIsWhitespace = false;
  for (let i2 = 0; i2 < str.length; i2++) {
    if (isWhitespace(str.charCodeAt(i2))) {
      if (!prevCharIsWhitespace) {
        ret += " ";
        prevCharIsWhitespace = true;
      }
    } else {
      ret += str[i2];
      prevCharIsWhitespace = false;
    }
  }
  return ret;
}
function addNode$1(node2) {
  (stack[0] || currentRoot).children.push(node2);
}
function getLoc(start2, end2) {
  return {
    start: tokenizer.getPos(start2),
    // @ts-expect-error allow late attachment
    end: end2 == null ? end2 : tokenizer.getPos(end2),
    // @ts-expect-error allow late attachment
    source: end2 == null ? end2 : getSlice(start2, end2)
  };
}
function cloneLoc(loc) {
  return getLoc(loc.start.offset, loc.end.offset);
}
function setLocEnd(loc, end2) {
  loc.end = tokenizer.getPos(end2);
  loc.source = getSlice(loc.start.offset, end2);
}
function dirToAttr(dir) {
  const attr = {
    type: 6,
    name: dir.rawName,
    nameLoc: getLoc(
      dir.loc.start.offset,
      dir.loc.start.offset + dir.rawName.length
    ),
    value: void 0,
    loc: dir.loc
  };
  if (dir.exp) {
    const loc = dir.exp.loc;
    if (loc.end.offset < dir.loc.end.offset) {
      loc.start.offset--;
      loc.start.column--;
      loc.end.offset++;
      loc.end.column++;
    }
    attr.value = {
      type: 2,
      content: dir.exp.content,
      loc
    };
  }
  return attr;
}
function createExp(content, isStatic = false, loc, constType = 0, parseMode = 0) {
  const exp = createSimpleExpression(content, isStatic, loc, constType);
  return exp;
}
function emitError(code2, index2, message2) {
  currentOptions.onError(
    createCompilerError(code2, getLoc(index2, index2))
  );
}
function reset() {
  tokenizer.reset();
  currentOpenTag = null;
  currentProp = null;
  currentAttrValue = "";
  currentAttrStartIndex = -1;
  currentAttrEndIndex = -1;
  stack.length = 0;
}
function baseParse(input, options) {
  reset();
  currentInput = input;
  currentOptions = extend$2({}, defaultParserOptions);
  if (options) {
    let key2;
    for (key2 in options) {
      if (options[key2] != null) {
        currentOptions[key2] = options[key2];
      }
    }
  }
  tokenizer.mode = currentOptions.parseMode === "html" ? 1 : currentOptions.parseMode === "sfc" ? 2 : 0;
  tokenizer.inXML = currentOptions.ns === 1 || currentOptions.ns === 2;
  const delimiters = options && options.delimiters;
  if (delimiters) {
    tokenizer.delimiterOpen = toCharCodes(delimiters[0]);
    tokenizer.delimiterClose = toCharCodes(delimiters[1]);
  }
  const root = currentRoot = createRoot([], input);
  tokenizer.parse(currentInput);
  root.loc = getLoc(0, input.length);
  root.children = condenseWhitespace(root.children);
  currentRoot = null;
  return root;
}
function cacheStatic(root, context) {
  walk(
    root,
    void 0,
    context,
    // Root node is unfortunately non-hoistable due to potential parent
    // fallthrough attributes.
    isSingleElementRoot(root, root.children[0])
  );
}
function isSingleElementRoot(root, child2) {
  const { children: children2 } = root;
  return children2.length === 1 && child2.type === 1 && !isSlotOutlet(child2);
}
function walk(node2, parent2, context, doNotHoistNode = false, inFor = false) {
  const { children: children2 } = node2;
  const toCache = [];
  for (let i2 = 0; i2 < children2.length; i2++) {
    const child2 = children2[i2];
    if (child2.type === 1 && child2.tagType === 0) {
      const constantType = doNotHoistNode ? 0 : getConstantType(child2, context);
      if (constantType > 0) {
        if (constantType >= 2) {
          child2.codegenNode.patchFlag = -1;
          toCache.push(child2);
          continue;
        }
      } else {
        const codegenNode = child2.codegenNode;
        if (codegenNode.type === 13) {
          const flag2 = codegenNode.patchFlag;
          if ((flag2 === void 0 || flag2 === 512 || flag2 === 1) && getGeneratedPropsConstantType(child2, context) >= 2) {
            const props = getNodeProps(child2);
            if (props) {
              codegenNode.props = context.hoist(props);
            }
          }
          if (codegenNode.dynamicProps) {
            codegenNode.dynamicProps = context.hoist(codegenNode.dynamicProps);
          }
        }
      }
    } else if (child2.type === 12) {
      const constantType = doNotHoistNode ? 0 : getConstantType(child2, context);
      if (constantType >= 2) {
        toCache.push(child2);
        continue;
      }
    }
    if (child2.type === 1) {
      const isComponent2 = child2.tagType === 1;
      if (isComponent2) {
        context.scopes.vSlot++;
      }
      walk(child2, node2, context, false, inFor);
      if (isComponent2) {
        context.scopes.vSlot--;
      }
    } else if (child2.type === 11) {
      walk(child2, node2, context, child2.children.length === 1, true);
    } else if (child2.type === 9) {
      for (let i22 = 0; i22 < child2.branches.length; i22++) {
        walk(
          child2.branches[i22],
          node2,
          context,
          child2.branches[i22].children.length === 1,
          inFor
        );
      }
    }
  }
  let cachedAsArray = false;
  if (toCache.length === children2.length && node2.type === 1) {
    if (node2.tagType === 0 && node2.codegenNode && node2.codegenNode.type === 13 && isArray$g(node2.codegenNode.children)) {
      node2.codegenNode.children = getCacheExpression(
        createArrayExpression(node2.codegenNode.children)
      );
      cachedAsArray = true;
    } else if (node2.tagType === 1 && node2.codegenNode && node2.codegenNode.type === 13 && node2.codegenNode.children && !isArray$g(node2.codegenNode.children) && node2.codegenNode.children.type === 15) {
      const slot = getSlotNode(node2.codegenNode, "default");
      if (slot) {
        slot.returns = getCacheExpression(
          createArrayExpression(slot.returns)
        );
        cachedAsArray = true;
      }
    } else if (node2.tagType === 3 && parent2 && parent2.type === 1 && parent2.tagType === 1 && parent2.codegenNode && parent2.codegenNode.type === 13 && parent2.codegenNode.children && !isArray$g(parent2.codegenNode.children) && parent2.codegenNode.children.type === 15) {
      const slotName = findDir(node2, "slot", true);
      const slot = slotName && slotName.arg && getSlotNode(parent2.codegenNode, slotName.arg);
      if (slot) {
        slot.returns = getCacheExpression(
          createArrayExpression(slot.returns)
        );
        cachedAsArray = true;
      }
    }
  }
  if (!cachedAsArray) {
    for (const child2 of toCache) {
      child2.codegenNode = context.cache(child2.codegenNode);
    }
  }
  function getCacheExpression(value2) {
    const exp = context.cache(value2);
    if (inFor && context.hmr) {
      exp.needArraySpread = true;
    }
    return exp;
  }
  function getSlotNode(node22, name) {
    if (node22.children && !isArray$g(node22.children) && node22.children.type === 15) {
      const slot = node22.children.properties.find(
        (p2) => p2.key === name || p2.key.content === name
      );
      return slot && slot.value;
    }
  }
  if (toCache.length && context.transformHoist) {
    context.transformHoist(children2, context, node2);
  }
}
function getConstantType(node2, context) {
  const { constantCache } = context;
  switch (node2.type) {
    case 1:
      if (node2.tagType !== 0) {
        return 0;
      }
      const cached = constantCache.get(node2);
      if (cached !== void 0) {
        return cached;
      }
      const codegenNode = node2.codegenNode;
      if (codegenNode.type !== 13) {
        return 0;
      }
      if (codegenNode.isBlock && node2.tag !== "svg" && node2.tag !== "foreignObject" && node2.tag !== "math") {
        return 0;
      }
      if (codegenNode.patchFlag === void 0) {
        let returnType2 = 3;
        const generatedPropsType = getGeneratedPropsConstantType(node2, context);
        if (generatedPropsType === 0) {
          constantCache.set(node2, 0);
          return 0;
        }
        if (generatedPropsType < returnType2) {
          returnType2 = generatedPropsType;
        }
        for (let i2 = 0; i2 < node2.children.length; i2++) {
          const childType = getConstantType(node2.children[i2], context);
          if (childType === 0) {
            constantCache.set(node2, 0);
            return 0;
          }
          if (childType < returnType2) {
            returnType2 = childType;
          }
        }
        if (returnType2 > 1) {
          for (let i2 = 0; i2 < node2.props.length; i2++) {
            const p2 = node2.props[i2];
            if (p2.type === 7 && p2.name === "bind" && p2.exp) {
              const expType = getConstantType(p2.exp, context);
              if (expType === 0) {
                constantCache.set(node2, 0);
                return 0;
              }
              if (expType < returnType2) {
                returnType2 = expType;
              }
            }
          }
        }
        if (codegenNode.isBlock) {
          for (let i2 = 0; i2 < node2.props.length; i2++) {
            const p2 = node2.props[i2];
            if (p2.type === 7) {
              constantCache.set(node2, 0);
              return 0;
            }
          }
          context.removeHelper(OPEN_BLOCK);
          context.removeHelper(
            getVNodeBlockHelper(context.inSSR, codegenNode.isComponent)
          );
          codegenNode.isBlock = false;
          context.helper(getVNodeHelper(context.inSSR, codegenNode.isComponent));
        }
        constantCache.set(node2, returnType2);
        return returnType2;
      } else {
        constantCache.set(node2, 0);
        return 0;
      }
    case 2:
    case 3:
      return 3;
    case 9:
    case 11:
    case 10:
      return 0;
    case 5:
    case 12:
      return getConstantType(node2.content, context);
    case 4:
      return node2.constType;
    case 8:
      let returnType = 3;
      for (let i2 = 0; i2 < node2.children.length; i2++) {
        const child2 = node2.children[i2];
        if (isString$1(child2) || isSymbol$7(child2)) {
          continue;
        }
        const childType = getConstantType(child2, context);
        if (childType === 0) {
          return 0;
        } else if (childType < returnType) {
          returnType = childType;
        }
      }
      return returnType;
    case 20:
      return 2;
    default:
      return 0;
  }
}
const allowHoistedHelperSet = /* @__PURE__ */ new Set([
  NORMALIZE_CLASS,
  NORMALIZE_STYLE,
  NORMALIZE_PROPS,
  GUARD_REACTIVE_PROPS
]);
function getConstantTypeOfHelperCall(value2, context) {
  if (value2.type === 14 && !isString$1(value2.callee) && allowHoistedHelperSet.has(value2.callee)) {
    const arg = value2.arguments[0];
    if (arg.type === 4) {
      return getConstantType(arg, context);
    } else if (arg.type === 14) {
      return getConstantTypeOfHelperCall(arg, context);
    }
  }
  return 0;
}
function getGeneratedPropsConstantType(node2, context) {
  let returnType = 3;
  const props = getNodeProps(node2);
  if (props && props.type === 15) {
    const { properties } = props;
    for (let i2 = 0; i2 < properties.length; i2++) {
      const { key: key2, value: value2 } = properties[i2];
      const keyType = getConstantType(key2, context);
      if (keyType === 0) {
        return keyType;
      }
      if (keyType < returnType) {
        returnType = keyType;
      }
      let valueType;
      if (value2.type === 4) {
        valueType = getConstantType(value2, context);
      } else if (value2.type === 14) {
        valueType = getConstantTypeOfHelperCall(value2, context);
      } else {
        valueType = 0;
      }
      if (valueType === 0) {
        return valueType;
      }
      if (valueType < returnType) {
        returnType = valueType;
      }
    }
  }
  return returnType;
}
function getNodeProps(node2) {
  const codegenNode = node2.codegenNode;
  if (codegenNode.type === 13) {
    return codegenNode.props;
  }
}
function createTransformContext(root, {
  filename = "",
  prefixIdentifiers = false,
  hoistStatic = false,
  hmr = false,
  cacheHandlers = false,
  nodeTransforms = [],
  directiveTransforms = {},
  transformHoist = null,
  isBuiltInComponent = NOOP,
  isCustomElement = NOOP,
  expressionPlugins = [],
  scopeId = null,
  slotted = true,
  ssr = false,
  inSSR = false,
  ssrCssVars = ``,
  bindingMetadata = EMPTY_OBJ,
  inline = false,
  isTS = false,
  onError = defaultOnError,
  onWarn = defaultOnWarn,
  compatConfig
}) {
  const nameMatch = filename.replace(/\?.*$/, "").match(/([^/\\]+)\.\w+$/);
  const context = {
    // options
    filename,
    selfName: nameMatch && capitalize(camelize(nameMatch[1])),
    prefixIdentifiers,
    hoistStatic,
    hmr,
    cacheHandlers,
    nodeTransforms,
    directiveTransforms,
    transformHoist,
    isBuiltInComponent,
    isCustomElement,
    expressionPlugins,
    scopeId,
    slotted,
    ssr,
    inSSR,
    ssrCssVars,
    bindingMetadata,
    inline,
    isTS,
    onError,
    onWarn,
    compatConfig,
    // state
    root,
    helpers: /* @__PURE__ */ new Map(),
    components: /* @__PURE__ */ new Set(),
    directives: /* @__PURE__ */ new Set(),
    hoists: [],
    imports: [],
    cached: [],
    constantCache: /* @__PURE__ */ new WeakMap(),
    temps: 0,
    identifiers: /* @__PURE__ */ Object.create(null),
    scopes: {
      vFor: 0,
      vSlot: 0,
      vPre: 0,
      vOnce: 0
    },
    parent: null,
    grandParent: null,
    currentNode: root,
    childIndex: 0,
    inVOnce: false,
    // methods
    helper(name) {
      const count = context.helpers.get(name) || 0;
      context.helpers.set(name, count + 1);
      return name;
    },
    removeHelper(name) {
      const count = context.helpers.get(name);
      if (count) {
        const currentCount = count - 1;
        if (!currentCount) {
          context.helpers.delete(name);
        } else {
          context.helpers.set(name, currentCount);
        }
      }
    },
    helperString(name) {
      return `_${helperNameMap[context.helper(name)]}`;
    },
    replaceNode(node2) {
      context.parent.children[context.childIndex] = context.currentNode = node2;
    },
    removeNode(node2) {
      const list2 = context.parent.children;
      const removalIndex = node2 ? list2.indexOf(node2) : context.currentNode ? context.childIndex : -1;
      if (!node2 || node2 === context.currentNode) {
        context.currentNode = null;
        context.onNodeRemoved();
      } else {
        if (context.childIndex > removalIndex) {
          context.childIndex--;
          context.onNodeRemoved();
        }
      }
      context.parent.children.splice(removalIndex, 1);
    },
    onNodeRemoved: NOOP,
    addIdentifiers(exp) {
    },
    removeIdentifiers(exp) {
    },
    hoist(exp) {
      if (isString$1(exp)) exp = createSimpleExpression(exp);
      context.hoists.push(exp);
      const identifier = createSimpleExpression(
        `_hoisted_${context.hoists.length}`,
        false,
        exp.loc,
        2
      );
      identifier.hoisted = exp;
      return identifier;
    },
    cache(exp, isVNode2 = false, inVOnce = false) {
      const cacheExp = createCacheExpression(
        context.cached.length,
        exp,
        isVNode2,
        inVOnce
      );
      context.cached.push(cacheExp);
      return cacheExp;
    }
  };
  {
    context.filters = /* @__PURE__ */ new Set();
  }
  return context;
}
function transform(root, options) {
  const context = createTransformContext(root, options);
  traverseNode(root, context);
  if (options.hoistStatic) {
    cacheStatic(root, context);
  }
  if (!options.ssr) {
    createRootCodegen(root, context);
  }
  root.helpers = /* @__PURE__ */ new Set([...context.helpers.keys()]);
  root.components = [...context.components];
  root.directives = [...context.directives];
  root.imports = context.imports;
  root.hoists = context.hoists;
  root.temps = context.temps;
  root.cached = context.cached;
  root.transformed = true;
  {
    root.filters = [...context.filters];
  }
}
function createRootCodegen(root, context) {
  const { helper } = context;
  const { children: children2 } = root;
  if (children2.length === 1) {
    const child2 = children2[0];
    if (isSingleElementRoot(root, child2) && child2.codegenNode) {
      const codegenNode = child2.codegenNode;
      if (codegenNode.type === 13) {
        convertToBlock(codegenNode, context);
      }
      root.codegenNode = codegenNode;
    } else {
      root.codegenNode = child2;
    }
  } else if (children2.length > 1) {
    let patchFlag = 64;
    root.codegenNode = createVNodeCall(
      context,
      helper(FRAGMENT),
      void 0,
      root.children,
      patchFlag,
      void 0,
      void 0,
      true,
      void 0,
      false
    );
  } else ;
}
function traverseChildren(parent2, context) {
  let i2 = 0;
  const nodeRemoved = () => {
    i2--;
  };
  for (; i2 < parent2.children.length; i2++) {
    const child2 = parent2.children[i2];
    if (isString$1(child2)) continue;
    context.grandParent = context.parent;
    context.parent = parent2;
    context.childIndex = i2;
    context.onNodeRemoved = nodeRemoved;
    traverseNode(child2, context);
  }
}
function traverseNode(node2, context) {
  context.currentNode = node2;
  const { nodeTransforms } = context;
  const exitFns = [];
  for (let i22 = 0; i22 < nodeTransforms.length; i22++) {
    const onExit = nodeTransforms[i22](node2, context);
    if (onExit) {
      if (isArray$g(onExit)) {
        exitFns.push(...onExit);
      } else {
        exitFns.push(onExit);
      }
    }
    if (!context.currentNode) {
      return;
    } else {
      node2 = context.currentNode;
    }
  }
  switch (node2.type) {
    case 3:
      if (!context.ssr) {
        context.helper(CREATE_COMMENT);
      }
      break;
    case 5:
      if (!context.ssr) {
        context.helper(TO_DISPLAY_STRING);
      }
      break;
    case 9:
      for (let i22 = 0; i22 < node2.branches.length; i22++) {
        traverseNode(node2.branches[i22], context);
      }
      break;
    case 10:
    case 11:
    case 1:
    case 0:
      traverseChildren(node2, context);
      break;
  }
  context.currentNode = node2;
  let i2 = exitFns.length;
  while (i2--) {
    exitFns[i2]();
  }
}
function createStructuralDirectiveTransform(name, fn2) {
  const matches2 = isString$1(name) ? (n2) => n2 === name : (n2) => name.test(n2);
  return (node2, context) => {
    if (node2.type === 1) {
      const { props } = node2;
      if (node2.tagType === 3 && props.some(isVSlot)) {
        return;
      }
      const exitFns = [];
      for (let i2 = 0; i2 < props.length; i2++) {
        const prop = props[i2];
        if (prop.type === 7 && matches2(prop.name)) {
          props.splice(i2, 1);
          i2--;
          const onExit = fn2(node2, prop, context);
          if (onExit) exitFns.push(onExit);
        }
      }
      return exitFns;
    }
  };
}
const PURE_ANNOTATION = `/*@__PURE__*/`;
const aliasHelper = (s2) => `${helperNameMap[s2]}: _${helperNameMap[s2]}`;
function createCodegenContext(ast, {
  mode = "function",
  prefixIdentifiers = mode === "module",
  sourceMap = false,
  filename = `template.vue.html`,
  scopeId = null,
  optimizeImports = false,
  runtimeGlobalName = `Vue`,
  runtimeModuleName = `vue`,
  ssrRuntimeModuleName = "vue/server-renderer",
  ssr = false,
  isTS = false,
  inSSR = false
}) {
  const context = {
    mode,
    prefixIdentifiers,
    sourceMap,
    filename,
    scopeId,
    optimizeImports,
    runtimeGlobalName,
    runtimeModuleName,
    ssrRuntimeModuleName,
    ssr,
    isTS,
    inSSR,
    source: ast.source,
    code: ``,
    column: 1,
    line: 1,
    offset: 0,
    indentLevel: 0,
    pure: false,
    map: void 0,
    helper(key2) {
      return `_${helperNameMap[key2]}`;
    },
    push(code2, newlineIndex = -2, node2) {
      context.code += code2;
    },
    indent() {
      newline(++context.indentLevel);
    },
    deindent(withoutNewLine = false) {
      if (withoutNewLine) {
        --context.indentLevel;
      } else {
        newline(--context.indentLevel);
      }
    },
    newline() {
      newline(context.indentLevel);
    }
  };
  function newline(n2) {
    context.push(
      "\n" + `  `.repeat(n2),
      0
      /* Start */
    );
  }
  return context;
}
function generate(ast, options = {}) {
  const context = createCodegenContext(ast, options);
  if (options.onContextCreated) options.onContextCreated(context);
  const {
    mode,
    push: push4,
    prefixIdentifiers,
    indent: indent2,
    deindent,
    newline,
    scopeId,
    ssr
  } = context;
  const helpers = Array.from(ast.helpers);
  const hasHelpers = helpers.length > 0;
  const useWithBlock = !prefixIdentifiers && mode !== "module";
  const preambleContext = context;
  {
    genFunctionPreamble(ast, preambleContext);
  }
  const functionName2 = ssr ? `ssrRender` : `render`;
  const args = ssr ? ["_ctx", "_push", "_parent", "_attrs"] : ["_ctx", "_cache"];
  const signature2 = args.join(", ");
  {
    push4(`function ${functionName2}(${signature2}) {`);
  }
  indent2();
  if (useWithBlock) {
    push4(`with (_ctx) {`);
    indent2();
    if (hasHelpers) {
      push4(
        `const { ${helpers.map(aliasHelper).join(", ")} } = _Vue
`,
        -1
        /* End */
      );
      newline();
    }
  }
  if (ast.components.length) {
    genAssets(ast.components, "component", context);
    if (ast.directives.length || ast.temps > 0) {
      newline();
    }
  }
  if (ast.directives.length) {
    genAssets(ast.directives, "directive", context);
    if (ast.temps > 0) {
      newline();
    }
  }
  if (ast.filters && ast.filters.length) {
    newline();
    genAssets(ast.filters, "filter", context);
    newline();
  }
  if (ast.temps > 0) {
    push4(`let `);
    for (let i2 = 0; i2 < ast.temps; i2++) {
      push4(`${i2 > 0 ? `, ` : ``}_temp${i2}`);
    }
  }
  if (ast.components.length || ast.directives.length || ast.temps) {
    push4(
      `
`,
      0
      /* Start */
    );
    newline();
  }
  if (!ssr) {
    push4(`return `);
  }
  if (ast.codegenNode) {
    genNode(ast.codegenNode, context);
  } else {
    push4(`null`);
  }
  if (useWithBlock) {
    deindent();
    push4(`}`);
  }
  deindent();
  push4(`}`);
  return {
    ast,
    code: context.code,
    preamble: ``,
    map: context.map ? context.map.toJSON() : void 0
  };
}
function genFunctionPreamble(ast, context) {
  const {
    ssr,
    prefixIdentifiers,
    push: push4,
    newline,
    runtimeModuleName,
    runtimeGlobalName,
    ssrRuntimeModuleName
  } = context;
  const VueBinding = runtimeGlobalName;
  const helpers = Array.from(ast.helpers);
  if (helpers.length > 0) {
    {
      push4(
        `const _Vue = ${VueBinding}
`,
        -1
        /* End */
      );
      if (ast.hoists.length) {
        const staticHelpers = [
          CREATE_VNODE,
          CREATE_ELEMENT_VNODE,
          CREATE_COMMENT,
          CREATE_TEXT,
          CREATE_STATIC
        ].filter((helper) => helpers.includes(helper)).map(aliasHelper).join(", ");
        push4(
          `const { ${staticHelpers} } = _Vue
`,
          -1
          /* End */
        );
      }
    }
  }
  genHoists(ast.hoists, context);
  newline();
  push4(`return `);
}
function genAssets(assets, type, { helper, push: push4, newline, isTS }) {
  const resolver = helper(
    type === "filter" ? RESOLVE_FILTER : type === "component" ? RESOLVE_COMPONENT : RESOLVE_DIRECTIVE
  );
  for (let i2 = 0; i2 < assets.length; i2++) {
    let id2 = assets[i2];
    const maybeSelfReference = id2.endsWith("__self");
    if (maybeSelfReference) {
      id2 = id2.slice(0, -6);
    }
    push4(
      `const ${toValidAssetId(id2, type)} = ${resolver}(${JSON.stringify(id2)}${maybeSelfReference ? `, true` : ``})${isTS ? `!` : ``}`
    );
    if (i2 < assets.length - 1) {
      newline();
    }
  }
}
function genHoists(hoists, context) {
  if (!hoists.length) {
    return;
  }
  context.pure = true;
  const { push: push4, newline } = context;
  newline();
  for (let i2 = 0; i2 < hoists.length; i2++) {
    const exp = hoists[i2];
    if (exp) {
      push4(`const _hoisted_${i2 + 1} = `);
      genNode(exp, context);
      newline();
    }
  }
  context.pure = false;
}
function genNodeListAsArray(nodes2, context) {
  const multilines = nodes2.length > 3 || false;
  context.push(`[`);
  multilines && context.indent();
  genNodeList(nodes2, context, multilines);
  multilines && context.deindent();
  context.push(`]`);
}
function genNodeList(nodes2, context, multilines = false, comma = true) {
  const { push: push4, newline } = context;
  for (let i2 = 0; i2 < nodes2.length; i2++) {
    const node2 = nodes2[i2];
    if (isString$1(node2)) {
      push4(
        node2,
        -3
        /* Unknown */
      );
    } else if (isArray$g(node2)) {
      genNodeListAsArray(node2, context);
    } else {
      genNode(node2, context);
    }
    if (i2 < nodes2.length - 1) {
      if (multilines) {
        comma && push4(",");
        newline();
      } else {
        comma && push4(", ");
      }
    }
  }
}
function genNode(node2, context) {
  if (isString$1(node2)) {
    context.push(
      node2,
      -3
      /* Unknown */
    );
    return;
  }
  if (isSymbol$7(node2)) {
    context.push(context.helper(node2));
    return;
  }
  switch (node2.type) {
    case 1:
    case 9:
    case 11:
      genNode(node2.codegenNode, context);
      break;
    case 2:
      genText(node2, context);
      break;
    case 4:
      genExpression(node2, context);
      break;
    case 5:
      genInterpolation(node2, context);
      break;
    case 12:
      genNode(node2.codegenNode, context);
      break;
    case 8:
      genCompoundExpression(node2, context);
      break;
    case 3:
      genComment(node2, context);
      break;
    case 13:
      genVNodeCall(node2, context);
      break;
    case 14:
      genCallExpression(node2, context);
      break;
    case 15:
      genObjectExpression(node2, context);
      break;
    case 17:
      genArrayExpression(node2, context);
      break;
    case 18:
      genFunctionExpression(node2, context);
      break;
    case 19:
      genConditionalExpression(node2, context);
      break;
    case 20:
      genCacheExpression(node2, context);
      break;
    case 21:
      genNodeList(node2.body, context, true, false);
      break;
  }
}
function genText(node2, context) {
  context.push(JSON.stringify(node2.content), -3, node2);
}
function genExpression(node2, context) {
  const { content, isStatic } = node2;
  context.push(
    isStatic ? JSON.stringify(content) : content,
    -3,
    node2
  );
}
function genInterpolation(node2, context) {
  const { push: push4, helper, pure } = context;
  if (pure) push4(PURE_ANNOTATION);
  push4(`${helper(TO_DISPLAY_STRING)}(`);
  genNode(node2.content, context);
  push4(`)`);
}
function genCompoundExpression(node2, context) {
  for (let i2 = 0; i2 < node2.children.length; i2++) {
    const child2 = node2.children[i2];
    if (isString$1(child2)) {
      context.push(
        child2,
        -3
        /* Unknown */
      );
    } else {
      genNode(child2, context);
    }
  }
}
function genExpressionAsPropertyKey(node2, context) {
  const { push: push4 } = context;
  if (node2.type === 8) {
    push4(`[`);
    genCompoundExpression(node2, context);
    push4(`]`);
  } else if (node2.isStatic) {
    const text = isSimpleIdentifier(node2.content) ? node2.content : JSON.stringify(node2.content);
    push4(text, -2, node2);
  } else {
    push4(`[${node2.content}]`, -3, node2);
  }
}
function genComment(node2, context) {
  const { push: push4, helper, pure } = context;
  if (pure) {
    push4(PURE_ANNOTATION);
  }
  push4(
    `${helper(CREATE_COMMENT)}(${JSON.stringify(node2.content)})`,
    -3,
    node2
  );
}
function genVNodeCall(node2, context) {
  const { push: push4, helper, pure } = context;
  const {
    tag: tag2,
    props,
    children: children2,
    patchFlag,
    dynamicProps,
    directives,
    isBlock,
    disableTracking,
    isComponent: isComponent2
  } = node2;
  let patchFlagString;
  if (patchFlag) {
    {
      patchFlagString = String(patchFlag);
    }
  }
  if (directives) {
    push4(helper(WITH_DIRECTIVES) + `(`);
  }
  if (isBlock) {
    push4(`(${helper(OPEN_BLOCK)}(${disableTracking ? `true` : ``}), `);
  }
  if (pure) {
    push4(PURE_ANNOTATION);
  }
  const callHelper = isBlock ? getVNodeBlockHelper(context.inSSR, isComponent2) : getVNodeHelper(context.inSSR, isComponent2);
  push4(helper(callHelper) + `(`, -2, node2);
  genNodeList(
    genNullableArgs([tag2, props, children2, patchFlagString, dynamicProps]),
    context
  );
  push4(`)`);
  if (isBlock) {
    push4(`)`);
  }
  if (directives) {
    push4(`, `);
    genNode(directives, context);
    push4(`)`);
  }
}
function genNullableArgs(args) {
  let i2 = args.length;
  while (i2--) {
    if (args[i2] != null) break;
  }
  return args.slice(0, i2 + 1).map((arg) => arg || `null`);
}
function genCallExpression(node2, context) {
  const { push: push4, helper, pure } = context;
  const callee = isString$1(node2.callee) ? node2.callee : helper(node2.callee);
  if (pure) {
    push4(PURE_ANNOTATION);
  }
  push4(callee + `(`, -2, node2);
  genNodeList(node2.arguments, context);
  push4(`)`);
}
function genObjectExpression(node2, context) {
  const { push: push4, indent: indent2, deindent, newline } = context;
  const { properties } = node2;
  if (!properties.length) {
    push4(`{}`, -2, node2);
    return;
  }
  const multilines = properties.length > 1 || false;
  push4(multilines ? `{` : `{ `);
  multilines && indent2();
  for (let i2 = 0; i2 < properties.length; i2++) {
    const { key: key2, value: value2 } = properties[i2];
    genExpressionAsPropertyKey(key2, context);
    push4(`: `);
    genNode(value2, context);
    if (i2 < properties.length - 1) {
      push4(`,`);
      newline();
    }
  }
  multilines && deindent();
  push4(multilines ? `}` : ` }`);
}
function genArrayExpression(node2, context) {
  genNodeListAsArray(node2.elements, context);
}
function genFunctionExpression(node2, context) {
  const { push: push4, indent: indent2, deindent } = context;
  const { params, returns, body, newline, isSlot } = node2;
  if (isSlot) {
    push4(`_${helperNameMap[WITH_CTX]}(`);
  }
  push4(`(`, -2, node2);
  if (isArray$g(params)) {
    genNodeList(params, context);
  } else if (params) {
    genNode(params, context);
  }
  push4(`) => `);
  if (newline || body) {
    push4(`{`);
    indent2();
  }
  if (returns) {
    if (newline) {
      push4(`return `);
    }
    if (isArray$g(returns)) {
      genNodeListAsArray(returns, context);
    } else {
      genNode(returns, context);
    }
  } else if (body) {
    genNode(body, context);
  }
  if (newline || body) {
    deindent();
    push4(`}`);
  }
  if (isSlot) {
    if (node2.isNonScopedSlot) {
      push4(`, undefined, true`);
    }
    push4(`)`);
  }
}
function genConditionalExpression(node2, context) {
  const { test: test2, consequent, alternate, newline: needNewline } = node2;
  const { push: push4, indent: indent2, deindent, newline } = context;
  if (test2.type === 4) {
    const needsParens = !isSimpleIdentifier(test2.content);
    needsParens && push4(`(`);
    genExpression(test2, context);
    needsParens && push4(`)`);
  } else {
    push4(`(`);
    genNode(test2, context);
    push4(`)`);
  }
  needNewline && indent2();
  context.indentLevel++;
  needNewline || push4(` `);
  push4(`? `);
  genNode(consequent, context);
  context.indentLevel--;
  needNewline && newline();
  needNewline || push4(` `);
  push4(`: `);
  const isNested = alternate.type === 19;
  if (!isNested) {
    context.indentLevel++;
  }
  genNode(alternate, context);
  if (!isNested) {
    context.indentLevel--;
  }
  needNewline && deindent(
    true
    /* without newline */
  );
}
function genCacheExpression(node2, context) {
  const { push: push4, helper, indent: indent2, deindent, newline } = context;
  const { needPauseTracking, needArraySpread } = node2;
  if (needArraySpread) {
    push4(`[...(`);
  }
  push4(`_cache[${node2.index}] || (`);
  if (needPauseTracking) {
    indent2();
    push4(`${helper(SET_BLOCK_TRACKING)}(-1`);
    if (node2.inVOnce) push4(`, true`);
    push4(`),`);
    newline();
    push4(`(`);
  }
  push4(`_cache[${node2.index}] = `);
  genNode(node2.value, context);
  if (needPauseTracking) {
    push4(`).cacheIndex = ${node2.index},`);
    newline();
    push4(`${helper(SET_BLOCK_TRACKING)}(1),`);
    newline();
    push4(`_cache[${node2.index}]`);
    deindent();
  }
  push4(`)`);
  if (needArraySpread) {
    push4(`)]`);
  }
}
new RegExp(
  "\\b" + "arguments,await,break,case,catch,class,const,continue,debugger,default,delete,do,else,export,extends,finally,for,function,if,import,let,new,return,super,switch,throw,try,var,void,while,with,yield".split(",").join("\\b|\\b") + "\\b"
);
const transformIf = createStructuralDirectiveTransform(
  /^(if|else|else-if)$/,
  (node2, dir, context) => {
    return processIf(node2, dir, context, (ifNode, branch, isRoot) => {
      const siblings = context.parent.children;
      let i2 = siblings.indexOf(ifNode);
      let key2 = 0;
      while (i2-- >= 0) {
        const sibling = siblings[i2];
        if (sibling && sibling.type === 9) {
          key2 += sibling.branches.length;
        }
      }
      return () => {
        if (isRoot) {
          ifNode.codegenNode = createCodegenNodeForBranch(
            branch,
            key2,
            context
          );
        } else {
          const parentCondition = getParentCondition(ifNode.codegenNode);
          parentCondition.alternate = createCodegenNodeForBranch(
            branch,
            key2 + ifNode.branches.length - 1,
            context
          );
        }
      };
    });
  }
);
function processIf(node2, dir, context, processCodegen) {
  if (dir.name !== "else" && (!dir.exp || !dir.exp.content.trim())) {
    const loc = dir.exp ? dir.exp.loc : node2.loc;
    context.onError(
      createCompilerError(28, dir.loc)
    );
    dir.exp = createSimpleExpression(`true`, false, loc);
  }
  if (dir.name === "if") {
    const branch = createIfBranch(node2, dir);
    const ifNode = {
      type: 9,
      loc: cloneLoc(node2.loc),
      branches: [branch]
    };
    context.replaceNode(ifNode);
    if (processCodegen) {
      return processCodegen(ifNode, branch, true);
    }
  } else {
    const siblings = context.parent.children;
    let i2 = siblings.indexOf(node2);
    while (i2-- >= -1) {
      const sibling = siblings[i2];
      if (sibling && sibling.type === 3) {
        context.removeNode(sibling);
        continue;
      }
      if (sibling && sibling.type === 2 && !sibling.content.trim().length) {
        context.removeNode(sibling);
        continue;
      }
      if (sibling && sibling.type === 9) {
        if (dir.name === "else-if" && sibling.branches[sibling.branches.length - 1].condition === void 0) {
          context.onError(
            createCompilerError(30, node2.loc)
          );
        }
        context.removeNode();
        const branch = createIfBranch(node2, dir);
        sibling.branches.push(branch);
        const onExit = processCodegen && processCodegen(sibling, branch, false);
        traverseNode(branch, context);
        if (onExit) onExit();
        context.currentNode = null;
      } else {
        context.onError(
          createCompilerError(30, node2.loc)
        );
      }
      break;
    }
  }
}
function createIfBranch(node2, dir) {
  const isTemplateIf = node2.tagType === 3;
  return {
    type: 10,
    loc: node2.loc,
    condition: dir.name === "else" ? void 0 : dir.exp,
    children: isTemplateIf && !findDir(node2, "for") ? node2.children : [node2],
    userKey: findProp(node2, `key`),
    isTemplateIf
  };
}
function createCodegenNodeForBranch(branch, keyIndex, context) {
  if (branch.condition) {
    return createConditionalExpression(
      branch.condition,
      createChildrenCodegenNode(branch, keyIndex, context),
      // make sure to pass in asBlock: true so that the comment node call
      // closes the current block.
      createCallExpression(context.helper(CREATE_COMMENT), [
        '""',
        "true"
      ])
    );
  } else {
    return createChildrenCodegenNode(branch, keyIndex, context);
  }
}
function createChildrenCodegenNode(branch, keyIndex, context) {
  const { helper } = context;
  const keyProperty = createObjectProperty(
    `key`,
    createSimpleExpression(
      `${keyIndex}`,
      false,
      locStub,
      2
    )
  );
  const { children: children2 } = branch;
  const firstChild = children2[0];
  const needFragmentWrapper = children2.length !== 1 || firstChild.type !== 1;
  if (needFragmentWrapper) {
    if (children2.length === 1 && firstChild.type === 11) {
      const vnodeCall = firstChild.codegenNode;
      injectProp(vnodeCall, keyProperty, context);
      return vnodeCall;
    } else {
      let patchFlag = 64;
      return createVNodeCall(
        context,
        helper(FRAGMENT),
        createObjectExpression([keyProperty]),
        children2,
        patchFlag,
        void 0,
        void 0,
        true,
        false,
        false,
        branch.loc
      );
    }
  } else {
    const ret = firstChild.codegenNode;
    const vnodeCall = getMemoedVNodeCall(ret);
    if (vnodeCall.type === 13) {
      convertToBlock(vnodeCall, context);
    }
    injectProp(vnodeCall, keyProperty, context);
    return ret;
  }
}
function getParentCondition(node2) {
  while (true) {
    if (node2.type === 19) {
      if (node2.alternate.type === 19) {
        node2 = node2.alternate;
      } else {
        return node2;
      }
    } else if (node2.type === 20) {
      node2 = node2.value;
    }
  }
}
const transformBind = (dir, _node, context) => {
  const { modifiers, loc } = dir;
  const arg = dir.arg;
  let { exp } = dir;
  if (exp && exp.type === 4 && !exp.content.trim()) {
    {
      exp = void 0;
    }
  }
  if (!exp) {
    if (arg.type !== 4 || !arg.isStatic) {
      context.onError(
        createCompilerError(
          52,
          arg.loc
        )
      );
      return {
        props: [
          createObjectProperty(arg, createSimpleExpression("", true, loc))
        ]
      };
    }
    transformBindShorthand(dir);
    exp = dir.exp;
  }
  if (arg.type !== 4) {
    arg.children.unshift(`(`);
    arg.children.push(`) || ""`);
  } else if (!arg.isStatic) {
    arg.content = `${arg.content} || ""`;
  }
  if (modifiers.some((mod) => mod.content === "camel")) {
    if (arg.type === 4) {
      if (arg.isStatic) {
        arg.content = camelize(arg.content);
      } else {
        arg.content = `${context.helperString(CAMELIZE)}(${arg.content})`;
      }
    } else {
      arg.children.unshift(`${context.helperString(CAMELIZE)}(`);
      arg.children.push(`)`);
    }
  }
  if (!context.inSSR) {
    if (modifiers.some((mod) => mod.content === "prop")) {
      injectPrefix(arg, ".");
    }
    if (modifiers.some((mod) => mod.content === "attr")) {
      injectPrefix(arg, "^");
    }
  }
  return {
    props: [createObjectProperty(arg, exp)]
  };
};
const transformBindShorthand = (dir, context) => {
  const arg = dir.arg;
  const propName = camelize(arg.content);
  dir.exp = createSimpleExpression(propName, false, arg.loc);
};
const injectPrefix = (arg, prefix) => {
  if (arg.type === 4) {
    if (arg.isStatic) {
      arg.content = prefix + arg.content;
    } else {
      arg.content = `\`${prefix}\${${arg.content}}\``;
    }
  } else {
    arg.children.unshift(`'${prefix}' + (`);
    arg.children.push(`)`);
  }
};
const transformFor = createStructuralDirectiveTransform(
  "for",
  (node2, dir, context) => {
    const { helper, removeHelper } = context;
    return processFor(node2, dir, context, (forNode) => {
      const renderExp = createCallExpression(helper(RENDER_LIST), [
        forNode.source
      ]);
      const isTemplate = isTemplateNode(node2);
      const memo = findDir(node2, "memo");
      const keyProp = findProp(node2, `key`, false, true);
      const isDirKey = keyProp && keyProp.type === 7;
      if (isDirKey && !keyProp.exp) {
        transformBindShorthand(keyProp);
      }
      let keyExp = keyProp && (keyProp.type === 6 ? keyProp.value ? createSimpleExpression(keyProp.value.content, true) : void 0 : keyProp.exp);
      const keyProperty = keyProp && keyExp ? createObjectProperty(`key`, keyExp) : null;
      const isStableFragment = forNode.source.type === 4 && forNode.source.constType > 0;
      const fragmentFlag = isStableFragment ? 64 : keyProp ? 128 : 256;
      forNode.codegenNode = createVNodeCall(
        context,
        helper(FRAGMENT),
        void 0,
        renderExp,
        fragmentFlag,
        void 0,
        void 0,
        true,
        !isStableFragment,
        false,
        node2.loc
      );
      return () => {
        let childBlock;
        const { children: children2 } = forNode;
        const needFragmentWrapper = children2.length !== 1 || children2[0].type !== 1;
        const slotOutlet = isSlotOutlet(node2) ? node2 : isTemplate && node2.children.length === 1 && isSlotOutlet(node2.children[0]) ? node2.children[0] : null;
        if (slotOutlet) {
          childBlock = slotOutlet.codegenNode;
          if (isTemplate && keyProperty) {
            injectProp(childBlock, keyProperty, context);
          }
        } else if (needFragmentWrapper) {
          childBlock = createVNodeCall(
            context,
            helper(FRAGMENT),
            keyProperty ? createObjectExpression([keyProperty]) : void 0,
            node2.children,
            64,
            void 0,
            void 0,
            true,
            void 0,
            false
          );
        } else {
          childBlock = children2[0].codegenNode;
          if (isTemplate && keyProperty) {
            injectProp(childBlock, keyProperty, context);
          }
          if (childBlock.isBlock !== !isStableFragment) {
            if (childBlock.isBlock) {
              removeHelper(OPEN_BLOCK);
              removeHelper(
                getVNodeBlockHelper(context.inSSR, childBlock.isComponent)
              );
            } else {
              removeHelper(
                getVNodeHelper(context.inSSR, childBlock.isComponent)
              );
            }
          }
          childBlock.isBlock = !isStableFragment;
          if (childBlock.isBlock) {
            helper(OPEN_BLOCK);
            helper(getVNodeBlockHelper(context.inSSR, childBlock.isComponent));
          } else {
            helper(getVNodeHelper(context.inSSR, childBlock.isComponent));
          }
        }
        if (memo) {
          const loop = createFunctionExpression(
            createForLoopParams(forNode.parseResult, [
              createSimpleExpression(`_cached`)
            ])
          );
          loop.body = createBlockStatement([
            createCompoundExpression([`const _memo = (`, memo.exp, `)`]),
            createCompoundExpression([
              `if (_cached`,
              ...keyExp ? [` && _cached.key === `, keyExp] : [],
              ` && ${context.helperString(
                IS_MEMO_SAME
              )}(_cached, _memo)) return _cached`
            ]),
            createCompoundExpression([`const _item = `, childBlock]),
            createSimpleExpression(`_item.memo = _memo`),
            createSimpleExpression(`return _item`)
          ]);
          renderExp.arguments.push(
            loop,
            createSimpleExpression(`_cache`),
            createSimpleExpression(String(context.cached.length))
          );
          context.cached.push(null);
        } else {
          renderExp.arguments.push(
            createFunctionExpression(
              createForLoopParams(forNode.parseResult),
              childBlock,
              true
            )
          );
        }
      };
    });
  }
);
function processFor(node2, dir, context, processCodegen) {
  if (!dir.exp) {
    context.onError(
      createCompilerError(31, dir.loc)
    );
    return;
  }
  const parseResult = dir.forParseResult;
  if (!parseResult) {
    context.onError(
      createCompilerError(32, dir.loc)
    );
    return;
  }
  finalizeForParseResult(parseResult);
  const { addIdentifiers, removeIdentifiers, scopes } = context;
  const { source, value: value2, key: key2, index: index2 } = parseResult;
  const forNode = {
    type: 11,
    loc: dir.loc,
    source,
    valueAlias: value2,
    keyAlias: key2,
    objectIndexAlias: index2,
    parseResult,
    children: isTemplateNode(node2) ? node2.children : [node2]
  };
  context.replaceNode(forNode);
  scopes.vFor++;
  const onExit = processCodegen && processCodegen(forNode);
  return () => {
    scopes.vFor--;
    if (onExit) onExit();
  };
}
function finalizeForParseResult(result, context) {
  if (result.finalized) return;
  result.finalized = true;
}
function createForLoopParams({ value: value2, key: key2, index: index2 }, memoArgs = []) {
  return createParamsList([value2, key2, index2, ...memoArgs]);
}
function createParamsList(args) {
  let i2 = args.length;
  while (i2--) {
    if (args[i2]) break;
  }
  return args.slice(0, i2 + 1).map((arg, i22) => arg || createSimpleExpression(`_`.repeat(i22 + 1), false));
}
const defaultFallback = createSimpleExpression(`undefined`, false);
const trackSlotScopes = (node2, context) => {
  if (node2.type === 1 && (node2.tagType === 1 || node2.tagType === 3)) {
    const vSlot = findDir(node2, "slot");
    if (vSlot) {
      vSlot.exp;
      context.scopes.vSlot++;
      return () => {
        context.scopes.vSlot--;
      };
    }
  }
};
const buildClientSlotFn = (props, _vForExp, children2, loc) => createFunctionExpression(
  props,
  children2,
  false,
  true,
  children2.length ? children2[0].loc : loc
);
function buildSlots(node2, context, buildSlotFn = buildClientSlotFn) {
  context.helper(WITH_CTX);
  const { children: children2, loc } = node2;
  const slotsProperties = [];
  const dynamicSlots = [];
  let hasDynamicSlots = context.scopes.vSlot > 0 || context.scopes.vFor > 0;
  const onComponentSlot = findDir(node2, "slot", true);
  if (onComponentSlot) {
    const { arg, exp } = onComponentSlot;
    if (arg && !isStaticExp(arg)) {
      hasDynamicSlots = true;
    }
    slotsProperties.push(
      createObjectProperty(
        arg || createSimpleExpression("default", true),
        buildSlotFn(exp, void 0, children2, loc)
      )
    );
  }
  let hasTemplateSlots = false;
  let hasNamedDefaultSlot = false;
  const implicitDefaultChildren = [];
  const seenSlotNames = /* @__PURE__ */ new Set();
  let conditionalBranchIndex = 0;
  for (let i2 = 0; i2 < children2.length; i2++) {
    const slotElement = children2[i2];
    let slotDir;
    if (!isTemplateNode(slotElement) || !(slotDir = findDir(slotElement, "slot", true))) {
      if (slotElement.type !== 3) {
        implicitDefaultChildren.push(slotElement);
      }
      continue;
    }
    if (onComponentSlot) {
      context.onError(
        createCompilerError(37, slotDir.loc)
      );
      break;
    }
    hasTemplateSlots = true;
    const { children: slotChildren, loc: slotLoc } = slotElement;
    const {
      arg: slotName = createSimpleExpression(`default`, true),
      exp: slotProps,
      loc: dirLoc
    } = slotDir;
    let staticSlotName;
    if (isStaticExp(slotName)) {
      staticSlotName = slotName ? slotName.content : `default`;
    } else {
      hasDynamicSlots = true;
    }
    const vFor = findDir(slotElement, "for");
    const slotFunction = buildSlotFn(slotProps, vFor, slotChildren, slotLoc);
    let vIf;
    let vElse;
    if (vIf = findDir(slotElement, "if")) {
      hasDynamicSlots = true;
      dynamicSlots.push(
        createConditionalExpression(
          vIf.exp,
          buildDynamicSlot(slotName, slotFunction, conditionalBranchIndex++),
          defaultFallback
        )
      );
    } else if (vElse = findDir(
      slotElement,
      /^else(-if)?$/,
      true
      /* allowEmpty */
    )) {
      let j2 = i2;
      let prev;
      while (j2--) {
        prev = children2[j2];
        if (prev.type !== 3) {
          break;
        }
      }
      if (prev && isTemplateNode(prev) && findDir(prev, /^(else-)?if$/)) {
        let conditional = dynamicSlots[dynamicSlots.length - 1];
        while (conditional.alternate.type === 19) {
          conditional = conditional.alternate;
        }
        conditional.alternate = vElse.exp ? createConditionalExpression(
          vElse.exp,
          buildDynamicSlot(
            slotName,
            slotFunction,
            conditionalBranchIndex++
          ),
          defaultFallback
        ) : buildDynamicSlot(slotName, slotFunction, conditionalBranchIndex++);
      } else {
        context.onError(
          createCompilerError(30, vElse.loc)
        );
      }
    } else if (vFor) {
      hasDynamicSlots = true;
      const parseResult = vFor.forParseResult;
      if (parseResult) {
        finalizeForParseResult(parseResult);
        dynamicSlots.push(
          createCallExpression(context.helper(RENDER_LIST), [
            parseResult.source,
            createFunctionExpression(
              createForLoopParams(parseResult),
              buildDynamicSlot(slotName, slotFunction),
              true
            )
          ])
        );
      } else {
        context.onError(
          createCompilerError(
            32,
            vFor.loc
          )
        );
      }
    } else {
      if (staticSlotName) {
        if (seenSlotNames.has(staticSlotName)) {
          context.onError(
            createCompilerError(
              38,
              dirLoc
            )
          );
          continue;
        }
        seenSlotNames.add(staticSlotName);
        if (staticSlotName === "default") {
          hasNamedDefaultSlot = true;
        }
      }
      slotsProperties.push(createObjectProperty(slotName, slotFunction));
    }
  }
  if (!onComponentSlot) {
    const buildDefaultSlotProperty = (props, children22) => {
      const fn2 = buildSlotFn(props, void 0, children22, loc);
      if (context.compatConfig) {
        fn2.isNonScopedSlot = true;
      }
      return createObjectProperty(`default`, fn2);
    };
    if (!hasTemplateSlots) {
      slotsProperties.push(buildDefaultSlotProperty(void 0, children2));
    } else if (implicitDefaultChildren.length && // #3766
    // with whitespace: 'preserve', whitespaces between slots will end up in
    // implicitDefaultChildren. Ignore if all implicit children are whitespaces.
    implicitDefaultChildren.some((node22) => isNonWhitespaceContent(node22))) {
      if (hasNamedDefaultSlot) {
        context.onError(
          createCompilerError(
            39,
            implicitDefaultChildren[0].loc
          )
        );
      } else {
        slotsProperties.push(
          buildDefaultSlotProperty(void 0, implicitDefaultChildren)
        );
      }
    }
  }
  const slotFlag = hasDynamicSlots ? 2 : hasForwardedSlots(node2.children) ? 3 : 1;
  let slots = createObjectExpression(
    slotsProperties.concat(
      createObjectProperty(
        `_`,
        // 2 = compiled but dynamic = can skip normalization, but must run diff
        // 1 = compiled and static = can skip normalization AND diff as optimized
        createSimpleExpression(
          slotFlag + ``,
          false
        )
      )
    ),
    loc
  );
  if (dynamicSlots.length) {
    slots = createCallExpression(context.helper(CREATE_SLOTS), [
      slots,
      createArrayExpression(dynamicSlots)
    ]);
  }
  return {
    slots,
    hasDynamicSlots
  };
}
function buildDynamicSlot(name, fn2, index2) {
  const props = [
    createObjectProperty(`name`, name),
    createObjectProperty(`fn`, fn2)
  ];
  if (index2 != null) {
    props.push(
      createObjectProperty(`key`, createSimpleExpression(String(index2), true))
    );
  }
  return createObjectExpression(props);
}
function hasForwardedSlots(children2) {
  for (let i2 = 0; i2 < children2.length; i2++) {
    const child2 = children2[i2];
    switch (child2.type) {
      case 1:
        if (child2.tagType === 2 || hasForwardedSlots(child2.children)) {
          return true;
        }
        break;
      case 9:
        if (hasForwardedSlots(child2.branches)) return true;
        break;
      case 10:
      case 11:
        if (hasForwardedSlots(child2.children)) return true;
        break;
    }
  }
  return false;
}
function isNonWhitespaceContent(node2) {
  if (node2.type !== 2 && node2.type !== 12)
    return true;
  return node2.type === 2 ? !!node2.content.trim() : isNonWhitespaceContent(node2.content);
}
const directiveImportMap = /* @__PURE__ */ new WeakMap();
const transformElement = (node2, context) => {
  return function postTransformElement() {
    node2 = context.currentNode;
    if (!(node2.type === 1 && (node2.tagType === 0 || node2.tagType === 1))) {
      return;
    }
    const { tag: tag2, props } = node2;
    const isComponent2 = node2.tagType === 1;
    let vnodeTag = isComponent2 ? resolveComponentType(node2, context) : `"${tag2}"`;
    const isDynamicComponent = isObject$l(vnodeTag) && vnodeTag.callee === RESOLVE_DYNAMIC_COMPONENT;
    let vnodeProps;
    let vnodeChildren;
    let patchFlag = 0;
    let vnodeDynamicProps;
    let dynamicPropNames;
    let vnodeDirectives;
    let shouldUseBlock = (
      // dynamic component may resolve to plain elements
      isDynamicComponent || vnodeTag === TELEPORT || vnodeTag === SUSPENSE || !isComponent2 && // <svg> and <foreignObject> must be forced into blocks so that block
      // updates inside get proper isSVG flag at runtime. (#639, #643)
      // This is technically web-specific, but splitting the logic out of core
      // leads to too much unnecessary complexity.
      (tag2 === "svg" || tag2 === "foreignObject" || tag2 === "math")
    );
    if (props.length > 0) {
      const propsBuildResult = buildProps(
        node2,
        context,
        void 0,
        isComponent2,
        isDynamicComponent
      );
      vnodeProps = propsBuildResult.props;
      patchFlag = propsBuildResult.patchFlag;
      dynamicPropNames = propsBuildResult.dynamicPropNames;
      const directives = propsBuildResult.directives;
      vnodeDirectives = directives && directives.length ? createArrayExpression(
        directives.map((dir) => buildDirectiveArgs(dir, context))
      ) : void 0;
      if (propsBuildResult.shouldUseBlock) {
        shouldUseBlock = true;
      }
    }
    if (node2.children.length > 0) {
      if (vnodeTag === KEEP_ALIVE) {
        shouldUseBlock = true;
        patchFlag |= 1024;
      }
      const shouldBuildAsSlots = isComponent2 && // Teleport is not a real component and has dedicated runtime handling
      vnodeTag !== TELEPORT && // explained above.
      vnodeTag !== KEEP_ALIVE;
      if (shouldBuildAsSlots) {
        const { slots, hasDynamicSlots } = buildSlots(node2, context);
        vnodeChildren = slots;
        if (hasDynamicSlots) {
          patchFlag |= 1024;
        }
      } else if (node2.children.length === 1 && vnodeTag !== TELEPORT) {
        const child2 = node2.children[0];
        const type = child2.type;
        const hasDynamicTextChild = type === 5 || type === 8;
        if (hasDynamicTextChild && getConstantType(child2, context) === 0) {
          patchFlag |= 1;
        }
        if (hasDynamicTextChild || type === 2) {
          vnodeChildren = child2;
        } else {
          vnodeChildren = node2.children;
        }
      } else {
        vnodeChildren = node2.children;
      }
    }
    if (dynamicPropNames && dynamicPropNames.length) {
      vnodeDynamicProps = stringifyDynamicPropNames(dynamicPropNames);
    }
    node2.codegenNode = createVNodeCall(
      context,
      vnodeTag,
      vnodeProps,
      vnodeChildren,
      patchFlag === 0 ? void 0 : patchFlag,
      vnodeDynamicProps,
      vnodeDirectives,
      !!shouldUseBlock,
      false,
      isComponent2,
      node2.loc
    );
  };
};
function resolveComponentType(node2, context, ssr = false) {
  let { tag: tag2 } = node2;
  const isExplicitDynamic = isComponentTag(tag2);
  const isProp = findProp(
    node2,
    "is",
    false,
    true
    /* allow empty */
  );
  if (isProp) {
    if (isExplicitDynamic || isCompatEnabled(
      "COMPILER_IS_ON_ELEMENT",
      context
    )) {
      let exp;
      if (isProp.type === 6) {
        exp = isProp.value && createSimpleExpression(isProp.value.content, true);
      } else {
        exp = isProp.exp;
        if (!exp) {
          exp = createSimpleExpression(`is`, false, isProp.arg.loc);
        }
      }
      if (exp) {
        return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [
          exp
        ]);
      }
    } else if (isProp.type === 6 && isProp.value.content.startsWith("vue:")) {
      tag2 = isProp.value.content.slice(4);
    }
  }
  const builtIn = isCoreComponent(tag2) || context.isBuiltInComponent(tag2);
  if (builtIn) {
    if (!ssr) context.helper(builtIn);
    return builtIn;
  }
  context.helper(RESOLVE_COMPONENT);
  context.components.add(tag2);
  return toValidAssetId(tag2, `component`);
}
function buildProps(node2, context, props = node2.props, isComponent2, isDynamicComponent, ssr = false) {
  const { tag: tag2, loc: elementLoc, children: children2 } = node2;
  let properties = [];
  const mergeArgs = [];
  const runtimeDirectives = [];
  const hasChildren = children2.length > 0;
  let shouldUseBlock = false;
  let patchFlag = 0;
  let hasRef = false;
  let hasClassBinding = false;
  let hasStyleBinding = false;
  let hasHydrationEventBinding = false;
  let hasDynamicKeys = false;
  let hasVnodeHook = false;
  const dynamicPropNames = [];
  const pushMergeArg = (arg) => {
    if (properties.length) {
      mergeArgs.push(
        createObjectExpression(dedupeProperties(properties), elementLoc)
      );
      properties = [];
    }
    if (arg) mergeArgs.push(arg);
  };
  const pushRefVForMarker = () => {
    if (context.scopes.vFor > 0) {
      properties.push(
        createObjectProperty(
          createSimpleExpression("ref_for", true),
          createSimpleExpression("true")
        )
      );
    }
  };
  const analyzePatchFlag = ({ key: key2, value: value2 }) => {
    if (isStaticExp(key2)) {
      const name = key2.content;
      const isEventHandler = isOn(name);
      if (isEventHandler && (!isComponent2 || isDynamicComponent) && // omit the flag for click handlers because hydration gives click
      // dedicated fast path.
      name.toLowerCase() !== "onclick" && // omit v-model handlers
      name !== "onUpdate:modelValue" && // omit onVnodeXXX hooks
      !isReservedProp(name)) {
        hasHydrationEventBinding = true;
      }
      if (isEventHandler && isReservedProp(name)) {
        hasVnodeHook = true;
      }
      if (isEventHandler && value2.type === 14) {
        value2 = value2.arguments[0];
      }
      if (value2.type === 20 || (value2.type === 4 || value2.type === 8) && getConstantType(value2, context) > 0) {
        return;
      }
      if (name === "ref") {
        hasRef = true;
      } else if (name === "class") {
        hasClassBinding = true;
      } else if (name === "style") {
        hasStyleBinding = true;
      } else if (name !== "key" && !dynamicPropNames.includes(name)) {
        dynamicPropNames.push(name);
      }
      if (isComponent2 && (name === "class" || name === "style") && !dynamicPropNames.includes(name)) {
        dynamicPropNames.push(name);
      }
    } else {
      hasDynamicKeys = true;
    }
  };
  for (let i2 = 0; i2 < props.length; i2++) {
    const prop = props[i2];
    if (prop.type === 6) {
      const { loc, name, nameLoc, value: value2 } = prop;
      let isStatic = true;
      if (name === "ref") {
        hasRef = true;
        pushRefVForMarker();
      }
      if (name === "is" && (isComponentTag(tag2) || value2 && value2.content.startsWith("vue:") || isCompatEnabled(
        "COMPILER_IS_ON_ELEMENT",
        context
      ))) {
        continue;
      }
      properties.push(
        createObjectProperty(
          createSimpleExpression(name, true, nameLoc),
          createSimpleExpression(
            value2 ? value2.content : "",
            isStatic,
            value2 ? value2.loc : loc
          )
        )
      );
    } else {
      const { name, arg, exp, loc, modifiers } = prop;
      const isVBind = name === "bind";
      const isVOn = name === "on";
      if (name === "slot") {
        if (!isComponent2) {
          context.onError(
            createCompilerError(40, loc)
          );
        }
        continue;
      }
      if (name === "once" || name === "memo") {
        continue;
      }
      if (name === "is" || isVBind && isStaticArgOf(arg, "is") && (isComponentTag(tag2) || isCompatEnabled(
        "COMPILER_IS_ON_ELEMENT",
        context
      ))) {
        continue;
      }
      if (isVOn && ssr) {
        continue;
      }
      if (
        // #938: elements with dynamic keys should be forced into blocks
        isVBind && isStaticArgOf(arg, "key") || // inline before-update hooks need to force block so that it is invoked
        // before children
        isVOn && hasChildren && isStaticArgOf(arg, "vue:before-update")
      ) {
        shouldUseBlock = true;
      }
      if (isVBind && isStaticArgOf(arg, "ref")) {
        pushRefVForMarker();
      }
      if (!arg && (isVBind || isVOn)) {
        hasDynamicKeys = true;
        if (exp) {
          if (isVBind) {
            pushRefVForMarker();
            pushMergeArg();
            {
              if (isCompatEnabled(
                "COMPILER_V_BIND_OBJECT_ORDER",
                context
              )) {
                mergeArgs.unshift(exp);
                continue;
              }
            }
            mergeArgs.push(exp);
          } else {
            pushMergeArg({
              type: 14,
              loc,
              callee: context.helper(TO_HANDLERS),
              arguments: isComponent2 ? [exp] : [exp, `true`]
            });
          }
        } else {
          context.onError(
            createCompilerError(
              isVBind ? 34 : 35,
              loc
            )
          );
        }
        continue;
      }
      if (isVBind && modifiers.some((mod) => mod.content === "prop")) {
        patchFlag |= 32;
      }
      const directiveTransform = context.directiveTransforms[name];
      if (directiveTransform) {
        const { props: props2, needRuntime } = directiveTransform(prop, node2, context);
        !ssr && props2.forEach(analyzePatchFlag);
        if (isVOn && arg && !isStaticExp(arg)) {
          pushMergeArg(createObjectExpression(props2, elementLoc));
        } else {
          properties.push(...props2);
        }
        if (needRuntime) {
          runtimeDirectives.push(prop);
          if (isSymbol$7(needRuntime)) {
            directiveImportMap.set(prop, needRuntime);
          }
        }
      } else if (!isBuiltInDirective(name)) {
        runtimeDirectives.push(prop);
        if (hasChildren) {
          shouldUseBlock = true;
        }
      }
    }
  }
  let propsExpression = void 0;
  if (mergeArgs.length) {
    pushMergeArg();
    if (mergeArgs.length > 1) {
      propsExpression = createCallExpression(
        context.helper(MERGE_PROPS),
        mergeArgs,
        elementLoc
      );
    } else {
      propsExpression = mergeArgs[0];
    }
  } else if (properties.length) {
    propsExpression = createObjectExpression(
      dedupeProperties(properties),
      elementLoc
    );
  }
  if (hasDynamicKeys) {
    patchFlag |= 16;
  } else {
    if (hasClassBinding && !isComponent2) {
      patchFlag |= 2;
    }
    if (hasStyleBinding && !isComponent2) {
      patchFlag |= 4;
    }
    if (dynamicPropNames.length) {
      patchFlag |= 8;
    }
    if (hasHydrationEventBinding) {
      patchFlag |= 32;
    }
  }
  if (!shouldUseBlock && (patchFlag === 0 || patchFlag === 32) && (hasRef || hasVnodeHook || runtimeDirectives.length > 0)) {
    patchFlag |= 512;
  }
  if (!context.inSSR && propsExpression) {
    switch (propsExpression.type) {
      case 15:
        let classKeyIndex = -1;
        let styleKeyIndex = -1;
        let hasDynamicKey = false;
        for (let i2 = 0; i2 < propsExpression.properties.length; i2++) {
          const key2 = propsExpression.properties[i2].key;
          if (isStaticExp(key2)) {
            if (key2.content === "class") {
              classKeyIndex = i2;
            } else if (key2.content === "style") {
              styleKeyIndex = i2;
            }
          } else if (!key2.isHandlerKey) {
            hasDynamicKey = true;
          }
        }
        const classProp = propsExpression.properties[classKeyIndex];
        const styleProp = propsExpression.properties[styleKeyIndex];
        if (!hasDynamicKey) {
          if (classProp && !isStaticExp(classProp.value)) {
            classProp.value = createCallExpression(
              context.helper(NORMALIZE_CLASS),
              [classProp.value]
            );
          }
          if (styleProp && // the static style is compiled into an object,
          // so use `hasStyleBinding` to ensure that it is a dynamic style binding
          (hasStyleBinding || styleProp.value.type === 4 && styleProp.value.content.trim()[0] === `[` || // v-bind:style and style both exist,
          // v-bind:style with static literal object
          styleProp.value.type === 17)) {
            styleProp.value = createCallExpression(
              context.helper(NORMALIZE_STYLE),
              [styleProp.value]
            );
          }
        } else {
          propsExpression = createCallExpression(
            context.helper(NORMALIZE_PROPS),
            [propsExpression]
          );
        }
        break;
      case 14:
        break;
      default:
        propsExpression = createCallExpression(
          context.helper(NORMALIZE_PROPS),
          [
            createCallExpression(context.helper(GUARD_REACTIVE_PROPS), [
              propsExpression
            ])
          ]
        );
        break;
    }
  }
  return {
    props: propsExpression,
    directives: runtimeDirectives,
    patchFlag,
    dynamicPropNames,
    shouldUseBlock
  };
}
function dedupeProperties(properties) {
  const knownProps = /* @__PURE__ */ new Map();
  const deduped = [];
  for (let i2 = 0; i2 < properties.length; i2++) {
    const prop = properties[i2];
    if (prop.key.type === 8 || !prop.key.isStatic) {
      deduped.push(prop);
      continue;
    }
    const name = prop.key.content;
    const existing = knownProps.get(name);
    if (existing) {
      if (name === "style" || name === "class" || isOn(name)) {
        mergeAsArray(existing, prop);
      }
    } else {
      knownProps.set(name, prop);
      deduped.push(prop);
    }
  }
  return deduped;
}
function mergeAsArray(existing, incoming) {
  if (existing.value.type === 17) {
    existing.value.elements.push(incoming.value);
  } else {
    existing.value = createArrayExpression(
      [existing.value, incoming.value],
      existing.loc
    );
  }
}
function buildDirectiveArgs(dir, context) {
  const dirArgs = [];
  const runtime2 = directiveImportMap.get(dir);
  if (runtime2) {
    dirArgs.push(context.helperString(runtime2));
  } else {
    {
      context.helper(RESOLVE_DIRECTIVE);
      context.directives.add(dir.name);
      dirArgs.push(toValidAssetId(dir.name, `directive`));
    }
  }
  const { loc } = dir;
  if (dir.exp) dirArgs.push(dir.exp);
  if (dir.arg) {
    if (!dir.exp) {
      dirArgs.push(`void 0`);
    }
    dirArgs.push(dir.arg);
  }
  if (Object.keys(dir.modifiers).length) {
    if (!dir.arg) {
      if (!dir.exp) {
        dirArgs.push(`void 0`);
      }
      dirArgs.push(`void 0`);
    }
    const trueExpression = createSimpleExpression(`true`, false, loc);
    dirArgs.push(
      createObjectExpression(
        dir.modifiers.map(
          (modifier) => createObjectProperty(modifier, trueExpression)
        ),
        loc
      )
    );
  }
  return createArrayExpression(dirArgs, dir.loc);
}
function stringifyDynamicPropNames(props) {
  let propsNamesString = `[`;
  for (let i2 = 0, l2 = props.length; i2 < l2; i2++) {
    propsNamesString += JSON.stringify(props[i2]);
    if (i2 < l2 - 1) propsNamesString += ", ";
  }
  return propsNamesString + `]`;
}
function isComponentTag(tag2) {
  return tag2 === "component" || tag2 === "Component";
}
const transformSlotOutlet = (node2, context) => {
  if (isSlotOutlet(node2)) {
    const { children: children2, loc } = node2;
    const { slotName, slotProps } = processSlotOutlet(node2, context);
    const slotArgs = [
      context.prefixIdentifiers ? `_ctx.$slots` : `$slots`,
      slotName,
      "{}",
      "undefined",
      "true"
    ];
    let expectedLen = 2;
    if (slotProps) {
      slotArgs[2] = slotProps;
      expectedLen = 3;
    }
    if (children2.length) {
      slotArgs[3] = createFunctionExpression([], children2, false, false, loc);
      expectedLen = 4;
    }
    if (context.scopeId && !context.slotted) {
      expectedLen = 5;
    }
    slotArgs.splice(expectedLen);
    node2.codegenNode = createCallExpression(
      context.helper(RENDER_SLOT),
      slotArgs,
      loc
    );
  }
};
function processSlotOutlet(node2, context) {
  let slotName = `"default"`;
  let slotProps = void 0;
  const nonNameProps = [];
  for (let i2 = 0; i2 < node2.props.length; i2++) {
    const p2 = node2.props[i2];
    if (p2.type === 6) {
      if (p2.value) {
        if (p2.name === "name") {
          slotName = JSON.stringify(p2.value.content);
        } else {
          p2.name = camelize(p2.name);
          nonNameProps.push(p2);
        }
      }
    } else {
      if (p2.name === "bind" && isStaticArgOf(p2.arg, "name")) {
        if (p2.exp) {
          slotName = p2.exp;
        } else if (p2.arg && p2.arg.type === 4) {
          const name = camelize(p2.arg.content);
          slotName = p2.exp = createSimpleExpression(name, false, p2.arg.loc);
        }
      } else {
        if (p2.name === "bind" && p2.arg && isStaticExp(p2.arg)) {
          p2.arg.content = camelize(p2.arg.content);
        }
        nonNameProps.push(p2);
      }
    }
  }
  if (nonNameProps.length > 0) {
    const { props, directives } = buildProps(
      node2,
      context,
      nonNameProps,
      false,
      false
    );
    slotProps = props;
    if (directives.length) {
      context.onError(
        createCompilerError(
          36,
          directives[0].loc
        )
      );
    }
  }
  return {
    slotName,
    slotProps
  };
}
const transformOn$1 = (dir, node2, context, augmentor) => {
  const { loc, modifiers, arg } = dir;
  if (!dir.exp && !modifiers.length) {
    context.onError(createCompilerError(35, loc));
  }
  let eventName;
  if (arg.type === 4) {
    if (arg.isStatic) {
      let rawName = arg.content;
      if (rawName.startsWith("vue:")) {
        rawName = `vnode-${rawName.slice(4)}`;
      }
      const eventString = node2.tagType !== 0 || rawName.startsWith("vnode") || !/[A-Z]/.test(rawName) ? (
        // for non-element and vnode lifecycle event listeners, auto convert
        // it to camelCase. See issue #2249
        toHandlerKey(camelize(rawName))
      ) : (
        // preserve case for plain element listeners that have uppercase
        // letters, as these may be custom elements' custom events
        `on:${rawName}`
      );
      eventName = createSimpleExpression(eventString, true, arg.loc);
    } else {
      eventName = createCompoundExpression([
        `${context.helperString(TO_HANDLER_KEY)}(`,
        arg,
        `)`
      ]);
    }
  } else {
    eventName = arg;
    eventName.children.unshift(`${context.helperString(TO_HANDLER_KEY)}(`);
    eventName.children.push(`)`);
  }
  let exp = dir.exp;
  if (exp && !exp.content.trim()) {
    exp = void 0;
  }
  let shouldCache = context.cacheHandlers && !exp && !context.inVOnce;
  if (exp) {
    const isMemberExp = isMemberExpression(exp);
    const isInlineStatement = !(isMemberExp || isFnExpression(exp));
    const hasMultipleStatements = exp.content.includes(`;`);
    if (isInlineStatement || shouldCache && isMemberExp) {
      exp = createCompoundExpression([
        `${isInlineStatement ? `$event` : `${``}(...args)`} => ${hasMultipleStatements ? `{` : `(`}`,
        exp,
        hasMultipleStatements ? `}` : `)`
      ]);
    }
  }
  let ret = {
    props: [
      createObjectProperty(
        eventName,
        exp || createSimpleExpression(`() => {}`, false, loc)
      )
    ]
  };
  if (augmentor) {
    ret = augmentor(ret);
  }
  if (shouldCache) {
    ret.props[0].value = context.cache(ret.props[0].value);
  }
  ret.props.forEach((p2) => p2.key.isHandlerKey = true);
  return ret;
};
const transformText = (node2, context) => {
  if (node2.type === 0 || node2.type === 1 || node2.type === 11 || node2.type === 10) {
    return () => {
      const children2 = node2.children;
      let currentContainer = void 0;
      let hasText = false;
      for (let i2 = 0; i2 < children2.length; i2++) {
        const child2 = children2[i2];
        if (isText$1(child2)) {
          hasText = true;
          for (let j2 = i2 + 1; j2 < children2.length; j2++) {
            const next4 = children2[j2];
            if (isText$1(next4)) {
              if (!currentContainer) {
                currentContainer = children2[i2] = createCompoundExpression(
                  [child2],
                  child2.loc
                );
              }
              currentContainer.children.push(` + `, next4);
              children2.splice(j2, 1);
              j2--;
            } else {
              currentContainer = void 0;
              break;
            }
          }
        }
      }
      if (!hasText || // if this is a plain element with a single text child, leave it
      // as-is since the runtime has dedicated fast path for this by directly
      // setting textContent of the element.
      // for component root it's always normalized anyway.
      children2.length === 1 && (node2.type === 0 || node2.type === 1 && node2.tagType === 0 && // #3756
      // custom directives can potentially add DOM elements arbitrarily,
      // we need to avoid setting textContent of the element at runtime
      // to avoid accidentally overwriting the DOM elements added
      // by the user through custom directives.
      !node2.props.find(
        (p2) => p2.type === 7 && !context.directiveTransforms[p2.name]
      ) && // in compat mode, <template> tags with no special directives
      // will be rendered as a fragment so its children must be
      // converted into vnodes.
      !(node2.tag === "template"))) {
        return;
      }
      for (let i2 = 0; i2 < children2.length; i2++) {
        const child2 = children2[i2];
        if (isText$1(child2) || child2.type === 8) {
          const callArgs = [];
          if (child2.type !== 2 || child2.content !== " ") {
            callArgs.push(child2);
          }
          if (!context.ssr && getConstantType(child2, context) === 0) {
            callArgs.push(
              `1`
            );
          }
          children2[i2] = {
            type: 12,
            content: child2,
            loc: child2.loc,
            codegenNode: createCallExpression(
              context.helper(CREATE_TEXT),
              callArgs
            )
          };
        }
      }
    };
  }
};
const seen$1 = /* @__PURE__ */ new WeakSet();
const transformOnce = (node2, context) => {
  if (node2.type === 1 && findDir(node2, "once", true)) {
    if (seen$1.has(node2) || context.inVOnce || context.inSSR) {
      return;
    }
    seen$1.add(node2);
    context.inVOnce = true;
    context.helper(SET_BLOCK_TRACKING);
    return () => {
      context.inVOnce = false;
      const cur = context.currentNode;
      if (cur.codegenNode) {
        cur.codegenNode = context.cache(
          cur.codegenNode,
          true,
          true
        );
      }
    };
  }
};
const transformModel$1 = (dir, node2, context) => {
  const { exp, arg } = dir;
  if (!exp) {
    context.onError(
      createCompilerError(41, dir.loc)
    );
    return createTransformProps();
  }
  const rawExp = exp.loc.source.trim();
  const expString = exp.type === 4 ? exp.content : rawExp;
  const bindingType = context.bindingMetadata[rawExp];
  if (bindingType === "props" || bindingType === "props-aliased") {
    context.onError(createCompilerError(44, exp.loc));
    return createTransformProps();
  }
  const maybeRef = false;
  if (!expString.trim() || !isMemberExpression(exp) && !maybeRef) {
    context.onError(
      createCompilerError(42, exp.loc)
    );
    return createTransformProps();
  }
  const propName = arg ? arg : createSimpleExpression("modelValue", true);
  const eventName = arg ? isStaticExp(arg) ? `onUpdate:${camelize(arg.content)}` : createCompoundExpression(['"onUpdate:" + ', arg]) : `onUpdate:modelValue`;
  let assignmentExp;
  const eventArg = context.isTS ? `($event: any)` : `$event`;
  {
    assignmentExp = createCompoundExpression([
      `${eventArg} => ((`,
      exp,
      `) = $event)`
    ]);
  }
  const props = [
    // modelValue: foo
    createObjectProperty(propName, dir.exp),
    // "onUpdate:modelValue": $event => (foo = $event)
    createObjectProperty(eventName, assignmentExp)
  ];
  if (dir.modifiers.length && node2.tagType === 1) {
    const modifiers = dir.modifiers.map((m2) => m2.content).map((m2) => (isSimpleIdentifier(m2) ? m2 : JSON.stringify(m2)) + `: true`).join(`, `);
    const modifiersKey = arg ? isStaticExp(arg) ? `${arg.content}Modifiers` : createCompoundExpression([arg, ' + "Modifiers"']) : `modelModifiers`;
    props.push(
      createObjectProperty(
        modifiersKey,
        createSimpleExpression(
          `{ ${modifiers} }`,
          false,
          dir.loc,
          2
        )
      )
    );
  }
  return createTransformProps(props);
};
function createTransformProps(props = []) {
  return { props };
}
const validDivisionCharRE = /[\w).+\-_$\]]/;
const transformFilter = (node2, context) => {
  if (!isCompatEnabled("COMPILER_FILTERS", context)) {
    return;
  }
  if (node2.type === 5) {
    rewriteFilter(node2.content, context);
  } else if (node2.type === 1) {
    node2.props.forEach((prop) => {
      if (prop.type === 7 && prop.name !== "for" && prop.exp) {
        rewriteFilter(prop.exp, context);
      }
    });
  }
};
function rewriteFilter(node2, context) {
  if (node2.type === 4) {
    parseFilter(node2, context);
  } else {
    for (let i2 = 0; i2 < node2.children.length; i2++) {
      const child2 = node2.children[i2];
      if (typeof child2 !== "object") continue;
      if (child2.type === 4) {
        parseFilter(child2, context);
      } else if (child2.type === 8) {
        rewriteFilter(node2, context);
      } else if (child2.type === 5) {
        rewriteFilter(child2.content, context);
      }
    }
  }
}
function parseFilter(node2, context) {
  const exp = node2.content;
  let inSingle = false;
  let inDouble = false;
  let inTemplateString = false;
  let inRegex = false;
  let curly = 0;
  let square2 = 0;
  let paren = 0;
  let lastFilterIndex = 0;
  let c2, prev, i2, expression, filters = [];
  for (i2 = 0; i2 < exp.length; i2++) {
    prev = c2;
    c2 = exp.charCodeAt(i2);
    if (inSingle) {
      if (c2 === 39 && prev !== 92) inSingle = false;
    } else if (inDouble) {
      if (c2 === 34 && prev !== 92) inDouble = false;
    } else if (inTemplateString) {
      if (c2 === 96 && prev !== 92) inTemplateString = false;
    } else if (inRegex) {
      if (c2 === 47 && prev !== 92) inRegex = false;
    } else if (c2 === 124 && // pipe
    exp.charCodeAt(i2 + 1) !== 124 && exp.charCodeAt(i2 - 1) !== 124 && !curly && !square2 && !paren) {
      if (expression === void 0) {
        lastFilterIndex = i2 + 1;
        expression = exp.slice(0, i2).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c2) {
        case 34:
          inDouble = true;
          break;
        case 39:
          inSingle = true;
          break;
        case 96:
          inTemplateString = true;
          break;
        case 40:
          paren++;
          break;
        case 41:
          paren--;
          break;
        case 91:
          square2++;
          break;
        case 93:
          square2--;
          break;
        case 123:
          curly++;
          break;
        case 125:
          curly--;
          break;
      }
      if (c2 === 47) {
        let j2 = i2 - 1;
        let p2;
        for (; j2 >= 0; j2--) {
          p2 = exp.charAt(j2);
          if (p2 !== " ") break;
        }
        if (!p2 || !validDivisionCharRE.test(p2)) {
          inRegex = true;
        }
      }
    }
  }
  if (expression === void 0) {
    expression = exp.slice(0, i2).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }
  function pushFilter() {
    filters.push(exp.slice(lastFilterIndex, i2).trim());
    lastFilterIndex = i2 + 1;
  }
  if (filters.length) {
    for (i2 = 0; i2 < filters.length; i2++) {
      expression = wrapFilter(expression, filters[i2], context);
    }
    node2.content = expression;
    node2.ast = void 0;
  }
}
function wrapFilter(exp, filter4, context) {
  context.helper(RESOLVE_FILTER);
  const i2 = filter4.indexOf("(");
  if (i2 < 0) {
    context.filters.add(filter4);
    return `${toValidAssetId(filter4, "filter")}(${exp})`;
  } else {
    const name = filter4.slice(0, i2);
    const args = filter4.slice(i2 + 1);
    context.filters.add(name);
    return `${toValidAssetId(name, "filter")}(${exp}${args !== ")" ? "," + args : args}`;
  }
}
const seen$2 = /* @__PURE__ */ new WeakSet();
const transformMemo = (node2, context) => {
  if (node2.type === 1) {
    const dir = findDir(node2, "memo");
    if (!dir || seen$2.has(node2)) {
      return;
    }
    seen$2.add(node2);
    return () => {
      const codegenNode = node2.codegenNode || context.currentNode.codegenNode;
      if (codegenNode && codegenNode.type === 13) {
        if (node2.tagType !== 1) {
          convertToBlock(codegenNode, context);
        }
        node2.codegenNode = createCallExpression(context.helper(WITH_MEMO), [
          dir.exp,
          createFunctionExpression(void 0, codegenNode),
          `_cache`,
          String(context.cached.length)
        ]);
        context.cached.push(null);
      }
    };
  }
};
function getBaseTransformPreset(prefixIdentifiers) {
  return [
    [
      transformOnce,
      transformIf,
      transformMemo,
      transformFor,
      ...[transformFilter],
      ...[],
      transformSlotOutlet,
      transformElement,
      trackSlotScopes,
      transformText
    ],
    {
      on: transformOn$1,
      bind: transformBind,
      model: transformModel$1
    }
  ];
}
function baseCompile(source, options = {}) {
  const onError = options.onError || defaultOnError;
  const isModuleMode = options.mode === "module";
  {
    if (options.prefixIdentifiers === true) {
      onError(createCompilerError(47));
    } else if (isModuleMode) {
      onError(createCompilerError(48));
    }
  }
  const prefixIdentifiers = false;
  if (options.cacheHandlers) {
    onError(createCompilerError(49));
  }
  if (options.scopeId && !isModuleMode) {
    onError(createCompilerError(50));
  }
  const resolvedOptions = extend$2({}, options, {
    prefixIdentifiers
  });
  const ast = isString$1(source) ? baseParse(source, resolvedOptions) : source;
  const [nodeTransforms, directiveTransforms] = getBaseTransformPreset();
  transform(
    ast,
    extend$2({}, resolvedOptions, {
      nodeTransforms: [
        ...nodeTransforms,
        ...options.nodeTransforms || []
        // user transforms
      ],
      directiveTransforms: extend$2(
        {},
        directiveTransforms,
        options.directiveTransforms || {}
        // user transforms
      )
    })
  );
  return generate(ast, resolvedOptions);
}
const noopDirectiveTransform = () => ({ props: [] });
/**
* @vue/compiler-dom v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
const V_MODEL_RADIO = Symbol(``);
const V_MODEL_CHECKBOX = Symbol(
  ``
);
const V_MODEL_TEXT = Symbol(``);
const V_MODEL_SELECT = Symbol(
  ``
);
const V_MODEL_DYNAMIC = Symbol(
  ``
);
const V_ON_WITH_MODIFIERS = Symbol(
  ``
);
const V_ON_WITH_KEYS = Symbol(
  ``
);
const V_SHOW = Symbol(``);
const TRANSITION = Symbol(``);
const TRANSITION_GROUP = Symbol(
  ``
);
registerRuntimeHelpers({
  [V_MODEL_RADIO]: `vModelRadio`,
  [V_MODEL_CHECKBOX]: `vModelCheckbox`,
  [V_MODEL_TEXT]: `vModelText`,
  [V_MODEL_SELECT]: `vModelSelect`,
  [V_MODEL_DYNAMIC]: `vModelDynamic`,
  [V_ON_WITH_MODIFIERS]: `withModifiers`,
  [V_ON_WITH_KEYS]: `withKeys`,
  [V_SHOW]: `vShow`,
  [TRANSITION]: `Transition`,
  [TRANSITION_GROUP]: `TransitionGroup`
});
let decoder;
function decodeHtmlBrowser(raw, asAttr = false) {
  if (!decoder) {
    decoder = document.createElement("div");
  }
  if (asAttr) {
    decoder.innerHTML = `<div foo="${raw.replace(/"/g, "&quot;")}">`;
    return decoder.children[0].getAttribute("foo");
  } else {
    decoder.innerHTML = raw;
    return decoder.textContent;
  }
}
const parserOptions = {
  parseMode: "html",
  isVoidTag,
  isNativeTag: (tag2) => isHTMLTag(tag2) || isSVGTag(tag2) || isMathMLTag(tag2),
  isPreTag: (tag2) => tag2 === "pre",
  isIgnoreNewlineTag: (tag2) => tag2 === "pre" || tag2 === "textarea",
  decodeEntities: decodeHtmlBrowser,
  isBuiltInComponent: (tag2) => {
    if (tag2 === "Transition" || tag2 === "transition") {
      return TRANSITION;
    } else if (tag2 === "TransitionGroup" || tag2 === "transition-group") {
      return TRANSITION_GROUP;
    }
  },
  // https://html.spec.whatwg.org/multipage/parsing.html#tree-construction-dispatcher
  getNamespace(tag2, parent2, rootNamespace) {
    let ns = parent2 ? parent2.ns : rootNamespace;
    if (parent2 && ns === 2) {
      if (parent2.tag === "annotation-xml") {
        if (tag2 === "svg") {
          return 1;
        }
        if (parent2.props.some(
          (a2) => a2.type === 6 && a2.name === "encoding" && a2.value != null && (a2.value.content === "text/html" || a2.value.content === "application/xhtml+xml")
        )) {
          ns = 0;
        }
      } else if (/^m(?:[ions]|text)$/.test(parent2.tag) && tag2 !== "mglyph" && tag2 !== "malignmark") {
        ns = 0;
      }
    } else if (parent2 && ns === 1) {
      if (parent2.tag === "foreignObject" || parent2.tag === "desc" || parent2.tag === "title") {
        ns = 0;
      }
    }
    if (ns === 0) {
      if (tag2 === "svg") {
        return 1;
      }
      if (tag2 === "math") {
        return 2;
      }
    }
    return ns;
  }
};
const transformStyle = (node2) => {
  if (node2.type === 1) {
    node2.props.forEach((p2, i2) => {
      if (p2.type === 6 && p2.name === "style" && p2.value) {
        node2.props[i2] = {
          type: 7,
          name: `bind`,
          arg: createSimpleExpression(`style`, true, p2.loc),
          exp: parseInlineCSS(p2.value.content, p2.loc),
          modifiers: [],
          loc: p2.loc
        };
      }
    });
  }
};
const parseInlineCSS = (cssText, loc) => {
  const normalized = parseStringStyle(cssText);
  return createSimpleExpression(
    JSON.stringify(normalized),
    false,
    loc,
    3
  );
};
function createDOMCompilerError(code2, loc) {
  return createCompilerError(
    code2,
    loc
  );
}
const transformVHtml = (dir, node2, context) => {
  const { exp, loc } = dir;
  if (!exp) {
    context.onError(
      createDOMCompilerError(53, loc)
    );
  }
  if (node2.children.length) {
    context.onError(
      createDOMCompilerError(54, loc)
    );
    node2.children.length = 0;
  }
  return {
    props: [
      createObjectProperty(
        createSimpleExpression(`innerHTML`, true, loc),
        exp || createSimpleExpression("", true)
      )
    ]
  };
};
const transformVText = (dir, node2, context) => {
  const { exp, loc } = dir;
  if (!exp) {
    context.onError(
      createDOMCompilerError(55, loc)
    );
  }
  if (node2.children.length) {
    context.onError(
      createDOMCompilerError(56, loc)
    );
    node2.children.length = 0;
  }
  return {
    props: [
      createObjectProperty(
        createSimpleExpression(`textContent`, true),
        exp ? getConstantType(exp, context) > 0 ? exp : createCallExpression(
          context.helperString(TO_DISPLAY_STRING),
          [exp],
          loc
        ) : createSimpleExpression("", true)
      )
    ]
  };
};
const transformModel = (dir, node2, context) => {
  const baseResult = transformModel$1(dir, node2, context);
  if (!baseResult.props.length || node2.tagType === 1) {
    return baseResult;
  }
  if (dir.arg) {
    context.onError(
      createDOMCompilerError(
        58,
        dir.arg.loc
      )
    );
  }
  const { tag: tag2 } = node2;
  const isCustomElement = context.isCustomElement(tag2);
  if (tag2 === "input" || tag2 === "textarea" || tag2 === "select" || isCustomElement) {
    let directiveToUse = V_MODEL_TEXT;
    let isInvalidType = false;
    if (tag2 === "input" || isCustomElement) {
      const type = findProp(node2, `type`);
      if (type) {
        if (type.type === 7) {
          directiveToUse = V_MODEL_DYNAMIC;
        } else if (type.value) {
          switch (type.value.content) {
            case "radio":
              directiveToUse = V_MODEL_RADIO;
              break;
            case "checkbox":
              directiveToUse = V_MODEL_CHECKBOX;
              break;
            case "file":
              isInvalidType = true;
              context.onError(
                createDOMCompilerError(
                  59,
                  dir.loc
                )
              );
              break;
          }
        }
      } else if (hasDynamicKeyVBind(node2)) {
        directiveToUse = V_MODEL_DYNAMIC;
      } else ;
    } else if (tag2 === "select") {
      directiveToUse = V_MODEL_SELECT;
    } else ;
    if (!isInvalidType) {
      baseResult.needRuntime = context.helper(directiveToUse);
    }
  } else {
    context.onError(
      createDOMCompilerError(
        57,
        dir.loc
      )
    );
  }
  baseResult.props = baseResult.props.filter(
    (p2) => !(p2.key.type === 4 && p2.key.content === "modelValue")
  );
  return baseResult;
};
const isEventOptionModifier = /* @__PURE__ */ makeMap(`passive,once,capture`);
const isNonKeyModifier = /* @__PURE__ */ makeMap(
  // event propagation management
  `stop,prevent,self,ctrl,shift,alt,meta,exact,middle`
);
const maybeKeyModifier = /* @__PURE__ */ makeMap("left,right");
const isKeyboardEvent = /* @__PURE__ */ makeMap(`onkeyup,onkeydown,onkeypress`);
const resolveModifiers = (key2, modifiers, context, loc) => {
  const keyModifiers = [];
  const nonKeyModifiers = [];
  const eventOptionModifiers = [];
  for (let i2 = 0; i2 < modifiers.length; i2++) {
    const modifier = modifiers[i2].content;
    if (modifier === "native" && checkCompatEnabled(
      "COMPILER_V_ON_NATIVE",
      context
    )) {
      eventOptionModifiers.push(modifier);
    } else if (isEventOptionModifier(modifier)) {
      eventOptionModifiers.push(modifier);
    } else {
      if (maybeKeyModifier(modifier)) {
        if (isStaticExp(key2)) {
          if (isKeyboardEvent(key2.content.toLowerCase())) {
            keyModifiers.push(modifier);
          } else {
            nonKeyModifiers.push(modifier);
          }
        } else {
          keyModifiers.push(modifier);
          nonKeyModifiers.push(modifier);
        }
      } else {
        if (isNonKeyModifier(modifier)) {
          nonKeyModifiers.push(modifier);
        } else {
          keyModifiers.push(modifier);
        }
      }
    }
  }
  return {
    keyModifiers,
    nonKeyModifiers,
    eventOptionModifiers
  };
};
const transformClick = (key2, event) => {
  const isStaticClick = isStaticExp(key2) && key2.content.toLowerCase() === "onclick";
  return isStaticClick ? createSimpleExpression(event, true) : key2.type !== 4 ? createCompoundExpression([
    `(`,
    key2,
    `) === "onClick" ? "${event}" : (`,
    key2,
    `)`
  ]) : key2;
};
const transformOn = (dir, node2, context) => {
  return transformOn$1(dir, node2, context, (baseResult) => {
    const { modifiers } = dir;
    if (!modifiers.length) return baseResult;
    let { key: key2, value: handlerExp } = baseResult.props[0];
    const { keyModifiers, nonKeyModifiers, eventOptionModifiers } = resolveModifiers(key2, modifiers, context, dir.loc);
    if (nonKeyModifiers.includes("right")) {
      key2 = transformClick(key2, `onContextmenu`);
    }
    if (nonKeyModifiers.includes("middle")) {
      key2 = transformClick(key2, `onMouseup`);
    }
    if (nonKeyModifiers.length) {
      handlerExp = createCallExpression(context.helper(V_ON_WITH_MODIFIERS), [
        handlerExp,
        JSON.stringify(nonKeyModifiers)
      ]);
    }
    if (keyModifiers.length && // if event name is dynamic, always wrap with keys guard
    (!isStaticExp(key2) || isKeyboardEvent(key2.content.toLowerCase()))) {
      handlerExp = createCallExpression(context.helper(V_ON_WITH_KEYS), [
        handlerExp,
        JSON.stringify(keyModifiers)
      ]);
    }
    if (eventOptionModifiers.length) {
      const modifierPostfix = eventOptionModifiers.map(capitalize).join("");
      key2 = isStaticExp(key2) ? createSimpleExpression(`${key2.content}${modifierPostfix}`, true) : createCompoundExpression([`(`, key2, `) + "${modifierPostfix}"`]);
    }
    return {
      props: [createObjectProperty(key2, handlerExp)]
    };
  });
};
const transformShow = (dir, node2, context) => {
  const { exp, loc } = dir;
  if (!exp) {
    context.onError(
      createDOMCompilerError(61, loc)
    );
  }
  return {
    props: [],
    needRuntime: context.helper(V_SHOW)
  };
};
const ignoreSideEffectTags = (node2, context) => {
  if (node2.type === 1 && node2.tagType === 0 && (node2.tag === "script" || node2.tag === "style")) {
    context.removeNode();
  }
};
const DOMNodeTransforms = [
  transformStyle,
  ...[]
];
const DOMDirectiveTransforms = {
  cloak: noopDirectiveTransform,
  html: transformVHtml,
  text: transformVText,
  model: transformModel,
  // override compiler-core
  on: transformOn,
  // override compiler-core
  show: transformShow
};
function compile(src, options = {}) {
  return baseCompile(
    src,
    extend$2({}, parserOptions, options, {
      nodeTransforms: [
        // ignore <script> and <tag>
        // this is not put inside DOMNodeTransforms because that list is used
        // by compiler-ssr to generate vnode fallback branches
        ignoreSideEffectTags,
        ...DOMNodeTransforms,
        ...options.nodeTransforms || []
      ],
      directiveTransforms: extend$2(
        {},
        DOMDirectiveTransforms,
        options.directiveTransforms || {}
      ),
      transformHoist: null
    })
  );
}
/**
* vue v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
const compileCache = /* @__PURE__ */ Object.create(null);
function compileToFunction(template, options) {
  if (!isString$1(template)) {
    if (template.nodeType) {
      template = template.innerHTML;
    } else {
      return NOOP;
    }
  }
  const key2 = genCacheKey(template, options);
  const cached = compileCache[key2];
  if (cached) {
    return cached;
  }
  if (template[0] === "#") {
    const el = document.querySelector(template);
    template = el ? el.innerHTML : ``;
  }
  const opts = extend$2(
    {
      hoistStatic: true,
      onError: void 0,
      onWarn: NOOP
    },
    options
  );
  if (!opts.isCustomElement && typeof customElements !== "undefined") {
    opts.isCustomElement = (tag2) => !!customElements.get(tag2);
  }
  const { code: code2 } = compile(template, opts);
  const render2 = new Function("Vue", code2)(runtimeDom);
  render2._rc = true;
  return compileCache[key2] = render2;
}
registerRuntimeCompiler(compileToFunction);
/**
 * vis-data
 * http://visjs.org/
 *
 * Manage unstructured data using DataSet. Add, update, and remove data, and listen for changes in the data.
 *
 * @version 7.1.9
 * @date    2023-11-24T17:53:34.179Z
 *
 * @copyright (c) 2011-2017 Almende B.V, http://almende.com
 * @copyright (c) 2017-2019 visjs contributors, https://github.com/visjs
 *
 * @license
 * vis.js is dual licensed under both
 *
 *   1. The Apache 2.0 License
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   and
 *
 *   2. The MIT License
 *      http://opensource.org/licenses/MIT
 *
 * vis.js may be distributed under either license.
 */
function _classCallCheck$1(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
var commonjsGlobal$1 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs$1(x2) {
  return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
}
var defineProperty$f$1 = { exports: {} };
var check$2 = function(it2) {
  return it2 && it2.Math === Math && it2;
};
var global$p = (
  // eslint-disable-next-line es/no-global-this -- safe
  check$2(typeof globalThis == "object" && globalThis) || check$2(typeof window == "object" && window) || // eslint-disable-next-line no-restricted-globals -- safe
  check$2(typeof self == "object" && self) || check$2(typeof commonjsGlobal$1 == "object" && commonjsGlobal$1) || // eslint-disable-next-line no-new-func -- fallback
  /* @__PURE__ */ function() {
    return this;
  }() || commonjsGlobal$1 || Function("return this")()
);
var fails$u$1 = function(exec2) {
  try {
    return !!exec2();
  } catch (error) {
    return true;
  }
};
var fails$t$1 = fails$u$1;
var functionBindNative$1 = !fails$t$1(function() {
  var test2 = (function() {
  }).bind();
  return typeof test2 != "function" || test2.hasOwnProperty("prototype");
});
var NATIVE_BIND$4$1 = functionBindNative$1;
var FunctionPrototype$4$1 = Function.prototype;
var apply$6 = FunctionPrototype$4$1.apply;
var call$k = FunctionPrototype$4$1.call;
var functionApply$1 = typeof Reflect == "object" && Reflect.apply || (NATIVE_BIND$4$1 ? call$k.bind(apply$6) : function() {
  return call$k.apply(apply$6, arguments);
});
var NATIVE_BIND$3$1 = functionBindNative$1;
var FunctionPrototype$3$1 = Function.prototype;
var call$j = FunctionPrototype$3$1.call;
var uncurryThisWithBind$1 = NATIVE_BIND$3$1 && FunctionPrototype$3$1.bind.bind(call$j, call$j);
var functionUncurryThis$1 = NATIVE_BIND$3$1 ? uncurryThisWithBind$1 : function(fn2) {
  return function() {
    return call$j.apply(fn2, arguments);
  };
};
var uncurryThis$q$1 = functionUncurryThis$1;
var toString$9$1 = uncurryThis$q$1({}.toString);
var stringSlice$1$1 = uncurryThis$q$1("".slice);
var classofRaw$2$1 = function(it2) {
  return stringSlice$1$1(toString$9$1(it2), 8, -1);
};
var classofRaw$1$1 = classofRaw$2$1;
var uncurryThis$p$1 = functionUncurryThis$1;
var functionUncurryThisClause$1 = function(fn2) {
  if (classofRaw$1$1(fn2) === "Function") return uncurryThis$p$1(fn2);
};
var documentAll$2$1 = typeof document == "object" && document.all;
var IS_HTMLDDA$1 = typeof documentAll$2$1 == "undefined" && documentAll$2$1 !== void 0;
var documentAll_1$1 = {
  all: documentAll$2$1,
  IS_HTMLDDA: IS_HTMLDDA$1
};
var $documentAll$1$1 = documentAll_1$1;
var documentAll$1$1 = $documentAll$1$1.all;
var isCallable$m = $documentAll$1$1.IS_HTMLDDA ? function(argument) {
  return typeof argument == "function" || argument === documentAll$1$1;
} : function(argument) {
  return typeof argument == "function";
};
var objectGetOwnPropertyDescriptor$1 = {};
var fails$s$1 = fails$u$1;
var descriptors$1 = !fails$s$1(function() {
  return Object.defineProperty({}, 1, { get: function() {
    return 7;
  } })[1] !== 7;
});
var NATIVE_BIND$2$1 = functionBindNative$1;
var call$i = Function.prototype.call;
var functionCall$1 = NATIVE_BIND$2$1 ? call$i.bind(call$i) : function() {
  return call$i.apply(call$i, arguments);
};
var objectPropertyIsEnumerable$1 = {};
var $propertyIsEnumerable$1$1 = {}.propertyIsEnumerable;
var getOwnPropertyDescriptor$7$1 = Object.getOwnPropertyDescriptor;
var NASHORN_BUG$1 = getOwnPropertyDescriptor$7$1 && !$propertyIsEnumerable$1$1.call({ 1: 2 }, 1);
objectPropertyIsEnumerable$1.f = NASHORN_BUG$1 ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor$7$1(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable$1$1;
var createPropertyDescriptor$7 = function(bitmap, value2) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value2
  };
};
var uncurryThis$o$1 = functionUncurryThis$1;
var fails$r$1 = fails$u$1;
var classof$f = classofRaw$2$1;
var $Object$4$1 = Object;
var split$1 = uncurryThis$o$1("".split);
var indexedObject$1 = fails$r$1(function() {
  return !$Object$4$1("z").propertyIsEnumerable(0);
}) ? function(it2) {
  return classof$f(it2) === "String" ? split$1(it2, "") : $Object$4$1(it2);
} : $Object$4$1;
var isNullOrUndefined$6$1 = function(it2) {
  return it2 === null || it2 === void 0;
};
var isNullOrUndefined$5$1 = isNullOrUndefined$6$1;
var $TypeError$g$1 = TypeError;
var requireObjectCoercible$3$1 = function(it2) {
  if (isNullOrUndefined$5$1(it2)) throw new $TypeError$g$1("Can't call method on " + it2);
  return it2;
};
var IndexedObject$3$1 = indexedObject$1;
var requireObjectCoercible$2$1 = requireObjectCoercible$3$1;
var toIndexedObject$a$1 = function(it2) {
  return IndexedObject$3$1(requireObjectCoercible$2$1(it2));
};
var isCallable$l = isCallable$m;
var $documentAll$2 = documentAll_1$1;
var documentAll$3 = $documentAll$2.all;
var isObject$h$1 = $documentAll$2.IS_HTMLDDA ? function(it2) {
  return typeof it2 == "object" ? it2 !== null : isCallable$l(it2) || it2 === documentAll$3;
} : function(it2) {
  return typeof it2 == "object" ? it2 !== null : isCallable$l(it2);
};
var path$o$1 = {};
var path$n$1 = path$o$1;
var global$o = global$p;
var isCallable$k = isCallable$m;
var aFunction$1 = function(variable) {
  return isCallable$k(variable) ? variable : void 0;
};
var getBuiltIn$f = function(namespace, method2) {
  return arguments.length < 2 ? aFunction$1(path$n$1[namespace]) || aFunction$1(global$o[namespace]) : path$n$1[namespace] && path$n$1[namespace][method2] || global$o[namespace] && global$o[namespace][method2];
};
var uncurryThis$n$1 = functionUncurryThis$1;
var objectIsPrototypeOf$1 = uncurryThis$n$1({}.isPrototypeOf);
var engineUserAgent$1 = typeof navigator != "undefined" && String(navigator.userAgent) || "";
var global$n$1 = global$p;
var userAgent$5 = engineUserAgent$1;
var process$3 = global$n$1.process;
var Deno$1$1 = global$n$1.Deno;
var versions$1 = process$3 && process$3.versions || Deno$1$1 && Deno$1$1.version;
var v8$1 = versions$1 && versions$1.v8;
var match$1, version$1;
if (v8$1) {
  match$1 = v8$1.split(".");
  version$1 = match$1[0] > 0 && match$1[0] < 4 ? 1 : +(match$1[0] + match$1[1]);
}
if (!version$1 && userAgent$5) {
  match$1 = userAgent$5.match(/Edge\/(\d+)/);
  if (!match$1 || match$1[1] >= 74) {
    match$1 = userAgent$5.match(/Chrome\/(\d+)/);
    if (match$1) version$1 = +match$1[1];
  }
}
var engineV8Version$1 = version$1;
var V8_VERSION$3 = engineV8Version$1;
var fails$q$1 = fails$u$1;
var global$m$1 = global$p;
var $String$5$1 = global$m$1.String;
var symbolConstructorDetection$1 = !!Object.getOwnPropertySymbols && !fails$q$1(function() {
  var symbol2 = Symbol("symbol detection");
  return !$String$5$1(symbol2) || !(Object(symbol2) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
  !Symbol.sham && V8_VERSION$3 && V8_VERSION$3 < 41;
});
var NATIVE_SYMBOL$5$1 = symbolConstructorDetection$1;
var useSymbolAsUid$1 = NATIVE_SYMBOL$5$1 && !Symbol.sham && typeof Symbol.iterator == "symbol";
var getBuiltIn$e = getBuiltIn$f;
var isCallable$j = isCallable$m;
var isPrototypeOf$k$1 = objectIsPrototypeOf$1;
var USE_SYMBOL_AS_UID$1$1 = useSymbolAsUid$1;
var $Object$3$1 = Object;
var isSymbol$5$1 = USE_SYMBOL_AS_UID$1$1 ? function(it2) {
  return typeof it2 == "symbol";
} : function(it2) {
  var $Symbol2 = getBuiltIn$e("Symbol");
  return isCallable$j($Symbol2) && isPrototypeOf$k$1($Symbol2.prototype, $Object$3$1(it2));
};
var $String$4$1 = String;
var tryToString$6$1 = function(argument) {
  try {
    return $String$4$1(argument);
  } catch (error) {
    return "Object";
  }
};
var isCallable$i$1 = isCallable$m;
var tryToString$5$1 = tryToString$6$1;
var $TypeError$f$1 = TypeError;
var aCallable$e = function(argument) {
  if (isCallable$i$1(argument)) return argument;
  throw new $TypeError$f$1(tryToString$5$1(argument) + " is not a function");
};
var aCallable$d = aCallable$e;
var isNullOrUndefined$4$1 = isNullOrUndefined$6$1;
var getMethod$3$1 = function(V, P) {
  var func = V[P];
  return isNullOrUndefined$4$1(func) ? void 0 : aCallable$d(func);
};
var call$h = functionCall$1;
var isCallable$h$1 = isCallable$m;
var isObject$g$1 = isObject$h$1;
var $TypeError$e$1 = TypeError;
var ordinaryToPrimitive$1$1 = function(input, pref) {
  var fn2, val;
  if (pref === "string" && isCallable$h$1(fn2 = input.toString) && !isObject$g$1(val = call$h(fn2, input))) return val;
  if (isCallable$h$1(fn2 = input.valueOf) && !isObject$g$1(val = call$h(fn2, input))) return val;
  if (pref !== "string" && isCallable$h$1(fn2 = input.toString) && !isObject$g$1(val = call$h(fn2, input))) return val;
  throw new $TypeError$e$1("Can't convert object to primitive value");
};
var shared$7$1 = { exports: {} };
var isPure = true;
var global$l$1 = global$p;
var defineProperty$e$1 = Object.defineProperty;
var defineGlobalProperty$1$1 = function(key2, value2) {
  try {
    defineProperty$e$1(global$l$1, key2, { value: value2, configurable: true, writable: true });
  } catch (error) {
    global$l$1[key2] = value2;
  }
  return value2;
};
var global$k$1 = global$p;
var defineGlobalProperty$2 = defineGlobalProperty$1$1;
var SHARED$1 = "__core-js_shared__";
var store$3$1 = global$k$1[SHARED$1] || defineGlobalProperty$2(SHARED$1, {});
var sharedStore$1 = store$3$1;
var store$2$1 = sharedStore$1;
(shared$7$1.exports = function(key2, value2) {
  return store$2$1[key2] || (store$2$1[key2] = value2 !== void 0 ? value2 : {});
})("versions", []).push({
  version: "3.33.2",
  mode: "pure",
  copyright: "© 2014-2023 Denis Pushkarev (zloirock.ru)",
  license: "https://github.com/zloirock/core-js/blob/v3.33.2/LICENSE",
  source: "https://github.com/zloirock/core-js"
});
var sharedExports$1 = shared$7$1.exports;
var requireObjectCoercible$1$1 = requireObjectCoercible$3$1;
var $Object$2$1 = Object;
var toObject$e$1 = function(argument) {
  return $Object$2$1(requireObjectCoercible$1$1(argument));
};
var uncurryThis$m$1 = functionUncurryThis$1;
var toObject$d$1 = toObject$e$1;
var hasOwnProperty$1 = uncurryThis$m$1({}.hasOwnProperty);
var hasOwnProperty_1$1 = Object.hasOwn || function hasOwn2(it2, key2) {
  return hasOwnProperty$1(toObject$d$1(it2), key2);
};
var uncurryThis$l$1 = functionUncurryThis$1;
var id$1$1 = 0;
var postfix$1 = Math.random();
var toString$8$1 = uncurryThis$l$1(1 .toString);
var uid$4$1 = function(key2) {
  return "Symbol(" + (key2 === void 0 ? "" : key2) + ")_" + toString$8$1(++id$1$1 + postfix$1, 36);
};
var global$j$1 = global$p;
var shared$6$1 = sharedExports$1;
var hasOwn$j = hasOwnProperty_1$1;
var uid$3$1 = uid$4$1;
var NATIVE_SYMBOL$4$1 = symbolConstructorDetection$1;
var USE_SYMBOL_AS_UID$2 = useSymbolAsUid$1;
var Symbol$3$1 = global$j$1.Symbol;
var WellKnownSymbolsStore$2$1 = shared$6$1("wks");
var createWellKnownSymbol$1 = USE_SYMBOL_AS_UID$2 ? Symbol$3$1["for"] || Symbol$3$1 : Symbol$3$1 && Symbol$3$1.withoutSetter || uid$3$1;
var wellKnownSymbol$n = function(name) {
  if (!hasOwn$j(WellKnownSymbolsStore$2$1, name)) {
    WellKnownSymbolsStore$2$1[name] = NATIVE_SYMBOL$4$1 && hasOwn$j(Symbol$3$1, name) ? Symbol$3$1[name] : createWellKnownSymbol$1("Symbol." + name);
  }
  return WellKnownSymbolsStore$2$1[name];
};
var call$g = functionCall$1;
var isObject$f$1 = isObject$h$1;
var isSymbol$4$1 = isSymbol$5$1;
var getMethod$2$1 = getMethod$3$1;
var ordinaryToPrimitive$2 = ordinaryToPrimitive$1$1;
var wellKnownSymbol$m$1 = wellKnownSymbol$n;
var $TypeError$d$1 = TypeError;
var TO_PRIMITIVE$1 = wellKnownSymbol$m$1("toPrimitive");
var toPrimitive$6$1 = function(input, pref) {
  if (!isObject$f$1(input) || isSymbol$4$1(input)) return input;
  var exoticToPrim = getMethod$2$1(input, TO_PRIMITIVE$1);
  var result;
  if (exoticToPrim) {
    if (pref === void 0) pref = "default";
    result = call$g(exoticToPrim, input, pref);
    if (!isObject$f$1(result) || isSymbol$4$1(result)) return result;
    throw new $TypeError$d$1("Can't convert object to primitive value");
  }
  if (pref === void 0) pref = "number";
  return ordinaryToPrimitive$2(input, pref);
};
var toPrimitive$5$1 = toPrimitive$6$1;
var isSymbol$3$1 = isSymbol$5$1;
var toPropertyKey$4$1 = function(argument) {
  var key2 = toPrimitive$5$1(argument, "string");
  return isSymbol$3$1(key2) ? key2 : key2 + "";
};
var global$i$1 = global$p;
var isObject$e$1 = isObject$h$1;
var document$3 = global$i$1.document;
var EXISTS$1$1 = isObject$e$1(document$3) && isObject$e$1(document$3.createElement);
var documentCreateElement$1$1 = function(it2) {
  return EXISTS$1$1 ? document$3.createElement(it2) : {};
};
var DESCRIPTORS$h$1 = descriptors$1;
var fails$p$1 = fails$u$1;
var createElement$1 = documentCreateElement$1$1;
var ie8DomDefine$1 = !DESCRIPTORS$h$1 && !fails$p$1(function() {
  return Object.defineProperty(createElement$1("div"), "a", {
    get: function() {
      return 7;
    }
  }).a !== 7;
});
var DESCRIPTORS$g$1 = descriptors$1;
var call$f$1 = functionCall$1;
var propertyIsEnumerableModule$2$1 = objectPropertyIsEnumerable$1;
var createPropertyDescriptor$6 = createPropertyDescriptor$7;
var toIndexedObject$9$1 = toIndexedObject$a$1;
var toPropertyKey$3$1 = toPropertyKey$4$1;
var hasOwn$i = hasOwnProperty_1$1;
var IE8_DOM_DEFINE$1$1 = ie8DomDefine$1;
var $getOwnPropertyDescriptor$2$1 = Object.getOwnPropertyDescriptor;
objectGetOwnPropertyDescriptor$1.f = DESCRIPTORS$g$1 ? $getOwnPropertyDescriptor$2$1 : function getOwnPropertyDescriptor2(O, P) {
  O = toIndexedObject$9$1(O);
  P = toPropertyKey$3$1(P);
  if (IE8_DOM_DEFINE$1$1) try {
    return $getOwnPropertyDescriptor$2$1(O, P);
  } catch (error) {
  }
  if (hasOwn$i(O, P)) return createPropertyDescriptor$6(!call$f$1(propertyIsEnumerableModule$2$1.f, O, P), O[P]);
};
var fails$o$1 = fails$u$1;
var isCallable$g$1 = isCallable$m;
var replacement$1 = /#|\.prototype\./;
var isForced$2 = function(feature, detection) {
  var value2 = data$1[normalize$1(feature)];
  return value2 === POLYFILL$1 ? true : value2 === NATIVE$1 ? false : isCallable$g$1(detection) ? fails$o$1(detection) : !!detection;
};
var normalize$1 = isForced$2.normalize = function(string2) {
  return String(string2).replace(replacement$1, ".").toLowerCase();
};
var data$1 = isForced$2.data = {};
var NATIVE$1 = isForced$2.NATIVE = "N";
var POLYFILL$1 = isForced$2.POLYFILL = "P";
var isForced_1$1 = isForced$2;
var uncurryThis$k$1 = functionUncurryThisClause$1;
var aCallable$c = aCallable$e;
var NATIVE_BIND$1$1 = functionBindNative$1;
var bind$i = uncurryThis$k$1(uncurryThis$k$1.bind);
var functionBindContext$1 = function(fn2, that) {
  aCallable$c(fn2);
  return that === void 0 ? fn2 : NATIVE_BIND$1$1 ? bind$i(fn2, that) : function() {
    return fn2.apply(that, arguments);
  };
};
var objectDefineProperty$1 = {};
var DESCRIPTORS$f$1 = descriptors$1;
var fails$n$1 = fails$u$1;
var v8PrototypeDefineBug$1 = DESCRIPTORS$f$1 && fails$n$1(function() {
  return Object.defineProperty(function() {
  }, "prototype", {
    value: 42,
    writable: false
  }).prototype !== 42;
});
var isObject$d$1 = isObject$h$1;
var $String$3$1 = String;
var $TypeError$c$1 = TypeError;
var anObject$d$1 = function(argument) {
  if (isObject$d$1(argument)) return argument;
  throw new $TypeError$c$1($String$3$1(argument) + " is not an object");
};
var DESCRIPTORS$e$1 = descriptors$1;
var IE8_DOM_DEFINE$2 = ie8DomDefine$1;
var V8_PROTOTYPE_DEFINE_BUG$1$1 = v8PrototypeDefineBug$1;
var anObject$c$1 = anObject$d$1;
var toPropertyKey$2$1 = toPropertyKey$4$1;
var $TypeError$b$1 = TypeError;
var $defineProperty$1$1 = Object.defineProperty;
var $getOwnPropertyDescriptor$1$1 = Object.getOwnPropertyDescriptor;
var ENUMERABLE$1 = "enumerable";
var CONFIGURABLE$1$1 = "configurable";
var WRITABLE$1 = "writable";
objectDefineProperty$1.f = DESCRIPTORS$e$1 ? V8_PROTOTYPE_DEFINE_BUG$1$1 ? function defineProperty2(O, P, Attributes) {
  anObject$c$1(O);
  P = toPropertyKey$2$1(P);
  anObject$c$1(Attributes);
  if (typeof O === "function" && P === "prototype" && "value" in Attributes && WRITABLE$1 in Attributes && !Attributes[WRITABLE$1]) {
    var current = $getOwnPropertyDescriptor$1$1(O, P);
    if (current && current[WRITABLE$1]) {
      O[P] = Attributes.value;
      Attributes = {
        configurable: CONFIGURABLE$1$1 in Attributes ? Attributes[CONFIGURABLE$1$1] : current[CONFIGURABLE$1$1],
        enumerable: ENUMERABLE$1 in Attributes ? Attributes[ENUMERABLE$1] : current[ENUMERABLE$1],
        writable: false
      };
    }
  }
  return $defineProperty$1$1(O, P, Attributes);
} : $defineProperty$1$1 : function defineProperty3(O, P, Attributes) {
  anObject$c$1(O);
  P = toPropertyKey$2$1(P);
  anObject$c$1(Attributes);
  if (IE8_DOM_DEFINE$2) try {
    return $defineProperty$1$1(O, P, Attributes);
  } catch (error) {
  }
  if ("get" in Attributes || "set" in Attributes) throw new $TypeError$b$1("Accessors not supported");
  if ("value" in Attributes) O[P] = Attributes.value;
  return O;
};
var DESCRIPTORS$d$1 = descriptors$1;
var definePropertyModule$4 = objectDefineProperty$1;
var createPropertyDescriptor$5$1 = createPropertyDescriptor$7;
var createNonEnumerableProperty$9 = DESCRIPTORS$d$1 ? function(object2, key2, value2) {
  return definePropertyModule$4.f(object2, key2, createPropertyDescriptor$5$1(1, value2));
} : function(object2, key2, value2) {
  object2[key2] = value2;
  return object2;
};
var global$h$1 = global$p;
var apply$5$1 = functionApply$1;
var uncurryThis$j$1 = functionUncurryThisClause$1;
var isCallable$f$1 = isCallable$m;
var getOwnPropertyDescriptor$6$1 = objectGetOwnPropertyDescriptor$1.f;
var isForced$1$1 = isForced_1$1;
var path$m$1 = path$o$1;
var bind$h = functionBindContext$1;
var createNonEnumerableProperty$8 = createNonEnumerableProperty$9;
var hasOwn$h$1 = hasOwnProperty_1$1;
var wrapConstructor$1 = function(NativeConstructor) {
  var Wrapper = function(a2, b2, c2) {
    if (this instanceof Wrapper) {
      switch (arguments.length) {
        case 0:
          return new NativeConstructor();
        case 1:
          return new NativeConstructor(a2);
        case 2:
          return new NativeConstructor(a2, b2);
      }
      return new NativeConstructor(a2, b2, c2);
    }
    return apply$5$1(NativeConstructor, this, arguments);
  };
  Wrapper.prototype = NativeConstructor.prototype;
  return Wrapper;
};
var _export$1 = function(options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var PROTO = options.proto;
  var nativeSource = GLOBAL ? global$h$1 : STATIC ? global$h$1[TARGET] : (global$h$1[TARGET] || {}).prototype;
  var target = GLOBAL ? path$m$1 : path$m$1[TARGET] || createNonEnumerableProperty$8(path$m$1, TARGET, {})[TARGET];
  var targetPrototype = target.prototype;
  var FORCED2, USE_NATIVE, VIRTUAL_PROTOTYPE;
  var key2, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;
  for (key2 in source) {
    FORCED2 = isForced$1$1(GLOBAL ? key2 : TARGET + (STATIC ? "." : "#") + key2, options.forced);
    USE_NATIVE = !FORCED2 && nativeSource && hasOwn$h$1(nativeSource, key2);
    targetProperty = target[key2];
    if (USE_NATIVE) if (options.dontCallGetSet) {
      descriptor = getOwnPropertyDescriptor$6$1(nativeSource, key2);
      nativeProperty = descriptor && descriptor.value;
    } else nativeProperty = nativeSource[key2];
    sourceProperty = USE_NATIVE && nativeProperty ? nativeProperty : source[key2];
    if (USE_NATIVE && typeof targetProperty == typeof sourceProperty) continue;
    if (options.bind && USE_NATIVE) resultProperty = bind$h(sourceProperty, global$h$1);
    else if (options.wrap && USE_NATIVE) resultProperty = wrapConstructor$1(sourceProperty);
    else if (PROTO && isCallable$f$1(sourceProperty)) resultProperty = uncurryThis$j$1(sourceProperty);
    else resultProperty = sourceProperty;
    if (options.sham || sourceProperty && sourceProperty.sham || targetProperty && targetProperty.sham) {
      createNonEnumerableProperty$8(resultProperty, "sham", true);
    }
    createNonEnumerableProperty$8(target, key2, resultProperty);
    if (PROTO) {
      VIRTUAL_PROTOTYPE = TARGET + "Prototype";
      if (!hasOwn$h$1(path$m$1, VIRTUAL_PROTOTYPE)) {
        createNonEnumerableProperty$8(path$m$1, VIRTUAL_PROTOTYPE, {});
      }
      createNonEnumerableProperty$8(path$m$1[VIRTUAL_PROTOTYPE], key2, sourceProperty);
      if (options.real && targetPrototype && (FORCED2 || !targetPrototype[key2])) {
        createNonEnumerableProperty$8(targetPrototype, key2, sourceProperty);
      }
    }
  }
};
var $$P = _export$1;
var DESCRIPTORS$c$1 = descriptors$1;
var defineProperty$d$1 = objectDefineProperty$1.f;
$$P({ target: "Object", stat: true, forced: Object.defineProperty !== defineProperty$d$1, sham: !DESCRIPTORS$c$1 }, {
  defineProperty: defineProperty$d$1
});
var path$l$1 = path$o$1;
var Object$4$1 = path$l$1.Object;
var defineProperty$c$1 = defineProperty$f$1.exports = function defineProperty4(it2, key2, desc) {
  return Object$4$1.defineProperty(it2, key2, desc);
};
if (Object$4$1.defineProperty.sham) defineProperty$c$1.sham = true;
var definePropertyExports$1 = defineProperty$f$1.exports;
var parent$18$1 = definePropertyExports$1;
var defineProperty$b$1 = parent$18$1;
var parent$17$1 = defineProperty$b$1;
var defineProperty$a$1 = parent$17$1;
var parent$16$1 = defineProperty$a$1;
var defineProperty$9$1 = parent$16$1;
var defineProperty$8$1 = defineProperty$9$1;
var _Object$defineProperty$1$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(defineProperty$8$1);
var classof$e$1 = classofRaw$2$1;
var isArray$e$1 = Array.isArray || function isArray2(argument) {
  return classof$e$1(argument) === "Array";
};
var ceil$1 = Math.ceil;
var floor$1$1 = Math.floor;
var mathTrunc$1 = Math.trunc || function trunc2(x2) {
  var n2 = +x2;
  return (n2 > 0 ? floor$1$1 : ceil$1)(n2);
};
var trunc$1 = mathTrunc$1;
var toIntegerOrInfinity$4$1 = function(argument) {
  var number2 = +argument;
  return number2 !== number2 || number2 === 0 ? 0 : trunc$1(number2);
};
var toIntegerOrInfinity$3$1 = toIntegerOrInfinity$4$1;
var min$2$1 = Math.min;
var toLength$1$1 = function(argument) {
  return argument > 0 ? min$2$1(toIntegerOrInfinity$3$1(argument), 9007199254740991) : 0;
};
var toLength$2 = toLength$1$1;
var lengthOfArrayLike$d = function(obj) {
  return toLength$2(obj.length);
};
var $TypeError$a$1 = TypeError;
var MAX_SAFE_INTEGER$1 = 9007199254740991;
var doesNotExceedSafeInteger$4 = function(it2) {
  if (it2 > MAX_SAFE_INTEGER$1) throw $TypeError$a$1("Maximum allowed index exceeded");
  return it2;
};
var toPropertyKey$1$1 = toPropertyKey$4$1;
var definePropertyModule$3$1 = objectDefineProperty$1;
var createPropertyDescriptor$4$1 = createPropertyDescriptor$7;
var createProperty$6$1 = function(object2, key2, value2) {
  var propertyKey = toPropertyKey$1$1(key2);
  if (propertyKey in object2) definePropertyModule$3$1.f(object2, propertyKey, createPropertyDescriptor$4$1(0, value2));
  else object2[propertyKey] = value2;
};
var wellKnownSymbol$l$1 = wellKnownSymbol$n;
var TO_STRING_TAG$4 = wellKnownSymbol$l$1("toStringTag");
var test$2$1 = {};
test$2$1[TO_STRING_TAG$4] = "z";
var toStringTagSupport$1 = String(test$2$1) === "[object z]";
var TO_STRING_TAG_SUPPORT$2$1 = toStringTagSupport$1;
var isCallable$e$1 = isCallable$m;
var classofRaw$3 = classofRaw$2$1;
var wellKnownSymbol$k$1 = wellKnownSymbol$n;
var TO_STRING_TAG$3$1 = wellKnownSymbol$k$1("toStringTag");
var $Object$1$1 = Object;
var CORRECT_ARGUMENTS$1 = classofRaw$3(/* @__PURE__ */ function() {
  return arguments;
}()) === "Arguments";
var tryGet$1 = function(it2, key2) {
  try {
    return it2[key2];
  } catch (error) {
  }
};
var classof$d$1 = TO_STRING_TAG_SUPPORT$2$1 ? classofRaw$3 : function(it2) {
  var O, tag2, result;
  return it2 === void 0 ? "Undefined" : it2 === null ? "Null" : typeof (tag2 = tryGet$1(O = $Object$1$1(it2), TO_STRING_TAG$3$1)) == "string" ? tag2 : CORRECT_ARGUMENTS$1 ? classofRaw$3(O) : (result = classofRaw$3(O)) === "Object" && isCallable$e$1(O.callee) ? "Arguments" : result;
};
var uncurryThis$i$1 = functionUncurryThis$1;
var isCallable$d$1 = isCallable$m;
var store$1$1 = sharedStore$1;
var functionToString$1 = uncurryThis$i$1(Function.toString);
if (!isCallable$d$1(store$1$1.inspectSource)) {
  store$1$1.inspectSource = function(it2) {
    return functionToString$1(it2);
  };
}
var inspectSource$2 = store$1$1.inspectSource;
var uncurryThis$h$1 = functionUncurryThis$1;
var fails$m$1 = fails$u$1;
var isCallable$c$1 = isCallable$m;
var classof$c$1 = classof$d$1;
var getBuiltIn$d = getBuiltIn$f;
var inspectSource$1$1 = inspectSource$2;
var noop$1 = function() {
};
var empty$1 = [];
var construct$4$1 = getBuiltIn$d("Reflect", "construct");
var constructorRegExp$1 = /^\s*(?:class|function)\b/;
var exec$1$1 = uncurryThis$h$1(constructorRegExp$1.exec);
var INCORRECT_TO_STRING$1 = !constructorRegExp$1.test(noop$1);
var isConstructorModern$1 = function isConstructor2(argument) {
  if (!isCallable$c$1(argument)) return false;
  try {
    construct$4$1(noop$1, empty$1, argument);
    return true;
  } catch (error) {
    return false;
  }
};
var isConstructorLegacy$1 = function isConstructor3(argument) {
  if (!isCallable$c$1(argument)) return false;
  switch (classof$c$1(argument)) {
    case "AsyncFunction":
    case "GeneratorFunction":
    case "AsyncGeneratorFunction":
      return false;
  }
  try {
    return INCORRECT_TO_STRING$1 || !!exec$1$1(constructorRegExp$1, inspectSource$1$1(argument));
  } catch (error) {
    return true;
  }
};
isConstructorLegacy$1.sham = true;
var isConstructor$4$1 = !construct$4$1 || fails$m$1(function() {
  var called2;
  return isConstructorModern$1(isConstructorModern$1.call) || !isConstructorModern$1(Object) || !isConstructorModern$1(function() {
    called2 = true;
  }) || called2;
}) ? isConstructorLegacy$1 : isConstructorModern$1;
var isArray$d$1 = isArray$e$1;
var isConstructor$3$1 = isConstructor$4$1;
var isObject$c$1 = isObject$h$1;
var wellKnownSymbol$j$1 = wellKnownSymbol$n;
var SPECIES$5 = wellKnownSymbol$j$1("species");
var $Array$3$1 = Array;
var arraySpeciesConstructor$1$1 = function(originalArray) {
  var C;
  if (isArray$d$1(originalArray)) {
    C = originalArray.constructor;
    if (isConstructor$3$1(C) && (C === $Array$3$1 || isArray$d$1(C.prototype))) C = void 0;
    else if (isObject$c$1(C)) {
      C = C[SPECIES$5];
      if (C === null) C = void 0;
    }
  }
  return C === void 0 ? $Array$3$1 : C;
};
var arraySpeciesConstructor$2 = arraySpeciesConstructor$1$1;
var arraySpeciesCreate$4 = function(originalArray, length2) {
  return new (arraySpeciesConstructor$2(originalArray))(length2 === 0 ? 0 : length2);
};
var fails$l$1 = fails$u$1;
var wellKnownSymbol$i$1 = wellKnownSymbol$n;
var V8_VERSION$2$1 = engineV8Version$1;
var SPECIES$4 = wellKnownSymbol$i$1("species");
var arrayMethodHasSpeciesSupport$5$1 = function(METHOD_NAME) {
  return V8_VERSION$2$1 >= 51 || !fails$l$1(function() {
    var array2 = [];
    var constructor = array2.constructor = {};
    constructor[SPECIES$4] = function() {
      return { foo: 1 };
    };
    return array2[METHOD_NAME](Boolean).foo !== 1;
  });
};
var $$O$1 = _export$1;
var fails$k$1 = fails$u$1;
var isArray$c$1 = isArray$e$1;
var isObject$b$1 = isObject$h$1;
var toObject$c$1 = toObject$e$1;
var lengthOfArrayLike$c$1 = lengthOfArrayLike$d;
var doesNotExceedSafeInteger$3$1 = doesNotExceedSafeInteger$4;
var createProperty$5$1 = createProperty$6$1;
var arraySpeciesCreate$3$1 = arraySpeciesCreate$4;
var arrayMethodHasSpeciesSupport$4$1 = arrayMethodHasSpeciesSupport$5$1;
var wellKnownSymbol$h$1 = wellKnownSymbol$n;
var V8_VERSION$1$1 = engineV8Version$1;
var IS_CONCAT_SPREADABLE$1 = wellKnownSymbol$h$1("isConcatSpreadable");
var IS_CONCAT_SPREADABLE_SUPPORT$1 = V8_VERSION$1$1 >= 51 || !fails$k$1(function() {
  var array2 = [];
  array2[IS_CONCAT_SPREADABLE$1] = false;
  return array2.concat()[0] !== array2;
});
var isConcatSpreadable$1 = function(O) {
  if (!isObject$b$1(O)) return false;
  var spreadable = O[IS_CONCAT_SPREADABLE$1];
  return spreadable !== void 0 ? !!spreadable : isArray$c$1(O);
};
var FORCED$6$1 = !IS_CONCAT_SPREADABLE_SUPPORT$1 || !arrayMethodHasSpeciesSupport$4$1("concat");
$$O$1({ target: "Array", proto: true, arity: 1, forced: FORCED$6$1 }, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  concat: function concat2(arg) {
    var O = toObject$c$1(this);
    var A = arraySpeciesCreate$3$1(O, 0);
    var n2 = 0;
    var i2, k2, length2, len, E;
    for (i2 = -1, length2 = arguments.length; i2 < length2; i2++) {
      E = i2 === -1 ? O : arguments[i2];
      if (isConcatSpreadable$1(E)) {
        len = lengthOfArrayLike$c$1(E);
        doesNotExceedSafeInteger$3$1(n2 + len);
        for (k2 = 0; k2 < len; k2++, n2++) if (k2 in E) createProperty$5$1(A, n2, E[k2]);
      } else {
        doesNotExceedSafeInteger$3$1(n2 + 1);
        createProperty$5$1(A, n2++, E);
      }
    }
    A.length = n2;
    return A;
  }
});
var classof$b$1 = classof$d$1;
var $String$2$1 = String;
var toString$7$1 = function(argument) {
  if (classof$b$1(argument) === "Symbol") throw new TypeError("Cannot convert a Symbol value to a string");
  return $String$2$1(argument);
};
var objectDefineProperties$1 = {};
var toIntegerOrInfinity$2$1 = toIntegerOrInfinity$4$1;
var max$3$1 = Math.max;
var min$1$1 = Math.min;
var toAbsoluteIndex$4$1 = function(index2, length2) {
  var integer = toIntegerOrInfinity$2$1(index2);
  return integer < 0 ? max$3$1(integer + length2, 0) : min$1$1(integer, length2);
};
var toIndexedObject$8$1 = toIndexedObject$a$1;
var toAbsoluteIndex$3$1 = toAbsoluteIndex$4$1;
var lengthOfArrayLike$b$1 = lengthOfArrayLike$d;
var createMethod$3$1 = function(IS_INCLUDES) {
  return function($this, el, fromIndex) {
    var O = toIndexedObject$8$1($this);
    var length2 = lengthOfArrayLike$b$1(O);
    var index2 = toAbsoluteIndex$3$1(fromIndex, length2);
    var value2;
    if (IS_INCLUDES && el !== el) while (length2 > index2) {
      value2 = O[index2++];
      if (value2 !== value2) return true;
    }
    else for (; length2 > index2; index2++) {
      if ((IS_INCLUDES || index2 in O) && O[index2] === el) return IS_INCLUDES || index2 || 0;
    }
    return !IS_INCLUDES && -1;
  };
};
var arrayIncludes$1 = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod$3$1(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod$3$1(false)
};
var hiddenKeys$6$1 = {};
var uncurryThis$g$1 = functionUncurryThis$1;
var hasOwn$g$1 = hasOwnProperty_1$1;
var toIndexedObject$7$1 = toIndexedObject$a$1;
var indexOf$5 = arrayIncludes$1.indexOf;
var hiddenKeys$5$1 = hiddenKeys$6$1;
var push$c = uncurryThis$g$1([].push);
var objectKeysInternal$1 = function(object2, names) {
  var O = toIndexedObject$7$1(object2);
  var i2 = 0;
  var result = [];
  var key2;
  for (key2 in O) !hasOwn$g$1(hiddenKeys$5$1, key2) && hasOwn$g$1(O, key2) && push$c(result, key2);
  while (names.length > i2) if (hasOwn$g$1(O, key2 = names[i2++])) {
    ~indexOf$5(result, key2) || push$c(result, key2);
  }
  return result;
};
var enumBugKeys$3$1 = [
  "constructor",
  "hasOwnProperty",
  "isPrototypeOf",
  "propertyIsEnumerable",
  "toLocaleString",
  "toString",
  "valueOf"
];
var internalObjectKeys$1$1 = objectKeysInternal$1;
var enumBugKeys$2$1 = enumBugKeys$3$1;
var objectKeys$3$1 = Object.keys || function keys2(O) {
  return internalObjectKeys$1$1(O, enumBugKeys$2$1);
};
var DESCRIPTORS$b$1 = descriptors$1;
var V8_PROTOTYPE_DEFINE_BUG$2 = v8PrototypeDefineBug$1;
var definePropertyModule$2$1 = objectDefineProperty$1;
var anObject$b$1 = anObject$d$1;
var toIndexedObject$6$1 = toIndexedObject$a$1;
var objectKeys$2$1 = objectKeys$3$1;
objectDefineProperties$1.f = DESCRIPTORS$b$1 && !V8_PROTOTYPE_DEFINE_BUG$2 ? Object.defineProperties : function defineProperties2(O, Properties) {
  anObject$b$1(O);
  var props = toIndexedObject$6$1(Properties);
  var keys6 = objectKeys$2$1(Properties);
  var length2 = keys6.length;
  var index2 = 0;
  var key2;
  while (length2 > index2) definePropertyModule$2$1.f(O, key2 = keys6[index2++], props[key2]);
  return O;
};
var getBuiltIn$c$1 = getBuiltIn$f;
var html$2 = getBuiltIn$c$1("document", "documentElement");
var shared$5$1 = sharedExports$1;
var uid$2$1 = uid$4$1;
var keys$7 = shared$5$1("keys");
var sharedKey$4$1 = function(key2) {
  return keys$7[key2] || (keys$7[key2] = uid$2$1(key2));
};
var anObject$a$1 = anObject$d$1;
var definePropertiesModule$1$1 = objectDefineProperties$1;
var enumBugKeys$1$1 = enumBugKeys$3$1;
var hiddenKeys$4$1 = hiddenKeys$6$1;
var html$1$1 = html$2;
var documentCreateElement$2 = documentCreateElement$1$1;
var sharedKey$3$1 = sharedKey$4$1;
var GT$1 = ">";
var LT$1 = "<";
var PROTOTYPE$1$1 = "prototype";
var SCRIPT$1 = "script";
var IE_PROTO$1$1 = sharedKey$3$1("IE_PROTO");
var EmptyConstructor$1 = function() {
};
var scriptTag$1 = function(content) {
  return LT$1 + SCRIPT$1 + GT$1 + content + LT$1 + "/" + SCRIPT$1 + GT$1;
};
var NullProtoObjectViaActiveX$1 = function(activeXDocument2) {
  activeXDocument2.write(scriptTag$1(""));
  activeXDocument2.close();
  var temp = activeXDocument2.parentWindow.Object;
  activeXDocument2 = null;
  return temp;
};
var NullProtoObjectViaIFrame$1 = function() {
  var iframe = documentCreateElement$2("iframe");
  var JS = "java" + SCRIPT$1 + ":";
  var iframeDocument;
  iframe.style.display = "none";
  html$1$1.appendChild(iframe);
  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag$1("document.F=Object"));
  iframeDocument.close();
  return iframeDocument.F;
};
var activeXDocument$1;
var NullProtoObject$1 = function() {
  try {
    activeXDocument$1 = new ActiveXObject("htmlfile");
  } catch (error) {
  }
  NullProtoObject$1 = typeof document != "undefined" ? document.domain && activeXDocument$1 ? NullProtoObjectViaActiveX$1(activeXDocument$1) : NullProtoObjectViaIFrame$1() : NullProtoObjectViaActiveX$1(activeXDocument$1);
  var length2 = enumBugKeys$1$1.length;
  while (length2--) delete NullProtoObject$1[PROTOTYPE$1$1][enumBugKeys$1$1[length2]];
  return NullProtoObject$1();
};
hiddenKeys$4$1[IE_PROTO$1$1] = true;
var objectCreate$1 = Object.create || function create2(O, Properties) {
  var result;
  if (O !== null) {
    EmptyConstructor$1[PROTOTYPE$1$1] = anObject$a$1(O);
    result = new EmptyConstructor$1();
    EmptyConstructor$1[PROTOTYPE$1$1] = null;
    result[IE_PROTO$1$1] = O;
  } else result = NullProtoObject$1();
  return Properties === void 0 ? result : definePropertiesModule$1$1.f(result, Properties);
};
var objectGetOwnPropertyNames$1 = {};
var internalObjectKeys$2 = objectKeysInternal$1;
var enumBugKeys$4 = enumBugKeys$3$1;
var hiddenKeys$3$1 = enumBugKeys$4.concat("length", "prototype");
objectGetOwnPropertyNames$1.f = Object.getOwnPropertyNames || function getOwnPropertyNames2(O) {
  return internalObjectKeys$2(O, hiddenKeys$3$1);
};
var objectGetOwnPropertyNamesExternal$1 = {};
var toAbsoluteIndex$2$1 = toAbsoluteIndex$4$1;
var lengthOfArrayLike$a$1 = lengthOfArrayLike$d;
var createProperty$4$1 = createProperty$6$1;
var $Array$2$1 = Array;
var max$2$1 = Math.max;
var arraySliceSimple$1 = function(O, start2, end2) {
  var length2 = lengthOfArrayLike$a$1(O);
  var k2 = toAbsoluteIndex$2$1(start2, length2);
  var fin = toAbsoluteIndex$2$1(end2 === void 0 ? length2 : end2, length2);
  var result = $Array$2$1(max$2$1(fin - k2, 0));
  var n2 = 0;
  for (; k2 < fin; k2++, n2++) createProperty$4$1(result, n2, O[k2]);
  result.length = n2;
  return result;
};
var classof$a$1 = classofRaw$2$1;
var toIndexedObject$5$1 = toIndexedObject$a$1;
var $getOwnPropertyNames$1$1 = objectGetOwnPropertyNames$1.f;
var arraySlice$6 = arraySliceSimple$1;
var windowNames$1 = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
var getWindowNames$1 = function(it2) {
  try {
    return $getOwnPropertyNames$1$1(it2);
  } catch (error) {
    return arraySlice$6(windowNames$1);
  }
};
objectGetOwnPropertyNamesExternal$1.f = function getOwnPropertyNames3(it2) {
  return windowNames$1 && classof$a$1(it2) === "Window" ? getWindowNames$1(it2) : $getOwnPropertyNames$1$1(toIndexedObject$5$1(it2));
};
var objectGetOwnPropertySymbols$1 = {};
objectGetOwnPropertySymbols$1.f = Object.getOwnPropertySymbols;
var createNonEnumerableProperty$7 = createNonEnumerableProperty$9;
var defineBuiltIn$6 = function(target, key2, value2, options) {
  if (options && options.enumerable) target[key2] = value2;
  else createNonEnumerableProperty$7(target, key2, value2);
  return target;
};
var defineProperty$7$1 = objectDefineProperty$1;
var defineBuiltInAccessor$3$1 = function(target, name, descriptor) {
  return defineProperty$7$1.f(target, name, descriptor);
};
var wellKnownSymbolWrapped$1 = {};
var wellKnownSymbol$g$1 = wellKnownSymbol$n;
wellKnownSymbolWrapped$1.f = wellKnownSymbol$g$1;
var path$k$1 = path$o$1;
var hasOwn$f$1 = hasOwnProperty_1$1;
var wrappedWellKnownSymbolModule$1$1 = wellKnownSymbolWrapped$1;
var defineProperty$6$1 = objectDefineProperty$1.f;
var wellKnownSymbolDefine$1 = function(NAME2) {
  var Symbol2 = path$k$1.Symbol || (path$k$1.Symbol = {});
  if (!hasOwn$f$1(Symbol2, NAME2)) defineProperty$6$1(Symbol2, NAME2, {
    value: wrappedWellKnownSymbolModule$1$1.f(NAME2)
  });
};
var call$e$1 = functionCall$1;
var getBuiltIn$b$1 = getBuiltIn$f;
var wellKnownSymbol$f$1 = wellKnownSymbol$n;
var defineBuiltIn$5$1 = defineBuiltIn$6;
var symbolDefineToPrimitive$1 = function() {
  var Symbol2 = getBuiltIn$b$1("Symbol");
  var SymbolPrototype2 = Symbol2 && Symbol2.prototype;
  var valueOf = SymbolPrototype2 && SymbolPrototype2.valueOf;
  var TO_PRIMITIVE2 = wellKnownSymbol$f$1("toPrimitive");
  if (SymbolPrototype2 && !SymbolPrototype2[TO_PRIMITIVE2]) {
    defineBuiltIn$5$1(SymbolPrototype2, TO_PRIMITIVE2, function(hint) {
      return call$e$1(valueOf, this);
    }, { arity: 1 });
  }
};
var TO_STRING_TAG_SUPPORT$1$1 = toStringTagSupport$1;
var classof$9$1 = classof$d$1;
var objectToString$1 = TO_STRING_TAG_SUPPORT$1$1 ? {}.toString : function toString2() {
  return "[object " + classof$9$1(this) + "]";
};
var TO_STRING_TAG_SUPPORT$3 = toStringTagSupport$1;
var defineProperty$5$1 = objectDefineProperty$1.f;
var createNonEnumerableProperty$6$1 = createNonEnumerableProperty$9;
var hasOwn$e$1 = hasOwnProperty_1$1;
var toString$6$1 = objectToString$1;
var wellKnownSymbol$e$1 = wellKnownSymbol$n;
var TO_STRING_TAG$2$1 = wellKnownSymbol$e$1("toStringTag");
var setToStringTag$7 = function(it2, TAG, STATIC, SET_METHOD) {
  if (it2) {
    var target = STATIC ? it2 : it2.prototype;
    if (!hasOwn$e$1(target, TO_STRING_TAG$2$1)) {
      defineProperty$5$1(target, TO_STRING_TAG$2$1, { configurable: true, value: TAG });
    }
    if (SET_METHOD && !TO_STRING_TAG_SUPPORT$3) {
      createNonEnumerableProperty$6$1(target, "toString", toString$6$1);
    }
  }
};
var global$g$1 = global$p;
var isCallable$b$1 = isCallable$m;
var WeakMap$1$1 = global$g$1.WeakMap;
var weakMapBasicDetection$1 = isCallable$b$1(WeakMap$1$1) && /native code/.test(String(WeakMap$1$1));
var NATIVE_WEAK_MAP$2 = weakMapBasicDetection$1;
var global$f$1 = global$p;
var isObject$a$1 = isObject$h$1;
var createNonEnumerableProperty$5$1 = createNonEnumerableProperty$9;
var hasOwn$d$1 = hasOwnProperty_1$1;
var shared$4$1 = sharedStore$1;
var sharedKey$2$1 = sharedKey$4$1;
var hiddenKeys$2$1 = hiddenKeys$6$1;
var OBJECT_ALREADY_INITIALIZED$1 = "Object already initialized";
var TypeError$3 = global$f$1.TypeError;
var WeakMap$3 = global$f$1.WeakMap;
var set$4, get$7, has$1;
var enforce$1 = function(it2) {
  return has$1(it2) ? get$7(it2) : set$4(it2, {});
};
var getterFor$1 = function(TYPE) {
  return function(it2) {
    var state;
    if (!isObject$a$1(it2) || (state = get$7(it2)).type !== TYPE) {
      throw new TypeError$3("Incompatible receiver, " + TYPE + " required");
    }
    return state;
  };
};
if (NATIVE_WEAK_MAP$2 || shared$4$1.state) {
  var store$5 = shared$4$1.state || (shared$4$1.state = new WeakMap$3());
  store$5.get = store$5.get;
  store$5.has = store$5.has;
  store$5.set = store$5.set;
  set$4 = function(it2, metadata) {
    if (store$5.has(it2)) throw new TypeError$3(OBJECT_ALREADY_INITIALIZED$1);
    metadata.facade = it2;
    store$5.set(it2, metadata);
    return metadata;
  };
  get$7 = function(it2) {
    return store$5.get(it2) || {};
  };
  has$1 = function(it2) {
    return store$5.has(it2);
  };
} else {
  var STATE$1 = sharedKey$2$1("state");
  hiddenKeys$2$1[STATE$1] = true;
  set$4 = function(it2, metadata) {
    if (hasOwn$d$1(it2, STATE$1)) throw new TypeError$3(OBJECT_ALREADY_INITIALIZED$1);
    metadata.facade = it2;
    createNonEnumerableProperty$5$1(it2, STATE$1, metadata);
    return metadata;
  };
  get$7 = function(it2) {
    return hasOwn$d$1(it2, STATE$1) ? it2[STATE$1] : {};
  };
  has$1 = function(it2) {
    return hasOwn$d$1(it2, STATE$1);
  };
}
var internalState$1 = {
  set: set$4,
  get: get$7,
  has: has$1,
  enforce: enforce$1,
  getterFor: getterFor$1
};
var bind$g = functionBindContext$1;
var uncurryThis$f$1 = functionUncurryThis$1;
var IndexedObject$2$1 = indexedObject$1;
var toObject$b$1 = toObject$e$1;
var lengthOfArrayLike$9$1 = lengthOfArrayLike$d;
var arraySpeciesCreate$2$1 = arraySpeciesCreate$4;
var push$b$1 = uncurryThis$f$1([].push);
var createMethod$2$1 = function(TYPE) {
  var IS_MAP = TYPE === 1;
  var IS_FILTER = TYPE === 2;
  var IS_SOME = TYPE === 3;
  var IS_EVERY = TYPE === 4;
  var IS_FIND_INDEX = TYPE === 6;
  var IS_FILTER_REJECT = TYPE === 7;
  var NO_HOLES = TYPE === 5 || IS_FIND_INDEX;
  return function($this, callbackfn, that, specificCreate) {
    var O = toObject$b$1($this);
    var self2 = IndexedObject$2$1(O);
    var boundFunction = bind$g(callbackfn, that);
    var length2 = lengthOfArrayLike$9$1(self2);
    var index2 = 0;
    var create8 = specificCreate || arraySpeciesCreate$2$1;
    var target = IS_MAP ? create8($this, length2) : IS_FILTER || IS_FILTER_REJECT ? create8($this, 0) : void 0;
    var value2, result;
    for (; length2 > index2; index2++) if (NO_HOLES || index2 in self2) {
      value2 = self2[index2];
      result = boundFunction(value2, index2, O);
      if (TYPE) {
        if (IS_MAP) target[index2] = result;
        else if (result) switch (TYPE) {
          case 3:
            return true;
          case 5:
            return value2;
          case 6:
            return index2;
          case 2:
            push$b$1(target, value2);
        }
        else switch (TYPE) {
          case 4:
            return false;
          case 7:
            push$b$1(target, value2);
        }
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};
var arrayIteration$1 = {
  // `Array.prototype.forEach` method
  // https://tc39.es/ecma262/#sec-array.prototype.foreach
  forEach: createMethod$2$1(0),
  // `Array.prototype.map` method
  // https://tc39.es/ecma262/#sec-array.prototype.map
  map: createMethod$2$1(1),
  // `Array.prototype.filter` method
  // https://tc39.es/ecma262/#sec-array.prototype.filter
  filter: createMethod$2$1(2),
  // `Array.prototype.some` method
  // https://tc39.es/ecma262/#sec-array.prototype.some
  some: createMethod$2$1(3),
  // `Array.prototype.every` method
  // https://tc39.es/ecma262/#sec-array.prototype.every
  every: createMethod$2$1(4),
  // `Array.prototype.find` method
  // https://tc39.es/ecma262/#sec-array.prototype.find
  find: createMethod$2$1(5),
  // `Array.prototype.findIndex` method
  // https://tc39.es/ecma262/#sec-array.prototype.findIndex
  findIndex: createMethod$2$1(6),
  // `Array.prototype.filterReject` method
  // https://github.com/tc39/proposal-array-filtering
  filterReject: createMethod$2$1(7)
};
var $$N$1 = _export$1;
var global$e$1 = global$p;
var call$d$1 = functionCall$1;
var uncurryThis$e$1 = functionUncurryThis$1;
var DESCRIPTORS$a$1 = descriptors$1;
var NATIVE_SYMBOL$3$1 = symbolConstructorDetection$1;
var fails$j$1 = fails$u$1;
var hasOwn$c$1 = hasOwnProperty_1$1;
var isPrototypeOf$j$1 = objectIsPrototypeOf$1;
var anObject$9$1 = anObject$d$1;
var toIndexedObject$4$1 = toIndexedObject$a$1;
var toPropertyKey$5 = toPropertyKey$4$1;
var $toString$1 = toString$7$1;
var createPropertyDescriptor$3$1 = createPropertyDescriptor$7;
var nativeObjectCreate$1 = objectCreate$1;
var objectKeys$1$1 = objectKeys$3$1;
var getOwnPropertyNamesModule$2$1 = objectGetOwnPropertyNames$1;
var getOwnPropertyNamesExternal$1 = objectGetOwnPropertyNamesExternal$1;
var getOwnPropertySymbolsModule$3$1 = objectGetOwnPropertySymbols$1;
var getOwnPropertyDescriptorModule$2$1 = objectGetOwnPropertyDescriptor$1;
var definePropertyModule$1$1 = objectDefineProperty$1;
var definePropertiesModule$2 = objectDefineProperties$1;
var propertyIsEnumerableModule$1$1 = objectPropertyIsEnumerable$1;
var defineBuiltIn$4$1 = defineBuiltIn$6;
var defineBuiltInAccessor$2$1 = defineBuiltInAccessor$3$1;
var shared$3$1 = sharedExports$1;
var sharedKey$1$1 = sharedKey$4$1;
var hiddenKeys$1$1 = hiddenKeys$6$1;
var uid$1$1 = uid$4$1;
var wellKnownSymbol$d$1 = wellKnownSymbol$n;
var wrappedWellKnownSymbolModule$2 = wellKnownSymbolWrapped$1;
var defineWellKnownSymbol$l$1 = wellKnownSymbolDefine$1;
var defineSymbolToPrimitive$1$1 = symbolDefineToPrimitive$1;
var setToStringTag$6$1 = setToStringTag$7;
var InternalStateModule$5$1 = internalState$1;
var $forEach$1$1 = arrayIteration$1.forEach;
var HIDDEN$1 = sharedKey$1$1("hidden");
var SYMBOL$1 = "Symbol";
var PROTOTYPE$2 = "prototype";
var setInternalState$5$1 = InternalStateModule$5$1.set;
var getInternalState$2$1 = InternalStateModule$5$1.getterFor(SYMBOL$1);
var ObjectPrototype$2$1 = Object[PROTOTYPE$2];
var $Symbol$1 = global$e$1.Symbol;
var SymbolPrototype$1 = $Symbol$1 && $Symbol$1[PROTOTYPE$2];
var RangeError$2 = global$e$1.RangeError;
var TypeError$2$1 = global$e$1.TypeError;
var QObject$1 = global$e$1.QObject;
var nativeGetOwnPropertyDescriptor$1$1 = getOwnPropertyDescriptorModule$2$1.f;
var nativeDefineProperty$1 = definePropertyModule$1$1.f;
var nativeGetOwnPropertyNames$1 = getOwnPropertyNamesExternal$1.f;
var nativePropertyIsEnumerable$1 = propertyIsEnumerableModule$1$1.f;
var push$a$1 = uncurryThis$e$1([].push);
var AllSymbols$1 = shared$3$1("symbols");
var ObjectPrototypeSymbols$1 = shared$3$1("op-symbols");
var WellKnownSymbolsStore$1$1 = shared$3$1("wks");
var USE_SETTER$1 = !QObject$1 || !QObject$1[PROTOTYPE$2] || !QObject$1[PROTOTYPE$2].findChild;
var fallbackDefineProperty$1 = function(O, P, Attributes) {
  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$1$1(ObjectPrototype$2$1, P);
  if (ObjectPrototypeDescriptor) delete ObjectPrototype$2$1[P];
  nativeDefineProperty$1(O, P, Attributes);
  if (ObjectPrototypeDescriptor && O !== ObjectPrototype$2$1) {
    nativeDefineProperty$1(ObjectPrototype$2$1, P, ObjectPrototypeDescriptor);
  }
};
var setSymbolDescriptor$1 = DESCRIPTORS$a$1 && fails$j$1(function() {
  return nativeObjectCreate$1(nativeDefineProperty$1({}, "a", {
    get: function() {
      return nativeDefineProperty$1(this, "a", { value: 7 }).a;
    }
  })).a !== 7;
}) ? fallbackDefineProperty$1 : nativeDefineProperty$1;
var wrap$1 = function(tag2, description) {
  var symbol2 = AllSymbols$1[tag2] = nativeObjectCreate$1(SymbolPrototype$1);
  setInternalState$5$1(symbol2, {
    type: SYMBOL$1,
    tag: tag2,
    description
  });
  if (!DESCRIPTORS$a$1) symbol2.description = description;
  return symbol2;
};
var $defineProperty$2 = function defineProperty5(O, P, Attributes) {
  if (O === ObjectPrototype$2$1) $defineProperty$2(ObjectPrototypeSymbols$1, P, Attributes);
  anObject$9$1(O);
  var key2 = toPropertyKey$5(P);
  anObject$9$1(Attributes);
  if (hasOwn$c$1(AllSymbols$1, key2)) {
    if (!Attributes.enumerable) {
      if (!hasOwn$c$1(O, HIDDEN$1)) nativeDefineProperty$1(O, HIDDEN$1, createPropertyDescriptor$3$1(1, {}));
      O[HIDDEN$1][key2] = true;
    } else {
      if (hasOwn$c$1(O, HIDDEN$1) && O[HIDDEN$1][key2]) O[HIDDEN$1][key2] = false;
      Attributes = nativeObjectCreate$1(Attributes, { enumerable: createPropertyDescriptor$3$1(0, false) });
    }
    return setSymbolDescriptor$1(O, key2, Attributes);
  }
  return nativeDefineProperty$1(O, key2, Attributes);
};
var $defineProperties$1 = function defineProperties3(O, Properties) {
  anObject$9$1(O);
  var properties = toIndexedObject$4$1(Properties);
  var keys6 = objectKeys$1$1(properties).concat($getOwnPropertySymbols$1(properties));
  $forEach$1$1(keys6, function(key2) {
    if (!DESCRIPTORS$a$1 || call$d$1($propertyIsEnumerable$2, properties, key2)) $defineProperty$2(O, key2, properties[key2]);
  });
  return O;
};
var $create$1 = function create3(O, Properties) {
  return Properties === void 0 ? nativeObjectCreate$1(O) : $defineProperties$1(nativeObjectCreate$1(O), Properties);
};
var $propertyIsEnumerable$2 = function propertyIsEnumerable2(V) {
  var P = toPropertyKey$5(V);
  var enumerable = call$d$1(nativePropertyIsEnumerable$1, this, P);
  if (this === ObjectPrototype$2$1 && hasOwn$c$1(AllSymbols$1, P) && !hasOwn$c$1(ObjectPrototypeSymbols$1, P)) return false;
  return enumerable || !hasOwn$c$1(this, P) || !hasOwn$c$1(AllSymbols$1, P) || hasOwn$c$1(this, HIDDEN$1) && this[HIDDEN$1][P] ? enumerable : true;
};
var $getOwnPropertyDescriptor$3 = function getOwnPropertyDescriptor3(O, P) {
  var it2 = toIndexedObject$4$1(O);
  var key2 = toPropertyKey$5(P);
  if (it2 === ObjectPrototype$2$1 && hasOwn$c$1(AllSymbols$1, key2) && !hasOwn$c$1(ObjectPrototypeSymbols$1, key2)) return;
  var descriptor = nativeGetOwnPropertyDescriptor$1$1(it2, key2);
  if (descriptor && hasOwn$c$1(AllSymbols$1, key2) && !(hasOwn$c$1(it2, HIDDEN$1) && it2[HIDDEN$1][key2])) {
    descriptor.enumerable = true;
  }
  return descriptor;
};
var $getOwnPropertyNames$2 = function getOwnPropertyNames4(O) {
  var names = nativeGetOwnPropertyNames$1(toIndexedObject$4$1(O));
  var result = [];
  $forEach$1$1(names, function(key2) {
    if (!hasOwn$c$1(AllSymbols$1, key2) && !hasOwn$c$1(hiddenKeys$1$1, key2)) push$a$1(result, key2);
  });
  return result;
};
var $getOwnPropertySymbols$1 = function(O) {
  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype$2$1;
  var names = nativeGetOwnPropertyNames$1(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols$1 : toIndexedObject$4$1(O));
  var result = [];
  $forEach$1$1(names, function(key2) {
    if (hasOwn$c$1(AllSymbols$1, key2) && (!IS_OBJECT_PROTOTYPE || hasOwn$c$1(ObjectPrototype$2$1, key2))) {
      push$a$1(result, AllSymbols$1[key2]);
    }
  });
  return result;
};
if (!NATIVE_SYMBOL$3$1) {
  $Symbol$1 = function Symbol2() {
    if (isPrototypeOf$j$1(SymbolPrototype$1, this)) throw new TypeError$2$1("Symbol is not a constructor");
    var description = !arguments.length || arguments[0] === void 0 ? void 0 : $toString$1(arguments[0]);
    var tag2 = uid$1$1(description);
    var setter = function(value2) {
      var $this = this === void 0 ? global$e$1 : this;
      if ($this === ObjectPrototype$2$1) call$d$1(setter, ObjectPrototypeSymbols$1, value2);
      if (hasOwn$c$1($this, HIDDEN$1) && hasOwn$c$1($this[HIDDEN$1], tag2)) $this[HIDDEN$1][tag2] = false;
      var descriptor = createPropertyDescriptor$3$1(1, value2);
      try {
        setSymbolDescriptor$1($this, tag2, descriptor);
      } catch (error) {
        if (!(error instanceof RangeError$2)) throw error;
        fallbackDefineProperty$1($this, tag2, descriptor);
      }
    };
    if (DESCRIPTORS$a$1 && USE_SETTER$1) setSymbolDescriptor$1(ObjectPrototype$2$1, tag2, { configurable: true, set: setter });
    return wrap$1(tag2, description);
  };
  SymbolPrototype$1 = $Symbol$1[PROTOTYPE$2];
  defineBuiltIn$4$1(SymbolPrototype$1, "toString", function toString4() {
    return getInternalState$2$1(this).tag;
  });
  defineBuiltIn$4$1($Symbol$1, "withoutSetter", function(description) {
    return wrap$1(uid$1$1(description), description);
  });
  propertyIsEnumerableModule$1$1.f = $propertyIsEnumerable$2;
  definePropertyModule$1$1.f = $defineProperty$2;
  definePropertiesModule$2.f = $defineProperties$1;
  getOwnPropertyDescriptorModule$2$1.f = $getOwnPropertyDescriptor$3;
  getOwnPropertyNamesModule$2$1.f = getOwnPropertyNamesExternal$1.f = $getOwnPropertyNames$2;
  getOwnPropertySymbolsModule$3$1.f = $getOwnPropertySymbols$1;
  wrappedWellKnownSymbolModule$2.f = function(name) {
    return wrap$1(wellKnownSymbol$d$1(name), name);
  };
  if (DESCRIPTORS$a$1) {
    defineBuiltInAccessor$2$1(SymbolPrototype$1, "description", {
      configurable: true,
      get: function description() {
        return getInternalState$2$1(this).description;
      }
    });
  }
}
$$N$1({ global: true, constructor: true, wrap: true, forced: !NATIVE_SYMBOL$3$1, sham: !NATIVE_SYMBOL$3$1 }, {
  Symbol: $Symbol$1
});
$forEach$1$1(objectKeys$1$1(WellKnownSymbolsStore$1$1), function(name) {
  defineWellKnownSymbol$l$1(name);
});
$$N$1({ target: SYMBOL$1, stat: true, forced: !NATIVE_SYMBOL$3$1 }, {
  useSetter: function() {
    USE_SETTER$1 = true;
  },
  useSimple: function() {
    USE_SETTER$1 = false;
  }
});
$$N$1({ target: "Object", stat: true, forced: !NATIVE_SYMBOL$3$1, sham: !DESCRIPTORS$a$1 }, {
  // `Object.create` method
  // https://tc39.es/ecma262/#sec-object.create
  create: $create$1,
  // `Object.defineProperty` method
  // https://tc39.es/ecma262/#sec-object.defineproperty
  defineProperty: $defineProperty$2,
  // `Object.defineProperties` method
  // https://tc39.es/ecma262/#sec-object.defineproperties
  defineProperties: $defineProperties$1,
  // `Object.getOwnPropertyDescriptor` method
  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor$3
});
$$N$1({ target: "Object", stat: true, forced: !NATIVE_SYMBOL$3$1 }, {
  // `Object.getOwnPropertyNames` method
  // https://tc39.es/ecma262/#sec-object.getownpropertynames
  getOwnPropertyNames: $getOwnPropertyNames$2
});
defineSymbolToPrimitive$1$1();
setToStringTag$6$1($Symbol$1, SYMBOL$1);
hiddenKeys$1$1[HIDDEN$1] = true;
var NATIVE_SYMBOL$2$1 = symbolConstructorDetection$1;
var symbolRegistryDetection$1 = NATIVE_SYMBOL$2$1 && !!Symbol["for"] && !!Symbol.keyFor;
var $$M$1 = _export$1;
var getBuiltIn$a$1 = getBuiltIn$f;
var hasOwn$b$1 = hasOwnProperty_1$1;
var toString$5$1 = toString$7$1;
var shared$2$1 = sharedExports$1;
var NATIVE_SYMBOL_REGISTRY$1$1 = symbolRegistryDetection$1;
var StringToSymbolRegistry$1 = shared$2$1("string-to-symbol-registry");
var SymbolToStringRegistry$1$1 = shared$2$1("symbol-to-string-registry");
$$M$1({ target: "Symbol", stat: true, forced: !NATIVE_SYMBOL_REGISTRY$1$1 }, {
  "for": function(key2) {
    var string2 = toString$5$1(key2);
    if (hasOwn$b$1(StringToSymbolRegistry$1, string2)) return StringToSymbolRegistry$1[string2];
    var symbol2 = getBuiltIn$a$1("Symbol")(string2);
    StringToSymbolRegistry$1[string2] = symbol2;
    SymbolToStringRegistry$1$1[symbol2] = string2;
    return symbol2;
  }
});
var $$L$1 = _export$1;
var hasOwn$a$1 = hasOwnProperty_1$1;
var isSymbol$2$1 = isSymbol$5$1;
var tryToString$4$1 = tryToString$6$1;
var shared$1$1 = sharedExports$1;
var NATIVE_SYMBOL_REGISTRY$2 = symbolRegistryDetection$1;
var SymbolToStringRegistry$2 = shared$1$1("symbol-to-string-registry");
$$L$1({ target: "Symbol", stat: true, forced: !NATIVE_SYMBOL_REGISTRY$2 }, {
  keyFor: function keyFor2(sym) {
    if (!isSymbol$2$1(sym)) throw new TypeError(tryToString$4$1(sym) + " is not a symbol");
    if (hasOwn$a$1(SymbolToStringRegistry$2, sym)) return SymbolToStringRegistry$2[sym];
  }
});
var uncurryThis$d$1 = functionUncurryThis$1;
var arraySlice$5$1 = uncurryThis$d$1([].slice);
var uncurryThis$c$1 = functionUncurryThis$1;
var isArray$b$1 = isArray$e$1;
var isCallable$a$1 = isCallable$m;
var classof$8$1 = classofRaw$2$1;
var toString$4$1 = toString$7$1;
var push$9$1 = uncurryThis$c$1([].push);
var getJsonReplacerFunction$1 = function(replacer2) {
  if (isCallable$a$1(replacer2)) return replacer2;
  if (!isArray$b$1(replacer2)) return;
  var rawLength = replacer2.length;
  var keys6 = [];
  for (var i2 = 0; i2 < rawLength; i2++) {
    var element = replacer2[i2];
    if (typeof element == "string") push$9$1(keys6, element);
    else if (typeof element == "number" || classof$8$1(element) === "Number" || classof$8$1(element) === "String") push$9$1(keys6, toString$4$1(element));
  }
  var keysLength = keys6.length;
  var root = true;
  return function(key2, value2) {
    if (root) {
      root = false;
      return value2;
    }
    if (isArray$b$1(this)) return value2;
    for (var j2 = 0; j2 < keysLength; j2++) if (keys6[j2] === key2) return value2;
  };
};
var $$K$1 = _export$1;
var getBuiltIn$9$1 = getBuiltIn$f;
var apply$4$1 = functionApply$1;
var call$c$1 = functionCall$1;
var uncurryThis$b$1 = functionUncurryThis$1;
var fails$i$1 = fails$u$1;
var isCallable$9$1 = isCallable$m;
var isSymbol$1$1 = isSymbol$5$1;
var arraySlice$4$1 = arraySlice$5$1;
var getReplacerFunction$1 = getJsonReplacerFunction$1;
var NATIVE_SYMBOL$1$1 = symbolConstructorDetection$1;
var $String$1$1 = String;
var $stringify$1 = getBuiltIn$9$1("JSON", "stringify");
var exec$3 = uncurryThis$b$1(/./.exec);
var charAt$2$1 = uncurryThis$b$1("".charAt);
var charCodeAt$1$1 = uncurryThis$b$1("".charCodeAt);
var replace$1$1 = uncurryThis$b$1("".replace);
var numberToString$1 = uncurryThis$b$1(1 .toString);
var tester$1 = /[\uD800-\uDFFF]/g;
var low$1 = /^[\uD800-\uDBFF]$/;
var hi$1 = /^[\uDC00-\uDFFF]$/;
var WRONG_SYMBOLS_CONVERSION$1 = !NATIVE_SYMBOL$1$1 || fails$i$1(function() {
  var symbol2 = getBuiltIn$9$1("Symbol")("stringify detection");
  return $stringify$1([symbol2]) !== "[null]" || $stringify$1({ a: symbol2 }) !== "{}" || $stringify$1(Object(symbol2)) !== "{}";
});
var ILL_FORMED_UNICODE$1 = fails$i$1(function() {
  return $stringify$1("\uDF06\uD834") !== '"\\udf06\\ud834"' || $stringify$1("\uDEAD") !== '"\\udead"';
});
var stringifyWithSymbolsFix$1 = function(it2, replacer2) {
  var args = arraySlice$4$1(arguments);
  var $replacer = getReplacerFunction$1(replacer2);
  if (!isCallable$9$1($replacer) && (it2 === void 0 || isSymbol$1$1(it2))) return;
  args[1] = function(key2, value2) {
    if (isCallable$9$1($replacer)) value2 = call$c$1($replacer, this, $String$1$1(key2), value2);
    if (!isSymbol$1$1(value2)) return value2;
  };
  return apply$4$1($stringify$1, null, args);
};
var fixIllFormed$1 = function(match2, offset2, string2) {
  var prev = charAt$2$1(string2, offset2 - 1);
  var next4 = charAt$2$1(string2, offset2 + 1);
  if (exec$3(low$1, match2) && !exec$3(hi$1, next4) || exec$3(hi$1, match2) && !exec$3(low$1, prev)) {
    return "\\u" + numberToString$1(charCodeAt$1$1(match2, 0), 16);
  }
  return match2;
};
if ($stringify$1) {
  $$K$1({ target: "JSON", stat: true, arity: 3, forced: WRONG_SYMBOLS_CONVERSION$1 || ILL_FORMED_UNICODE$1 }, {
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    stringify: function stringify4(it2, replacer2, space) {
      var args = arraySlice$4$1(arguments);
      var result = apply$4$1(WRONG_SYMBOLS_CONVERSION$1 ? stringifyWithSymbolsFix$1 : $stringify$1, null, args);
      return ILL_FORMED_UNICODE$1 && typeof result == "string" ? replace$1$1(result, tester$1, fixIllFormed$1) : result;
    }
  });
}
var $$J$1 = _export$1;
var NATIVE_SYMBOL$6 = symbolConstructorDetection$1;
var fails$h$1 = fails$u$1;
var getOwnPropertySymbolsModule$2$1 = objectGetOwnPropertySymbols$1;
var toObject$a$1 = toObject$e$1;
var FORCED$5$1 = !NATIVE_SYMBOL$6 || fails$h$1(function() {
  getOwnPropertySymbolsModule$2$1.f(1);
});
$$J$1({ target: "Object", stat: true, forced: FORCED$5$1 }, {
  getOwnPropertySymbols: function getOwnPropertySymbols2(it2) {
    var $getOwnPropertySymbols2 = getOwnPropertySymbolsModule$2$1.f;
    return $getOwnPropertySymbols2 ? $getOwnPropertySymbols2(toObject$a$1(it2)) : [];
  }
});
var defineWellKnownSymbol$k$1 = wellKnownSymbolDefine$1;
defineWellKnownSymbol$k$1("asyncIterator");
var defineWellKnownSymbol$j$1 = wellKnownSymbolDefine$1;
defineWellKnownSymbol$j$1("hasInstance");
var defineWellKnownSymbol$i$1 = wellKnownSymbolDefine$1;
defineWellKnownSymbol$i$1("isConcatSpreadable");
var defineWellKnownSymbol$h$1 = wellKnownSymbolDefine$1;
defineWellKnownSymbol$h$1("iterator");
var defineWellKnownSymbol$g$1 = wellKnownSymbolDefine$1;
defineWellKnownSymbol$g$1("match");
var defineWellKnownSymbol$f$1 = wellKnownSymbolDefine$1;
defineWellKnownSymbol$f$1("matchAll");
var defineWellKnownSymbol$e$1 = wellKnownSymbolDefine$1;
defineWellKnownSymbol$e$1("replace");
var defineWellKnownSymbol$d$1 = wellKnownSymbolDefine$1;
defineWellKnownSymbol$d$1("search");
var defineWellKnownSymbol$c$1 = wellKnownSymbolDefine$1;
defineWellKnownSymbol$c$1("species");
var defineWellKnownSymbol$b$1 = wellKnownSymbolDefine$1;
defineWellKnownSymbol$b$1("split");
var defineWellKnownSymbol$a$1 = wellKnownSymbolDefine$1;
var defineSymbolToPrimitive$2 = symbolDefineToPrimitive$1;
defineWellKnownSymbol$a$1("toPrimitive");
defineSymbolToPrimitive$2();
var getBuiltIn$8$1 = getBuiltIn$f;
var defineWellKnownSymbol$9$1 = wellKnownSymbolDefine$1;
var setToStringTag$5$1 = setToStringTag$7;
defineWellKnownSymbol$9$1("toStringTag");
setToStringTag$5$1(getBuiltIn$8$1("Symbol"), "Symbol");
var defineWellKnownSymbol$8$1 = wellKnownSymbolDefine$1;
defineWellKnownSymbol$8$1("unscopables");
var global$d$1 = global$p;
var setToStringTag$4$1 = setToStringTag$7;
setToStringTag$4$1(global$d$1.JSON, "JSON", true);
var path$j$1 = path$o$1;
var symbol$5$1 = path$j$1.Symbol;
var iterators$1 = {};
var DESCRIPTORS$9$1 = descriptors$1;
var hasOwn$9$1 = hasOwnProperty_1$1;
var FunctionPrototype$2$1 = Function.prototype;
var getDescriptor$1 = DESCRIPTORS$9$1 && Object.getOwnPropertyDescriptor;
var EXISTS$2 = hasOwn$9$1(FunctionPrototype$2$1, "name");
var PROPER$1 = EXISTS$2 && (function something() {
}).name === "something";
var CONFIGURABLE$2 = EXISTS$2 && (!DESCRIPTORS$9$1 || DESCRIPTORS$9$1 && getDescriptor$1(FunctionPrototype$2$1, "name").configurable);
var functionName$1 = {
  EXISTS: EXISTS$2,
  PROPER: PROPER$1,
  CONFIGURABLE: CONFIGURABLE$2
};
var fails$g$1 = fails$u$1;
var correctPrototypeGetter$1 = !fails$g$1(function() {
  function F() {
  }
  F.prototype.constructor = null;
  return Object.getPrototypeOf(new F()) !== F.prototype;
});
var hasOwn$8$1 = hasOwnProperty_1$1;
var isCallable$8$1 = isCallable$m;
var toObject$9$1 = toObject$e$1;
var sharedKey$5 = sharedKey$4$1;
var CORRECT_PROTOTYPE_GETTER$1$1 = correctPrototypeGetter$1;
var IE_PROTO$2 = sharedKey$5("IE_PROTO");
var $Object$6 = Object;
var ObjectPrototype$1$1 = $Object$6.prototype;
var objectGetPrototypeOf$1 = CORRECT_PROTOTYPE_GETTER$1$1 ? $Object$6.getPrototypeOf : function(O) {
  var object2 = toObject$9$1(O);
  if (hasOwn$8$1(object2, IE_PROTO$2)) return object2[IE_PROTO$2];
  var constructor = object2.constructor;
  if (isCallable$8$1(constructor) && object2 instanceof constructor) {
    return constructor.prototype;
  }
  return object2 instanceof $Object$6 ? ObjectPrototype$1$1 : null;
};
var fails$f$1 = fails$u$1;
var isCallable$7$1 = isCallable$m;
var isObject$9$1 = isObject$h$1;
var create$b = objectCreate$1;
var getPrototypeOf$7$1 = objectGetPrototypeOf$1;
var defineBuiltIn$3$1 = defineBuiltIn$6;
var wellKnownSymbol$c$1 = wellKnownSymbol$n;
var ITERATOR$4$1 = wellKnownSymbol$c$1("iterator");
var BUGGY_SAFARI_ITERATORS$1$1 = false;
var IteratorPrototype$1$1, PrototypeOfArrayIteratorPrototype$1, arrayIterator$1;
if ([].keys) {
  arrayIterator$1 = [].keys();
  if (!("next" in arrayIterator$1)) BUGGY_SAFARI_ITERATORS$1$1 = true;
  else {
    PrototypeOfArrayIteratorPrototype$1 = getPrototypeOf$7$1(getPrototypeOf$7$1(arrayIterator$1));
    if (PrototypeOfArrayIteratorPrototype$1 !== Object.prototype) IteratorPrototype$1$1 = PrototypeOfArrayIteratorPrototype$1;
  }
}
var NEW_ITERATOR_PROTOTYPE$1 = !isObject$9$1(IteratorPrototype$1$1) || fails$f$1(function() {
  var test2 = {};
  return IteratorPrototype$1$1[ITERATOR$4$1].call(test2) !== test2;
});
if (NEW_ITERATOR_PROTOTYPE$1) IteratorPrototype$1$1 = {};
else IteratorPrototype$1$1 = create$b(IteratorPrototype$1$1);
if (!isCallable$7$1(IteratorPrototype$1$1[ITERATOR$4$1])) {
  defineBuiltIn$3$1(IteratorPrototype$1$1, ITERATOR$4$1, function() {
    return this;
  });
}
var iteratorsCore$1 = {
  IteratorPrototype: IteratorPrototype$1$1,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS$1$1
};
var IteratorPrototype$2 = iteratorsCore$1.IteratorPrototype;
var create$a$1 = objectCreate$1;
var createPropertyDescriptor$2$1 = createPropertyDescriptor$7;
var setToStringTag$3$1 = setToStringTag$7;
var Iterators$5$1 = iterators$1;
var returnThis$1$1 = function() {
  return this;
};
var iteratorCreateConstructor$1 = function(IteratorConstructor, NAME2, next4, ENUMERABLE_NEXT) {
  var TO_STRING_TAG2 = NAME2 + " Iterator";
  IteratorConstructor.prototype = create$a$1(IteratorPrototype$2, { next: createPropertyDescriptor$2$1(+!ENUMERABLE_NEXT, next4) });
  setToStringTag$3$1(IteratorConstructor, TO_STRING_TAG2, false, true);
  Iterators$5$1[TO_STRING_TAG2] = returnThis$1$1;
  return IteratorConstructor;
};
var uncurryThis$a$1 = functionUncurryThis$1;
var aCallable$b = aCallable$e;
var functionUncurryThisAccessor$1 = function(object2, key2, method2) {
  try {
    return uncurryThis$a$1(aCallable$b(Object.getOwnPropertyDescriptor(object2, key2)[method2]));
  } catch (error) {
  }
};
var isCallable$6$1 = isCallable$m;
var $String$6 = String;
var $TypeError$9$1 = TypeError;
var aPossiblePrototype$1$1 = function(argument) {
  if (typeof argument == "object" || isCallable$6$1(argument)) return argument;
  throw new $TypeError$9$1("Can't set " + $String$6(argument) + " as a prototype");
};
var uncurryThisAccessor$1 = functionUncurryThisAccessor$1;
var anObject$8$1 = anObject$d$1;
var aPossiblePrototype$2 = aPossiblePrototype$1$1;
var objectSetPrototypeOf$1 = Object.setPrototypeOf || ("__proto__" in {} ? function() {
  var CORRECT_SETTER = false;
  var test2 = {};
  var setter;
  try {
    setter = uncurryThisAccessor$1(Object.prototype, "__proto__", "set");
    setter(test2, []);
    CORRECT_SETTER = test2 instanceof Array;
  } catch (error) {
  }
  return function setPrototypeOf2(O, proto) {
    anObject$8$1(O);
    aPossiblePrototype$2(proto);
    if (CORRECT_SETTER) setter(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : void 0);
var $$I$1 = _export$1;
var call$b$1 = functionCall$1;
var FunctionName$1 = functionName$1;
var createIteratorConstructor$1 = iteratorCreateConstructor$1;
var getPrototypeOf$6$1 = objectGetPrototypeOf$1;
var setToStringTag$2$1 = setToStringTag$7;
var defineBuiltIn$2$1 = defineBuiltIn$6;
var wellKnownSymbol$b$1 = wellKnownSymbol$n;
var Iterators$4$1 = iterators$1;
var IteratorsCore$1 = iteratorsCore$1;
var PROPER_FUNCTION_NAME$1 = FunctionName$1.PROPER;
var BUGGY_SAFARI_ITERATORS$2 = IteratorsCore$1.BUGGY_SAFARI_ITERATORS;
var ITERATOR$3$1 = wellKnownSymbol$b$1("iterator");
var KEYS$1 = "keys";
var VALUES$1 = "values";
var ENTRIES$1 = "entries";
var returnThis$2 = function() {
  return this;
};
var iteratorDefine$1 = function(Iterable, NAME2, IteratorConstructor, next4, DEFAULT, IS_SET, FORCED2) {
  createIteratorConstructor$1(IteratorConstructor, NAME2, next4);
  var getIterationMethod = function(KIND) {
    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS$2 && KIND && KIND in IterablePrototype) return IterablePrototype[KIND];
    switch (KIND) {
      case KEYS$1:
        return function keys6() {
          return new IteratorConstructor(this, KIND);
        };
      case VALUES$1:
        return function values2() {
          return new IteratorConstructor(this, KIND);
        };
      case ENTRIES$1:
        return function entries2() {
          return new IteratorConstructor(this, KIND);
        };
    }
    return function() {
      return new IteratorConstructor(this);
    };
  };
  var TO_STRING_TAG2 = NAME2 + " Iterator";
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR$3$1] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS$2 && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME2 === "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY;
  if (anyNativeIterator) {
    CurrentIteratorPrototype = getPrototypeOf$6$1(anyNativeIterator.call(new Iterable()));
    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      setToStringTag$2$1(CurrentIteratorPrototype, TO_STRING_TAG2, true, true);
      Iterators$4$1[TO_STRING_TAG2] = returnThis$2;
    }
  }
  if (PROPER_FUNCTION_NAME$1 && DEFAULT === VALUES$1 && nativeIterator && nativeIterator.name !== VALUES$1) {
    {
      INCORRECT_VALUES_NAME = true;
      defaultIterator = function values2() {
        return call$b$1(nativeIterator, this);
      };
    }
  }
  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES$1),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS$1),
      entries: getIterationMethod(ENTRIES$1)
    };
    if (FORCED2) for (KEY in methods) {
      if (BUGGY_SAFARI_ITERATORS$2 || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
        defineBuiltIn$2$1(IterablePrototype, KEY, methods[KEY]);
      }
    }
    else $$I$1({ target: NAME2, proto: true, forced: BUGGY_SAFARI_ITERATORS$2 || INCORRECT_VALUES_NAME }, methods);
  }
  if (FORCED2 && IterablePrototype[ITERATOR$3$1] !== defaultIterator) {
    defineBuiltIn$2$1(IterablePrototype, ITERATOR$3$1, defaultIterator, { name: DEFAULT });
  }
  Iterators$4$1[NAME2] = defaultIterator;
  return methods;
};
var createIterResultObject$3$1 = function(value2, done) {
  return { value: value2, done };
};
var toIndexedObject$3$1 = toIndexedObject$a$1;
var Iterators$3$1 = iterators$1;
var InternalStateModule$4$1 = internalState$1;
objectDefineProperty$1.f;
var defineIterator$2$1 = iteratorDefine$1;
var createIterResultObject$2$1 = createIterResultObject$3$1;
var ARRAY_ITERATOR$1 = "Array Iterator";
var setInternalState$4$1 = InternalStateModule$4$1.set;
var getInternalState$1$1 = InternalStateModule$4$1.getterFor(ARRAY_ITERATOR$1);
defineIterator$2$1(Array, "Array", function(iterated, kind) {
  setInternalState$4$1(this, {
    type: ARRAY_ITERATOR$1,
    target: toIndexedObject$3$1(iterated),
    // target
    index: 0,
    // next index
    kind
    // kind
  });
}, function() {
  var state = getInternalState$1$1(this);
  var target = state.target;
  var index2 = state.index++;
  if (!target || index2 >= target.length) {
    state.target = void 0;
    return createIterResultObject$2$1(void 0, true);
  }
  switch (state.kind) {
    case "keys":
      return createIterResultObject$2$1(index2, false);
    case "values":
      return createIterResultObject$2$1(target[index2], false);
  }
  return createIterResultObject$2$1([index2, target[index2]], false);
}, "values");
Iterators$3$1.Arguments = Iterators$3$1.Array;
var domIterables$1 = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};
var DOMIterables$4 = domIterables$1;
var global$c$1 = global$p;
var classof$7$1 = classof$d$1;
var createNonEnumerableProperty$4$1 = createNonEnumerableProperty$9;
var Iterators$2$1 = iterators$1;
var wellKnownSymbol$a$1 = wellKnownSymbol$n;
var TO_STRING_TAG$1$1 = wellKnownSymbol$a$1("toStringTag");
for (var COLLECTION_NAME$1 in DOMIterables$4) {
  var Collection$1 = global$c$1[COLLECTION_NAME$1];
  var CollectionPrototype$1 = Collection$1 && Collection$1.prototype;
  if (CollectionPrototype$1 && classof$7$1(CollectionPrototype$1) !== TO_STRING_TAG$1$1) {
    createNonEnumerableProperty$4$1(CollectionPrototype$1, TO_STRING_TAG$1$1, COLLECTION_NAME$1);
  }
  Iterators$2$1[COLLECTION_NAME$1] = Iterators$2$1.Array;
}
var parent$15$1 = symbol$5$1;
var symbol$4$1 = parent$15$1;
var wellKnownSymbol$9$1 = wellKnownSymbol$n;
var defineProperty$4$1 = objectDefineProperty$1.f;
var METADATA$1$1 = wellKnownSymbol$9$1("metadata");
var FunctionPrototype$1$1 = Function.prototype;
if (FunctionPrototype$1$1[METADATA$1$1] === void 0) {
  defineProperty$4$1(FunctionPrototype$1$1, METADATA$1$1, {
    value: null
  });
}
var defineWellKnownSymbol$7$1 = wellKnownSymbolDefine$1;
defineWellKnownSymbol$7$1("asyncDispose");
var defineWellKnownSymbol$6$1 = wellKnownSymbolDefine$1;
defineWellKnownSymbol$6$1("dispose");
var defineWellKnownSymbol$5$1 = wellKnownSymbolDefine$1;
defineWellKnownSymbol$5$1("metadata");
var parent$14$1 = symbol$4$1;
var symbol$3$1 = parent$14$1;
var getBuiltIn$7$1 = getBuiltIn$f;
var uncurryThis$9$1 = functionUncurryThis$1;
var Symbol$2$1 = getBuiltIn$7$1("Symbol");
var keyFor$1 = Symbol$2$1.keyFor;
var thisSymbolValue$1$1 = uncurryThis$9$1(Symbol$2$1.prototype.valueOf);
var symbolIsRegistered$1 = Symbol$2$1.isRegisteredSymbol || function isRegisteredSymbol2(value2) {
  try {
    return keyFor$1(thisSymbolValue$1$1(value2)) !== void 0;
  } catch (error) {
    return false;
  }
};
var $$H$1 = _export$1;
var isRegisteredSymbol$1$1 = symbolIsRegistered$1;
$$H$1({ target: "Symbol", stat: true }, {
  isRegisteredSymbol: isRegisteredSymbol$1$1
});
var shared$8 = sharedExports$1;
var getBuiltIn$6$1 = getBuiltIn$f;
var uncurryThis$8$1 = functionUncurryThis$1;
var isSymbol$6 = isSymbol$5$1;
var wellKnownSymbol$8$1 = wellKnownSymbol$n;
var Symbol$1$1 = getBuiltIn$6$1("Symbol");
var $isWellKnownSymbol$1 = Symbol$1$1.isWellKnownSymbol;
var getOwnPropertyNames$5 = getBuiltIn$6$1("Object", "getOwnPropertyNames");
var thisSymbolValue$2 = uncurryThis$8$1(Symbol$1$1.prototype.valueOf);
var WellKnownSymbolsStore$3 = shared$8("wks");
for (var i$2 = 0, symbolKeys$1 = getOwnPropertyNames$5(Symbol$1$1), symbolKeysLength$1 = symbolKeys$1.length; i$2 < symbolKeysLength$1; i$2++) {
  try {
    var symbolKey$1 = symbolKeys$1[i$2];
    if (isSymbol$6(Symbol$1$1[symbolKey$1])) wellKnownSymbol$8$1(symbolKey$1);
  } catch (error) {
  }
}
var symbolIsWellKnown$1 = function isWellKnownSymbol2(value2) {
  if ($isWellKnownSymbol$1 && $isWellKnownSymbol$1(value2)) return true;
  try {
    var symbol2 = thisSymbolValue$2(value2);
    for (var j2 = 0, keys6 = getOwnPropertyNames$5(WellKnownSymbolsStore$3), keysLength = keys6.length; j2 < keysLength; j2++) {
      if (WellKnownSymbolsStore$3[keys6[j2]] == symbol2) return true;
    }
  } catch (error) {
  }
  return false;
};
var $$G$1 = _export$1;
var isWellKnownSymbol$1$1 = symbolIsWellKnown$1;
$$G$1({ target: "Symbol", stat: true, forced: true }, {
  isWellKnownSymbol: isWellKnownSymbol$1$1
});
var defineWellKnownSymbol$4$1 = wellKnownSymbolDefine$1;
defineWellKnownSymbol$4$1("matcher");
var defineWellKnownSymbol$3$1 = wellKnownSymbolDefine$1;
defineWellKnownSymbol$3$1("observable");
var $$F$1 = _export$1;
var isRegisteredSymbol$2 = symbolIsRegistered$1;
$$F$1({ target: "Symbol", stat: true, name: "isRegisteredSymbol" }, {
  isRegistered: isRegisteredSymbol$2
});
var $$E$1 = _export$1;
var isWellKnownSymbol$2 = symbolIsWellKnown$1;
$$E$1({ target: "Symbol", stat: true, name: "isWellKnownSymbol", forced: true }, {
  isWellKnown: isWellKnownSymbol$2
});
var defineWellKnownSymbol$2$1 = wellKnownSymbolDefine$1;
defineWellKnownSymbol$2$1("metadataKey");
var defineWellKnownSymbol$1$1 = wellKnownSymbolDefine$1;
defineWellKnownSymbol$1$1("patternMatch");
var defineWellKnownSymbol$m = wellKnownSymbolDefine$1;
defineWellKnownSymbol$m("replaceAll");
var parent$13$1 = symbol$3$1;
var symbol$2$1 = parent$13$1;
var symbol$1$1 = symbol$2$1;
var _Symbol$1$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(symbol$1$1);
var uncurryThis$7$1 = functionUncurryThis$1;
var toIntegerOrInfinity$1$1 = toIntegerOrInfinity$4$1;
var toString$3$1 = toString$7$1;
var requireObjectCoercible$6 = requireObjectCoercible$3$1;
var charAt$1$1 = uncurryThis$7$1("".charAt);
var charCodeAt$2 = uncurryThis$7$1("".charCodeAt);
var stringSlice$2 = uncurryThis$7$1("".slice);
var createMethod$1$1 = function(CONVERT_TO_STRING) {
  return function($this, pos) {
    var S = toString$3$1(requireObjectCoercible$6($this));
    var position = toIntegerOrInfinity$1$1(pos);
    var size = S.length;
    var first2, second;
    if (position < 0 || position >= size) return CONVERT_TO_STRING ? "" : void 0;
    first2 = charCodeAt$2(S, position);
    return first2 < 55296 || first2 > 56319 || position + 1 === size || (second = charCodeAt$2(S, position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? charAt$1$1(S, position) : first2 : CONVERT_TO_STRING ? stringSlice$2(S, position, position + 2) : (first2 - 55296 << 10) + (second - 56320) + 65536;
  };
};
var stringMultibyte$1 = {
  // `String.prototype.codePointAt` method
  // https://tc39.es/ecma262/#sec-string.prototype.codepointat
  codeAt: createMethod$1$1(false),
  // `String.prototype.at` method
  // https://github.com/mathiasbynens/String.prototype.at
  charAt: createMethod$1$1(true)
};
var charAt$4 = stringMultibyte$1.charAt;
var toString$2$1 = toString$7$1;
var InternalStateModule$3$1 = internalState$1;
var defineIterator$1$1 = iteratorDefine$1;
var createIterResultObject$1$1 = createIterResultObject$3$1;
var STRING_ITERATOR$1 = "String Iterator";
var setInternalState$3$1 = InternalStateModule$3$1.set;
var getInternalState$3 = InternalStateModule$3$1.getterFor(STRING_ITERATOR$1);
defineIterator$1$1(String, "String", function(iterated) {
  setInternalState$3$1(this, {
    type: STRING_ITERATOR$1,
    string: toString$2$1(iterated),
    index: 0
  });
}, function next2() {
  var state = getInternalState$3(this);
  var string2 = state.string;
  var index2 = state.index;
  var point;
  if (index2 >= string2.length) return createIterResultObject$1$1(void 0, true);
  point = charAt$4(string2, index2);
  state.index += point.length;
  return createIterResultObject$1$1(point, false);
});
var WrappedWellKnownSymbolModule$1$1 = wellKnownSymbolWrapped$1;
var iterator$5 = WrappedWellKnownSymbolModule$1$1.f("iterator");
var parent$12$1 = iterator$5;
var iterator$4$1 = parent$12$1;
var parent$11$1 = iterator$4$1;
var iterator$3$1 = parent$11$1;
var parent$10$1 = iterator$3$1;
var iterator$2$1 = parent$10$1;
var iterator$1$1 = iterator$2$1;
var _Symbol$iterator$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(iterator$1$1);
function _typeof$1(o2) {
  "@babel/helpers - typeof";
  return _typeof$1 = "function" == typeof _Symbol$1$1 && "symbol" == typeof _Symbol$iterator$1 ? function(o3) {
    return typeof o3;
  } : function(o3) {
    return o3 && "function" == typeof _Symbol$1$1 && o3.constructor === _Symbol$1$1 && o3 !== _Symbol$1$1.prototype ? "symbol" : typeof o3;
  }, _typeof$1(o2);
}
var WrappedWellKnownSymbolModule$2 = wellKnownSymbolWrapped$1;
var toPrimitive$4$1 = WrappedWellKnownSymbolModule$2.f("toPrimitive");
var parent$$$1 = toPrimitive$4$1;
var toPrimitive$3$1 = parent$$$1;
var parent$_$1 = toPrimitive$3$1;
var toPrimitive$2$1 = parent$_$1;
var parent$Z$1 = toPrimitive$2$1;
var toPrimitive$1$1 = parent$Z$1;
var toPrimitive$7 = toPrimitive$1$1;
var _Symbol$toPrimitive$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(toPrimitive$7);
function _toPrimitive$1(input, hint) {
  if (_typeof$1(input) !== "object" || input === null) return input;
  var prim = input[_Symbol$toPrimitive$1];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof$1(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey$1(arg) {
  var key2 = _toPrimitive$1(arg, "string");
  return _typeof$1(key2) === "symbol" ? key2 : String(key2);
}
function _defineProperties$1(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    _Object$defineProperty$1$1(target, _toPropertyKey$1(descriptor.key), descriptor);
  }
}
function _createClass$1(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties$1(Constructor, staticProps);
  _Object$defineProperty$1$1(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _defineProperty$1(obj, key2, value2) {
  key2 = _toPropertyKey$1(key2);
  if (key2 in obj) {
    _Object$defineProperty$1$1(obj, key2, {
      value: value2,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key2] = value2;
  }
  return obj;
}
var uncurryThis$6$1 = functionUncurryThis$1;
var aCallable$a = aCallable$e;
var isObject$8$1 = isObject$h$1;
var hasOwn$7$1 = hasOwnProperty_1$1;
var arraySlice$3$1 = arraySlice$5$1;
var NATIVE_BIND$5 = functionBindNative$1;
var $Function$1 = Function;
var concat$6$1 = uncurryThis$6$1([].concat);
var join$1 = uncurryThis$6$1([].join);
var factories$1 = {};
var construct$3$1 = function(C, argsLength, args) {
  if (!hasOwn$7$1(factories$1, argsLength)) {
    var list2 = [];
    var i2 = 0;
    for (; i2 < argsLength; i2++) list2[i2] = "a[" + i2 + "]";
    factories$1[argsLength] = $Function$1("C,a", "return new C(" + join$1(list2, ",") + ")");
  }
  return factories$1[argsLength](C, args);
};
var functionBind$1 = NATIVE_BIND$5 ? $Function$1.bind : function bind2(that) {
  var F = aCallable$a(this);
  var Prototype = F.prototype;
  var partArgs = arraySlice$3$1(arguments, 1);
  var boundFunction = function bound() {
    var args = concat$6$1(partArgs, arraySlice$3$1(arguments));
    return this instanceof boundFunction ? construct$3$1(F, args.length, args) : F.apply(that, args);
  };
  if (isObject$8$1(Prototype)) boundFunction.prototype = Prototype;
  return boundFunction;
};
var $$D$1 = _export$1;
var bind$f = functionBind$1;
$$D$1({ target: "Function", proto: true, forced: Function.bind !== bind$f }, {
  bind: bind$f
});
var global$b$1 = global$p;
var path$i$1 = path$o$1;
var getBuiltInPrototypeMethod$g = function(CONSTRUCTOR, METHOD) {
  var Namespace = path$i$1[CONSTRUCTOR + "Prototype"];
  var pureMethod = Namespace && Namespace[METHOD];
  if (pureMethod) return pureMethod;
  var NativeConstructor = global$b$1[CONSTRUCTOR];
  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
  return NativePrototype && NativePrototype[METHOD];
};
var getBuiltInPrototypeMethod$f = getBuiltInPrototypeMethod$g;
var bind$e$1 = getBuiltInPrototypeMethod$f("Function", "bind");
var isPrototypeOf$i$1 = objectIsPrototypeOf$1;
var method$f$1 = bind$e$1;
var FunctionPrototype$5 = Function.prototype;
var bind$d$1 = function(it2) {
  var own = it2.bind;
  return it2 === FunctionPrototype$5 || isPrototypeOf$i$1(FunctionPrototype$5, it2) && own === FunctionPrototype$5.bind ? method$f$1 : own;
};
var parent$Y$1 = bind$d$1;
var bind$c$1 = parent$Y$1;
var bind$b$1 = bind$c$1;
var _bindInstanceProperty$1$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(bind$b$1);
var aCallable$9 = aCallable$e;
var toObject$8$1 = toObject$e$1;
var IndexedObject$1$1 = indexedObject$1;
var lengthOfArrayLike$8$1 = lengthOfArrayLike$d;
var $TypeError$8$1 = TypeError;
var createMethod$5 = function(IS_RIGHT) {
  return function(that, callbackfn, argumentsLength, memo) {
    aCallable$9(callbackfn);
    var O = toObject$8$1(that);
    var self2 = IndexedObject$1$1(O);
    var length2 = lengthOfArrayLike$8$1(O);
    var index2 = IS_RIGHT ? length2 - 1 : 0;
    var i2 = IS_RIGHT ? -1 : 1;
    if (argumentsLength < 2) while (true) {
      if (index2 in self2) {
        memo = self2[index2];
        index2 += i2;
        break;
      }
      index2 += i2;
      if (IS_RIGHT ? index2 < 0 : length2 <= index2) {
        throw new $TypeError$8$1("Reduce of empty array with no initial value");
      }
    }
    for (; IS_RIGHT ? index2 >= 0 : length2 > index2; index2 += i2) if (index2 in self2) {
      memo = callbackfn(memo, self2[index2], index2, O);
    }
    return memo;
  };
};
var arrayReduce$1 = {
  // `Array.prototype.reduce` method
  // https://tc39.es/ecma262/#sec-array.prototype.reduce
  left: createMethod$5(false),
  // `Array.prototype.reduceRight` method
  // https://tc39.es/ecma262/#sec-array.prototype.reduceright
  right: createMethod$5(true)
};
var fails$e$1 = fails$u$1;
var arrayMethodIsStrict$4$1 = function(METHOD_NAME, argument) {
  var method2 = [][METHOD_NAME];
  return !!method2 && fails$e$1(function() {
    method2.call(null, argument || function() {
      return 1;
    }, 1);
  });
};
var global$a$1 = global$p;
var classof$6$1 = classofRaw$2$1;
var engineIsNode$1 = classof$6$1(global$a$1.process) === "process";
var $$C$1 = _export$1;
var $reduce$1 = arrayReduce$1.left;
var arrayMethodIsStrict$3$1 = arrayMethodIsStrict$4$1;
var CHROME_VERSION$1 = engineV8Version$1;
var IS_NODE$4 = engineIsNode$1;
var CHROME_BUG$1 = !IS_NODE$4 && CHROME_VERSION$1 > 79 && CHROME_VERSION$1 < 83;
var FORCED$4$1 = CHROME_BUG$1 || !arrayMethodIsStrict$3$1("reduce");
$$C$1({ target: "Array", proto: true, forced: FORCED$4$1 }, {
  reduce: function reduce2(callbackfn) {
    var length2 = arguments.length;
    return $reduce$1(this, callbackfn, length2, length2 > 1 ? arguments[1] : void 0);
  }
});
var getBuiltInPrototypeMethod$e = getBuiltInPrototypeMethod$g;
var reduce$3$1 = getBuiltInPrototypeMethod$e("Array", "reduce");
var isPrototypeOf$h$1 = objectIsPrototypeOf$1;
var method$e$1 = reduce$3$1;
var ArrayPrototype$f$1 = Array.prototype;
var reduce$2$1 = function(it2) {
  var own = it2.reduce;
  return it2 === ArrayPrototype$f$1 || isPrototypeOf$h$1(ArrayPrototype$f$1, it2) && own === ArrayPrototype$f$1.reduce ? method$e$1 : own;
};
var parent$X$1 = reduce$2$1;
var reduce$1$1 = parent$X$1;
var reduce$4 = reduce$1$1;
var _reduceInstanceProperty$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(reduce$4);
var $$B$1 = _export$1;
var $filter$1 = arrayIteration$1.filter;
var arrayMethodHasSpeciesSupport$3$1 = arrayMethodHasSpeciesSupport$5$1;
var HAS_SPECIES_SUPPORT$3$1 = arrayMethodHasSpeciesSupport$3$1("filter");
$$B$1({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT$3$1 }, {
  filter: function filter2(callbackfn) {
    return $filter$1(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
  }
});
var getBuiltInPrototypeMethod$d = getBuiltInPrototypeMethod$g;
var filter$3$1 = getBuiltInPrototypeMethod$d("Array", "filter");
var isPrototypeOf$g$1 = objectIsPrototypeOf$1;
var method$d$1 = filter$3$1;
var ArrayPrototype$e$1 = Array.prototype;
var filter$2$1 = function(it2) {
  var own = it2.filter;
  return it2 === ArrayPrototype$e$1 || isPrototypeOf$g$1(ArrayPrototype$e$1, it2) && own === ArrayPrototype$e$1.filter ? method$d$1 : own;
};
var parent$W$1 = filter$2$1;
var filter$1$1 = parent$W$1;
var filter$5 = filter$1$1;
var _filterInstanceProperty$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(filter$5);
var $$A$1 = _export$1;
var $map$1 = arrayIteration$1.map;
var arrayMethodHasSpeciesSupport$2$1 = arrayMethodHasSpeciesSupport$5$1;
var HAS_SPECIES_SUPPORT$2$1 = arrayMethodHasSpeciesSupport$2$1("map");
$$A$1({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT$2$1 }, {
  map: function map2(callbackfn) {
    return $map$1(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
  }
});
var getBuiltInPrototypeMethod$c = getBuiltInPrototypeMethod$g;
var map$6$1 = getBuiltInPrototypeMethod$c("Array", "map");
var isPrototypeOf$f$1 = objectIsPrototypeOf$1;
var method$c$1 = map$6$1;
var ArrayPrototype$d$1 = Array.prototype;
var map$5$1 = function(it2) {
  var own = it2.map;
  return it2 === ArrayPrototype$d$1 || isPrototypeOf$f$1(ArrayPrototype$d$1, it2) && own === ArrayPrototype$d$1.map ? method$c$1 : own;
};
var parent$V$1 = map$5$1;
var map$4$1 = parent$V$1;
var map$3$1 = map$4$1;
var _mapInstanceProperty$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(map$3$1);
var isArray$a$1 = isArray$e$1;
var lengthOfArrayLike$7$1 = lengthOfArrayLike$d;
var doesNotExceedSafeInteger$2$1 = doesNotExceedSafeInteger$4;
var bind$a$1 = functionBindContext$1;
var flattenIntoArray$1 = function(target, original, source, sourceLen, start2, depth, mapper, thisArg) {
  var targetIndex = start2;
  var sourceIndex = 0;
  var mapFn = mapper ? bind$a$1(mapper, thisArg) : false;
  var element, elementLen;
  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];
      if (depth > 0 && isArray$a$1(element)) {
        elementLen = lengthOfArrayLike$7$1(element);
        targetIndex = flattenIntoArray$1(target, original, element, elementLen, targetIndex, depth - 1) - 1;
      } else {
        doesNotExceedSafeInteger$2$1(targetIndex + 1);
        target[targetIndex] = element;
      }
      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
};
var flattenIntoArray_1 = flattenIntoArray$1;
var $$z$1 = _export$1;
var flattenIntoArray = flattenIntoArray_1;
var aCallable$8 = aCallable$e;
var toObject$7$1 = toObject$e$1;
var lengthOfArrayLike$6$1 = lengthOfArrayLike$d;
var arraySpeciesCreate$1$1 = arraySpeciesCreate$4;
$$z$1({ target: "Array", proto: true }, {
  flatMap: function flatMap(callbackfn) {
    var O = toObject$7$1(this);
    var sourceLen = lengthOfArrayLike$6$1(O);
    var A;
    aCallable$8(callbackfn);
    A = arraySpeciesCreate$1$1(O, 0);
    A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
    return A;
  }
});
var getBuiltInPrototypeMethod$b = getBuiltInPrototypeMethod$g;
getBuiltInPrototypeMethod$b("Array", "flatMap");
var call$a$1 = functionCall$1;
var anObject$7$1 = anObject$d$1;
var getMethod$1$1 = getMethod$3$1;
var iteratorClose$2$1 = function(iterator2, kind, value2) {
  var innerResult, innerError;
  anObject$7$1(iterator2);
  try {
    innerResult = getMethod$1$1(iterator2, "return");
    if (!innerResult) {
      if (kind === "throw") throw value2;
      return value2;
    }
    innerResult = call$a$1(innerResult, iterator2);
  } catch (error) {
    innerError = true;
    innerResult = error;
  }
  if (kind === "throw") throw value2;
  if (innerError) throw innerResult;
  anObject$7$1(innerResult);
  return value2;
};
var anObject$6$1 = anObject$d$1;
var iteratorClose$1$1 = iteratorClose$2$1;
var callWithSafeIterationClosing$1$1 = function(iterator2, fn2, value2, ENTRIES2) {
  try {
    return ENTRIES2 ? fn2(anObject$6$1(value2)[0], value2[1]) : fn2(value2);
  } catch (error) {
    iteratorClose$1$1(iterator2, "throw", error);
  }
};
var wellKnownSymbol$7$1 = wellKnownSymbol$n;
var Iterators$1$1 = iterators$1;
var ITERATOR$2$1 = wellKnownSymbol$7$1("iterator");
var ArrayPrototype$b$1 = Array.prototype;
var isArrayIteratorMethod$2$1 = function(it2) {
  return it2 !== void 0 && (Iterators$1$1.Array === it2 || ArrayPrototype$b$1[ITERATOR$2$1] === it2);
};
var classof$5$1 = classof$d$1;
var getMethod$4 = getMethod$3$1;
var isNullOrUndefined$3$1 = isNullOrUndefined$6$1;
var Iterators$6 = iterators$1;
var wellKnownSymbol$6$1 = wellKnownSymbol$n;
var ITERATOR$1$1 = wellKnownSymbol$6$1("iterator");
var getIteratorMethod$9$1 = function(it2) {
  if (!isNullOrUndefined$3$1(it2)) return getMethod$4(it2, ITERATOR$1$1) || getMethod$4(it2, "@@iterator") || Iterators$6[classof$5$1(it2)];
};
var call$9$1 = functionCall$1;
var aCallable$7$1 = aCallable$e;
var anObject$5$1 = anObject$d$1;
var tryToString$3$1 = tryToString$6$1;
var getIteratorMethod$8$1 = getIteratorMethod$9$1;
var $TypeError$7$1 = TypeError;
var getIterator$8 = function(argument, usingIterator) {
  var iteratorMethod = arguments.length < 2 ? getIteratorMethod$8$1(argument) : usingIterator;
  if (aCallable$7$1(iteratorMethod)) return anObject$5$1(call$9$1(iteratorMethod, argument));
  throw new $TypeError$7$1(tryToString$3$1(argument) + " is not iterable");
};
var bind$9$1 = functionBindContext$1;
var call$8$1 = functionCall$1;
var toObject$6$1 = toObject$e$1;
var callWithSafeIterationClosing$2 = callWithSafeIterationClosing$1$1;
var isArrayIteratorMethod$1$1 = isArrayIteratorMethod$2$1;
var isConstructor$2$1 = isConstructor$4$1;
var lengthOfArrayLike$5$1 = lengthOfArrayLike$d;
var createProperty$3$1 = createProperty$6$1;
var getIterator$7 = getIterator$8;
var getIteratorMethod$7$1 = getIteratorMethod$9$1;
var $Array$1$1 = Array;
var arrayFrom$1 = function from2(arrayLike) {
  var O = toObject$6$1(arrayLike);
  var IS_CONSTRUCTOR = isConstructor$2$1(this);
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : void 0;
  var mapping = mapfn !== void 0;
  if (mapping) mapfn = bind$9$1(mapfn, argumentsLength > 2 ? arguments[2] : void 0);
  var iteratorMethod = getIteratorMethod$7$1(O);
  var index2 = 0;
  var length2, result, step, iterator2, next4, value2;
  if (iteratorMethod && !(this === $Array$1$1 && isArrayIteratorMethod$1$1(iteratorMethod))) {
    iterator2 = getIterator$7(O, iteratorMethod);
    next4 = iterator2.next;
    result = IS_CONSTRUCTOR ? new this() : [];
    for (; !(step = call$8$1(next4, iterator2)).done; index2++) {
      value2 = mapping ? callWithSafeIterationClosing$2(iterator2, mapfn, [step.value, index2], true) : step.value;
      createProperty$3$1(result, index2, value2);
    }
  } else {
    length2 = lengthOfArrayLike$5$1(O);
    result = IS_CONSTRUCTOR ? new this(length2) : $Array$1$1(length2);
    for (; length2 > index2; index2++) {
      value2 = mapping ? mapfn(O[index2], index2) : O[index2];
      createProperty$3$1(result, index2, value2);
    }
  }
  result.length = index2;
  return result;
};
var wellKnownSymbol$5$1 = wellKnownSymbol$n;
var ITERATOR$7 = wellKnownSymbol$5$1("iterator");
var SAFE_CLOSING$1 = false;
try {
  var called$1 = 0;
  var iteratorWithReturn$1 = {
    next: function() {
      return { done: !!called$1++ };
    },
    "return": function() {
      SAFE_CLOSING$1 = true;
    }
  };
  iteratorWithReturn$1[ITERATOR$7] = function() {
    return this;
  };
  Array.from(iteratorWithReturn$1, function() {
    throw 2;
  });
} catch (error) {
}
var checkCorrectnessOfIteration$2 = function(exec2, SKIP_CLOSING) {
  try {
    if (!SKIP_CLOSING && !SAFE_CLOSING$1) return false;
  } catch (error) {
    return false;
  }
  var ITERATION_SUPPORT = false;
  try {
    var object2 = {};
    object2[ITERATOR$7] = function() {
      return {
        next: function() {
          return { done: ITERATION_SUPPORT = true };
        }
      };
    };
    exec2(object2);
  } catch (error) {
  }
  return ITERATION_SUPPORT;
};
var $$y$1 = _export$1;
var from$6$1 = arrayFrom$1;
var checkCorrectnessOfIteration$1$1 = checkCorrectnessOfIteration$2;
var INCORRECT_ITERATION$1 = !checkCorrectnessOfIteration$1$1(function(iterable) {
  Array.from(iterable);
});
$$y$1({ target: "Array", stat: true, forced: INCORRECT_ITERATION$1 }, {
  from: from$6$1
});
var path$h$1 = path$o$1;
var from$5$1 = path$h$1.Array.from;
var parent$T$1 = from$5$1;
var from$4$1 = parent$T$1;
var from$3$1 = from$4$1;
var _Array$from$1$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(from$3$1);
var getIteratorMethod$6$1 = getIteratorMethod$9$1;
var getIteratorMethod_1$1 = getIteratorMethod$6$1;
var parent$S$1 = getIteratorMethod_1$1;
var getIteratorMethod$5$1 = parent$S$1;
var parent$R$1 = getIteratorMethod$5$1;
var getIteratorMethod$4$1 = parent$R$1;
var parent$Q$1 = getIteratorMethod$4$1;
var getIteratorMethod$3$1 = parent$Q$1;
var getIteratorMethod$2$1 = getIteratorMethod$3$1;
var _getIteratorMethod$1$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(getIteratorMethod$2$1);
var getIteratorMethod$1$1 = getIteratorMethod$2$1;
var _getIteratorMethod$2 = /* @__PURE__ */ getDefaultExportFromCjs$1(getIteratorMethod$1$1);
var $$x$1 = _export$1;
var isArray$9$1 = isArray$e$1;
$$x$1({ target: "Array", stat: true }, {
  isArray: isArray$9$1
});
var path$g$1 = path$o$1;
var isArray$8$1 = path$g$1.Array.isArray;
var parent$P$1 = isArray$8$1;
var isArray$7$1 = parent$P$1;
var parent$O$1 = isArray$7$1;
var isArray$6$1 = parent$O$1;
var parent$N$1 = isArray$6$1;
var isArray$5$1 = parent$N$1;
var isArray$4$1 = isArray$5$1;
var _Array$isArray$1$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(isArray$4$1);
function _arrayWithHoles$1(arr) {
  if (_Array$isArray$1$1(arr)) return arr;
}
var DESCRIPTORS$8$1 = descriptors$1;
var isArray$3$1 = isArray$e$1;
var $TypeError$6$1 = TypeError;
var getOwnPropertyDescriptor$5$1 = Object.getOwnPropertyDescriptor;
var SILENT_ON_NON_WRITABLE_LENGTH_SET$1 = DESCRIPTORS$8$1 && !function() {
  if (this !== void 0) return true;
  try {
    Object.defineProperty([], "length", { writable: false }).length = 1;
  } catch (error) {
    return error instanceof TypeError;
  }
}();
var arraySetLength$1 = SILENT_ON_NON_WRITABLE_LENGTH_SET$1 ? function(O, length2) {
  if (isArray$3$1(O) && !getOwnPropertyDescriptor$5$1(O, "length").writable) {
    throw new $TypeError$6$1("Cannot set read only .length");
  }
  return O.length = length2;
} : function(O, length2) {
  return O.length = length2;
};
var $$w$1 = _export$1;
var toObject$5$1 = toObject$e$1;
var lengthOfArrayLike$4$1 = lengthOfArrayLike$d;
var setArrayLength$1$1 = arraySetLength$1;
var doesNotExceedSafeInteger$1$1 = doesNotExceedSafeInteger$4;
var fails$d$1 = fails$u$1;
var INCORRECT_TO_LENGTH$1 = fails$d$1(function() {
  return [].push.call({ length: 4294967296 }, 1) !== 4294967297;
});
var properErrorOnNonWritableLength$1 = function() {
  try {
    Object.defineProperty([], "length", { writable: false }).push();
  } catch (error) {
    return error instanceof TypeError;
  }
};
var FORCED$3$1 = INCORRECT_TO_LENGTH$1 || !properErrorOnNonWritableLength$1();
$$w$1({ target: "Array", proto: true, arity: 1, forced: FORCED$3$1 }, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  push: function push2(item) {
    var O = toObject$5$1(this);
    var len = lengthOfArrayLike$4$1(O);
    var argCount = arguments.length;
    doesNotExceedSafeInteger$1$1(len + argCount);
    for (var i2 = 0; i2 < argCount; i2++) {
      O[len] = arguments[i2];
      len++;
    }
    setArrayLength$1$1(O, len);
    return len;
  }
});
var getBuiltInPrototypeMethod$a = getBuiltInPrototypeMethod$g;
var push$8$1 = getBuiltInPrototypeMethod$a("Array", "push");
var isPrototypeOf$d$1 = objectIsPrototypeOf$1;
var method$a$1 = push$8$1;
var ArrayPrototype$a$1 = Array.prototype;
var push$7$1 = function(it2) {
  var own = it2.push;
  return it2 === ArrayPrototype$a$1 || isPrototypeOf$d$1(ArrayPrototype$a$1, it2) && own === ArrayPrototype$a$1.push ? method$a$1 : own;
};
var parent$M$1 = push$7$1;
var push$6$1 = parent$M$1;
var parent$L$1 = push$6$1;
var push$5$1 = parent$L$1;
var parent$K$1 = push$5$1;
var push$4$1 = parent$K$1;
var push$3$1 = push$4$1;
var _pushInstanceProperty$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(push$3$1);
function _iterableToArrayLimit$1(r2, l2) {
  var t2 = null == r2 ? null : "undefined" != typeof _Symbol$1$1 && _getIteratorMethod$1$1(r2) || r2["@@iterator"];
  if (null != t2) {
    var e2, n2, i2, u2, a2 = [], f2 = true, o2 = false;
    try {
      if (i2 = (t2 = t2.call(r2)).next, 0 === l2) {
        if (Object(t2) !== t2) return;
        f2 = false;
      } else for (; !(f2 = (e2 = i2.call(t2)).done) && (_pushInstanceProperty$1(a2).call(a2, e2.value), a2.length !== l2); f2 = true) ;
    } catch (r3) {
      o2 = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2)) return;
      } finally {
        if (o2) throw n2;
      }
    }
    return a2;
  }
}
var $$v$1 = _export$1;
var isArray$2$1 = isArray$e$1;
var isConstructor$1$1 = isConstructor$4$1;
var isObject$7$1 = isObject$h$1;
var toAbsoluteIndex$1$1 = toAbsoluteIndex$4$1;
var lengthOfArrayLike$3$1 = lengthOfArrayLike$d;
var toIndexedObject$2$1 = toIndexedObject$a$1;
var createProperty$2$1 = createProperty$6$1;
var wellKnownSymbol$4$1 = wellKnownSymbol$n;
var arrayMethodHasSpeciesSupport$1$1 = arrayMethodHasSpeciesSupport$5$1;
var nativeSlice$1 = arraySlice$5$1;
var HAS_SPECIES_SUPPORT$1$1 = arrayMethodHasSpeciesSupport$1$1("slice");
var SPECIES$3$1 = wellKnownSymbol$4$1("species");
var $Array$4 = Array;
var max$1$1 = Math.max;
$$v$1({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT$1$1 }, {
  slice: function slice2(start2, end2) {
    var O = toIndexedObject$2$1(this);
    var length2 = lengthOfArrayLike$3$1(O);
    var k2 = toAbsoluteIndex$1$1(start2, length2);
    var fin = toAbsoluteIndex$1$1(end2 === void 0 ? length2 : end2, length2);
    var Constructor, result, n2;
    if (isArray$2$1(O)) {
      Constructor = O.constructor;
      if (isConstructor$1$1(Constructor) && (Constructor === $Array$4 || isArray$2$1(Constructor.prototype))) {
        Constructor = void 0;
      } else if (isObject$7$1(Constructor)) {
        Constructor = Constructor[SPECIES$3$1];
        if (Constructor === null) Constructor = void 0;
      }
      if (Constructor === $Array$4 || Constructor === void 0) {
        return nativeSlice$1(O, k2, fin);
      }
    }
    result = new (Constructor === void 0 ? $Array$4 : Constructor)(max$1$1(fin - k2, 0));
    for (n2 = 0; k2 < fin; k2++, n2++) if (k2 in O) createProperty$2$1(result, n2, O[k2]);
    result.length = n2;
    return result;
  }
});
var getBuiltInPrototypeMethod$9 = getBuiltInPrototypeMethod$g;
var slice$6$1 = getBuiltInPrototypeMethod$9("Array", "slice");
var isPrototypeOf$c$1 = objectIsPrototypeOf$1;
var method$9$1 = slice$6$1;
var ArrayPrototype$9$1 = Array.prototype;
var slice$5$1 = function(it2) {
  var own = it2.slice;
  return it2 === ArrayPrototype$9$1 || isPrototypeOf$c$1(ArrayPrototype$9$1, it2) && own === ArrayPrototype$9$1.slice ? method$9$1 : own;
};
var parent$J$1 = slice$5$1;
var slice$4$1 = parent$J$1;
var parent$I$1 = slice$4$1;
var slice$3$1 = parent$I$1;
var parent$H$1 = slice$3$1;
var slice$2$1 = parent$H$1;
var slice$1$1 = slice$2$1;
var _sliceInstanceProperty$1$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(slice$1$1);
var parent$G$1 = from$4$1;
var from$2$1 = parent$G$1;
var parent$F$1 = from$2$1;
var from$1$1 = parent$F$1;
var from$7 = from$1$1;
var _Array$from$2 = /* @__PURE__ */ getDefaultExportFromCjs$1(from$7);
function _arrayLikeToArray$4$1(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
  return arr2;
}
function _unsupportedIterableToArray$4$1(o2, minLen) {
  var _context;
  if (!o2) return;
  if (typeof o2 === "string") return _arrayLikeToArray$4$1(o2, minLen);
  var n2 = _sliceInstanceProperty$1$1(_context = Object.prototype.toString.call(o2)).call(_context, 8, -1);
  if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set") return _Array$from$2(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$4$1(o2, minLen);
}
function _nonIterableRest$1() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray$1(arr, i2) {
  return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i2) || _unsupportedIterableToArray$4$1(arr, i2) || _nonIterableRest$1();
}
function _arrayWithoutHoles$1(arr) {
  if (_Array$isArray$1$1(arr)) return _arrayLikeToArray$4$1(arr);
}
function _iterableToArray$1(iter) {
  if (typeof _Symbol$1$1 !== "undefined" && _getIteratorMethod$1$1(iter) != null || iter["@@iterator"] != null) return _Array$from$2(iter);
}
function _nonIterableSpread$1() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray$1(arr) {
  return _arrayWithoutHoles$1(arr) || _iterableToArray$1(arr) || _unsupportedIterableToArray$4$1(arr) || _nonIterableSpread$1();
}
var symbol$6 = symbol$4$1;
var _Symbol$2 = /* @__PURE__ */ getDefaultExportFromCjs$1(symbol$6);
var getBuiltInPrototypeMethod$8 = getBuiltInPrototypeMethod$g;
var concat$5$1 = getBuiltInPrototypeMethod$8("Array", "concat");
var isPrototypeOf$b$1 = objectIsPrototypeOf$1;
var method$8$1 = concat$5$1;
var ArrayPrototype$8$1 = Array.prototype;
var concat$4$1 = function(it2) {
  var own = it2.concat;
  return it2 === ArrayPrototype$8$1 || isPrototypeOf$b$1(ArrayPrototype$8$1, it2) && own === ArrayPrototype$8$1.concat ? method$8$1 : own;
};
var parent$E$1 = concat$4$1;
var concat$3$1 = parent$E$1;
var concat$2$1 = concat$3$1;
var _concatInstanceProperty$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(concat$2$1);
var slice$7 = slice$4$1;
var _sliceInstanceProperty$2 = /* @__PURE__ */ getDefaultExportFromCjs$1(slice$7);
var getBuiltIn$5$1 = getBuiltIn$f;
var uncurryThis$5$1 = functionUncurryThis$1;
var getOwnPropertyNamesModule$1$1 = objectGetOwnPropertyNames$1;
var getOwnPropertySymbolsModule$1$1 = objectGetOwnPropertySymbols$1;
var anObject$4$1 = anObject$d$1;
var concat$1$1 = uncurryThis$5$1([].concat);
var ownKeys$7 = getBuiltIn$5$1("Reflect", "ownKeys") || function ownKeys2(it2) {
  var keys6 = getOwnPropertyNamesModule$1$1.f(anObject$4$1(it2));
  var getOwnPropertySymbols4 = getOwnPropertySymbolsModule$1$1.f;
  return getOwnPropertySymbols4 ? concat$1$1(keys6, getOwnPropertySymbols4(it2)) : keys6;
};
var $$u$1 = _export$1;
var ownKeys$6 = ownKeys$7;
$$u$1({ target: "Reflect", stat: true }, {
  ownKeys: ownKeys$6
});
var path$f$1 = path$o$1;
var ownKeys$5$1 = path$f$1.Reflect.ownKeys;
var parent$D$1 = ownKeys$5$1;
var ownKeys$4$1 = parent$D$1;
var ownKeys$3$1 = ownKeys$4$1;
var _Reflect$ownKeys = /* @__PURE__ */ getDefaultExportFromCjs$1(ownKeys$3$1);
var isArray$1$1 = isArray$7$1;
var _Array$isArray$2 = /* @__PURE__ */ getDefaultExportFromCjs$1(isArray$1$1);
var $$t$1 = _export$1;
var toObject$4$1 = toObject$e$1;
var nativeKeys$1 = objectKeys$3$1;
var fails$c$1 = fails$u$1;
var FAILS_ON_PRIMITIVES$2$1 = fails$c$1(function() {
  nativeKeys$1(1);
});
$$t$1({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES$2$1 }, {
  keys: function keys3(it2) {
    return nativeKeys$1(toObject$4$1(it2));
  }
});
var path$e$1 = path$o$1;
var keys$6 = path$e$1.Object.keys;
var parent$C$1 = keys$6;
var keys$5 = parent$C$1;
var keys$4 = keys$5;
var _Object$keys$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(keys$4);
var $forEach$2 = arrayIteration$1.forEach;
var arrayMethodIsStrict$2$1 = arrayMethodIsStrict$4$1;
var STRICT_METHOD$2$1 = arrayMethodIsStrict$2$1("forEach");
var arrayForEach$1 = !STRICT_METHOD$2$1 ? function forEach3(callbackfn) {
  return $forEach$2(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
} : [].forEach;
var $$s$1 = _export$1;
var forEach$8 = arrayForEach$1;
$$s$1({ target: "Array", proto: true, forced: [].forEach !== forEach$8 }, {
  forEach: forEach$8
});
var getBuiltInPrototypeMethod$7 = getBuiltInPrototypeMethod$g;
var forEach$7 = getBuiltInPrototypeMethod$7("Array", "forEach");
var parent$B$1 = forEach$7;
var forEach$6$1 = parent$B$1;
var classof$4$1 = classof$d$1;
var hasOwn$6$1 = hasOwnProperty_1$1;
var isPrototypeOf$a$1 = objectIsPrototypeOf$1;
var method$7$1 = forEach$6$1;
var ArrayPrototype$7$1 = Array.prototype;
var DOMIterables$3 = {
  DOMTokenList: true,
  NodeList: true
};
var forEach$5$1 = function(it2) {
  var own = it2.forEach;
  return it2 === ArrayPrototype$7$1 || isPrototypeOf$a$1(ArrayPrototype$7$1, it2) && own === ArrayPrototype$7$1.forEach || hasOwn$6$1(DOMIterables$3, classof$4$1(it2)) ? method$7$1 : own;
};
var forEach$4$1 = forEach$5$1;
var _forEachInstanceProperty$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(forEach$4$1);
var $$r$1 = _export$1;
var uncurryThis$4$1 = functionUncurryThis$1;
var isArray$f = isArray$e$1;
var nativeReverse$1 = uncurryThis$4$1([].reverse);
var test$1$1 = [1, 2];
$$r$1({ target: "Array", proto: true, forced: String(test$1$1) === String(test$1$1.reverse()) }, {
  reverse: function reverse2() {
    if (isArray$f(this)) this.length = this.length;
    return nativeReverse$1(this);
  }
});
var getBuiltInPrototypeMethod$6 = getBuiltInPrototypeMethod$g;
var reverse$6 = getBuiltInPrototypeMethod$6("Array", "reverse");
var isPrototypeOf$9$1 = objectIsPrototypeOf$1;
var method$6$1 = reverse$6;
var ArrayPrototype$6$1 = Array.prototype;
var reverse$5 = function(it2) {
  var own = it2.reverse;
  return it2 === ArrayPrototype$6$1 || isPrototypeOf$9$1(ArrayPrototype$6$1, it2) && own === ArrayPrototype$6$1.reverse ? method$6$1 : own;
};
var parent$A$1 = reverse$5;
var reverse$4 = parent$A$1;
var reverse$3$1 = reverse$4;
var _reverseInstanceProperty$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(reverse$3$1);
var tryToString$2$1 = tryToString$6$1;
var $TypeError$5$1 = TypeError;
var deletePropertyOrThrow$2$1 = function(O, P) {
  if (!delete O[P]) throw new $TypeError$5$1("Cannot delete property " + tryToString$2$1(P) + " of " + tryToString$2$1(O));
};
var $$q$1 = _export$1;
var toObject$3$1 = toObject$e$1;
var toAbsoluteIndex$6 = toAbsoluteIndex$4$1;
var toIntegerOrInfinity$5 = toIntegerOrInfinity$4$1;
var lengthOfArrayLike$2$1 = lengthOfArrayLike$d;
var setArrayLength$2 = arraySetLength$1;
var doesNotExceedSafeInteger$5 = doesNotExceedSafeInteger$4;
var arraySpeciesCreate$5 = arraySpeciesCreate$4;
var createProperty$1$1 = createProperty$6$1;
var deletePropertyOrThrow$1$1 = deletePropertyOrThrow$2$1;
var arrayMethodHasSpeciesSupport$6 = arrayMethodHasSpeciesSupport$5$1;
var HAS_SPECIES_SUPPORT$4 = arrayMethodHasSpeciesSupport$6("splice");
var max$4 = Math.max;
var min$3 = Math.min;
$$q$1({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT$4 }, {
  splice: function splice2(start2, deleteCount) {
    var O = toObject$3$1(this);
    var len = lengthOfArrayLike$2$1(O);
    var actualStart = toAbsoluteIndex$6(start2, len);
    var argumentsLength = arguments.length;
    var insertCount, actualDeleteCount, A, k2, from4, to;
    if (argumentsLength === 0) {
      insertCount = actualDeleteCount = 0;
    } else if (argumentsLength === 1) {
      insertCount = 0;
      actualDeleteCount = len - actualStart;
    } else {
      insertCount = argumentsLength - 2;
      actualDeleteCount = min$3(max$4(toIntegerOrInfinity$5(deleteCount), 0), len - actualStart);
    }
    doesNotExceedSafeInteger$5(len + insertCount - actualDeleteCount);
    A = arraySpeciesCreate$5(O, actualDeleteCount);
    for (k2 = 0; k2 < actualDeleteCount; k2++) {
      from4 = actualStart + k2;
      if (from4 in O) createProperty$1$1(A, k2, O[from4]);
    }
    A.length = actualDeleteCount;
    if (insertCount < actualDeleteCount) {
      for (k2 = actualStart; k2 < len - actualDeleteCount; k2++) {
        from4 = k2 + actualDeleteCount;
        to = k2 + insertCount;
        if (from4 in O) O[to] = O[from4];
        else deletePropertyOrThrow$1$1(O, to);
      }
      for (k2 = len; k2 > len - actualDeleteCount + insertCount; k2--) deletePropertyOrThrow$1$1(O, k2 - 1);
    } else if (insertCount > actualDeleteCount) {
      for (k2 = len - actualDeleteCount; k2 > actualStart; k2--) {
        from4 = k2 + actualDeleteCount - 1;
        to = k2 + insertCount - 1;
        if (from4 in O) O[to] = O[from4];
        else deletePropertyOrThrow$1$1(O, to);
      }
    }
    for (k2 = 0; k2 < insertCount; k2++) {
      O[k2 + actualStart] = arguments[k2 + 2];
    }
    setArrayLength$2(O, len - actualDeleteCount + insertCount);
    return A;
  }
});
var getBuiltInPrototypeMethod$5 = getBuiltInPrototypeMethod$g;
var splice$3$1 = getBuiltInPrototypeMethod$5("Array", "splice");
var isPrototypeOf$8$1 = objectIsPrototypeOf$1;
var method$5$1 = splice$3$1;
var ArrayPrototype$5$1 = Array.prototype;
var splice$2$1 = function(it2) {
  var own = it2.splice;
  return it2 === ArrayPrototype$5$1 || isPrototypeOf$8$1(ArrayPrototype$5$1, it2) && own === ArrayPrototype$5$1.splice ? method$5$1 : own;
};
var parent$z$1 = splice$2$1;
var splice$1$1 = parent$z$1;
var splice$5 = splice$1$1;
var _spliceInstanceProperty$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(splice$5);
var DESCRIPTORS$7$1 = descriptors$1;
var uncurryThis$3$1 = functionUncurryThis$1;
var call$7$1 = functionCall$1;
var fails$b$1 = fails$u$1;
var objectKeys$4 = objectKeys$3$1;
var getOwnPropertySymbolsModule$4 = objectGetOwnPropertySymbols$1;
var propertyIsEnumerableModule$3 = objectPropertyIsEnumerable$1;
var toObject$2$1 = toObject$e$1;
var IndexedObject$4 = indexedObject$1;
var $assign$1 = Object.assign;
var defineProperty$3$1 = Object.defineProperty;
var concat$7 = uncurryThis$3$1([].concat);
var objectAssign$1 = !$assign$1 || fails$b$1(function() {
  if (DESCRIPTORS$7$1 && $assign$1({ b: 1 }, $assign$1(defineProperty$3$1({}, "a", {
    enumerable: true,
    get: function() {
      defineProperty$3$1(this, "b", {
        value: 3,
        enumerable: false
      });
    }
  }), { b: 2 })).b !== 1) return true;
  var A = {};
  var B = {};
  var symbol2 = Symbol("assign detection");
  var alphabet = "abcdefghijklmnopqrst";
  A[symbol2] = 7;
  alphabet.split("").forEach(function(chr) {
    B[chr] = chr;
  });
  return $assign$1({}, A)[symbol2] !== 7 || objectKeys$4($assign$1({}, B)).join("") !== alphabet;
}) ? function assign2(target, source) {
  var T = toObject$2$1(target);
  var argumentsLength = arguments.length;
  var index2 = 1;
  var getOwnPropertySymbols4 = getOwnPropertySymbolsModule$4.f;
  var propertyIsEnumerable5 = propertyIsEnumerableModule$3.f;
  while (argumentsLength > index2) {
    var S = IndexedObject$4(arguments[index2++]);
    var keys6 = getOwnPropertySymbols4 ? concat$7(objectKeys$4(S), getOwnPropertySymbols4(S)) : objectKeys$4(S);
    var length2 = keys6.length;
    var j2 = 0;
    var key2;
    while (length2 > j2) {
      key2 = keys6[j2++];
      if (!DESCRIPTORS$7$1 || call$7$1(propertyIsEnumerable5, S, key2)) T[key2] = S[key2];
    }
  }
  return T;
} : $assign$1;
var $$p$1 = _export$1;
var assign$5$1 = objectAssign$1;
$$p$1({ target: "Object", stat: true, arity: 2, forced: Object.assign !== assign$5$1 }, {
  assign: assign$5$1
});
var path$d$1 = path$o$1;
var assign$4$1 = path$d$1.Object.assign;
var parent$y$1 = assign$4$1;
var assign$3$1 = parent$y$1;
var assign$2$1 = assign$3$1;
var _Object$assign$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(assign$2$1);
var $$o$1 = _export$1;
var fails$a$1 = fails$u$1;
var toObject$1$1 = toObject$e$1;
var nativeGetPrototypeOf$1 = objectGetPrototypeOf$1;
var CORRECT_PROTOTYPE_GETTER$2 = correctPrototypeGetter$1;
var FAILS_ON_PRIMITIVES$1$1 = fails$a$1(function() {
  nativeGetPrototypeOf$1(1);
});
$$o$1({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES$1$1, sham: !CORRECT_PROTOTYPE_GETTER$2 }, {
  getPrototypeOf: function getPrototypeOf2(it2) {
    return nativeGetPrototypeOf$1(toObject$1$1(it2));
  }
});
var path$c$1 = path$o$1;
var getPrototypeOf$5$1 = path$c$1.Object.getPrototypeOf;
var parent$x$1 = getPrototypeOf$5$1;
var getPrototypeOf$4$1 = parent$x$1;
var $$n$1 = _export$1;
var DESCRIPTORS$6$1 = descriptors$1;
var create$9$1 = objectCreate$1;
$$n$1({ target: "Object", stat: true, sham: !DESCRIPTORS$6$1 }, {
  create: create$9$1
});
var path$b$1 = path$o$1;
var Object$3$1 = path$b$1.Object;
var create$8$1 = function create4(P, D) {
  return Object$3$1.create(P, D);
};
var parent$w$1 = create$8$1;
var create$7$1 = parent$w$1;
var create$6$1 = create$7$1;
var _Object$create$1$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(create$6$1);
var path$a$1 = path$o$1;
var apply$3$1 = functionApply$1;
if (!path$a$1.JSON) path$a$1.JSON = { stringify: JSON.stringify };
var stringify$2$1 = function stringify2(it2, replacer2, space) {
  return apply$3$1(path$a$1.JSON.stringify, null, arguments);
};
var parent$v$1 = stringify$2$1;
var stringify$1$1 = parent$v$1;
var stringify$3 = stringify$1$1;
var _JSON$stringify$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(stringify$3);
var engineIsBun$1 = typeof Bun == "function" && Bun && typeof Bun.version == "string";
var $TypeError$4$1 = TypeError;
var validateArgumentsLength$2 = function(passed, required) {
  if (passed < required) throw new $TypeError$4$1("Not enough arguments");
  return passed;
};
var global$9$1 = global$p;
var apply$2$1 = functionApply$1;
var isCallable$5$1 = isCallable$m;
var ENGINE_IS_BUN$1 = engineIsBun$1;
var USER_AGENT$1 = engineUserAgent$1;
var arraySlice$2$1 = arraySlice$5$1;
var validateArgumentsLength$1$1 = validateArgumentsLength$2;
var Function$2 = global$9$1.Function;
var WRAP$1 = /MSIE .\./.test(USER_AGENT$1) || ENGINE_IS_BUN$1 && function() {
  var version2 = global$9$1.Bun.version.split(".");
  return version2.length < 3 || version2[0] === "0" && (version2[1] < 3 || version2[1] === "3" && version2[2] === "0");
}();
var schedulersFix$2$1 = function(scheduler, hasTimeArg) {
  var firstParamIndex = hasTimeArg ? 2 : 1;
  return WRAP$1 ? function(handler, timeout) {
    var boundArgs = validateArgumentsLength$1$1(arguments.length, 1) > firstParamIndex;
    var fn2 = isCallable$5$1(handler) ? handler : Function$2(handler);
    var params = boundArgs ? arraySlice$2$1(arguments, firstParamIndex) : [];
    var callback = boundArgs ? function() {
      apply$2$1(fn2, this, params);
    } : fn2;
    return hasTimeArg ? scheduler(callback, timeout) : scheduler(callback);
  } : scheduler;
};
var $$m$1 = _export$1;
var global$8$1 = global$p;
var schedulersFix$1$1 = schedulersFix$2$1;
var setInterval$4 = schedulersFix$1$1(global$8$1.setInterval, true);
$$m$1({ global: true, bind: true, forced: global$8$1.setInterval !== setInterval$4 }, {
  setInterval: setInterval$4
});
var $$l$1 = _export$1;
var global$7$1 = global$p;
var schedulersFix$3 = schedulersFix$2$1;
var setTimeout$3$1 = schedulersFix$3(global$7$1.setTimeout, true);
$$l$1({ global: true, bind: true, forced: global$7$1.setTimeout !== setTimeout$3$1 }, {
  setTimeout: setTimeout$3$1
});
var path$9$1 = path$o$1;
var setTimeout$2$1 = path$9$1.setTimeout;
var setTimeout$1$1 = setTimeout$2$1;
var _setTimeout$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(setTimeout$1$1);
var componentEmitter$1 = { exports: {} };
(function(module) {
  function Emitter2(object2) {
    if (object2) {
      return mixin(object2);
    }
    this._callbacks = /* @__PURE__ */ new Map();
  }
  function mixin(object2) {
    Object.assign(object2, Emitter2.prototype);
    object2._callbacks = /* @__PURE__ */ new Map();
    return object2;
  }
  Emitter2.prototype.on = function(event, listener) {
    const callbacks = this._callbacks.get(event) ?? [];
    callbacks.push(listener);
    this._callbacks.set(event, callbacks);
    return this;
  };
  Emitter2.prototype.once = function(event, listener) {
    const on = (...arguments_) => {
      this.off(event, on);
      listener.apply(this, arguments_);
    };
    on.fn = listener;
    this.on(event, on);
    return this;
  };
  Emitter2.prototype.off = function(event, listener) {
    if (event === void 0 && listener === void 0) {
      this._callbacks.clear();
      return this;
    }
    if (listener === void 0) {
      this._callbacks.delete(event);
      return this;
    }
    const callbacks = this._callbacks.get(event);
    if (callbacks) {
      for (const [index2, callback] of callbacks.entries()) {
        if (callback === listener || callback.fn === listener) {
          callbacks.splice(index2, 1);
          break;
        }
      }
      if (callbacks.length === 0) {
        this._callbacks.delete(event);
      } else {
        this._callbacks.set(event, callbacks);
      }
    }
    return this;
  };
  Emitter2.prototype.emit = function(event, ...arguments_) {
    const callbacks = this._callbacks.get(event);
    if (callbacks) {
      const callbacksCopy = [...callbacks];
      for (const callback of callbacksCopy) {
        callback.apply(this, arguments_);
      }
    }
    return this;
  };
  Emitter2.prototype.listeners = function(event) {
    return this._callbacks.get(event) ?? [];
  };
  Emitter2.prototype.listenerCount = function(event) {
    if (event) {
      return this.listeners(event).length;
    }
    let totalCount = 0;
    for (const callbacks of this._callbacks.values()) {
      totalCount += callbacks.length;
    }
    return totalCount;
  };
  Emitter2.prototype.hasListeners = function(event) {
    return this.listenerCount(event) > 0;
  };
  Emitter2.prototype.addEventListener = Emitter2.prototype.on;
  Emitter2.prototype.removeListener = Emitter2.prototype.off;
  Emitter2.prototype.removeEventListener = Emitter2.prototype.off;
  Emitter2.prototype.removeAllListeners = Emitter2.prototype.off;
  {
    module.exports = Emitter2;
  }
})(componentEmitter$1);
var componentEmitterExports$1 = componentEmitter$1.exports;
var Emitter$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(componentEmitterExports$1);
/*! Hammer.JS - v2.0.17-rc - 2019-12-16
 * http://naver.github.io/egjs
 *
 * Forked By Naver egjs
 * Copyright (c) hammerjs
 * Licensed under the MIT license */
function _extends$1() {
  _extends$1 = Object.assign || function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends$1.apply(this, arguments);
}
function _inheritsLoose$1(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}
function _assertThisInitialized$1$1(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
var assign$6;
if (typeof Object.assign !== "function") {
  assign$6 = function assign4(target) {
    if (target === void 0 || target === null) {
      throw new TypeError("Cannot convert undefined or null to object");
    }
    var output = Object(target);
    for (var index2 = 1; index2 < arguments.length; index2++) {
      var source = arguments[index2];
      if (source !== void 0 && source !== null) {
        for (var nextKey in source) {
          if (source.hasOwnProperty(nextKey)) {
            output[nextKey] = source[nextKey];
          }
        }
      }
    }
    return output;
  };
} else {
  assign$6 = Object.assign;
}
var assign$1$1 = assign$6;
var VENDOR_PREFIXES$1 = ["", "webkit", "Moz", "MS", "ms", "o"];
var TEST_ELEMENT$1 = typeof document === "undefined" ? {
  style: {}
} : document.createElement("div");
var TYPE_FUNCTION$1 = "function";
var round$1 = Math.round, abs$2 = Math.abs;
var now$4 = Date.now;
function prefixed$1(obj, property) {
  var prefix;
  var prop;
  var camelProp = property[0].toUpperCase() + property.slice(1);
  var i2 = 0;
  while (i2 < VENDOR_PREFIXES$1.length) {
    prefix = VENDOR_PREFIXES$1[i2];
    prop = prefix ? prefix + camelProp : property;
    if (prop in obj) {
      return prop;
    }
    i2++;
  }
  return void 0;
}
var win$1;
if (typeof window === "undefined") {
  win$1 = {};
} else {
  win$1 = window;
}
var PREFIXED_TOUCH_ACTION$1 = prefixed$1(TEST_ELEMENT$1.style, "touchAction");
var NATIVE_TOUCH_ACTION$1 = PREFIXED_TOUCH_ACTION$1 !== void 0;
function getTouchActionProps$1() {
  if (!NATIVE_TOUCH_ACTION$1) {
    return false;
  }
  var touchMap = {};
  var cssSupports = win$1.CSS && win$1.CSS.supports;
  ["auto", "manipulation", "pan-y", "pan-x", "pan-x pan-y", "none"].forEach(function(val) {
    return touchMap[val] = cssSupports ? win$1.CSS.supports("touch-action", val) : true;
  });
  return touchMap;
}
var TOUCH_ACTION_COMPUTE$1 = "compute";
var TOUCH_ACTION_AUTO$1 = "auto";
var TOUCH_ACTION_MANIPULATION$1 = "manipulation";
var TOUCH_ACTION_NONE$1 = "none";
var TOUCH_ACTION_PAN_X$1 = "pan-x";
var TOUCH_ACTION_PAN_Y$1 = "pan-y";
var TOUCH_ACTION_MAP$1 = getTouchActionProps$1();
var MOBILE_REGEX$1 = /mobile|tablet|ip(ad|hone|od)|android/i;
var SUPPORT_TOUCH$1 = "ontouchstart" in win$1;
var SUPPORT_POINTER_EVENTS$1 = prefixed$1(win$1, "PointerEvent") !== void 0;
var SUPPORT_ONLY_TOUCH$1 = SUPPORT_TOUCH$1 && MOBILE_REGEX$1.test(navigator.userAgent);
var INPUT_TYPE_TOUCH$1 = "touch";
var INPUT_TYPE_PEN$1 = "pen";
var INPUT_TYPE_MOUSE$1 = "mouse";
var INPUT_TYPE_KINECT$1 = "kinect";
var COMPUTE_INTERVAL$1 = 25;
var INPUT_START$1 = 1;
var INPUT_MOVE$1 = 2;
var INPUT_END$1 = 4;
var INPUT_CANCEL$1 = 8;
var DIRECTION_NONE$1 = 1;
var DIRECTION_LEFT$1 = 2;
var DIRECTION_RIGHT$1 = 4;
var DIRECTION_UP$1 = 8;
var DIRECTION_DOWN$1 = 16;
var DIRECTION_HORIZONTAL$1 = DIRECTION_LEFT$1 | DIRECTION_RIGHT$1;
var DIRECTION_VERTICAL$1 = DIRECTION_UP$1 | DIRECTION_DOWN$1;
var DIRECTION_ALL$1 = DIRECTION_HORIZONTAL$1 | DIRECTION_VERTICAL$1;
var PROPS_XY$1 = ["x", "y"];
var PROPS_CLIENT_XY$1 = ["clientX", "clientY"];
function each$1(obj, iterator2, context) {
  var i2;
  if (!obj) {
    return;
  }
  if (obj.forEach) {
    obj.forEach(iterator2, context);
  } else if (obj.length !== void 0) {
    i2 = 0;
    while (i2 < obj.length) {
      iterator2.call(context, obj[i2], i2, obj);
      i2++;
    }
  } else {
    for (i2 in obj) {
      obj.hasOwnProperty(i2) && iterator2.call(context, obj[i2], i2, obj);
    }
  }
}
function boolOrFn$1(val, args) {
  if (typeof val === TYPE_FUNCTION$1) {
    return val.apply(args ? args[0] || void 0 : void 0, args);
  }
  return val;
}
function inStr$1(str, find2) {
  return str.indexOf(find2) > -1;
}
function cleanTouchActions$1(actions) {
  if (inStr$1(actions, TOUCH_ACTION_NONE$1)) {
    return TOUCH_ACTION_NONE$1;
  }
  var hasPanX = inStr$1(actions, TOUCH_ACTION_PAN_X$1);
  var hasPanY = inStr$1(actions, TOUCH_ACTION_PAN_Y$1);
  if (hasPanX && hasPanY) {
    return TOUCH_ACTION_NONE$1;
  }
  if (hasPanX || hasPanY) {
    return hasPanX ? TOUCH_ACTION_PAN_X$1 : TOUCH_ACTION_PAN_Y$1;
  }
  if (inStr$1(actions, TOUCH_ACTION_MANIPULATION$1)) {
    return TOUCH_ACTION_MANIPULATION$1;
  }
  return TOUCH_ACTION_AUTO$1;
}
var TouchAction$1 = /* @__PURE__ */ function() {
  function TouchAction2(manager, value2) {
    this.manager = manager;
    this.set(value2);
  }
  var _proto = TouchAction2.prototype;
  _proto.set = function set2(value2) {
    if (value2 === TOUCH_ACTION_COMPUTE$1) {
      value2 = this.compute();
    }
    if (NATIVE_TOUCH_ACTION$1 && this.manager.element.style && TOUCH_ACTION_MAP$1[value2]) {
      this.manager.element.style[PREFIXED_TOUCH_ACTION$1] = value2;
    }
    this.actions = value2.toLowerCase().trim();
  };
  _proto.update = function update() {
    this.set(this.manager.options.touchAction);
  };
  _proto.compute = function compute() {
    var actions = [];
    each$1(this.manager.recognizers, function(recognizer) {
      if (boolOrFn$1(recognizer.options.enable, [recognizer])) {
        actions = actions.concat(recognizer.getTouchAction());
      }
    });
    return cleanTouchActions$1(actions.join(" "));
  };
  _proto.preventDefaults = function preventDefaults(input) {
    var srcEvent = input.srcEvent;
    var direction = input.offsetDirection;
    if (this.manager.session.prevented) {
      srcEvent.preventDefault();
      return;
    }
    var actions = this.actions;
    var hasNone = inStr$1(actions, TOUCH_ACTION_NONE$1) && !TOUCH_ACTION_MAP$1[TOUCH_ACTION_NONE$1];
    var hasPanY = inStr$1(actions, TOUCH_ACTION_PAN_Y$1) && !TOUCH_ACTION_MAP$1[TOUCH_ACTION_PAN_Y$1];
    var hasPanX = inStr$1(actions, TOUCH_ACTION_PAN_X$1) && !TOUCH_ACTION_MAP$1[TOUCH_ACTION_PAN_X$1];
    if (hasNone) {
      var isTapPointer = input.pointers.length === 1;
      var isTapMovement = input.distance < 2;
      var isTapTouchTime = input.deltaTime < 250;
      if (isTapPointer && isTapMovement && isTapTouchTime) {
        return;
      }
    }
    if (hasPanX && hasPanY) {
      return;
    }
    if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL$1 || hasPanX && direction & DIRECTION_VERTICAL$1) {
      return this.preventSrc(srcEvent);
    }
  };
  _proto.preventSrc = function preventSrc(srcEvent) {
    this.manager.session.prevented = true;
    srcEvent.preventDefault();
  };
  return TouchAction2;
}();
function hasParent$1(node2, parent2) {
  while (node2) {
    if (node2 === parent2) {
      return true;
    }
    node2 = node2.parentNode;
  }
  return false;
}
function getCenter$1(pointers) {
  var pointersLength = pointers.length;
  if (pointersLength === 1) {
    return {
      x: round$1(pointers[0].clientX),
      y: round$1(pointers[0].clientY)
    };
  }
  var x2 = 0;
  var y2 = 0;
  var i2 = 0;
  while (i2 < pointersLength) {
    x2 += pointers[i2].clientX;
    y2 += pointers[i2].clientY;
    i2++;
  }
  return {
    x: round$1(x2 / pointersLength),
    y: round$1(y2 / pointersLength)
  };
}
function simpleCloneInputData$1(input) {
  var pointers = [];
  var i2 = 0;
  while (i2 < input.pointers.length) {
    pointers[i2] = {
      clientX: round$1(input.pointers[i2].clientX),
      clientY: round$1(input.pointers[i2].clientY)
    };
    i2++;
  }
  return {
    timeStamp: now$4(),
    pointers,
    center: getCenter$1(pointers),
    deltaX: input.deltaX,
    deltaY: input.deltaY
  };
}
function getDistance$1(p1, p2, props) {
  if (!props) {
    props = PROPS_XY$1;
  }
  var x2 = p2[props[0]] - p1[props[0]];
  var y2 = p2[props[1]] - p1[props[1]];
  return Math.sqrt(x2 * x2 + y2 * y2);
}
function getAngle$1(p1, p2, props) {
  if (!props) {
    props = PROPS_XY$1;
  }
  var x2 = p2[props[0]] - p1[props[0]];
  var y2 = p2[props[1]] - p1[props[1]];
  return Math.atan2(y2, x2) * 180 / Math.PI;
}
function getDirection$1(x2, y2) {
  if (x2 === y2) {
    return DIRECTION_NONE$1;
  }
  if (abs$2(x2) >= abs$2(y2)) {
    return x2 < 0 ? DIRECTION_LEFT$1 : DIRECTION_RIGHT$1;
  }
  return y2 < 0 ? DIRECTION_UP$1 : DIRECTION_DOWN$1;
}
function computeDeltaXY$1(session, input) {
  var center = input.center;
  var offset2 = session.offsetDelta || {};
  var prevDelta = session.prevDelta || {};
  var prevInput = session.prevInput || {};
  if (input.eventType === INPUT_START$1 || prevInput.eventType === INPUT_END$1) {
    prevDelta = session.prevDelta = {
      x: prevInput.deltaX || 0,
      y: prevInput.deltaY || 0
    };
    offset2 = session.offsetDelta = {
      x: center.x,
      y: center.y
    };
  }
  input.deltaX = prevDelta.x + (center.x - offset2.x);
  input.deltaY = prevDelta.y + (center.y - offset2.y);
}
function getVelocity$1(deltaTime, x2, y2) {
  return {
    x: x2 / deltaTime || 0,
    y: y2 / deltaTime || 0
  };
}
function getScale$1(start2, end2) {
  return getDistance$1(end2[0], end2[1], PROPS_CLIENT_XY$1) / getDistance$1(start2[0], start2[1], PROPS_CLIENT_XY$1);
}
function getRotation$1(start2, end2) {
  return getAngle$1(end2[1], end2[0], PROPS_CLIENT_XY$1) + getAngle$1(start2[1], start2[0], PROPS_CLIENT_XY$1);
}
function computeIntervalInputData$1(session, input) {
  var last = session.lastInterval || input;
  var deltaTime = input.timeStamp - last.timeStamp;
  var velocity;
  var velocityX;
  var velocityY;
  var direction;
  if (input.eventType !== INPUT_CANCEL$1 && (deltaTime > COMPUTE_INTERVAL$1 || last.velocity === void 0)) {
    var deltaX = input.deltaX - last.deltaX;
    var deltaY = input.deltaY - last.deltaY;
    var v2 = getVelocity$1(deltaTime, deltaX, deltaY);
    velocityX = v2.x;
    velocityY = v2.y;
    velocity = abs$2(v2.x) > abs$2(v2.y) ? v2.x : v2.y;
    direction = getDirection$1(deltaX, deltaY);
    session.lastInterval = input;
  } else {
    velocity = last.velocity;
    velocityX = last.velocityX;
    velocityY = last.velocityY;
    direction = last.direction;
  }
  input.velocity = velocity;
  input.velocityX = velocityX;
  input.velocityY = velocityY;
  input.direction = direction;
}
function computeInputData$1(manager, input) {
  var session = manager.session;
  var pointers = input.pointers;
  var pointersLength = pointers.length;
  if (!session.firstInput) {
    session.firstInput = simpleCloneInputData$1(input);
  }
  if (pointersLength > 1 && !session.firstMultiple) {
    session.firstMultiple = simpleCloneInputData$1(input);
  } else if (pointersLength === 1) {
    session.firstMultiple = false;
  }
  var firstInput = session.firstInput, firstMultiple = session.firstMultiple;
  var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
  var center = input.center = getCenter$1(pointers);
  input.timeStamp = now$4();
  input.deltaTime = input.timeStamp - firstInput.timeStamp;
  input.angle = getAngle$1(offsetCenter, center);
  input.distance = getDistance$1(offsetCenter, center);
  computeDeltaXY$1(session, input);
  input.offsetDirection = getDirection$1(input.deltaX, input.deltaY);
  var overallVelocity = getVelocity$1(input.deltaTime, input.deltaX, input.deltaY);
  input.overallVelocityX = overallVelocity.x;
  input.overallVelocityY = overallVelocity.y;
  input.overallVelocity = abs$2(overallVelocity.x) > abs$2(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;
  input.scale = firstMultiple ? getScale$1(firstMultiple.pointers, pointers) : 1;
  input.rotation = firstMultiple ? getRotation$1(firstMultiple.pointers, pointers) : 0;
  input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;
  computeIntervalInputData$1(session, input);
  var target = manager.element;
  var srcEvent = input.srcEvent;
  var srcEventTarget;
  if (srcEvent.composedPath) {
    srcEventTarget = srcEvent.composedPath()[0];
  } else if (srcEvent.path) {
    srcEventTarget = srcEvent.path[0];
  } else {
    srcEventTarget = srcEvent.target;
  }
  if (hasParent$1(srcEventTarget, target)) {
    target = srcEventTarget;
  }
  input.target = target;
}
function inputHandler$1(manager, eventType, input) {
  var pointersLen = input.pointers.length;
  var changedPointersLen = input.changedPointers.length;
  var isFirst = eventType & INPUT_START$1 && pointersLen - changedPointersLen === 0;
  var isFinal = eventType & (INPUT_END$1 | INPUT_CANCEL$1) && pointersLen - changedPointersLen === 0;
  input.isFirst = !!isFirst;
  input.isFinal = !!isFinal;
  if (isFirst) {
    manager.session = {};
  }
  input.eventType = eventType;
  computeInputData$1(manager, input);
  manager.emit("hammer.input", input);
  manager.recognize(input);
  manager.session.prevInput = input;
}
function splitStr$1(str) {
  return str.trim().split(/\s+/g);
}
function addEventListeners$1(target, types, handler) {
  each$1(splitStr$1(types), function(type) {
    target.addEventListener(type, handler, false);
  });
}
function removeEventListeners$1(target, types, handler) {
  each$1(splitStr$1(types), function(type) {
    target.removeEventListener(type, handler, false);
  });
}
function getWindowForElement$1(element) {
  var doc2 = element.ownerDocument || element;
  return doc2.defaultView || doc2.parentWindow || window;
}
var Input$1 = /* @__PURE__ */ function() {
  function Input2(manager, callback) {
    var self2 = this;
    this.manager = manager;
    this.callback = callback;
    this.element = manager.element;
    this.target = manager.options.inputTarget;
    this.domHandler = function(ev) {
      if (boolOrFn$1(manager.options.enable, [manager])) {
        self2.handler(ev);
      }
    };
    this.init();
  }
  var _proto = Input2.prototype;
  _proto.handler = function handler() {
  };
  _proto.init = function init() {
    this.evEl && addEventListeners$1(this.element, this.evEl, this.domHandler);
    this.evTarget && addEventListeners$1(this.target, this.evTarget, this.domHandler);
    this.evWin && addEventListeners$1(getWindowForElement$1(this.element), this.evWin, this.domHandler);
  };
  _proto.destroy = function destroy() {
    this.evEl && removeEventListeners$1(this.element, this.evEl, this.domHandler);
    this.evTarget && removeEventListeners$1(this.target, this.evTarget, this.domHandler);
    this.evWin && removeEventListeners$1(getWindowForElement$1(this.element), this.evWin, this.domHandler);
  };
  return Input2;
}();
function inArray$1(src, find2, findByKey) {
  if (src.indexOf && !findByKey) {
    return src.indexOf(find2);
  } else {
    var i2 = 0;
    while (i2 < src.length) {
      if (findByKey && src[i2][findByKey] == find2 || !findByKey && src[i2] === find2) {
        return i2;
      }
      i2++;
    }
    return -1;
  }
}
var POINTER_INPUT_MAP$1 = {
  pointerdown: INPUT_START$1,
  pointermove: INPUT_MOVE$1,
  pointerup: INPUT_END$1,
  pointercancel: INPUT_CANCEL$1,
  pointerout: INPUT_CANCEL$1
};
var IE10_POINTER_TYPE_ENUM$1 = {
  2: INPUT_TYPE_TOUCH$1,
  3: INPUT_TYPE_PEN$1,
  4: INPUT_TYPE_MOUSE$1,
  5: INPUT_TYPE_KINECT$1
  // see https://twitter.com/jacobrossi/status/480596438489890816
};
var POINTER_ELEMENT_EVENTS$1 = "pointerdown";
var POINTER_WINDOW_EVENTS$1 = "pointermove pointerup pointercancel";
if (win$1.MSPointerEvent && !win$1.PointerEvent) {
  POINTER_ELEMENT_EVENTS$1 = "MSPointerDown";
  POINTER_WINDOW_EVENTS$1 = "MSPointerMove MSPointerUp MSPointerCancel";
}
var PointerEventInput$1 = /* @__PURE__ */ function(_Input) {
  _inheritsLoose$1(PointerEventInput2, _Input);
  function PointerEventInput2() {
    var _this;
    var proto = PointerEventInput2.prototype;
    proto.evEl = POINTER_ELEMENT_EVENTS$1;
    proto.evWin = POINTER_WINDOW_EVENTS$1;
    _this = _Input.apply(this, arguments) || this;
    _this.store = _this.manager.session.pointerEvents = [];
    return _this;
  }
  var _proto = PointerEventInput2.prototype;
  _proto.handler = function handler(ev) {
    var store2 = this.store;
    var removePointer = false;
    var eventTypeNormalized = ev.type.toLowerCase().replace("ms", "");
    var eventType = POINTER_INPUT_MAP$1[eventTypeNormalized];
    var pointerType = IE10_POINTER_TYPE_ENUM$1[ev.pointerType] || ev.pointerType;
    var isTouch = pointerType === INPUT_TYPE_TOUCH$1;
    var storeIndex = inArray$1(store2, ev.pointerId, "pointerId");
    if (eventType & INPUT_START$1 && (ev.button === 0 || isTouch)) {
      if (storeIndex < 0) {
        store2.push(ev);
        storeIndex = store2.length - 1;
      }
    } else if (eventType & (INPUT_END$1 | INPUT_CANCEL$1)) {
      removePointer = true;
    }
    if (storeIndex < 0) {
      return;
    }
    store2[storeIndex] = ev;
    this.callback(this.manager, eventType, {
      pointers: store2,
      changedPointers: [ev],
      pointerType,
      srcEvent: ev
    });
    if (removePointer) {
      store2.splice(storeIndex, 1);
    }
  };
  return PointerEventInput2;
}(Input$1);
function toArray$1(obj) {
  return Array.prototype.slice.call(obj, 0);
}
function uniqueArray$1(src, key2, sort4) {
  var results = [];
  var values2 = [];
  var i2 = 0;
  while (i2 < src.length) {
    var val = key2 ? src[i2][key2] : src[i2];
    if (inArray$1(values2, val) < 0) {
      results.push(src[i2]);
    }
    values2[i2] = val;
    i2++;
  }
  if (sort4) {
    if (!key2) {
      results = results.sort();
    } else {
      results = results.sort(function(a2, b2) {
        return a2[key2] > b2[key2];
      });
    }
  }
  return results;
}
var TOUCH_INPUT_MAP$1 = {
  touchstart: INPUT_START$1,
  touchmove: INPUT_MOVE$1,
  touchend: INPUT_END$1,
  touchcancel: INPUT_CANCEL$1
};
var TOUCH_TARGET_EVENTS$1 = "touchstart touchmove touchend touchcancel";
var TouchInput$1 = /* @__PURE__ */ function(_Input) {
  _inheritsLoose$1(TouchInput2, _Input);
  function TouchInput2() {
    var _this;
    TouchInput2.prototype.evTarget = TOUCH_TARGET_EVENTS$1;
    _this = _Input.apply(this, arguments) || this;
    _this.targetIds = {};
    return _this;
  }
  var _proto = TouchInput2.prototype;
  _proto.handler = function handler(ev) {
    var type = TOUCH_INPUT_MAP$1[ev.type];
    var touches = getTouches$1.call(this, ev, type);
    if (!touches) {
      return;
    }
    this.callback(this.manager, type, {
      pointers: touches[0],
      changedPointers: touches[1],
      pointerType: INPUT_TYPE_TOUCH$1,
      srcEvent: ev
    });
  };
  return TouchInput2;
}(Input$1);
function getTouches$1(ev, type) {
  var allTouches = toArray$1(ev.touches);
  var targetIds = this.targetIds;
  if (type & (INPUT_START$1 | INPUT_MOVE$1) && allTouches.length === 1) {
    targetIds[allTouches[0].identifier] = true;
    return [allTouches, allTouches];
  }
  var i2;
  var targetTouches;
  var changedTouches = toArray$1(ev.changedTouches);
  var changedTargetTouches = [];
  var target = this.target;
  targetTouches = allTouches.filter(function(touch) {
    return hasParent$1(touch.target, target);
  });
  if (type === INPUT_START$1) {
    i2 = 0;
    while (i2 < targetTouches.length) {
      targetIds[targetTouches[i2].identifier] = true;
      i2++;
    }
  }
  i2 = 0;
  while (i2 < changedTouches.length) {
    if (targetIds[changedTouches[i2].identifier]) {
      changedTargetTouches.push(changedTouches[i2]);
    }
    if (type & (INPUT_END$1 | INPUT_CANCEL$1)) {
      delete targetIds[changedTouches[i2].identifier];
    }
    i2++;
  }
  if (!changedTargetTouches.length) {
    return;
  }
  return [
    // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
    uniqueArray$1(targetTouches.concat(changedTargetTouches), "identifier", true),
    changedTargetTouches
  ];
}
var MOUSE_INPUT_MAP$1 = {
  mousedown: INPUT_START$1,
  mousemove: INPUT_MOVE$1,
  mouseup: INPUT_END$1
};
var MOUSE_ELEMENT_EVENTS$1 = "mousedown";
var MOUSE_WINDOW_EVENTS$1 = "mousemove mouseup";
var MouseInput$1 = /* @__PURE__ */ function(_Input) {
  _inheritsLoose$1(MouseInput2, _Input);
  function MouseInput2() {
    var _this;
    var proto = MouseInput2.prototype;
    proto.evEl = MOUSE_ELEMENT_EVENTS$1;
    proto.evWin = MOUSE_WINDOW_EVENTS$1;
    _this = _Input.apply(this, arguments) || this;
    _this.pressed = false;
    return _this;
  }
  var _proto = MouseInput2.prototype;
  _proto.handler = function handler(ev) {
    var eventType = MOUSE_INPUT_MAP$1[ev.type];
    if (eventType & INPUT_START$1 && ev.button === 0) {
      this.pressed = true;
    }
    if (eventType & INPUT_MOVE$1 && ev.which !== 1) {
      eventType = INPUT_END$1;
    }
    if (!this.pressed) {
      return;
    }
    if (eventType & INPUT_END$1) {
      this.pressed = false;
    }
    this.callback(this.manager, eventType, {
      pointers: [ev],
      changedPointers: [ev],
      pointerType: INPUT_TYPE_MOUSE$1,
      srcEvent: ev
    });
  };
  return MouseInput2;
}(Input$1);
var DEDUP_TIMEOUT$1 = 2500;
var DEDUP_DISTANCE$1 = 25;
function setLastTouch$1(eventData) {
  var _eventData$changedPoi = eventData.changedPointers, touch = _eventData$changedPoi[0];
  if (touch.identifier === this.primaryTouch) {
    var lastTouch = {
      x: touch.clientX,
      y: touch.clientY
    };
    var lts = this.lastTouches;
    this.lastTouches.push(lastTouch);
    var removeLastTouch = function removeLastTouch2() {
      var i2 = lts.indexOf(lastTouch);
      if (i2 > -1) {
        lts.splice(i2, 1);
      }
    };
    setTimeout(removeLastTouch, DEDUP_TIMEOUT$1);
  }
}
function recordTouches$1(eventType, eventData) {
  if (eventType & INPUT_START$1) {
    this.primaryTouch = eventData.changedPointers[0].identifier;
    setLastTouch$1.call(this, eventData);
  } else if (eventType & (INPUT_END$1 | INPUT_CANCEL$1)) {
    setLastTouch$1.call(this, eventData);
  }
}
function isSyntheticEvent$1(eventData) {
  var x2 = eventData.srcEvent.clientX;
  var y2 = eventData.srcEvent.clientY;
  for (var i2 = 0; i2 < this.lastTouches.length; i2++) {
    var t2 = this.lastTouches[i2];
    var dx = Math.abs(x2 - t2.x);
    var dy = Math.abs(y2 - t2.y);
    if (dx <= DEDUP_DISTANCE$1 && dy <= DEDUP_DISTANCE$1) {
      return true;
    }
  }
  return false;
}
var TouchMouseInput$1 = /* @__PURE__ */ function() {
  var TouchMouseInput2 = /* @__PURE__ */ function(_Input) {
    _inheritsLoose$1(TouchMouseInput3, _Input);
    function TouchMouseInput3(_manager, callback) {
      var _this;
      _this = _Input.call(this, _manager, callback) || this;
      _this.handler = function(manager, inputEvent, inputData) {
        var isTouch = inputData.pointerType === INPUT_TYPE_TOUCH$1;
        var isMouse = inputData.pointerType === INPUT_TYPE_MOUSE$1;
        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
          return;
        }
        if (isTouch) {
          recordTouches$1.call(_assertThisInitialized$1$1(_assertThisInitialized$1$1(_this)), inputEvent, inputData);
        } else if (isMouse && isSyntheticEvent$1.call(_assertThisInitialized$1$1(_assertThisInitialized$1$1(_this)), inputData)) {
          return;
        }
        _this.callback(manager, inputEvent, inputData);
      };
      _this.touch = new TouchInput$1(_this.manager, _this.handler);
      _this.mouse = new MouseInput$1(_this.manager, _this.handler);
      _this.primaryTouch = null;
      _this.lastTouches = [];
      return _this;
    }
    var _proto = TouchMouseInput3.prototype;
    _proto.destroy = function destroy() {
      this.touch.destroy();
      this.mouse.destroy();
    };
    return TouchMouseInput3;
  }(Input$1);
  return TouchMouseInput2;
}();
function createInputInstance$1(manager) {
  var Type;
  var inputClass = manager.options.inputClass;
  if (inputClass) {
    Type = inputClass;
  } else if (SUPPORT_POINTER_EVENTS$1) {
    Type = PointerEventInput$1;
  } else if (SUPPORT_ONLY_TOUCH$1) {
    Type = TouchInput$1;
  } else if (!SUPPORT_TOUCH$1) {
    Type = MouseInput$1;
  } else {
    Type = TouchMouseInput$1;
  }
  return new Type(manager, inputHandler$1);
}
function invokeArrayArg$1(arg, fn2, context) {
  if (Array.isArray(arg)) {
    each$1(arg, context[fn2], context);
    return true;
  }
  return false;
}
var STATE_POSSIBLE$1 = 1;
var STATE_BEGAN$1 = 2;
var STATE_CHANGED$1 = 4;
var STATE_ENDED$1 = 8;
var STATE_RECOGNIZED$1 = STATE_ENDED$1;
var STATE_CANCELLED$1 = 16;
var STATE_FAILED$1 = 32;
var _uniqueId$1 = 1;
function uniqueId$1() {
  return _uniqueId$1++;
}
function getRecognizerByNameIfManager$1(otherRecognizer, recognizer) {
  var manager = recognizer.manager;
  if (manager) {
    return manager.get(otherRecognizer);
  }
  return otherRecognizer;
}
function stateStr$1(state) {
  if (state & STATE_CANCELLED$1) {
    return "cancel";
  } else if (state & STATE_ENDED$1) {
    return "end";
  } else if (state & STATE_CHANGED$1) {
    return "move";
  } else if (state & STATE_BEGAN$1) {
    return "start";
  }
  return "";
}
var Recognizer$1 = /* @__PURE__ */ function() {
  function Recognizer2(options) {
    if (options === void 0) {
      options = {};
    }
    this.options = _extends$1({
      enable: true
    }, options);
    this.id = uniqueId$1();
    this.manager = null;
    this.state = STATE_POSSIBLE$1;
    this.simultaneous = {};
    this.requireFail = [];
  }
  var _proto = Recognizer2.prototype;
  _proto.set = function set2(options) {
    assign$1$1(this.options, options);
    this.manager && this.manager.touchAction.update();
    return this;
  };
  _proto.recognizeWith = function recognizeWith(otherRecognizer) {
    if (invokeArrayArg$1(otherRecognizer, "recognizeWith", this)) {
      return this;
    }
    var simultaneous = this.simultaneous;
    otherRecognizer = getRecognizerByNameIfManager$1(otherRecognizer, this);
    if (!simultaneous[otherRecognizer.id]) {
      simultaneous[otherRecognizer.id] = otherRecognizer;
      otherRecognizer.recognizeWith(this);
    }
    return this;
  };
  _proto.dropRecognizeWith = function dropRecognizeWith(otherRecognizer) {
    if (invokeArrayArg$1(otherRecognizer, "dropRecognizeWith", this)) {
      return this;
    }
    otherRecognizer = getRecognizerByNameIfManager$1(otherRecognizer, this);
    delete this.simultaneous[otherRecognizer.id];
    return this;
  };
  _proto.requireFailure = function requireFailure(otherRecognizer) {
    if (invokeArrayArg$1(otherRecognizer, "requireFailure", this)) {
      return this;
    }
    var requireFail = this.requireFail;
    otherRecognizer = getRecognizerByNameIfManager$1(otherRecognizer, this);
    if (inArray$1(requireFail, otherRecognizer) === -1) {
      requireFail.push(otherRecognizer);
      otherRecognizer.requireFailure(this);
    }
    return this;
  };
  _proto.dropRequireFailure = function dropRequireFailure(otherRecognizer) {
    if (invokeArrayArg$1(otherRecognizer, "dropRequireFailure", this)) {
      return this;
    }
    otherRecognizer = getRecognizerByNameIfManager$1(otherRecognizer, this);
    var index2 = inArray$1(this.requireFail, otherRecognizer);
    if (index2 > -1) {
      this.requireFail.splice(index2, 1);
    }
    return this;
  };
  _proto.hasRequireFailures = function hasRequireFailures() {
    return this.requireFail.length > 0;
  };
  _proto.canRecognizeWith = function canRecognizeWith(otherRecognizer) {
    return !!this.simultaneous[otherRecognizer.id];
  };
  _proto.emit = function emit2(input) {
    var self2 = this;
    var state = this.state;
    function emit3(event) {
      self2.manager.emit(event, input);
    }
    if (state < STATE_ENDED$1) {
      emit3(self2.options.event + stateStr$1(state));
    }
    emit3(self2.options.event);
    if (input.additionalEvent) {
      emit3(input.additionalEvent);
    }
    if (state >= STATE_ENDED$1) {
      emit3(self2.options.event + stateStr$1(state));
    }
  };
  _proto.tryEmit = function tryEmit(input) {
    if (this.canEmit()) {
      return this.emit(input);
    }
    this.state = STATE_FAILED$1;
  };
  _proto.canEmit = function canEmit() {
    var i2 = 0;
    while (i2 < this.requireFail.length) {
      if (!(this.requireFail[i2].state & (STATE_FAILED$1 | STATE_POSSIBLE$1))) {
        return false;
      }
      i2++;
    }
    return true;
  };
  _proto.recognize = function recognize(inputData) {
    var inputDataClone = assign$1$1({}, inputData);
    if (!boolOrFn$1(this.options.enable, [this, inputDataClone])) {
      this.reset();
      this.state = STATE_FAILED$1;
      return;
    }
    if (this.state & (STATE_RECOGNIZED$1 | STATE_CANCELLED$1 | STATE_FAILED$1)) {
      this.state = STATE_POSSIBLE$1;
    }
    this.state = this.process(inputDataClone);
    if (this.state & (STATE_BEGAN$1 | STATE_CHANGED$1 | STATE_ENDED$1 | STATE_CANCELLED$1)) {
      this.tryEmit(inputDataClone);
    }
  };
  _proto.process = function process2(inputData) {
  };
  _proto.getTouchAction = function getTouchAction() {
  };
  _proto.reset = function reset2() {
  };
  return Recognizer2;
}();
var TapRecognizer$1 = /* @__PURE__ */ function(_Recognizer) {
  _inheritsLoose$1(TapRecognizer2, _Recognizer);
  function TapRecognizer2(options) {
    var _this;
    if (options === void 0) {
      options = {};
    }
    _this = _Recognizer.call(this, _extends$1({
      event: "tap",
      pointers: 1,
      taps: 1,
      interval: 300,
      // max time between the multi-tap taps
      time: 250,
      // max time of the pointer to be down (like finger on the screen)
      threshold: 9,
      // a minimal movement is ok, but keep it low
      posThreshold: 10
    }, options)) || this;
    _this.pTime = false;
    _this.pCenter = false;
    _this._timer = null;
    _this._input = null;
    _this.count = 0;
    return _this;
  }
  var _proto = TapRecognizer2.prototype;
  _proto.getTouchAction = function getTouchAction() {
    return [TOUCH_ACTION_MANIPULATION$1];
  };
  _proto.process = function process2(input) {
    var _this2 = this;
    var options = this.options;
    var validPointers = input.pointers.length === options.pointers;
    var validMovement = input.distance < options.threshold;
    var validTouchTime = input.deltaTime < options.time;
    this.reset();
    if (input.eventType & INPUT_START$1 && this.count === 0) {
      return this.failTimeout();
    }
    if (validMovement && validTouchTime && validPointers) {
      if (input.eventType !== INPUT_END$1) {
        return this.failTimeout();
      }
      var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;
      var validMultiTap = !this.pCenter || getDistance$1(this.pCenter, input.center) < options.posThreshold;
      this.pTime = input.timeStamp;
      this.pCenter = input.center;
      if (!validMultiTap || !validInterval) {
        this.count = 1;
      } else {
        this.count += 1;
      }
      this._input = input;
      var tapCount = this.count % options.taps;
      if (tapCount === 0) {
        if (!this.hasRequireFailures()) {
          return STATE_RECOGNIZED$1;
        } else {
          this._timer = setTimeout(function() {
            _this2.state = STATE_RECOGNIZED$1;
            _this2.tryEmit();
          }, options.interval);
          return STATE_BEGAN$1;
        }
      }
    }
    return STATE_FAILED$1;
  };
  _proto.failTimeout = function failTimeout() {
    var _this3 = this;
    this._timer = setTimeout(function() {
      _this3.state = STATE_FAILED$1;
    }, this.options.interval);
    return STATE_FAILED$1;
  };
  _proto.reset = function reset2() {
    clearTimeout(this._timer);
  };
  _proto.emit = function emit2() {
    if (this.state === STATE_RECOGNIZED$1) {
      this._input.tapCount = this.count;
      this.manager.emit(this.options.event, this._input);
    }
  };
  return TapRecognizer2;
}(Recognizer$1);
var AttrRecognizer$1 = /* @__PURE__ */ function(_Recognizer) {
  _inheritsLoose$1(AttrRecognizer2, _Recognizer);
  function AttrRecognizer2(options) {
    if (options === void 0) {
      options = {};
    }
    return _Recognizer.call(this, _extends$1({
      pointers: 1
    }, options)) || this;
  }
  var _proto = AttrRecognizer2.prototype;
  _proto.attrTest = function attrTest(input) {
    var optionPointers = this.options.pointers;
    return optionPointers === 0 || input.pointers.length === optionPointers;
  };
  _proto.process = function process2(input) {
    var state = this.state;
    var eventType = input.eventType;
    var isRecognized = state & (STATE_BEGAN$1 | STATE_CHANGED$1);
    var isValid = this.attrTest(input);
    if (isRecognized && (eventType & INPUT_CANCEL$1 || !isValid)) {
      return state | STATE_CANCELLED$1;
    } else if (isRecognized || isValid) {
      if (eventType & INPUT_END$1) {
        return state | STATE_ENDED$1;
      } else if (!(state & STATE_BEGAN$1)) {
        return STATE_BEGAN$1;
      }
      return state | STATE_CHANGED$1;
    }
    return STATE_FAILED$1;
  };
  return AttrRecognizer2;
}(Recognizer$1);
function directionStr$1(direction) {
  if (direction === DIRECTION_DOWN$1) {
    return "down";
  } else if (direction === DIRECTION_UP$1) {
    return "up";
  } else if (direction === DIRECTION_LEFT$1) {
    return "left";
  } else if (direction === DIRECTION_RIGHT$1) {
    return "right";
  }
  return "";
}
var PanRecognizer$1 = /* @__PURE__ */ function(_AttrRecognizer) {
  _inheritsLoose$1(PanRecognizer2, _AttrRecognizer);
  function PanRecognizer2(options) {
    var _this;
    if (options === void 0) {
      options = {};
    }
    _this = _AttrRecognizer.call(this, _extends$1({
      event: "pan",
      threshold: 10,
      pointers: 1,
      direction: DIRECTION_ALL$1
    }, options)) || this;
    _this.pX = null;
    _this.pY = null;
    return _this;
  }
  var _proto = PanRecognizer2.prototype;
  _proto.getTouchAction = function getTouchAction() {
    var direction = this.options.direction;
    var actions = [];
    if (direction & DIRECTION_HORIZONTAL$1) {
      actions.push(TOUCH_ACTION_PAN_Y$1);
    }
    if (direction & DIRECTION_VERTICAL$1) {
      actions.push(TOUCH_ACTION_PAN_X$1);
    }
    return actions;
  };
  _proto.directionTest = function directionTest(input) {
    var options = this.options;
    var hasMoved = true;
    var distance = input.distance;
    var direction = input.direction;
    var x2 = input.deltaX;
    var y2 = input.deltaY;
    if (!(direction & options.direction)) {
      if (options.direction & DIRECTION_HORIZONTAL$1) {
        direction = x2 === 0 ? DIRECTION_NONE$1 : x2 < 0 ? DIRECTION_LEFT$1 : DIRECTION_RIGHT$1;
        hasMoved = x2 !== this.pX;
        distance = Math.abs(input.deltaX);
      } else {
        direction = y2 === 0 ? DIRECTION_NONE$1 : y2 < 0 ? DIRECTION_UP$1 : DIRECTION_DOWN$1;
        hasMoved = y2 !== this.pY;
        distance = Math.abs(input.deltaY);
      }
    }
    input.direction = direction;
    return hasMoved && distance > options.threshold && direction & options.direction;
  };
  _proto.attrTest = function attrTest(input) {
    return AttrRecognizer$1.prototype.attrTest.call(this, input) && // replace with a super call
    (this.state & STATE_BEGAN$1 || !(this.state & STATE_BEGAN$1) && this.directionTest(input));
  };
  _proto.emit = function emit2(input) {
    this.pX = input.deltaX;
    this.pY = input.deltaY;
    var direction = directionStr$1(input.direction);
    if (direction) {
      input.additionalEvent = this.options.event + direction;
    }
    _AttrRecognizer.prototype.emit.call(this, input);
  };
  return PanRecognizer2;
}(AttrRecognizer$1);
var SwipeRecognizer$1 = /* @__PURE__ */ function(_AttrRecognizer) {
  _inheritsLoose$1(SwipeRecognizer2, _AttrRecognizer);
  function SwipeRecognizer2(options) {
    if (options === void 0) {
      options = {};
    }
    return _AttrRecognizer.call(this, _extends$1({
      event: "swipe",
      threshold: 10,
      velocity: 0.3,
      direction: DIRECTION_HORIZONTAL$1 | DIRECTION_VERTICAL$1,
      pointers: 1
    }, options)) || this;
  }
  var _proto = SwipeRecognizer2.prototype;
  _proto.getTouchAction = function getTouchAction() {
    return PanRecognizer$1.prototype.getTouchAction.call(this);
  };
  _proto.attrTest = function attrTest(input) {
    var direction = this.options.direction;
    var velocity;
    if (direction & (DIRECTION_HORIZONTAL$1 | DIRECTION_VERTICAL$1)) {
      velocity = input.overallVelocity;
    } else if (direction & DIRECTION_HORIZONTAL$1) {
      velocity = input.overallVelocityX;
    } else if (direction & DIRECTION_VERTICAL$1) {
      velocity = input.overallVelocityY;
    }
    return _AttrRecognizer.prototype.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers === this.options.pointers && abs$2(velocity) > this.options.velocity && input.eventType & INPUT_END$1;
  };
  _proto.emit = function emit2(input) {
    var direction = directionStr$1(input.offsetDirection);
    if (direction) {
      this.manager.emit(this.options.event + direction, input);
    }
    this.manager.emit(this.options.event, input);
  };
  return SwipeRecognizer2;
}(AttrRecognizer$1);
var PinchRecognizer$1 = /* @__PURE__ */ function(_AttrRecognizer) {
  _inheritsLoose$1(PinchRecognizer2, _AttrRecognizer);
  function PinchRecognizer2(options) {
    if (options === void 0) {
      options = {};
    }
    return _AttrRecognizer.call(this, _extends$1({
      event: "pinch",
      threshold: 0,
      pointers: 2
    }, options)) || this;
  }
  var _proto = PinchRecognizer2.prototype;
  _proto.getTouchAction = function getTouchAction() {
    return [TOUCH_ACTION_NONE$1];
  };
  _proto.attrTest = function attrTest(input) {
    return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN$1);
  };
  _proto.emit = function emit2(input) {
    if (input.scale !== 1) {
      var inOut = input.scale < 1 ? "in" : "out";
      input.additionalEvent = this.options.event + inOut;
    }
    _AttrRecognizer.prototype.emit.call(this, input);
  };
  return PinchRecognizer2;
}(AttrRecognizer$1);
var RotateRecognizer$1 = /* @__PURE__ */ function(_AttrRecognizer) {
  _inheritsLoose$1(RotateRecognizer2, _AttrRecognizer);
  function RotateRecognizer2(options) {
    if (options === void 0) {
      options = {};
    }
    return _AttrRecognizer.call(this, _extends$1({
      event: "rotate",
      threshold: 0,
      pointers: 2
    }, options)) || this;
  }
  var _proto = RotateRecognizer2.prototype;
  _proto.getTouchAction = function getTouchAction() {
    return [TOUCH_ACTION_NONE$1];
  };
  _proto.attrTest = function attrTest(input) {
    return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN$1);
  };
  return RotateRecognizer2;
}(AttrRecognizer$1);
var PressRecognizer$1 = /* @__PURE__ */ function(_Recognizer) {
  _inheritsLoose$1(PressRecognizer2, _Recognizer);
  function PressRecognizer2(options) {
    var _this;
    if (options === void 0) {
      options = {};
    }
    _this = _Recognizer.call(this, _extends$1({
      event: "press",
      pointers: 1,
      time: 251,
      // minimal time of the pointer to be pressed
      threshold: 9
    }, options)) || this;
    _this._timer = null;
    _this._input = null;
    return _this;
  }
  var _proto = PressRecognizer2.prototype;
  _proto.getTouchAction = function getTouchAction() {
    return [TOUCH_ACTION_AUTO$1];
  };
  _proto.process = function process2(input) {
    var _this2 = this;
    var options = this.options;
    var validPointers = input.pointers.length === options.pointers;
    var validMovement = input.distance < options.threshold;
    var validTime = input.deltaTime > options.time;
    this._input = input;
    if (!validMovement || !validPointers || input.eventType & (INPUT_END$1 | INPUT_CANCEL$1) && !validTime) {
      this.reset();
    } else if (input.eventType & INPUT_START$1) {
      this.reset();
      this._timer = setTimeout(function() {
        _this2.state = STATE_RECOGNIZED$1;
        _this2.tryEmit();
      }, options.time);
    } else if (input.eventType & INPUT_END$1) {
      return STATE_RECOGNIZED$1;
    }
    return STATE_FAILED$1;
  };
  _proto.reset = function reset2() {
    clearTimeout(this._timer);
  };
  _proto.emit = function emit2(input) {
    if (this.state !== STATE_RECOGNIZED$1) {
      return;
    }
    if (input && input.eventType & INPUT_END$1) {
      this.manager.emit(this.options.event + "up", input);
    } else {
      this._input.timeStamp = now$4();
      this.manager.emit(this.options.event, this._input);
    }
  };
  return PressRecognizer2;
}(Recognizer$1);
var defaults$1 = {
  /**
   * @private
   * set if DOM events are being triggered.
   * But this is slower and unused by simple implementations, so disabled by default.
   * @type {Boolean}
   * @default false
   */
  domEvents: false,
  /**
   * @private
   * The value for the touchAction property/fallback.
   * When set to `compute` it will magically set the correct value based on the added recognizers.
   * @type {String}
   * @default compute
   */
  touchAction: TOUCH_ACTION_COMPUTE$1,
  /**
   * @private
   * @type {Boolean}
   * @default true
   */
  enable: true,
  /**
   * @private
   * EXPERIMENTAL FEATURE -- can be removed/changed
   * Change the parent input target element.
   * If Null, then it is being set the to main element.
   * @type {Null|EventTarget}
   * @default null
   */
  inputTarget: null,
  /**
   * @private
   * force an input class
   * @type {Null|Function}
   * @default null
   */
  inputClass: null,
  /**
   * @private
   * Some CSS properties can be used to improve the working of Hammer.
   * Add them to this method and they will be set when creating a new Manager.
   * @namespace
   */
  cssProps: {
    /**
     * @private
     * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
     * @type {String}
     * @default 'none'
     */
    userSelect: "none",
    /**
     * @private
     * Disable the Windows Phone grippers when pressing an element.
     * @type {String}
     * @default 'none'
     */
    touchSelect: "none",
    /**
     * @private
     * Disables the default callout shown when you touch and hold a touch target.
     * On iOS, when you touch and hold a touch target such as a link, Safari displays
     * a callout containing information about the link. This property allows you to disable that callout.
     * @type {String}
     * @default 'none'
     */
    touchCallout: "none",
    /**
     * @private
     * Specifies whether zooming is enabled. Used by IE10>
     * @type {String}
     * @default 'none'
     */
    contentZooming: "none",
    /**
     * @private
     * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
     * @type {String}
     * @default 'none'
     */
    userDrag: "none",
    /**
     * @private
     * Overrides the highlight color shown when the user taps a link or a JavaScript
     * clickable element in iOS. This property obeys the alpha value, if specified.
     * @type {String}
     * @default 'rgba(0,0,0,0)'
     */
    tapHighlightColor: "rgba(0,0,0,0)"
  }
};
var preset$1 = [[RotateRecognizer$1, {
  enable: false
}], [PinchRecognizer$1, {
  enable: false
}, ["rotate"]], [SwipeRecognizer$1, {
  direction: DIRECTION_HORIZONTAL$1
}], [PanRecognizer$1, {
  direction: DIRECTION_HORIZONTAL$1
}, ["swipe"]], [TapRecognizer$1], [TapRecognizer$1, {
  event: "doubletap",
  taps: 2
}, ["tap"]], [PressRecognizer$1]];
var STOP$1 = 1;
var FORCED_STOP$1 = 2;
function toggleCssProps$1(manager, add) {
  var element = manager.element;
  if (!element.style) {
    return;
  }
  var prop;
  each$1(manager.options.cssProps, function(value2, name) {
    prop = prefixed$1(element.style, name);
    if (add) {
      manager.oldCssProps[prop] = element.style[prop];
      element.style[prop] = value2;
    } else {
      element.style[prop] = manager.oldCssProps[prop] || "";
    }
  });
  if (!add) {
    manager.oldCssProps = {};
  }
}
function triggerDomEvent$1(event, data2) {
  var gestureEvent = document.createEvent("Event");
  gestureEvent.initEvent(event, true, true);
  gestureEvent.gesture = data2;
  data2.target.dispatchEvent(gestureEvent);
}
var Manager$1 = /* @__PURE__ */ function() {
  function Manager2(element, options) {
    var _this = this;
    this.options = assign$1$1({}, defaults$1, options || {});
    this.options.inputTarget = this.options.inputTarget || element;
    this.handlers = {};
    this.session = {};
    this.recognizers = [];
    this.oldCssProps = {};
    this.element = element;
    this.input = createInputInstance$1(this);
    this.touchAction = new TouchAction$1(this, this.options.touchAction);
    toggleCssProps$1(this, true);
    each$1(this.options.recognizers, function(item) {
      var recognizer = _this.add(new item[0](item[1]));
      item[2] && recognizer.recognizeWith(item[2]);
      item[3] && recognizer.requireFailure(item[3]);
    }, this);
  }
  var _proto = Manager2.prototype;
  _proto.set = function set2(options) {
    assign$1$1(this.options, options);
    if (options.touchAction) {
      this.touchAction.update();
    }
    if (options.inputTarget) {
      this.input.destroy();
      this.input.target = options.inputTarget;
      this.input.init();
    }
    return this;
  };
  _proto.stop = function stop2(force) {
    this.session.stopped = force ? FORCED_STOP$1 : STOP$1;
  };
  _proto.recognize = function recognize(inputData) {
    var session = this.session;
    if (session.stopped) {
      return;
    }
    this.touchAction.preventDefaults(inputData);
    var recognizer;
    var recognizers = this.recognizers;
    var curRecognizer = session.curRecognizer;
    if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED$1) {
      session.curRecognizer = null;
      curRecognizer = null;
    }
    var i2 = 0;
    while (i2 < recognizers.length) {
      recognizer = recognizers[i2];
      if (session.stopped !== FORCED_STOP$1 && // 1
      (!curRecognizer || recognizer === curRecognizer || // 2
      recognizer.canRecognizeWith(curRecognizer))) {
        recognizer.recognize(inputData);
      } else {
        recognizer.reset();
      }
      if (!curRecognizer && recognizer.state & (STATE_BEGAN$1 | STATE_CHANGED$1 | STATE_ENDED$1)) {
        session.curRecognizer = recognizer;
        curRecognizer = recognizer;
      }
      i2++;
    }
  };
  _proto.get = function get2(recognizer) {
    if (recognizer instanceof Recognizer$1) {
      return recognizer;
    }
    var recognizers = this.recognizers;
    for (var i2 = 0; i2 < recognizers.length; i2++) {
      if (recognizers[i2].options.event === recognizer) {
        return recognizers[i2];
      }
    }
    return null;
  };
  _proto.add = function add(recognizer) {
    if (invokeArrayArg$1(recognizer, "add", this)) {
      return this;
    }
    var existing = this.get(recognizer.options.event);
    if (existing) {
      this.remove(existing);
    }
    this.recognizers.push(recognizer);
    recognizer.manager = this;
    this.touchAction.update();
    return recognizer;
  };
  _proto.remove = function remove2(recognizer) {
    if (invokeArrayArg$1(recognizer, "remove", this)) {
      return this;
    }
    var targetRecognizer = this.get(recognizer);
    if (recognizer) {
      var recognizers = this.recognizers;
      var index2 = inArray$1(recognizers, targetRecognizer);
      if (index2 !== -1) {
        recognizers.splice(index2, 1);
        this.touchAction.update();
      }
    }
    return this;
  };
  _proto.on = function on(events, handler) {
    if (events === void 0 || handler === void 0) {
      return this;
    }
    var handlers = this.handlers;
    each$1(splitStr$1(events), function(event) {
      handlers[event] = handlers[event] || [];
      handlers[event].push(handler);
    });
    return this;
  };
  _proto.off = function off(events, handler) {
    if (events === void 0) {
      return this;
    }
    var handlers = this.handlers;
    each$1(splitStr$1(events), function(event) {
      if (!handler) {
        delete handlers[event];
      } else {
        handlers[event] && handlers[event].splice(inArray$1(handlers[event], handler), 1);
      }
    });
    return this;
  };
  _proto.emit = function emit2(event, data2) {
    if (this.options.domEvents) {
      triggerDomEvent$1(event, data2);
    }
    var handlers = this.handlers[event] && this.handlers[event].slice();
    if (!handlers || !handlers.length) {
      return;
    }
    data2.type = event;
    data2.preventDefault = function() {
      data2.srcEvent.preventDefault();
    };
    var i2 = 0;
    while (i2 < handlers.length) {
      handlers[i2](data2);
      i2++;
    }
  };
  _proto.destroy = function destroy() {
    this.element && toggleCssProps$1(this, false);
    this.handlers = {};
    this.session = {};
    this.input.destroy();
    this.element = null;
  };
  return Manager2;
}();
var SINGLE_TOUCH_INPUT_MAP$1 = {
  touchstart: INPUT_START$1,
  touchmove: INPUT_MOVE$1,
  touchend: INPUT_END$1,
  touchcancel: INPUT_CANCEL$1
};
var SINGLE_TOUCH_TARGET_EVENTS$1 = "touchstart";
var SINGLE_TOUCH_WINDOW_EVENTS$1 = "touchstart touchmove touchend touchcancel";
var SingleTouchInput$1 = /* @__PURE__ */ function(_Input) {
  _inheritsLoose$1(SingleTouchInput2, _Input);
  function SingleTouchInput2() {
    var _this;
    var proto = SingleTouchInput2.prototype;
    proto.evTarget = SINGLE_TOUCH_TARGET_EVENTS$1;
    proto.evWin = SINGLE_TOUCH_WINDOW_EVENTS$1;
    _this = _Input.apply(this, arguments) || this;
    _this.started = false;
    return _this;
  }
  var _proto = SingleTouchInput2.prototype;
  _proto.handler = function handler(ev) {
    var type = SINGLE_TOUCH_INPUT_MAP$1[ev.type];
    if (type === INPUT_START$1) {
      this.started = true;
    }
    if (!this.started) {
      return;
    }
    var touches = normalizeSingleTouches$1.call(this, ev, type);
    if (type & (INPUT_END$1 | INPUT_CANCEL$1) && touches[0].length - touches[1].length === 0) {
      this.started = false;
    }
    this.callback(this.manager, type, {
      pointers: touches[0],
      changedPointers: touches[1],
      pointerType: INPUT_TYPE_TOUCH$1,
      srcEvent: ev
    });
  };
  return SingleTouchInput2;
}(Input$1);
function normalizeSingleTouches$1(ev, type) {
  var all2 = toArray$1(ev.touches);
  var changed = toArray$1(ev.changedTouches);
  if (type & (INPUT_END$1 | INPUT_CANCEL$1)) {
    all2 = uniqueArray$1(all2.concat(changed), "identifier", true);
  }
  return [all2, changed];
}
function deprecate$1(method2, name, message2) {
  var deprecationMessage = "DEPRECATED METHOD: " + name + "\n" + message2 + " AT \n";
  return function() {
    var e2 = new Error("get-stack-trace");
    var stack2 = e2 && e2.stack ? e2.stack.replace(/^[^\(]+?[\n$]/gm, "").replace(/^\s+at\s+/gm, "").replace(/^Object.<anonymous>\s*\(/gm, "{anonymous}()@") : "Unknown Stack Trace";
    var log = window.console && (window.console.warn || window.console.log);
    if (log) {
      log.call(window.console, deprecationMessage, stack2);
    }
    return method2.apply(this, arguments);
  };
}
var extend$1 = deprecate$1(function(dest, src, merge2) {
  var keys6 = Object.keys(src);
  var i2 = 0;
  while (i2 < keys6.length) {
    if (!merge2 || merge2 && dest[keys6[i2]] === void 0) {
      dest[keys6[i2]] = src[keys6[i2]];
    }
    i2++;
  }
  return dest;
}, "extend", "Use `assign`.");
var merge$1$1 = deprecate$1(function(dest, src) {
  return extend$1(dest, src, true);
}, "merge", "Use `assign`.");
function inherit$1(child2, base, properties) {
  var baseP = base.prototype;
  var childP;
  childP = child2.prototype = Object.create(baseP);
  childP.constructor = child2;
  childP._super = baseP;
  if (properties) {
    assign$1$1(childP, properties);
  }
}
function bindFn$1(fn2, context) {
  return function boundFn() {
    return fn2.apply(context, arguments);
  };
}
var Hammer$3 = /* @__PURE__ */ function() {
  var Hammer2 = (
    /**
      * @private
      * @const {string}
      */
    function Hammer3(element, options) {
      if (options === void 0) {
        options = {};
      }
      return new Manager$1(element, _extends$1({
        recognizers: preset$1.concat()
      }, options));
    }
  );
  Hammer2.VERSION = "2.0.17-rc";
  Hammer2.DIRECTION_ALL = DIRECTION_ALL$1;
  Hammer2.DIRECTION_DOWN = DIRECTION_DOWN$1;
  Hammer2.DIRECTION_LEFT = DIRECTION_LEFT$1;
  Hammer2.DIRECTION_RIGHT = DIRECTION_RIGHT$1;
  Hammer2.DIRECTION_UP = DIRECTION_UP$1;
  Hammer2.DIRECTION_HORIZONTAL = DIRECTION_HORIZONTAL$1;
  Hammer2.DIRECTION_VERTICAL = DIRECTION_VERTICAL$1;
  Hammer2.DIRECTION_NONE = DIRECTION_NONE$1;
  Hammer2.DIRECTION_DOWN = DIRECTION_DOWN$1;
  Hammer2.INPUT_START = INPUT_START$1;
  Hammer2.INPUT_MOVE = INPUT_MOVE$1;
  Hammer2.INPUT_END = INPUT_END$1;
  Hammer2.INPUT_CANCEL = INPUT_CANCEL$1;
  Hammer2.STATE_POSSIBLE = STATE_POSSIBLE$1;
  Hammer2.STATE_BEGAN = STATE_BEGAN$1;
  Hammer2.STATE_CHANGED = STATE_CHANGED$1;
  Hammer2.STATE_ENDED = STATE_ENDED$1;
  Hammer2.STATE_RECOGNIZED = STATE_RECOGNIZED$1;
  Hammer2.STATE_CANCELLED = STATE_CANCELLED$1;
  Hammer2.STATE_FAILED = STATE_FAILED$1;
  Hammer2.Manager = Manager$1;
  Hammer2.Input = Input$1;
  Hammer2.TouchAction = TouchAction$1;
  Hammer2.TouchInput = TouchInput$1;
  Hammer2.MouseInput = MouseInput$1;
  Hammer2.PointerEventInput = PointerEventInput$1;
  Hammer2.TouchMouseInput = TouchMouseInput$1;
  Hammer2.SingleTouchInput = SingleTouchInput$1;
  Hammer2.Recognizer = Recognizer$1;
  Hammer2.AttrRecognizer = AttrRecognizer$1;
  Hammer2.Tap = TapRecognizer$1;
  Hammer2.Pan = PanRecognizer$1;
  Hammer2.Swipe = SwipeRecognizer$1;
  Hammer2.Pinch = PinchRecognizer$1;
  Hammer2.Rotate = RotateRecognizer$1;
  Hammer2.Press = PressRecognizer$1;
  Hammer2.on = addEventListeners$1;
  Hammer2.off = removeEventListeners$1;
  Hammer2.each = each$1;
  Hammer2.merge = merge$1$1;
  Hammer2.extend = extend$1;
  Hammer2.bindFn = bindFn$1;
  Hammer2.assign = assign$1$1;
  Hammer2.inherit = inherit$1;
  Hammer2.bindFn = bindFn$1;
  Hammer2.prefixed = prefixed$1;
  Hammer2.toArray = toArray$1;
  Hammer2.inArray = inArray$1;
  Hammer2.uniqueArray = uniqueArray$1;
  Hammer2.splitStr = splitStr$1;
  Hammer2.boolOrFn = boolOrFn$1;
  Hammer2.hasParent = hasParent$1;
  Hammer2.addEventListeners = addEventListeners$1;
  Hammer2.removeEventListeners = removeEventListeners$1;
  Hammer2.defaults = assign$1$1({}, defaults$1, {
    preset: preset$1
  });
  return Hammer2;
}();
var RealHammer$1 = Hammer$3;
function _createForOfIteratorHelper$3$1(o2, allowArrayLike) {
  var it2 = typeof _Symbol$2 !== "undefined" && _getIteratorMethod$2(o2) || o2["@@iterator"];
  if (!it2) {
    if (_Array$isArray$2(o2) || (it2 = _unsupportedIterableToArray$3$1(o2)) || allowArrayLike) {
      if (it2) o2 = it2;
      var i2 = 0;
      var F = function F2() {
      };
      return { s: F, n: function n2() {
        if (i2 >= o2.length) return { done: true };
        return { done: false, value: o2[i2++] };
      }, e: function e2(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s2() {
    it2 = it2.call(o2);
  }, n: function n2() {
    var step = it2.next();
    normalCompletion = step.done;
    return step;
  }, e: function e2(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f2() {
    try {
      if (!normalCompletion && it2.return != null) it2.return();
    } finally {
      if (didErr) throw err;
    }
  } };
}
function _unsupportedIterableToArray$3$1(o2, minLen) {
  var _context15;
  if (!o2) return;
  if (typeof o2 === "string") return _arrayLikeToArray$3$1(o2, minLen);
  var n2 = _sliceInstanceProperty$2(_context15 = Object.prototype.toString.call(o2)).call(_context15, 8, -1);
  if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set") return _Array$from$1$1(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$3$1(o2, minLen);
}
function _arrayLikeToArray$3$1(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
  return arr2;
}
var DELETE = _Symbol$2("DELETE");
function pureDeepObjectAssign(base) {
  var _context;
  for (var _len = arguments.length, updates = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    updates[_key - 1] = arguments[_key];
  }
  return deepObjectAssign.apply(void 0, _concatInstanceProperty$1(_context = [{}, base]).call(_context, updates));
}
function deepObjectAssign() {
  var merged = deepObjectAssignNonentry.apply(void 0, arguments);
  stripDelete(merged);
  return merged;
}
function deepObjectAssignNonentry() {
  for (var _len2 = arguments.length, values2 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    values2[_key2] = arguments[_key2];
  }
  if (values2.length < 2) {
    return values2[0];
  } else if (values2.length > 2) {
    var _context2;
    return deepObjectAssignNonentry.apply(void 0, _concatInstanceProperty$1(_context2 = [deepObjectAssign(values2[0], values2[1])]).call(_context2, _toConsumableArray$1(_sliceInstanceProperty$2(values2).call(values2, 2))));
  }
  var a2 = values2[0];
  var b2 = values2[1];
  if (a2 instanceof Date && b2 instanceof Date) {
    a2.setTime(b2.getTime());
    return a2;
  }
  var _iterator = _createForOfIteratorHelper$3$1(_Reflect$ownKeys(b2)), _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var prop = _step.value;
      if (!Object.prototype.propertyIsEnumerable.call(b2, prop)) ;
      else if (b2[prop] === DELETE) {
        delete a2[prop];
      } else if (a2[prop] !== null && b2[prop] !== null && typeof a2[prop] === "object" && typeof b2[prop] === "object" && !_Array$isArray$2(a2[prop]) && !_Array$isArray$2(b2[prop])) {
        a2[prop] = deepObjectAssignNonentry(a2[prop], b2[prop]);
      } else {
        a2[prop] = clone$1(b2[prop]);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return a2;
}
function clone$1(a2) {
  if (_Array$isArray$2(a2)) {
    return _mapInstanceProperty$1(a2).call(a2, function(value2) {
      return clone$1(value2);
    });
  } else if (typeof a2 === "object" && a2 !== null) {
    if (a2 instanceof Date) {
      return new Date(a2.getTime());
    }
    return deepObjectAssignNonentry({}, a2);
  } else {
    return a2;
  }
}
function stripDelete(a2) {
  for (var _i = 0, _Object$keys$1$1 = _Object$keys$1(a2); _i < _Object$keys$1$1.length; _i++) {
    var prop = _Object$keys$1$1[_i];
    if (a2[prop] === DELETE) {
      delete a2[prop];
    } else if (typeof a2[prop] === "object" && a2[prop] !== null) {
      stripDelete(a2[prop]);
    }
  }
}
function hammerMock$1() {
  var noop2 = function noop3() {
  };
  return {
    on: noop2,
    off: noop2,
    destroy: noop2,
    emit: noop2,
    get() {
      return {
        set: noop2
      };
    }
  };
}
var Hammer$1$1 = typeof window !== "undefined" ? window.Hammer || RealHammer$1 : function() {
  return hammerMock$1();
};
function Activator$1$1(container) {
  var _this = this, _context3;
  this._cleanupQueue = [];
  this.active = false;
  this._dom = {
    container,
    overlay: document.createElement("div")
  };
  this._dom.overlay.classList.add("vis-overlay");
  this._dom.container.appendChild(this._dom.overlay);
  this._cleanupQueue.push(function() {
    _this._dom.overlay.parentNode.removeChild(_this._dom.overlay);
  });
  var hammer2 = Hammer$1$1(this._dom.overlay);
  hammer2.on("tap", _bindInstanceProperty$1$1(_context3 = this._onTapOverlay).call(_context3, this));
  this._cleanupQueue.push(function() {
    hammer2.destroy();
  });
  var events = ["tap", "doubletap", "press", "pinch", "pan", "panstart", "panmove", "panend"];
  _forEachInstanceProperty$1(events).call(events, function(event) {
    hammer2.on(event, function(event2) {
      event2.srcEvent.stopPropagation();
    });
  });
  if (document && document.body) {
    this._onClick = function(event) {
      if (!_hasParent$1(event.target, container)) {
        _this.deactivate();
      }
    };
    document.body.addEventListener("click", this._onClick);
    this._cleanupQueue.push(function() {
      document.body.removeEventListener("click", _this._onClick);
    });
  }
  this._escListener = function(event) {
    if ("key" in event ? event.key === "Escape" : event.keyCode === 27) {
      _this.deactivate();
    }
  };
}
Emitter$1(Activator$1$1.prototype);
Activator$1$1.current = null;
Activator$1$1.prototype.destroy = function() {
  var _context4, _context5;
  this.deactivate();
  var _iterator2 = _createForOfIteratorHelper$3$1(_reverseInstanceProperty$1(_context4 = _spliceInstanceProperty$1(_context5 = this._cleanupQueue).call(_context5, 0)).call(_context4)), _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
      var callback = _step2.value;
      callback();
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
};
Activator$1$1.prototype.activate = function() {
  if (Activator$1$1.current) {
    Activator$1$1.current.deactivate();
  }
  Activator$1$1.current = this;
  this.active = true;
  this._dom.overlay.style.display = "none";
  this._dom.container.classList.add("vis-active");
  this.emit("change");
  this.emit("activate");
  document.body.addEventListener("keydown", this._escListener);
};
Activator$1$1.prototype.deactivate = function() {
  this.active = false;
  this._dom.overlay.style.display = "block";
  this._dom.container.classList.remove("vis-active");
  document.body.removeEventListener("keydown", this._escListener);
  this.emit("change");
  this.emit("deactivate");
};
Activator$1$1.prototype._onTapOverlay = function(event) {
  this.activate();
  event.srcEvent.stopPropagation();
};
function _hasParent$1(element, parent2) {
  while (element) {
    if (element === parent2) {
      return true;
    }
    element = element.parentNode;
  }
  return false;
}
var isConstructor$5 = isConstructor$4$1;
var tryToString$1$1 = tryToString$6$1;
var $TypeError$3$1 = TypeError;
var aConstructor$2 = function(argument) {
  if (isConstructor$5(argument)) return argument;
  throw new $TypeError$3$1(tryToString$1$1(argument) + " is not a constructor");
};
var $$k$1 = _export$1;
var getBuiltIn$4$1 = getBuiltIn$f;
var apply$1$1 = functionApply$1;
var bind$8$1 = functionBind$1;
var aConstructor$1$1 = aConstructor$2;
var anObject$3$1 = anObject$d$1;
var isObject$6$1 = isObject$h$1;
var create$5$1 = objectCreate$1;
var fails$9$1 = fails$u$1;
var nativeConstruct$1 = getBuiltIn$4$1("Reflect", "construct");
var ObjectPrototype$3 = Object.prototype;
var push$2$1 = [].push;
var NEW_TARGET_BUG$1 = fails$9$1(function() {
  function F() {
  }
  return !(nativeConstruct$1(function() {
  }, [], F) instanceof F);
});
var ARGS_BUG$1 = !fails$9$1(function() {
  nativeConstruct$1(function() {
  });
});
var FORCED$2$1 = NEW_TARGET_BUG$1 || ARGS_BUG$1;
$$k$1({ target: "Reflect", stat: true, forced: FORCED$2$1, sham: FORCED$2$1 }, {
  construct: function construct2(Target, args) {
    aConstructor$1$1(Target);
    anObject$3$1(args);
    var newTarget = arguments.length < 3 ? Target : aConstructor$1$1(arguments[2]);
    if (ARGS_BUG$1 && !NEW_TARGET_BUG$1) return nativeConstruct$1(Target, args, newTarget);
    if (Target === newTarget) {
      switch (args.length) {
        case 0:
          return new Target();
        case 1:
          return new Target(args[0]);
        case 2:
          return new Target(args[0], args[1]);
        case 3:
          return new Target(args[0], args[1], args[2]);
        case 4:
          return new Target(args[0], args[1], args[2], args[3]);
      }
      var $args = [null];
      apply$1$1(push$2$1, $args, args);
      return new (apply$1$1(bind$8$1, Target, $args))();
    }
    var proto = newTarget.prototype;
    var instance = create$5$1(isObject$6$1(proto) ? proto : ObjectPrototype$3);
    var result = apply$1$1(Target, instance, args);
    return isObject$6$1(result) ? result : instance;
  }
});
var path$8$1 = path$o$1;
var construct$2$1 = path$8$1.Reflect.construct;
var parent$u$1 = construct$2$1;
var construct$1$1 = parent$u$1;
var construct$5 = construct$1$1;
var _Reflect$construct$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(construct$5);
var path$7$1 = path$o$1;
var getOwnPropertySymbols$2$1 = path$7$1.Object.getOwnPropertySymbols;
var parent$t$1 = getOwnPropertySymbols$2$1;
var getOwnPropertySymbols$1$1 = parent$t$1;
var getOwnPropertySymbols$3 = getOwnPropertySymbols$1$1;
var _Object$getOwnPropertySymbols$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(getOwnPropertySymbols$3);
var getOwnPropertyDescriptor$4$1 = { exports: {} };
var $$j$1 = _export$1;
var fails$8$1 = fails$u$1;
var toIndexedObject$1$1 = toIndexedObject$a$1;
var nativeGetOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor$1.f;
var DESCRIPTORS$5$1 = descriptors$1;
var FORCED$1$1 = !DESCRIPTORS$5$1 || fails$8$1(function() {
  nativeGetOwnPropertyDescriptor$2(1);
});
$$j$1({ target: "Object", stat: true, forced: FORCED$1$1, sham: !DESCRIPTORS$5$1 }, {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor4(it2, key2) {
    return nativeGetOwnPropertyDescriptor$2(toIndexedObject$1$1(it2), key2);
  }
});
var path$6$1 = path$o$1;
var Object$2$1 = path$6$1.Object;
var getOwnPropertyDescriptor$3$1 = getOwnPropertyDescriptor$4$1.exports = function getOwnPropertyDescriptor5(it2, key2) {
  return Object$2$1.getOwnPropertyDescriptor(it2, key2);
};
if (Object$2$1.getOwnPropertyDescriptor.sham) getOwnPropertyDescriptor$3$1.sham = true;
var getOwnPropertyDescriptorExports$1 = getOwnPropertyDescriptor$4$1.exports;
var parent$s$1 = getOwnPropertyDescriptorExports$1;
var getOwnPropertyDescriptor$2$1 = parent$s$1;
var getOwnPropertyDescriptor$1$1 = getOwnPropertyDescriptor$2$1;
var _Object$getOwnPropertyDescriptor$2 = /* @__PURE__ */ getDefaultExportFromCjs$1(getOwnPropertyDescriptor$1$1);
var $$i$1 = _export$1;
var DESCRIPTORS$4$1 = descriptors$1;
var ownKeys$2$1 = ownKeys$7;
var toIndexedObject$b = toIndexedObject$a$1;
var getOwnPropertyDescriptorModule$1$1 = objectGetOwnPropertyDescriptor$1;
var createProperty$7 = createProperty$6$1;
$$i$1({ target: "Object", stat: true, sham: !DESCRIPTORS$4$1 }, {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors2(object2) {
    var O = toIndexedObject$b(object2);
    var getOwnPropertyDescriptor10 = getOwnPropertyDescriptorModule$1$1.f;
    var keys6 = ownKeys$2$1(O);
    var result = {};
    var index2 = 0;
    var key2, descriptor;
    while (keys6.length > index2) {
      descriptor = getOwnPropertyDescriptor10(O, key2 = keys6[index2++]);
      if (descriptor !== void 0) createProperty$7(result, key2, descriptor);
    }
    return result;
  }
});
var path$5$1 = path$o$1;
var getOwnPropertyDescriptors$2$1 = path$5$1.Object.getOwnPropertyDescriptors;
var parent$r$1 = getOwnPropertyDescriptors$2$1;
var getOwnPropertyDescriptors$1$1 = parent$r$1;
var getOwnPropertyDescriptors$3 = getOwnPropertyDescriptors$1$1;
var _Object$getOwnPropertyDescriptors$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(getOwnPropertyDescriptors$3);
var defineProperties$4$1 = { exports: {} };
var $$h$1 = _export$1;
var DESCRIPTORS$3$1 = descriptors$1;
var defineProperties$3$1 = objectDefineProperties$1.f;
$$h$1({ target: "Object", stat: true, forced: Object.defineProperties !== defineProperties$3$1, sham: !DESCRIPTORS$3$1 }, {
  defineProperties: defineProperties$3$1
});
var path$4$1 = path$o$1;
var Object$1$1 = path$4$1.Object;
var defineProperties$2$1 = defineProperties$4$1.exports = function defineProperties4(T, D) {
  return Object$1$1.defineProperties(T, D);
};
if (Object$1$1.defineProperties.sham) defineProperties$2$1.sham = true;
var definePropertiesExports$1 = defineProperties$4$1.exports;
var parent$q$1 = definePropertiesExports$1;
var defineProperties$1$1 = parent$q$1;
var defineProperties$5 = defineProperties$1$1;
var _Object$defineProperties$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(defineProperties$5);
var defineProperty$2$1 = defineProperty$b$1;
var _Object$defineProperty$2 = /* @__PURE__ */ getDefaultExportFromCjs$1(defineProperty$2$1);
function _assertThisInitialized$2(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
var parent$p$1 = create$7$1;
var create$4$1 = parent$p$1;
var parent$o$1 = create$4$1;
var create$3$1 = parent$o$1;
var create$2$1 = create$3$1;
var _Object$create$2 = /* @__PURE__ */ getDefaultExportFromCjs$1(create$2$1);
var $$g$1 = _export$1;
var setPrototypeOf$6 = objectSetPrototypeOf$1;
$$g$1({ target: "Object", stat: true }, {
  setPrototypeOf: setPrototypeOf$6
});
var path$3$1 = path$o$1;
var setPrototypeOf$5$1 = path$3$1.Object.setPrototypeOf;
var parent$n$1 = setPrototypeOf$5$1;
var setPrototypeOf$4$1 = parent$n$1;
var parent$m$1 = setPrototypeOf$4$1;
var setPrototypeOf$3$1 = parent$m$1;
var parent$l$1 = setPrototypeOf$3$1;
var setPrototypeOf$2$1 = parent$l$1;
var setPrototypeOf$1$1 = setPrototypeOf$2$1;
var _Object$setPrototypeOf$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(setPrototypeOf$1$1);
var parent$k$1 = bind$c$1;
var bind$7$1 = parent$k$1;
var parent$j$1 = bind$7$1;
var bind$6$1 = parent$j$1;
var bind$5$1 = bind$6$1;
var _bindInstanceProperty$2 = /* @__PURE__ */ getDefaultExportFromCjs$1(bind$5$1);
function _setPrototypeOf$1(o2, p2) {
  var _context;
  _setPrototypeOf$1 = _Object$setPrototypeOf$1 ? _bindInstanceProperty$2(_context = _Object$setPrototypeOf$1).call(_context) : function _setPrototypeOf2(o3, p3) {
    o3.__proto__ = p3;
    return o3;
  };
  return _setPrototypeOf$1(o2, p2);
}
function _inherits$1(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = _Object$create$2(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  _Object$defineProperty$1$1(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf$1(subClass, superClass);
}
function _possibleConstructorReturn$1(self2, call2) {
  if (call2 && (_typeof$1(call2) === "object" || typeof call2 === "function")) {
    return call2;
  } else if (call2 !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$2(self2);
}
var parent$i$1 = getPrototypeOf$4$1;
var getPrototypeOf$3$1 = parent$i$1;
var parent$h$1 = getPrototypeOf$3$1;
var getPrototypeOf$2$1 = parent$h$1;
var getPrototypeOf$1$1 = getPrototypeOf$2$1;
var _Object$getPrototypeOf$2 = /* @__PURE__ */ getDefaultExportFromCjs$1(getPrototypeOf$1$1);
function _getPrototypeOf$1(o2) {
  var _context;
  _getPrototypeOf$1 = _Object$setPrototypeOf$1 ? _bindInstanceProperty$2(_context = _Object$getPrototypeOf$2).call(_context) : function _getPrototypeOf2(o3) {
    return o3.__proto__ || _Object$getPrototypeOf$2(o3);
  };
  return _getPrototypeOf$1(o2);
}
var regeneratorRuntime$1 = { exports: {} };
var _typeof$2 = { exports: {} };
(function(module) {
  var _Symbol2 = symbol$1$1;
  var _Symbol$iterator2 = iterator$1$1;
  function _typeof2(o2) {
    "@babel/helpers - typeof";
    return module.exports = _typeof2 = "function" == typeof _Symbol2 && "symbol" == typeof _Symbol$iterator2 ? function(o3) {
      return typeof o3;
    } : function(o3) {
      return o3 && "function" == typeof _Symbol2 && o3.constructor === _Symbol2 && o3 !== _Symbol2.prototype ? "symbol" : typeof o3;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof2(o2);
  }
  module.exports = _typeof2, module.exports.__esModule = true, module.exports["default"] = module.exports;
})(_typeof$2);
var _typeofExports = _typeof$2.exports;
var parent$g$1 = forEach$5$1;
var forEach$3$1 = parent$g$1;
var parent$f$1 = forEach$3$1;
var forEach$2$1 = parent$f$1;
var forEach$1$1 = forEach$2$1;
var hasOwn$5$1 = hasOwnProperty_1$1;
var ownKeys$1$1 = ownKeys$7;
var getOwnPropertyDescriptorModule$3 = objectGetOwnPropertyDescriptor$1;
var definePropertyModule$5 = objectDefineProperty$1;
var copyConstructorProperties$1 = function(target, source, exceptions) {
  var keys6 = ownKeys$1$1(source);
  var defineProperty10 = definePropertyModule$5.f;
  var getOwnPropertyDescriptor10 = getOwnPropertyDescriptorModule$3.f;
  for (var i2 = 0; i2 < keys6.length; i2++) {
    var key2 = keys6[i2];
    if (!hasOwn$5$1(target, key2) && !(exceptions && hasOwn$5$1(exceptions, key2))) {
      defineProperty10(target, key2, getOwnPropertyDescriptor10(source, key2));
    }
  }
};
var isObject$5$1 = isObject$h$1;
var createNonEnumerableProperty$3$1 = createNonEnumerableProperty$9;
var installErrorCause$1 = function(O, options) {
  if (isObject$5$1(options) && "cause" in options) {
    createNonEnumerableProperty$3$1(O, "cause", options.cause);
  }
};
var uncurryThis$2$1 = functionUncurryThis$1;
var $Error$1 = Error;
var replace$2 = uncurryThis$2$1("".replace);
var TEST = function(arg) {
  return String(new $Error$1(arg).stack);
}("zxcasd");
var V8_OR_CHAKRA_STACK_ENTRY = /\n\s*at [^:]*:[^\n]*/;
var IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);
var errorStackClear = function(stack2, dropEntries) {
  if (IS_V8_OR_CHAKRA_STACK && typeof stack2 == "string" && !$Error$1.prepareStackTrace) {
    while (dropEntries--) stack2 = replace$2(stack2, V8_OR_CHAKRA_STACK_ENTRY, "");
  }
  return stack2;
};
var fails$7$1 = fails$u$1;
var createPropertyDescriptor$1$1 = createPropertyDescriptor$7;
var errorStackInstallable = !fails$7$1(function() {
  var error = new Error("a");
  if (!("stack" in error)) return true;
  Object.defineProperty(error, "stack", createPropertyDescriptor$1$1(1, 7));
  return error.stack !== 7;
});
var createNonEnumerableProperty$2$1 = createNonEnumerableProperty$9;
var clearErrorStack = errorStackClear;
var ERROR_STACK_INSTALLABLE = errorStackInstallable;
var captureStackTrace = Error.captureStackTrace;
var errorStackInstall = function(error, C, stack2, dropEntries) {
  if (ERROR_STACK_INSTALLABLE) {
    if (captureStackTrace) captureStackTrace(error, C);
    else createNonEnumerableProperty$2$1(error, "stack", clearErrorStack(stack2, dropEntries));
  }
};
var bind$4$1 = functionBindContext$1;
var call$6$1 = functionCall$1;
var anObject$2$1 = anObject$d$1;
var tryToString$7 = tryToString$6$1;
var isArrayIteratorMethod$3 = isArrayIteratorMethod$2$1;
var lengthOfArrayLike$1$1 = lengthOfArrayLike$d;
var isPrototypeOf$7$1 = objectIsPrototypeOf$1;
var getIterator$6 = getIterator$8;
var getIteratorMethod$a = getIteratorMethod$9$1;
var iteratorClose$3 = iteratorClose$2$1;
var $TypeError$2$1 = TypeError;
var Result$1 = function(stopped, result) {
  this.stopped = stopped;
  this.result = result;
};
var ResultPrototype$1 = Result$1.prototype;
var iterate$7 = function(iterable, unboundFunction, options) {
  var that = options && options.that;
  var AS_ENTRIES = !!(options && options.AS_ENTRIES);
  var IS_RECORD = !!(options && options.IS_RECORD);
  var IS_ITERATOR = !!(options && options.IS_ITERATOR);
  var INTERRUPTED = !!(options && options.INTERRUPTED);
  var fn2 = bind$4$1(unboundFunction, that);
  var iterator2, iterFn, index2, length2, result, next4, step;
  var stop2 = function(condition) {
    if (iterator2) iteratorClose$3(iterator2, "normal", condition);
    return new Result$1(true, condition);
  };
  var callFn = function(value2) {
    if (AS_ENTRIES) {
      anObject$2$1(value2);
      return INTERRUPTED ? fn2(value2[0], value2[1], stop2) : fn2(value2[0], value2[1]);
    }
    return INTERRUPTED ? fn2(value2, stop2) : fn2(value2);
  };
  if (IS_RECORD) {
    iterator2 = iterable.iterator;
  } else if (IS_ITERATOR) {
    iterator2 = iterable;
  } else {
    iterFn = getIteratorMethod$a(iterable);
    if (!iterFn) throw new $TypeError$2$1(tryToString$7(iterable) + " is not iterable");
    if (isArrayIteratorMethod$3(iterFn)) {
      for (index2 = 0, length2 = lengthOfArrayLike$1$1(iterable); length2 > index2; index2++) {
        result = callFn(iterable[index2]);
        if (result && isPrototypeOf$7$1(ResultPrototype$1, result)) return result;
      }
      return new Result$1(false);
    }
    iterator2 = getIterator$6(iterable, iterFn);
  }
  next4 = IS_RECORD ? iterable.next : iterator2.next;
  while (!(step = call$6$1(next4, iterator2)).done) {
    try {
      result = callFn(step.value);
    } catch (error) {
      iteratorClose$3(iterator2, "throw", error);
    }
    if (typeof result == "object" && result && isPrototypeOf$7$1(ResultPrototype$1, result)) return result;
  }
  return new Result$1(false);
};
var toString$1$1 = toString$7$1;
var normalizeStringArgument$1 = function(argument, $default) {
  return argument === void 0 ? arguments.length < 2 ? "" : $default : toString$1$1(argument);
};
var $$f$1 = _export$1;
var isPrototypeOf$6$1 = objectIsPrototypeOf$1;
var getPrototypeOf$9 = objectGetPrototypeOf$1;
var setPrototypeOf$7 = objectSetPrototypeOf$1;
var copyConstructorProperties = copyConstructorProperties$1;
var create$1$1 = objectCreate$1;
var createNonEnumerableProperty$1$1 = createNonEnumerableProperty$9;
var createPropertyDescriptor$8 = createPropertyDescriptor$7;
var installErrorCause = installErrorCause$1;
var installErrorStack = errorStackInstall;
var iterate$6 = iterate$7;
var normalizeStringArgument = normalizeStringArgument$1;
var wellKnownSymbol$3$1 = wellKnownSymbol$n;
var TO_STRING_TAG$5 = wellKnownSymbol$3$1("toStringTag");
var $Error = Error;
var push$1$1 = [].push;
var $AggregateError = function AggregateError(errors, message2) {
  var isInstance = isPrototypeOf$6$1(AggregateErrorPrototype, this);
  var that;
  if (setPrototypeOf$7) {
    that = setPrototypeOf$7(new $Error(), isInstance ? getPrototypeOf$9(this) : AggregateErrorPrototype);
  } else {
    that = isInstance ? this : create$1$1(AggregateErrorPrototype);
    createNonEnumerableProperty$1$1(that, TO_STRING_TAG$5, "Error");
  }
  if (message2 !== void 0) createNonEnumerableProperty$1$1(that, "message", normalizeStringArgument(message2));
  installErrorStack(that, $AggregateError, that.stack, 1);
  if (arguments.length > 2) installErrorCause(that, arguments[2]);
  var errorsArray = [];
  iterate$6(errors, push$1$1, { that: errorsArray });
  createNonEnumerableProperty$1$1(that, "errors", errorsArray);
  return that;
};
if (setPrototypeOf$7) setPrototypeOf$7($AggregateError, $Error);
else copyConstructorProperties($AggregateError, $Error, { name: true });
var AggregateErrorPrototype = $AggregateError.prototype = create$1$1($Error.prototype, {
  constructor: createPropertyDescriptor$8(1, $AggregateError),
  message: createPropertyDescriptor$8(1, ""),
  name: createPropertyDescriptor$8(1, "AggregateError")
});
$$f$1({ global: true, constructor: true, arity: 2 }, {
  AggregateError: $AggregateError
});
var getBuiltIn$3$1 = getBuiltIn$f;
var defineBuiltInAccessor$1$1 = defineBuiltInAccessor$3$1;
var wellKnownSymbol$2$1 = wellKnownSymbol$n;
var DESCRIPTORS$2$1 = descriptors$1;
var SPECIES$2$1 = wellKnownSymbol$2$1("species");
var setSpecies$2 = function(CONSTRUCTOR_NAME) {
  var Constructor = getBuiltIn$3$1(CONSTRUCTOR_NAME);
  if (DESCRIPTORS$2$1 && Constructor && !Constructor[SPECIES$2$1]) {
    defineBuiltInAccessor$1$1(Constructor, SPECIES$2$1, {
      configurable: true,
      get: function() {
        return this;
      }
    });
  }
};
var isPrototypeOf$5$1 = objectIsPrototypeOf$1;
var $TypeError$1$1 = TypeError;
var anInstance$3$1 = function(it2, Prototype) {
  if (isPrototypeOf$5$1(Prototype, it2)) return it2;
  throw new $TypeError$1$1("Incorrect invocation");
};
var anObject$1$1 = anObject$d$1;
var aConstructor$3 = aConstructor$2;
var isNullOrUndefined$2$1 = isNullOrUndefined$6$1;
var wellKnownSymbol$1$1 = wellKnownSymbol$n;
var SPECIES$1$1 = wellKnownSymbol$1$1("species");
var speciesConstructor$2 = function(O, defaultConstructor) {
  var C = anObject$1$1(O).constructor;
  var S;
  return C === void 0 || isNullOrUndefined$2$1(S = anObject$1$1(C)[SPECIES$1$1]) ? defaultConstructor : aConstructor$3(S);
};
var userAgent$4 = engineUserAgent$1;
var engineIsIos = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent$4);
var global$6$1 = global$p;
var apply$7 = functionApply$1;
var bind$3$1 = functionBindContext$1;
var isCallable$4$1 = isCallable$m;
var hasOwn$4$1 = hasOwnProperty_1$1;
var fails$6$1 = fails$u$1;
var html$3 = html$2;
var arraySlice$1$1 = arraySlice$5$1;
var createElement$2 = documentCreateElement$1$1;
var validateArgumentsLength$3 = validateArgumentsLength$2;
var IS_IOS$1 = engineIsIos;
var IS_NODE$3 = engineIsNode$1;
var set$3$1 = global$6$1.setImmediate;
var clear = global$6$1.clearImmediate;
var process$2 = global$6$1.process;
var Dispatch = global$6$1.Dispatch;
var Function$1$1 = global$6$1.Function;
var MessageChannel = global$6$1.MessageChannel;
var String$1 = global$6$1.String;
var counter = 0;
var queue$2 = {};
var ONREADYSTATECHANGE = "onreadystatechange";
var $location, defer, channel, port;
fails$6$1(function() {
  $location = global$6$1.location;
});
var run = function(id2) {
  if (hasOwn$4$1(queue$2, id2)) {
    var fn2 = queue$2[id2];
    delete queue$2[id2];
    fn2();
  }
};
var runner = function(id2) {
  return function() {
    run(id2);
  };
};
var eventListener = function(event) {
  run(event.data);
};
var globalPostMessageDefer = function(id2) {
  global$6$1.postMessage(String$1(id2), $location.protocol + "//" + $location.host);
};
if (!set$3$1 || !clear) {
  set$3$1 = function setImmediate(handler) {
    validateArgumentsLength$3(arguments.length, 1);
    var fn2 = isCallable$4$1(handler) ? handler : Function$1$1(handler);
    var args = arraySlice$1$1(arguments, 1);
    queue$2[++counter] = function() {
      apply$7(fn2, void 0, args);
    };
    defer(counter);
    return counter;
  };
  clear = function clearImmediate(id2) {
    delete queue$2[id2];
  };
  if (IS_NODE$3) {
    defer = function(id2) {
      process$2.nextTick(runner(id2));
    };
  } else if (Dispatch && Dispatch.now) {
    defer = function(id2) {
      Dispatch.now(runner(id2));
    };
  } else if (MessageChannel && !IS_IOS$1) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = eventListener;
    defer = bind$3$1(port.postMessage, port);
  } else if (global$6$1.addEventListener && isCallable$4$1(global$6$1.postMessage) && !global$6$1.importScripts && $location && $location.protocol !== "file:" && !fails$6$1(globalPostMessageDefer)) {
    defer = globalPostMessageDefer;
    global$6$1.addEventListener("message", eventListener, false);
  } else if (ONREADYSTATECHANGE in createElement$2("script")) {
    defer = function(id2) {
      html$3.appendChild(createElement$2("script"))[ONREADYSTATECHANGE] = function() {
        html$3.removeChild(this);
        run(id2);
      };
    };
  } else {
    defer = function(id2) {
      setTimeout(runner(id2), 0);
    };
  }
}
var task$1 = {
  set: set$3$1,
  clear
};
var Queue$3 = function() {
  this.head = null;
  this.tail = null;
};
Queue$3.prototype = {
  add: function(item) {
    var entry = { item, next: null };
    var tail = this.tail;
    if (tail) tail.next = entry;
    else this.head = entry;
    this.tail = entry;
  },
  get: function() {
    var entry = this.head;
    if (entry) {
      var next4 = this.head = entry.next;
      if (next4 === null) this.tail = null;
      return entry.item;
    }
  }
};
var queue$1 = Queue$3;
var userAgent$3 = engineUserAgent$1;
var engineIsIosPebble = /ipad|iphone|ipod/i.test(userAgent$3) && typeof Pebble != "undefined";
var userAgent$2$1 = engineUserAgent$1;
var engineIsWebosWebkit = /web0s(?!.*chrome)/i.test(userAgent$2$1);
var global$5$1 = global$p;
var bind$2$1 = functionBindContext$1;
var getOwnPropertyDescriptor$a = objectGetOwnPropertyDescriptor$1.f;
var macrotask = task$1.set;
var Queue$2 = queue$1;
var IS_IOS = engineIsIos;
var IS_IOS_PEBBLE = engineIsIosPebble;
var IS_WEBOS_WEBKIT = engineIsWebosWebkit;
var IS_NODE$2 = engineIsNode$1;
var MutationObserver$1 = global$5$1.MutationObserver || global$5$1.WebKitMutationObserver;
var document$2 = global$5$1.document;
var process$1 = global$5$1.process;
var Promise$1 = global$5$1.Promise;
var queueMicrotaskDescriptor = getOwnPropertyDescriptor$a(global$5$1, "queueMicrotask");
var microtask$1 = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;
var notify$1, toggle, node$1, promise$5, then;
if (!microtask$1) {
  var queue = new Queue$2();
  var flush = function() {
    var parent2, fn2;
    if (IS_NODE$2 && (parent2 = process$1.domain)) parent2.exit();
    while (fn2 = queue.get()) try {
      fn2();
    } catch (error) {
      if (queue.head) notify$1();
      throw error;
    }
    if (parent2) parent2.enter();
  };
  if (!IS_IOS && !IS_NODE$2 && !IS_WEBOS_WEBKIT && MutationObserver$1 && document$2) {
    toggle = true;
    node$1 = document$2.createTextNode("");
    new MutationObserver$1(flush).observe(node$1, { characterData: true });
    notify$1 = function() {
      node$1.data = toggle = !toggle;
    };
  } else if (!IS_IOS_PEBBLE && Promise$1 && Promise$1.resolve) {
    promise$5 = Promise$1.resolve(void 0);
    promise$5.constructor = Promise$1;
    then = bind$2$1(promise$5.then, promise$5);
    notify$1 = function() {
      then(flush);
    };
  } else if (IS_NODE$2) {
    notify$1 = function() {
      process$1.nextTick(flush);
    };
  } else {
    macrotask = bind$2$1(macrotask, global$5$1);
    notify$1 = function() {
      macrotask(flush);
    };
  }
  microtask$1 = function(fn2) {
    if (!queue.head) notify$1();
    queue.add(fn2);
  };
}
var microtask_1 = microtask$1;
var hostReportErrors$1 = function(a2, b2) {
  try {
    arguments.length === 1 ? console.error(a2) : console.error(a2, b2);
  } catch (error) {
  }
};
var perform$6 = function(exec2) {
  try {
    return { error: false, value: exec2() };
  } catch (error) {
    return { error: true, value: error };
  }
};
var global$4$1 = global$p;
var promiseNativeConstructor = global$4$1.Promise;
var engineIsDeno = typeof Deno == "object" && Deno && typeof Deno.version == "object";
var IS_DENO$1 = engineIsDeno;
var IS_NODE$1 = engineIsNode$1;
var engineIsBrowser = !IS_DENO$1 && !IS_NODE$1 && typeof window == "object" && typeof document == "object";
var global$3$1 = global$p;
var NativePromiseConstructor$5 = promiseNativeConstructor;
var isCallable$3$1 = isCallable$m;
var isForced$3 = isForced_1$1;
var inspectSource$3 = inspectSource$2;
var wellKnownSymbol$o = wellKnownSymbol$n;
var IS_BROWSER = engineIsBrowser;
var IS_DENO = engineIsDeno;
var V8_VERSION$4 = engineV8Version$1;
var NativePromisePrototype$2 = NativePromiseConstructor$5 && NativePromiseConstructor$5.prototype;
var SPECIES$6 = wellKnownSymbol$o("species");
var SUBCLASSING = false;
var NATIVE_PROMISE_REJECTION_EVENT$1 = isCallable$3$1(global$3$1.PromiseRejectionEvent);
var FORCED_PROMISE_CONSTRUCTOR$5 = isForced$3("Promise", function() {
  var PROMISE_CONSTRUCTOR_SOURCE = inspectSource$3(NativePromiseConstructor$5);
  var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(NativePromiseConstructor$5);
  if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION$4 === 66) return true;
  if (!(NativePromisePrototype$2["catch"] && NativePromisePrototype$2["finally"])) return true;
  if (!V8_VERSION$4 || V8_VERSION$4 < 51 || !/native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) {
    var promise2 = new NativePromiseConstructor$5(function(resolve3) {
      resolve3(1);
    });
    var FakePromise = function(exec2) {
      exec2(function() {
      }, function() {
      });
    };
    var constructor = promise2.constructor = {};
    constructor[SPECIES$6] = FakePromise;
    SUBCLASSING = promise2.then(function() {
    }) instanceof FakePromise;
    if (!SUBCLASSING) return true;
  }
  return !GLOBAL_CORE_JS_PROMISE && (IS_BROWSER || IS_DENO) && !NATIVE_PROMISE_REJECTION_EVENT$1;
});
var promiseConstructorDetection = {
  CONSTRUCTOR: FORCED_PROMISE_CONSTRUCTOR$5,
  REJECTION_EVENT: NATIVE_PROMISE_REJECTION_EVENT$1,
  SUBCLASSING
};
var newPromiseCapability$2 = {};
var aCallable$6$1 = aCallable$e;
var $TypeError$h = TypeError;
var PromiseCapability = function(C) {
  var resolve3, reject2;
  this.promise = new C(function($$resolve, $$reject) {
    if (resolve3 !== void 0 || reject2 !== void 0) throw new $TypeError$h("Bad Promise constructor");
    resolve3 = $$resolve;
    reject2 = $$reject;
  });
  this.resolve = aCallable$6$1(resolve3);
  this.reject = aCallable$6$1(reject2);
};
newPromiseCapability$2.f = function(C) {
  return new PromiseCapability(C);
};
var $$e$1 = _export$1;
var IS_NODE$5 = engineIsNode$1;
var global$2$1 = global$p;
var call$5$1 = functionCall$1;
var defineBuiltIn$1$1 = defineBuiltIn$6;
var setToStringTag$1$1 = setToStringTag$7;
var setSpecies$1$1 = setSpecies$2;
var aCallable$5$1 = aCallable$e;
var isCallable$2$1 = isCallable$m;
var isObject$4$1 = isObject$h$1;
var anInstance$2$1 = anInstance$3$1;
var speciesConstructor$1 = speciesConstructor$2;
var task = task$1.set;
var microtask = microtask_1;
var hostReportErrors = hostReportErrors$1;
var perform$5 = perform$6;
var Queue$1 = queue$1;
var InternalStateModule$2$1 = internalState$1;
var NativePromiseConstructor$4 = promiseNativeConstructor;
var PromiseConstructorDetection = promiseConstructorDetection;
var newPromiseCapabilityModule$7 = newPromiseCapability$2;
var PROMISE = "Promise";
var FORCED_PROMISE_CONSTRUCTOR$4 = PromiseConstructorDetection.CONSTRUCTOR;
var NATIVE_PROMISE_REJECTION_EVENT = PromiseConstructorDetection.REJECTION_EVENT;
var getInternalPromiseState = InternalStateModule$2$1.getterFor(PROMISE);
var setInternalState$2$1 = InternalStateModule$2$1.set;
var NativePromisePrototype$1 = NativePromiseConstructor$4 && NativePromiseConstructor$4.prototype;
var PromiseConstructor = NativePromiseConstructor$4;
var PromisePrototype = NativePromisePrototype$1;
var TypeError$1$1 = global$2$1.TypeError;
var document$1$1 = global$2$1.document;
var process$4 = global$2$1.process;
var newPromiseCapability$1 = newPromiseCapabilityModule$7.f;
var newGenericPromiseCapability = newPromiseCapability$1;
var DISPATCH_EVENT = !!(document$1$1 && document$1$1.createEvent && global$2$1.dispatchEvent);
var UNHANDLED_REJECTION = "unhandledrejection";
var REJECTION_HANDLED = "rejectionhandled";
var PENDING = 0;
var FULFILLED = 1;
var REJECTED = 2;
var HANDLED = 1;
var UNHANDLED = 2;
var Internal, OwnPromiseCapability, PromiseWrapper;
var isThenable = function(it2) {
  var then2;
  return isObject$4$1(it2) && isCallable$2$1(then2 = it2.then) ? then2 : false;
};
var callReaction = function(reaction, state) {
  var value2 = state.value;
  var ok = state.state === FULFILLED;
  var handler = ok ? reaction.ok : reaction.fail;
  var resolve3 = reaction.resolve;
  var reject2 = reaction.reject;
  var domain = reaction.domain;
  var result, then2, exited;
  try {
    if (handler) {
      if (!ok) {
        if (state.rejection === UNHANDLED) onHandleUnhandled(state);
        state.rejection = HANDLED;
      }
      if (handler === true) result = value2;
      else {
        if (domain) domain.enter();
        result = handler(value2);
        if (domain) {
          domain.exit();
          exited = true;
        }
      }
      if (result === reaction.promise) {
        reject2(new TypeError$1$1("Promise-chain cycle"));
      } else if (then2 = isThenable(result)) {
        call$5$1(then2, result, resolve3, reject2);
      } else resolve3(result);
    } else reject2(value2);
  } catch (error) {
    if (domain && !exited) domain.exit();
    reject2(error);
  }
};
var notify = function(state, isReject) {
  if (state.notified) return;
  state.notified = true;
  microtask(function() {
    var reactions = state.reactions;
    var reaction;
    while (reaction = reactions.get()) {
      callReaction(reaction, state);
    }
    state.notified = false;
    if (isReject && !state.rejection) onUnhandled(state);
  });
};
var dispatchEvent = function(name, promise2, reason) {
  var event, handler;
  if (DISPATCH_EVENT) {
    event = document$1$1.createEvent("Event");
    event.promise = promise2;
    event.reason = reason;
    event.initEvent(name, false, true);
    global$2$1.dispatchEvent(event);
  } else event = { promise: promise2, reason };
  if (!NATIVE_PROMISE_REJECTION_EVENT && (handler = global$2$1["on" + name])) handler(event);
  else if (name === UNHANDLED_REJECTION) hostReportErrors("Unhandled promise rejection", reason);
};
var onUnhandled = function(state) {
  call$5$1(task, global$2$1, function() {
    var promise2 = state.facade;
    var value2 = state.value;
    var IS_UNHANDLED = isUnhandled(state);
    var result;
    if (IS_UNHANDLED) {
      result = perform$5(function() {
        if (IS_NODE$5) {
          process$4.emit("unhandledRejection", value2, promise2);
        } else dispatchEvent(UNHANDLED_REJECTION, promise2, value2);
      });
      state.rejection = IS_NODE$5 || isUnhandled(state) ? UNHANDLED : HANDLED;
      if (result.error) throw result.value;
    }
  });
};
var isUnhandled = function(state) {
  return state.rejection !== HANDLED && !state.parent;
};
var onHandleUnhandled = function(state) {
  call$5$1(task, global$2$1, function() {
    var promise2 = state.facade;
    if (IS_NODE$5) {
      process$4.emit("rejectionHandled", promise2);
    } else dispatchEvent(REJECTION_HANDLED, promise2, state.value);
  });
};
var bind$1$1 = function(fn2, state, unwrap) {
  return function(value2) {
    fn2(state, value2, unwrap);
  };
};
var internalReject = function(state, value2, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  state.value = value2;
  state.state = REJECTED;
  notify(state, true);
};
var internalResolve = function(state, value2, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  try {
    if (state.facade === value2) throw new TypeError$1$1("Promise can't be resolved itself");
    var then2 = isThenable(value2);
    if (then2) {
      microtask(function() {
        var wrapper2 = { done: false };
        try {
          call$5$1(
            then2,
            value2,
            bind$1$1(internalResolve, wrapper2, state),
            bind$1$1(internalReject, wrapper2, state)
          );
        } catch (error) {
          internalReject(wrapper2, error, state);
        }
      });
    } else {
      state.value = value2;
      state.state = FULFILLED;
      notify(state, false);
    }
  } catch (error) {
    internalReject({ done: false }, error, state);
  }
};
if (FORCED_PROMISE_CONSTRUCTOR$4) {
  PromiseConstructor = function Promise2(executor) {
    anInstance$2$1(this, PromisePrototype);
    aCallable$5$1(executor);
    call$5$1(Internal, this);
    var state = getInternalPromiseState(this);
    try {
      executor(bind$1$1(internalResolve, state), bind$1$1(internalReject, state));
    } catch (error) {
      internalReject(state, error);
    }
  };
  PromisePrototype = PromiseConstructor.prototype;
  Internal = function Promise2(executor) {
    setInternalState$2$1(this, {
      type: PROMISE,
      done: false,
      notified: false,
      parent: false,
      reactions: new Queue$1(),
      rejection: false,
      state: PENDING,
      value: void 0
    });
  };
  Internal.prototype = defineBuiltIn$1$1(PromisePrototype, "then", function then2(onFulfilled, onRejected) {
    var state = getInternalPromiseState(this);
    var reaction = newPromiseCapability$1(speciesConstructor$1(this, PromiseConstructor));
    state.parent = true;
    reaction.ok = isCallable$2$1(onFulfilled) ? onFulfilled : true;
    reaction.fail = isCallable$2$1(onRejected) && onRejected;
    reaction.domain = IS_NODE$5 ? process$4.domain : void 0;
    if (state.state === PENDING) state.reactions.add(reaction);
    else microtask(function() {
      callReaction(reaction, state);
    });
    return reaction.promise;
  });
  OwnPromiseCapability = function() {
    var promise2 = new Internal();
    var state = getInternalPromiseState(promise2);
    this.promise = promise2;
    this.resolve = bind$1$1(internalResolve, state);
    this.reject = bind$1$1(internalReject, state);
  };
  newPromiseCapabilityModule$7.f = newPromiseCapability$1 = function(C) {
    return C === PromiseConstructor || C === PromiseWrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
  };
}
$$e$1({ global: true, constructor: true, wrap: true, forced: FORCED_PROMISE_CONSTRUCTOR$4 }, {
  Promise: PromiseConstructor
});
setToStringTag$1$1(PromiseConstructor, PROMISE, false, true);
setSpecies$1$1(PROMISE);
var NativePromiseConstructor$3 = promiseNativeConstructor;
var checkCorrectnessOfIteration$3 = checkCorrectnessOfIteration$2;
var FORCED_PROMISE_CONSTRUCTOR$3 = promiseConstructorDetection.CONSTRUCTOR;
var promiseStaticsIncorrectIteration = FORCED_PROMISE_CONSTRUCTOR$3 || !checkCorrectnessOfIteration$3(function(iterable) {
  NativePromiseConstructor$3.all(iterable).then(void 0, function() {
  });
});
var $$d$1 = _export$1;
var call$4$1 = functionCall$1;
var aCallable$4$1 = aCallable$e;
var newPromiseCapabilityModule$6 = newPromiseCapability$2;
var perform$4 = perform$6;
var iterate$5 = iterate$7;
var PROMISE_STATICS_INCORRECT_ITERATION$3 = promiseStaticsIncorrectIteration;
$$d$1({ target: "Promise", stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION$3 }, {
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapabilityModule$6.f(C);
    var resolve3 = capability.resolve;
    var reject2 = capability.reject;
    var result = perform$4(function() {
      var $promiseResolve = aCallable$4$1(C.resolve);
      var values2 = [];
      var counter2 = 0;
      var remaining = 1;
      iterate$5(iterable, function(promise2) {
        var index2 = counter2++;
        var alreadyCalled = false;
        remaining++;
        call$4$1($promiseResolve, C, promise2).then(function(value2) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values2[index2] = value2;
          --remaining || resolve3(values2);
        }, reject2);
      });
      --remaining || resolve3(values2);
    });
    if (result.error) reject2(result.value);
    return capability.promise;
  }
});
var $$c$1 = _export$1;
var FORCED_PROMISE_CONSTRUCTOR$2 = promiseConstructorDetection.CONSTRUCTOR;
var NativePromiseConstructor$2 = promiseNativeConstructor;
NativePromiseConstructor$2 && NativePromiseConstructor$2.prototype;
$$c$1({ target: "Promise", proto: true, forced: FORCED_PROMISE_CONSTRUCTOR$2, real: true }, {
  "catch": function(onRejected) {
    return this.then(void 0, onRejected);
  }
});
var $$b$1 = _export$1;
var call$3$1 = functionCall$1;
var aCallable$3$1 = aCallable$e;
var newPromiseCapabilityModule$5 = newPromiseCapability$2;
var perform$3 = perform$6;
var iterate$4 = iterate$7;
var PROMISE_STATICS_INCORRECT_ITERATION$2 = promiseStaticsIncorrectIteration;
$$b$1({ target: "Promise", stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION$2 }, {
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapabilityModule$5.f(C);
    var reject2 = capability.reject;
    var result = perform$3(function() {
      var $promiseResolve = aCallable$3$1(C.resolve);
      iterate$4(iterable, function(promise2) {
        call$3$1($promiseResolve, C, promise2).then(capability.resolve, reject2);
      });
    });
    if (result.error) reject2(result.value);
    return capability.promise;
  }
});
var $$a$1 = _export$1;
var call$2$1 = functionCall$1;
var newPromiseCapabilityModule$4 = newPromiseCapability$2;
var FORCED_PROMISE_CONSTRUCTOR$1 = promiseConstructorDetection.CONSTRUCTOR;
$$a$1({ target: "Promise", stat: true, forced: FORCED_PROMISE_CONSTRUCTOR$1 }, {
  reject: function reject(r2) {
    var capability = newPromiseCapabilityModule$4.f(this);
    call$2$1(capability.reject, void 0, r2);
    return capability.promise;
  }
});
var anObject$e = anObject$d$1;
var isObject$3$1 = isObject$h$1;
var newPromiseCapability = newPromiseCapability$2;
var promiseResolve$2 = function(C, x2) {
  anObject$e(C);
  if (isObject$3$1(x2) && x2.constructor === C) return x2;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve3 = promiseCapability.resolve;
  resolve3(x2);
  return promiseCapability.promise;
};
var $$9$1 = _export$1;
var getBuiltIn$2$1 = getBuiltIn$f;
var IS_PURE = isPure;
var NativePromiseConstructor$1 = promiseNativeConstructor;
var FORCED_PROMISE_CONSTRUCTOR = promiseConstructorDetection.CONSTRUCTOR;
var promiseResolve$1 = promiseResolve$2;
var PromiseConstructorWrapper = getBuiltIn$2$1("Promise");
var CHECK_WRAPPER = !FORCED_PROMISE_CONSTRUCTOR;
$$9$1({ target: "Promise", stat: true, forced: IS_PURE }, {
  resolve: function resolve2(x2) {
    return promiseResolve$1(CHECK_WRAPPER && this === PromiseConstructorWrapper ? NativePromiseConstructor$1 : this, x2);
  }
});
var $$8$1 = _export$1;
var call$1$1 = functionCall$1;
var aCallable$2$1 = aCallable$e;
var newPromiseCapabilityModule$3 = newPromiseCapability$2;
var perform$2 = perform$6;
var iterate$3$1 = iterate$7;
var PROMISE_STATICS_INCORRECT_ITERATION$1 = promiseStaticsIncorrectIteration;
$$8$1({ target: "Promise", stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION$1 }, {
  allSettled: function allSettled(iterable) {
    var C = this;
    var capability = newPromiseCapabilityModule$3.f(C);
    var resolve3 = capability.resolve;
    var reject2 = capability.reject;
    var result = perform$2(function() {
      var promiseResolve2 = aCallable$2$1(C.resolve);
      var values2 = [];
      var counter2 = 0;
      var remaining = 1;
      iterate$3$1(iterable, function(promise2) {
        var index2 = counter2++;
        var alreadyCalled = false;
        remaining++;
        call$1$1(promiseResolve2, C, promise2).then(function(value2) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values2[index2] = { status: "fulfilled", value: value2 };
          --remaining || resolve3(values2);
        }, function(error) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values2[index2] = { status: "rejected", reason: error };
          --remaining || resolve3(values2);
        });
      });
      --remaining || resolve3(values2);
    });
    if (result.error) reject2(result.value);
    return capability.promise;
  }
});
var $$7$1 = _export$1;
var call$l = functionCall$1;
var aCallable$1$1 = aCallable$e;
var getBuiltIn$1$1 = getBuiltIn$f;
var newPromiseCapabilityModule$2 = newPromiseCapability$2;
var perform$1 = perform$6;
var iterate$2$1 = iterate$7;
var PROMISE_STATICS_INCORRECT_ITERATION = promiseStaticsIncorrectIteration;
var PROMISE_ANY_ERROR = "No one promise resolved";
$$7$1({ target: "Promise", stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {
  any: function any2(iterable) {
    var C = this;
    var AggregateError2 = getBuiltIn$1$1("AggregateError");
    var capability = newPromiseCapabilityModule$2.f(C);
    var resolve3 = capability.resolve;
    var reject2 = capability.reject;
    var result = perform$1(function() {
      var promiseResolve2 = aCallable$1$1(C.resolve);
      var errors = [];
      var counter2 = 0;
      var remaining = 1;
      var alreadyResolved = false;
      iterate$2$1(iterable, function(promise2) {
        var index2 = counter2++;
        var alreadyRejected = false;
        remaining++;
        call$l(promiseResolve2, C, promise2).then(function(value2) {
          if (alreadyRejected || alreadyResolved) return;
          alreadyResolved = true;
          resolve3(value2);
        }, function(error) {
          if (alreadyRejected || alreadyResolved) return;
          alreadyRejected = true;
          errors[index2] = error;
          --remaining || reject2(new AggregateError2(errors, PROMISE_ANY_ERROR));
        });
      });
      --remaining || reject2(new AggregateError2(errors, PROMISE_ANY_ERROR));
    });
    if (result.error) reject2(result.value);
    return capability.promise;
  }
});
var $$6$1 = _export$1;
var NativePromiseConstructor = promiseNativeConstructor;
var fails$5$1 = fails$u$1;
var getBuiltIn$g = getBuiltIn$f;
var isCallable$1$1 = isCallable$m;
var speciesConstructor = speciesConstructor$2;
var promiseResolve = promiseResolve$2;
var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
var NON_GENERIC = !!NativePromiseConstructor && fails$5$1(function() {
  NativePromisePrototype["finally"].call({ then: function() {
  } }, function() {
  });
});
$$6$1({ target: "Promise", proto: true, real: true, forced: NON_GENERIC }, {
  "finally": function(onFinally) {
    var C = speciesConstructor(this, getBuiltIn$g("Promise"));
    var isFunction2 = isCallable$1$1(onFinally);
    return this.then(
      isFunction2 ? function(x2) {
        return promiseResolve(C, onFinally()).then(function() {
          return x2;
        });
      } : onFinally,
      isFunction2 ? function(e2) {
        return promiseResolve(C, onFinally()).then(function() {
          throw e2;
        });
      } : onFinally
    );
  }
});
var path$2$1 = path$o$1;
var promise$4 = path$2$1.Promise;
var parent$e$1 = promise$4;
var promise$3 = parent$e$1;
var $$5$1 = _export$1;
var newPromiseCapabilityModule$1 = newPromiseCapability$2;
$$5$1({ target: "Promise", stat: true }, {
  withResolvers: function withResolvers() {
    var promiseCapability = newPromiseCapabilityModule$1.f(this);
    return {
      promise: promiseCapability.promise,
      resolve: promiseCapability.resolve,
      reject: promiseCapability.reject
    };
  }
});
var parent$d$1 = promise$3;
var promise$2 = parent$d$1;
var $$4$1 = _export$1;
var newPromiseCapabilityModule = newPromiseCapability$2;
var perform = perform$6;
$$4$1({ target: "Promise", stat: true, forced: true }, {
  "try": function(callbackfn) {
    var promiseCapability = newPromiseCapabilityModule.f(this);
    var result = perform(callbackfn);
    (result.error ? promiseCapability.reject : promiseCapability.resolve)(result.value);
    return promiseCapability.promise;
  }
});
var parent$c$1 = promise$2;
var promise$1 = parent$c$1;
var promise = promise$1;
var parent$b$1 = reverse$4;
var reverse$2$1 = parent$b$1;
var parent$a$1 = reverse$2$1;
var reverse$1$1 = parent$a$1;
var reverse$7 = reverse$1$1;
(function(module) {
  var _typeof2 = _typeofExports["default"];
  var _Object$defineProperty2 = defineProperty$8$1;
  var _Symbol2 = symbol$1$1;
  var _Object$create2 = create$2$1;
  var _Object$getPrototypeOf2 = getPrototypeOf$1$1;
  var _forEachInstanceProperty2 = forEach$1$1;
  var _pushInstanceProperty2 = push$3$1;
  var _Object$setPrototypeOf2 = setPrototypeOf$1$1;
  var _Promise = promise;
  var _reverseInstanceProperty2 = reverse$7;
  var _sliceInstanceProperty2 = slice$1$1;
  function _regeneratorRuntime2() {
    module.exports = _regeneratorRuntime2 = function _regeneratorRuntime3() {
      return e2;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    var t2, e2 = {}, r2 = Object.prototype, n2 = r2.hasOwnProperty, o2 = _Object$defineProperty2 || function(t3, e3, r3) {
      t3[e3] = r3.value;
    }, i2 = "function" == typeof _Symbol2 ? _Symbol2 : {}, a2 = i2.iterator || "@@iterator", c2 = i2.asyncIterator || "@@asyncIterator", u2 = i2.toStringTag || "@@toStringTag";
    function define(t3, e3, r3) {
      return _Object$defineProperty2(t3, e3, {
        value: r3,
        enumerable: true,
        configurable: true,
        writable: true
      }), t3[e3];
    }
    try {
      define({}, "");
    } catch (t3) {
      define = function define2(t4, e3, r3) {
        return t4[e3] = r3;
      };
    }
    function wrap2(t3, e3, r3, n3) {
      var i3 = e3 && e3.prototype instanceof Generator ? e3 : Generator, a3 = _Object$create2(i3.prototype), c3 = new Context(n3 || []);
      return o2(a3, "_invoke", {
        value: makeInvokeMethod(t3, r3, c3)
      }), a3;
    }
    function tryCatch(t3, e3, r3) {
      try {
        return {
          type: "normal",
          arg: t3.call(e3, r3)
        };
      } catch (t4) {
        return {
          type: "throw",
          arg: t4
        };
      }
    }
    e2.wrap = wrap2;
    var h2 = "suspendedStart", l2 = "suspendedYield", f2 = "executing", s2 = "completed", y2 = {};
    function Generator() {
    }
    function GeneratorFunction() {
    }
    function GeneratorFunctionPrototype() {
    }
    var p2 = {};
    define(p2, a2, function() {
      return this;
    });
    var d2 = _Object$getPrototypeOf2, v2 = d2 && d2(d2(values2([])));
    v2 && v2 !== r2 && n2.call(v2, a2) && (p2 = v2);
    var g2 = GeneratorFunctionPrototype.prototype = Generator.prototype = _Object$create2(p2);
    function defineIteratorMethods(t3) {
      var _context;
      _forEachInstanceProperty2(_context = ["next", "throw", "return"]).call(_context, function(e3) {
        define(t3, e3, function(t4) {
          return this._invoke(e3, t4);
        });
      });
    }
    function AsyncIterator(t3, e3) {
      function invoke(r4, o3, i3, a3) {
        var c3 = tryCatch(t3[r4], t3, o3);
        if ("throw" !== c3.type) {
          var u3 = c3.arg, h3 = u3.value;
          return h3 && "object" == _typeof2(h3) && n2.call(h3, "__await") ? e3.resolve(h3.__await).then(function(t4) {
            invoke("next", t4, i3, a3);
          }, function(t4) {
            invoke("throw", t4, i3, a3);
          }) : e3.resolve(h3).then(function(t4) {
            u3.value = t4, i3(u3);
          }, function(t4) {
            return invoke("throw", t4, i3, a3);
          });
        }
        a3(c3.arg);
      }
      var r3;
      o2(this, "_invoke", {
        value: function value2(t4, n3) {
          function callInvokeWithMethodAndArg() {
            return new e3(function(e4, r4) {
              invoke(t4, n3, e4, r4);
            });
          }
          return r3 = r3 ? r3.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
      });
    }
    function makeInvokeMethod(e3, r3, n3) {
      var o3 = h2;
      return function(i3, a3) {
        if (o3 === f2) throw new Error("Generator is already running");
        if (o3 === s2) {
          if ("throw" === i3) throw a3;
          return {
            value: t2,
            done: true
          };
        }
        for (n3.method = i3, n3.arg = a3; ; ) {
          var c3 = n3.delegate;
          if (c3) {
            var u3 = maybeInvokeDelegate(c3, n3);
            if (u3) {
              if (u3 === y2) continue;
              return u3;
            }
          }
          if ("next" === n3.method) n3.sent = n3._sent = n3.arg;
          else if ("throw" === n3.method) {
            if (o3 === h2) throw o3 = s2, n3.arg;
            n3.dispatchException(n3.arg);
          } else "return" === n3.method && n3.abrupt("return", n3.arg);
          o3 = f2;
          var p3 = tryCatch(e3, r3, n3);
          if ("normal" === p3.type) {
            if (o3 = n3.done ? s2 : l2, p3.arg === y2) continue;
            return {
              value: p3.arg,
              done: n3.done
            };
          }
          "throw" === p3.type && (o3 = s2, n3.method = "throw", n3.arg = p3.arg);
        }
      };
    }
    function maybeInvokeDelegate(e3, r3) {
      var n3 = r3.method, o3 = e3.iterator[n3];
      if (o3 === t2) return r3.delegate = null, "throw" === n3 && e3.iterator["return"] && (r3.method = "return", r3.arg = t2, maybeInvokeDelegate(e3, r3), "throw" === r3.method) || "return" !== n3 && (r3.method = "throw", r3.arg = new TypeError("The iterator does not provide a '" + n3 + "' method")), y2;
      var i3 = tryCatch(o3, e3.iterator, r3.arg);
      if ("throw" === i3.type) return r3.method = "throw", r3.arg = i3.arg, r3.delegate = null, y2;
      var a3 = i3.arg;
      return a3 ? a3.done ? (r3[e3.resultName] = a3.value, r3.next = e3.nextLoc, "return" !== r3.method && (r3.method = "next", r3.arg = t2), r3.delegate = null, y2) : a3 : (r3.method = "throw", r3.arg = new TypeError("iterator result is not an object"), r3.delegate = null, y2);
    }
    function pushTryEntry(t3) {
      var _context2;
      var e3 = {
        tryLoc: t3[0]
      };
      1 in t3 && (e3.catchLoc = t3[1]), 2 in t3 && (e3.finallyLoc = t3[2], e3.afterLoc = t3[3]), _pushInstanceProperty2(_context2 = this.tryEntries).call(_context2, e3);
    }
    function resetTryEntry(t3) {
      var e3 = t3.completion || {};
      e3.type = "normal", delete e3.arg, t3.completion = e3;
    }
    function Context(t3) {
      this.tryEntries = [{
        tryLoc: "root"
      }], _forEachInstanceProperty2(t3).call(t3, pushTryEntry, this), this.reset(true);
    }
    function values2(e3) {
      if (e3 || "" === e3) {
        var r3 = e3[a2];
        if (r3) return r3.call(e3);
        if ("function" == typeof e3.next) return e3;
        if (!isNaN(e3.length)) {
          var o3 = -1, i3 = function next4() {
            for (; ++o3 < e3.length; ) if (n2.call(e3, o3)) return next4.value = e3[o3], next4.done = false, next4;
            return next4.value = t2, next4.done = true, next4;
          };
          return i3.next = i3;
        }
      }
      throw new TypeError(_typeof2(e3) + " is not iterable");
    }
    return GeneratorFunction.prototype = GeneratorFunctionPrototype, o2(g2, "constructor", {
      value: GeneratorFunctionPrototype,
      configurable: true
    }), o2(GeneratorFunctionPrototype, "constructor", {
      value: GeneratorFunction,
      configurable: true
    }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u2, "GeneratorFunction"), e2.isGeneratorFunction = function(t3) {
      var e3 = "function" == typeof t3 && t3.constructor;
      return !!e3 && (e3 === GeneratorFunction || "GeneratorFunction" === (e3.displayName || e3.name));
    }, e2.mark = function(t3) {
      return _Object$setPrototypeOf2 ? _Object$setPrototypeOf2(t3, GeneratorFunctionPrototype) : (t3.__proto__ = GeneratorFunctionPrototype, define(t3, u2, "GeneratorFunction")), t3.prototype = _Object$create2(g2), t3;
    }, e2.awrap = function(t3) {
      return {
        __await: t3
      };
    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c2, function() {
      return this;
    }), e2.AsyncIterator = AsyncIterator, e2.async = function(t3, r3, n3, o3, i3) {
      void 0 === i3 && (i3 = _Promise);
      var a3 = new AsyncIterator(wrap2(t3, r3, n3, o3), i3);
      return e2.isGeneratorFunction(r3) ? a3 : a3.next().then(function(t4) {
        return t4.done ? t4.value : a3.next();
      });
    }, defineIteratorMethods(g2), define(g2, u2, "Generator"), define(g2, a2, function() {
      return this;
    }), define(g2, "toString", function() {
      return "[object Generator]";
    }), e2.keys = function(t3) {
      var e3 = Object(t3), r3 = [];
      for (var n3 in e3) _pushInstanceProperty2(r3).call(r3, n3);
      return _reverseInstanceProperty2(r3).call(r3), function next4() {
        for (; r3.length; ) {
          var t4 = r3.pop();
          if (t4 in e3) return next4.value = t4, next4.done = false, next4;
        }
        return next4.done = true, next4;
      };
    }, e2.values = values2, Context.prototype = {
      constructor: Context,
      reset: function reset2(e3) {
        var _context3;
        if (this.prev = 0, this.next = 0, this.sent = this._sent = t2, this.done = false, this.delegate = null, this.method = "next", this.arg = t2, _forEachInstanceProperty2(_context3 = this.tryEntries).call(_context3, resetTryEntry), !e3) for (var r3 in this) "t" === r3.charAt(0) && n2.call(this, r3) && !isNaN(+_sliceInstanceProperty2(r3).call(r3, 1)) && (this[r3] = t2);
      },
      stop: function stop2() {
        this.done = true;
        var t3 = this.tryEntries[0].completion;
        if ("throw" === t3.type) throw t3.arg;
        return this.rval;
      },
      dispatchException: function dispatchException(e3) {
        if (this.done) throw e3;
        var r3 = this;
        function handle(n3, o4) {
          return a3.type = "throw", a3.arg = e3, r3.next = n3, o4 && (r3.method = "next", r3.arg = t2), !!o4;
        }
        for (var o3 = this.tryEntries.length - 1; o3 >= 0; --o3) {
          var i3 = this.tryEntries[o3], a3 = i3.completion;
          if ("root" === i3.tryLoc) return handle("end");
          if (i3.tryLoc <= this.prev) {
            var c3 = n2.call(i3, "catchLoc"), u3 = n2.call(i3, "finallyLoc");
            if (c3 && u3) {
              if (this.prev < i3.catchLoc) return handle(i3.catchLoc, true);
              if (this.prev < i3.finallyLoc) return handle(i3.finallyLoc);
            } else if (c3) {
              if (this.prev < i3.catchLoc) return handle(i3.catchLoc, true);
            } else {
              if (!u3) throw new Error("try statement without catch or finally");
              if (this.prev < i3.finallyLoc) return handle(i3.finallyLoc);
            }
          }
        }
      },
      abrupt: function abrupt(t3, e3) {
        for (var r3 = this.tryEntries.length - 1; r3 >= 0; --r3) {
          var o3 = this.tryEntries[r3];
          if (o3.tryLoc <= this.prev && n2.call(o3, "finallyLoc") && this.prev < o3.finallyLoc) {
            var i3 = o3;
            break;
          }
        }
        i3 && ("break" === t3 || "continue" === t3) && i3.tryLoc <= e3 && e3 <= i3.finallyLoc && (i3 = null);
        var a3 = i3 ? i3.completion : {};
        return a3.type = t3, a3.arg = e3, i3 ? (this.method = "next", this.next = i3.finallyLoc, y2) : this.complete(a3);
      },
      complete: function complete(t3, e3) {
        if ("throw" === t3.type) throw t3.arg;
        return "break" === t3.type || "continue" === t3.type ? this.next = t3.arg : "return" === t3.type ? (this.rval = this.arg = t3.arg, this.method = "return", this.next = "end") : "normal" === t3.type && e3 && (this.next = e3), y2;
      },
      finish: function finish(t3) {
        for (var e3 = this.tryEntries.length - 1; e3 >= 0; --e3) {
          var r3 = this.tryEntries[e3];
          if (r3.finallyLoc === t3) return this.complete(r3.completion, r3.afterLoc), resetTryEntry(r3), y2;
        }
      },
      "catch": function _catch(t3) {
        for (var e3 = this.tryEntries.length - 1; e3 >= 0; --e3) {
          var r3 = this.tryEntries[e3];
          if (r3.tryLoc === t3) {
            var n3 = r3.completion;
            if ("throw" === n3.type) {
              var o3 = n3.arg;
              resetTryEntry(r3);
            }
            return o3;
          }
        }
        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(e3, r3, n3) {
        return this.delegate = {
          iterator: values2(e3),
          resultName: r3,
          nextLoc: n3
        }, "next" === this.method && (this.arg = t2), y2;
      }
    }, e2;
  }
  module.exports = _regeneratorRuntime2, module.exports.__esModule = true, module.exports["default"] = module.exports;
})(regeneratorRuntime$1);
var regeneratorRuntimeExports = regeneratorRuntime$1.exports;
var runtime = regeneratorRuntimeExports();
var regenerator = runtime;
try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}
var _regeneratorRuntime = /* @__PURE__ */ getDefaultExportFromCjs$1(regenerator);
var internalMetadata$1 = { exports: {} };
var fails$4$1 = fails$u$1;
var arrayBufferNonExtensible$1 = fails$4$1(function() {
  if (typeof ArrayBuffer == "function") {
    var buffer2 = new ArrayBuffer(8);
    if (Object.isExtensible(buffer2)) Object.defineProperty(buffer2, "a", { value: 8 });
  }
});
var fails$3$1 = fails$u$1;
var isObject$2$1 = isObject$h$1;
var classof$3$1 = classofRaw$2$1;
var ARRAY_BUFFER_NON_EXTENSIBLE$1 = arrayBufferNonExtensible$1;
var $isExtensible$1 = Object.isExtensible;
var FAILS_ON_PRIMITIVES$4 = fails$3$1(function() {
  $isExtensible$1(1);
});
var objectIsExtensible$1 = FAILS_ON_PRIMITIVES$4 || ARRAY_BUFFER_NON_EXTENSIBLE$1 ? function isExtensible2(it2) {
  if (!isObject$2$1(it2)) return false;
  if (ARRAY_BUFFER_NON_EXTENSIBLE$1 && classof$3$1(it2) === "ArrayBuffer") return false;
  return $isExtensible$1 ? $isExtensible$1(it2) : true;
} : $isExtensible$1;
var fails$2$1 = fails$u$1;
var freezing$1 = !fails$2$1(function() {
  return Object.isExtensible(Object.preventExtensions({}));
});
var $$3$1 = _export$1;
var uncurryThis$1$1 = functionUncurryThis$1;
var hiddenKeys$7 = hiddenKeys$6$1;
var isObject$1$1 = isObject$h$1;
var hasOwn$3$1 = hasOwnProperty_1$1;
var defineProperty$1$1 = objectDefineProperty$1.f;
var getOwnPropertyNamesModule$3 = objectGetOwnPropertyNames$1;
var getOwnPropertyNamesExternalModule$1 = objectGetOwnPropertyNamesExternal$1;
var isExtensible$2 = objectIsExtensible$1;
var uid$5 = uid$4$1;
var FREEZING$2 = freezing$1;
var REQUIRED$1 = false;
var METADATA$2 = uid$5("meta");
var id$3 = 0;
var setMetadata$1 = function(it2) {
  defineProperty$1$1(it2, METADATA$2, { value: {
    objectID: "O" + id$3++,
    // object ID
    weakData: {}
    // weak collections IDs
  } });
};
var fastKey$1$1 = function(it2, create8) {
  if (!isObject$1$1(it2)) return typeof it2 == "symbol" ? it2 : (typeof it2 == "string" ? "S" : "P") + it2;
  if (!hasOwn$3$1(it2, METADATA$2)) {
    if (!isExtensible$2(it2)) return "F";
    if (!create8) return "E";
    setMetadata$1(it2);
  }
  return it2[METADATA$2].objectID;
};
var getWeakData$2 = function(it2, create8) {
  if (!hasOwn$3$1(it2, METADATA$2)) {
    if (!isExtensible$2(it2)) return true;
    if (!create8) return false;
    setMetadata$1(it2);
  }
  return it2[METADATA$2].weakData;
};
var onFreeze$1 = function(it2) {
  if (FREEZING$2 && REQUIRED$1 && isExtensible$2(it2) && !hasOwn$3$1(it2, METADATA$2)) setMetadata$1(it2);
  return it2;
};
var enable$1 = function() {
  meta$2.enable = function() {
  };
  REQUIRED$1 = true;
  var getOwnPropertyNames9 = getOwnPropertyNamesModule$3.f;
  var splice4 = uncurryThis$1$1([].splice);
  var test2 = {};
  test2[METADATA$2] = 1;
  if (getOwnPropertyNames9(test2).length) {
    getOwnPropertyNamesModule$3.f = function(it2) {
      var result = getOwnPropertyNames9(it2);
      for (var i2 = 0, length2 = result.length; i2 < length2; i2++) {
        if (result[i2] === METADATA$2) {
          splice4(result, i2, 1);
          break;
        }
      }
      return result;
    };
    $$3$1({ target: "Object", stat: true, forced: true }, {
      getOwnPropertyNames: getOwnPropertyNamesExternalModule$1.f
    });
  }
};
var meta$2 = internalMetadata$1.exports = {
  enable: enable$1,
  fastKey: fastKey$1$1,
  getWeakData: getWeakData$2,
  onFreeze: onFreeze$1
};
hiddenKeys$7[METADATA$2] = true;
var internalMetadataExports$1 = internalMetadata$1.exports;
var $$2$1 = _export$1;
var global$1$1 = global$p;
var InternalMetadataModule$2 = internalMetadataExports$1;
var fails$1$1 = fails$u$1;
var createNonEnumerableProperty$a = createNonEnumerableProperty$9;
var iterate$1$1 = iterate$7;
var anInstance$1$1 = anInstance$3$1;
var isCallable$n = isCallable$m;
var isObject$k = isObject$h$1;
var isNullOrUndefined$1$1 = isNullOrUndefined$6$1;
var setToStringTag$8 = setToStringTag$7;
var defineProperty$g = objectDefineProperty$1.f;
var forEach$9 = arrayIteration$1.forEach;
var DESCRIPTORS$1$1 = descriptors$1;
var InternalStateModule$1$1 = internalState$1;
var setInternalState$1$1 = InternalStateModule$1$1.set;
var internalStateGetterFor$1$1 = InternalStateModule$1$1.getterFor;
var collection$2$1 = function(CONSTRUCTOR_NAME, wrapper2, common) {
  var IS_MAP = CONSTRUCTOR_NAME.indexOf("Map") !== -1;
  var IS_WEAK = CONSTRUCTOR_NAME.indexOf("Weak") !== -1;
  var ADDER = IS_MAP ? "set" : "add";
  var NativeConstructor = global$1$1[CONSTRUCTOR_NAME];
  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
  var exported = {};
  var Constructor;
  if (!DESCRIPTORS$1$1 || !isCallable$n(NativeConstructor) || !(IS_WEAK || NativePrototype.forEach && !fails$1$1(function() {
    new NativeConstructor().entries().next();
  }))) {
    Constructor = common.getConstructor(wrapper2, CONSTRUCTOR_NAME, IS_MAP, ADDER);
    InternalMetadataModule$2.enable();
  } else {
    Constructor = wrapper2(function(target, iterable) {
      setInternalState$1$1(anInstance$1$1(target, Prototype), {
        type: CONSTRUCTOR_NAME,
        collection: new NativeConstructor()
      });
      if (!isNullOrUndefined$1$1(iterable)) iterate$1$1(iterable, target[ADDER], { that: target, AS_ENTRIES: IS_MAP });
    });
    var Prototype = Constructor.prototype;
    var getInternalState2 = internalStateGetterFor$1$1(CONSTRUCTOR_NAME);
    forEach$9(["add", "clear", "delete", "forEach", "get", "has", "set", "keys", "values", "entries"], function(KEY) {
      var IS_ADDER = KEY === "add" || KEY === "set";
      if (KEY in NativePrototype && !(IS_WEAK && KEY === "clear")) {
        createNonEnumerableProperty$a(Prototype, KEY, function(a2, b2) {
          var collection2 = getInternalState2(this).collection;
          if (!IS_ADDER && IS_WEAK && !isObject$k(a2)) return KEY === "get" ? void 0 : false;
          var result = collection2[KEY](a2 === 0 ? 0 : a2, b2);
          return IS_ADDER ? this : result;
        });
      }
    });
    IS_WEAK || defineProperty$g(Prototype, "size", {
      configurable: true,
      get: function() {
        return getInternalState2(this).collection.size;
      }
    });
  }
  setToStringTag$8(Constructor, CONSTRUCTOR_NAME, false, true);
  exported[CONSTRUCTOR_NAME] = Constructor;
  $$2$1({ global: true, forced: true }, exported);
  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
  return Constructor;
};
var defineBuiltIn$7 = defineBuiltIn$6;
var defineBuiltIns$1$1 = function(target, src, options) {
  for (var key2 in src) {
    if (options && options.unsafe && target[key2]) target[key2] = src[key2];
    else defineBuiltIn$7(target, key2, src[key2], options);
  }
  return target;
};
var create$c = objectCreate$1;
var defineBuiltInAccessor$4 = defineBuiltInAccessor$3$1;
var defineBuiltIns$4 = defineBuiltIns$1$1;
var bind$j = functionBindContext$1;
var anInstance$4 = anInstance$3$1;
var isNullOrUndefined$7 = isNullOrUndefined$6$1;
var iterate$8 = iterate$7;
var defineIterator$3 = iteratorDefine$1;
var createIterResultObject$4 = createIterResultObject$3$1;
var setSpecies$3 = setSpecies$2;
var DESCRIPTORS$i = descriptors$1;
var fastKey$2 = internalMetadataExports$1.fastKey;
var InternalStateModule$6 = internalState$1;
var setInternalState$6 = InternalStateModule$6.set;
var internalStateGetterFor$3 = InternalStateModule$6.getterFor;
var collectionStrong$2$1 = {
  getConstructor: function(wrapper2, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
    var Constructor = wrapper2(function(that, iterable) {
      anInstance$4(that, Prototype);
      setInternalState$6(that, {
        type: CONSTRUCTOR_NAME,
        index: create$c(null),
        first: void 0,
        last: void 0,
        size: 0
      });
      if (!DESCRIPTORS$i) that.size = 0;
      if (!isNullOrUndefined$7(iterable)) iterate$8(iterable, that[ADDER], { that, AS_ENTRIES: IS_MAP });
    });
    var Prototype = Constructor.prototype;
    var getInternalState2 = internalStateGetterFor$3(CONSTRUCTOR_NAME);
    var define = function(that, key2, value2) {
      var state = getInternalState2(that);
      var entry = getEntry(that, key2);
      var previous, index2;
      if (entry) {
        entry.value = value2;
      } else {
        state.last = entry = {
          index: index2 = fastKey$2(key2, true),
          key: key2,
          value: value2,
          previous: previous = state.last,
          next: void 0,
          removed: false
        };
        if (!state.first) state.first = entry;
        if (previous) previous.next = entry;
        if (DESCRIPTORS$i) state.size++;
        else that.size++;
        if (index2 !== "F") state.index[index2] = entry;
      }
      return that;
    };
    var getEntry = function(that, key2) {
      var state = getInternalState2(that);
      var index2 = fastKey$2(key2);
      var entry;
      if (index2 !== "F") return state.index[index2];
      for (entry = state.first; entry; entry = entry.next) {
        if (entry.key === key2) return entry;
      }
    };
    defineBuiltIns$4(Prototype, {
      // `{ Map, Set }.prototype.clear()` methods
      // https://tc39.es/ecma262/#sec-map.prototype.clear
      // https://tc39.es/ecma262/#sec-set.prototype.clear
      clear: function clear2() {
        var that = this;
        var state = getInternalState2(that);
        var data2 = state.index;
        var entry = state.first;
        while (entry) {
          entry.removed = true;
          if (entry.previous) entry.previous = entry.previous.next = void 0;
          delete data2[entry.index];
          entry = entry.next;
        }
        state.first = state.last = void 0;
        if (DESCRIPTORS$i) state.size = 0;
        else that.size = 0;
      },
      // `{ Map, Set }.prototype.delete(key)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.delete
      // https://tc39.es/ecma262/#sec-set.prototype.delete
      "delete": function(key2) {
        var that = this;
        var state = getInternalState2(that);
        var entry = getEntry(that, key2);
        if (entry) {
          var next4 = entry.next;
          var prev = entry.previous;
          delete state.index[entry.index];
          entry.removed = true;
          if (prev) prev.next = next4;
          if (next4) next4.previous = prev;
          if (state.first === entry) state.first = next4;
          if (state.last === entry) state.last = prev;
          if (DESCRIPTORS$i) state.size--;
          else that.size--;
        }
        return !!entry;
      },
      // `{ Map, Set }.prototype.forEach(callbackfn, thisArg = undefined)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.foreach
      // https://tc39.es/ecma262/#sec-set.prototype.foreach
      forEach: function forEach5(callbackfn) {
        var state = getInternalState2(this);
        var boundFunction = bind$j(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        var entry;
        while (entry = entry ? entry.next : state.first) {
          boundFunction(entry.value, entry.key, this);
          while (entry && entry.removed) entry = entry.previous;
        }
      },
      // `{ Map, Set}.prototype.has(key)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.has
      // https://tc39.es/ecma262/#sec-set.prototype.has
      has: function has2(key2) {
        return !!getEntry(this, key2);
      }
    });
    defineBuiltIns$4(Prototype, IS_MAP ? {
      // `Map.prototype.get(key)` method
      // https://tc39.es/ecma262/#sec-map.prototype.get
      get: function get2(key2) {
        var entry = getEntry(this, key2);
        return entry && entry.value;
      },
      // `Map.prototype.set(key, value)` method
      // https://tc39.es/ecma262/#sec-map.prototype.set
      set: function set2(key2, value2) {
        return define(this, key2 === 0 ? 0 : key2, value2);
      }
    } : {
      // `Set.prototype.add(value)` method
      // https://tc39.es/ecma262/#sec-set.prototype.add
      add: function add(value2) {
        return define(this, value2 = value2 === 0 ? 0 : value2, value2);
      }
    });
    if (DESCRIPTORS$i) defineBuiltInAccessor$4(Prototype, "size", {
      configurable: true,
      get: function() {
        return getInternalState2(this).size;
      }
    });
    return Constructor;
  },
  setStrong: function(Constructor, CONSTRUCTOR_NAME, IS_MAP) {
    var ITERATOR_NAME = CONSTRUCTOR_NAME + " Iterator";
    var getInternalCollectionState = internalStateGetterFor$3(CONSTRUCTOR_NAME);
    var getInternalIteratorState = internalStateGetterFor$3(ITERATOR_NAME);
    defineIterator$3(Constructor, CONSTRUCTOR_NAME, function(iterated, kind) {
      setInternalState$6(this, {
        type: ITERATOR_NAME,
        target: iterated,
        state: getInternalCollectionState(iterated),
        kind,
        last: void 0
      });
    }, function() {
      var state = getInternalIteratorState(this);
      var kind = state.kind;
      var entry = state.last;
      while (entry && entry.removed) entry = entry.previous;
      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
        state.target = void 0;
        return createIterResultObject$4(void 0, true);
      }
      if (kind === "keys") return createIterResultObject$4(entry.key, false);
      if (kind === "values") return createIterResultObject$4(entry.value, false);
      return createIterResultObject$4([entry.key, entry.value], false);
    }, IS_MAP ? "entries" : "values", !IS_MAP, true);
    setSpecies$3(CONSTRUCTOR_NAME);
  }
};
var collection$1$1 = collection$2$1;
var collectionStrong$1$1 = collectionStrong$2$1;
collection$1$1("Map", function(init) {
  return function Map2() {
    return init(this, arguments.length ? arguments[0] : void 0);
  };
}, collectionStrong$1$1);
var path$1$1 = path$o$1;
var map$2$1 = path$1$1.Map;
var parent$9$1 = map$2$1;
var map$1$1 = parent$9$1;
var map$8 = map$1$1;
var _Map$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(map$8);
var $$1$1 = _export$1;
var $some$1 = arrayIteration$1.some;
var arrayMethodIsStrict$1$1 = arrayMethodIsStrict$4$1;
var STRICT_METHOD$1$1 = arrayMethodIsStrict$1$1("some");
$$1$1({ target: "Array", proto: true, forced: !STRICT_METHOD$1$1 }, {
  some: function some2(callbackfn) {
    return $some$1(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
  }
});
var getBuiltInPrototypeMethod$4 = getBuiltInPrototypeMethod$g;
var some$3$1 = getBuiltInPrototypeMethod$4("Array", "some");
var isPrototypeOf$4$1 = objectIsPrototypeOf$1;
var method$4$1 = some$3$1;
var ArrayPrototype$4$1 = Array.prototype;
var some$2$1 = function(it2) {
  var own = it2.some;
  return it2 === ArrayPrototype$4$1 || isPrototypeOf$4$1(ArrayPrototype$4$1, it2) && own === ArrayPrototype$4$1.some ? method$4$1 : own;
};
var parent$8$1 = some$2$1;
var some$1$1 = parent$8$1;
var some$4 = some$1$1;
var _someInstanceProperty$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(some$4);
var getBuiltInPrototypeMethod$3 = getBuiltInPrototypeMethod$g;
var keys$3$1 = getBuiltInPrototypeMethod$3("Array", "keys");
var parent$7$1 = keys$3$1;
var keys$2$1 = parent$7$1;
var classof$2$1 = classof$d$1;
var hasOwn$2$1 = hasOwnProperty_1$1;
var isPrototypeOf$3$1 = objectIsPrototypeOf$1;
var method$3$1 = keys$2$1;
var ArrayPrototype$3$1 = Array.prototype;
var DOMIterables$2$1 = {
  DOMTokenList: true,
  NodeList: true
};
var keys$1$1 = function(it2) {
  var own = it2.keys;
  return it2 === ArrayPrototype$3$1 || isPrototypeOf$3$1(ArrayPrototype$3$1, it2) && own === ArrayPrototype$3$1.keys || hasOwn$2$1(DOMIterables$2$1, classof$2$1(it2)) ? method$3$1 : own;
};
var keys$8 = keys$1$1;
var _keysInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs$1(keys$8);
var arraySlice$7 = arraySliceSimple$1;
var floor$2 = Math.floor;
var mergeSort$1 = function(array2, comparefn) {
  var length2 = array2.length;
  var middle = floor$2(length2 / 2);
  return length2 < 8 ? insertionSort$1(array2, comparefn) : merge$3(
    array2,
    mergeSort$1(arraySlice$7(array2, 0, middle), comparefn),
    mergeSort$1(arraySlice$7(array2, middle), comparefn),
    comparefn
  );
};
var insertionSort$1 = function(array2, comparefn) {
  var length2 = array2.length;
  var i2 = 1;
  var element, j2;
  while (i2 < length2) {
    j2 = i2;
    element = array2[i2];
    while (j2 && comparefn(array2[j2 - 1], element) > 0) {
      array2[j2] = array2[--j2];
    }
    if (j2 !== i2++) array2[j2] = element;
  }
  return array2;
};
var merge$3 = function(array2, left2, right2, comparefn) {
  var llength = left2.length;
  var rlength = right2.length;
  var lindex = 0;
  var rindex = 0;
  while (lindex < llength || rindex < rlength) {
    array2[lindex + rindex] = lindex < llength && rindex < rlength ? comparefn(left2[lindex], right2[rindex]) <= 0 ? left2[lindex++] : right2[rindex++] : lindex < llength ? left2[lindex++] : right2[rindex++];
  }
  return array2;
};
var arraySort$1 = mergeSort$1;
var userAgent$1$1 = engineUserAgent$1;
var firefox$2 = userAgent$1$1.match(/firefox\/(\d+)/i);
var engineFfVersion$1 = !!firefox$2 && +firefox$2[1];
var UA$1 = engineUserAgent$1;
var engineIsIeOrEdge$1 = /MSIE|Trident/.test(UA$1);
var userAgent$6 = engineUserAgent$1;
var webkit$1 = userAgent$6.match(/AppleWebKit\/(\d+)\./);
var engineWebkitVersion$1 = !!webkit$1 && +webkit$1[1];
var $$Q = _export$1;
var uncurryThis$y = functionUncurryThis$1;
var aCallable$f = aCallable$e;
var toObject$f = toObject$e$1;
var lengthOfArrayLike$e = lengthOfArrayLike$d;
var deletePropertyOrThrow$3 = deletePropertyOrThrow$2$1;
var toString$d = toString$7$1;
var fails$x = fails$u$1;
var internalSort$1 = arraySort$1;
var arrayMethodIsStrict$7 = arrayMethodIsStrict$4$1;
var FF$1 = engineFfVersion$1;
var IE_OR_EDGE$1 = engineIsIeOrEdge$1;
var V8$1 = engineV8Version$1;
var WEBKIT$1 = engineWebkitVersion$1;
var test$3 = [];
var nativeSort$1 = uncurryThis$y(test$3.sort);
var push$d = uncurryThis$y(test$3.push);
var FAILS_ON_UNDEFINED$1 = fails$x(function() {
  test$3.sort(void 0);
});
var FAILS_ON_NULL$1 = fails$x(function() {
  test$3.sort(null);
});
var STRICT_METHOD$4 = arrayMethodIsStrict$7("sort");
var STABLE_SORT$1 = !fails$x(function() {
  if (V8$1) return V8$1 < 70;
  if (FF$1 && FF$1 > 3) return;
  if (IE_OR_EDGE$1) return true;
  if (WEBKIT$1) return WEBKIT$1 < 603;
  var result = "";
  var code2, chr, value2, index2;
  for (code2 = 65; code2 < 76; code2++) {
    chr = String.fromCharCode(code2);
    switch (code2) {
      case 66:
      case 69:
      case 70:
      case 72:
        value2 = 3;
        break;
      case 68:
      case 71:
        value2 = 4;
        break;
      default:
        value2 = 2;
    }
    for (index2 = 0; index2 < 47; index2++) {
      test$3.push({ k: chr + index2, v: value2 });
    }
  }
  test$3.sort(function(a2, b2) {
    return b2.v - a2.v;
  });
  for (index2 = 0; index2 < test$3.length; index2++) {
    chr = test$3[index2].k.charAt(0);
    if (result.charAt(result.length - 1) !== chr) result += chr;
  }
  return result !== "DGBEFHACIJK";
});
var FORCED$b = FAILS_ON_UNDEFINED$1 || !FAILS_ON_NULL$1 || !STRICT_METHOD$4 || !STABLE_SORT$1;
var getSortCompare$1 = function(comparefn) {
  return function(x2, y2) {
    if (y2 === void 0) return -1;
    if (x2 === void 0) return 1;
    if (comparefn !== void 0) return +comparefn(x2, y2) || 0;
    return toString$d(x2) > toString$d(y2) ? 1 : -1;
  };
};
$$Q({ target: "Array", proto: true, forced: FORCED$b }, {
  sort: function sort2(comparefn) {
    if (comparefn !== void 0) aCallable$f(comparefn);
    var array2 = toObject$f(this);
    if (STABLE_SORT$1) return comparefn === void 0 ? nativeSort$1(array2) : nativeSort$1(array2, comparefn);
    var items = [];
    var arrayLength = lengthOfArrayLike$e(array2);
    var itemsLength, index2;
    for (index2 = 0; index2 < arrayLength; index2++) {
      if (index2 in array2) push$d(items, array2[index2]);
    }
    internalSort$1(items, getSortCompare$1(comparefn));
    itemsLength = lengthOfArrayLike$e(items);
    index2 = 0;
    while (index2 < itemsLength) array2[index2] = items[index2++];
    while (index2 < arrayLength) deletePropertyOrThrow$3(array2, index2++);
    return array2;
  }
});
var getBuiltInPrototypeMethod$2 = getBuiltInPrototypeMethod$g;
var sort$3$1 = getBuiltInPrototypeMethod$2("Array", "sort");
var isPrototypeOf$2$1 = objectIsPrototypeOf$1;
var method$2$1 = sort$3$1;
var ArrayPrototype$2$1 = Array.prototype;
var sort$2$1 = function(it2) {
  var own = it2.sort;
  return it2 === ArrayPrototype$2$1 || isPrototypeOf$2$1(ArrayPrototype$2$1, it2) && own === ArrayPrototype$2$1.sort ? method$2$1 : own;
};
var parent$6$1 = sort$2$1;
var sort$1$1 = parent$6$1;
var sort$5 = sort$1$1;
var _sortInstanceProperty$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(sort$5);
var getBuiltInPrototypeMethod$1 = getBuiltInPrototypeMethod$g;
var values$3$1 = getBuiltInPrototypeMethod$1("Array", "values");
var parent$5$1 = values$3$1;
var values$2$1 = parent$5$1;
var classof$1$1 = classof$d$1;
var hasOwn$1$1 = hasOwnProperty_1$1;
var isPrototypeOf$1$1 = objectIsPrototypeOf$1;
var method$1$1 = values$2$1;
var ArrayPrototype$1$1 = Array.prototype;
var DOMIterables$1$1 = {
  DOMTokenList: true,
  NodeList: true
};
var values$1$1 = function(it2) {
  var own = it2.values;
  return it2 === ArrayPrototype$1$1 || isPrototypeOf$1$1(ArrayPrototype$1$1, it2) && own === ArrayPrototype$1$1.values || hasOwn$1$1(DOMIterables$1$1, classof$1$1(it2)) ? method$1$1 : own;
};
var values$4 = values$1$1;
var _valuesInstanceProperty$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(values$4);
var iterator$6 = iterator$4$1;
var _Symbol$iterator$2 = /* @__PURE__ */ getDefaultExportFromCjs$1(iterator$6);
var getBuiltInPrototypeMethod = getBuiltInPrototypeMethod$g;
var entries$3 = getBuiltInPrototypeMethod("Array", "entries");
var parent$4$1 = entries$3;
var entries$2 = parent$4$1;
var classof$g = classof$d$1;
var hasOwn$k = hasOwnProperty_1$1;
var isPrototypeOf$l = objectIsPrototypeOf$1;
var method$g = entries$2;
var ArrayPrototype$h = Array.prototype;
var DOMIterables$5 = {
  DOMTokenList: true,
  NodeList: true
};
var entries$1 = function(it2) {
  var own = it2.entries;
  return it2 === ArrayPrototype$h || isPrototypeOf$l(ArrayPrototype$h, it2) && own === ArrayPrototype$h.entries || hasOwn$k(DOMIterables$5, classof$g(it2)) ? method$g : own;
};
var entries = entries$1;
var _entriesInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs$1(entries);
let getRandomValues$1;
const rnds8$1 = new Uint8Array(16);
function rng$1() {
  if (!getRandomValues$1) {
    getRandomValues$1 = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues$1) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues$1(rnds8$1);
}
const byteToHex$1 = [];
for (let i2 = 0; i2 < 256; ++i2) {
  byteToHex$1.push((i2 + 256).toString(16).slice(1));
}
function unsafeStringify$1(arr, offset2 = 0) {
  return byteToHex$1[arr[offset2 + 0]] + byteToHex$1[arr[offset2 + 1]] + byteToHex$1[arr[offset2 + 2]] + byteToHex$1[arr[offset2 + 3]] + "-" + byteToHex$1[arr[offset2 + 4]] + byteToHex$1[arr[offset2 + 5]] + "-" + byteToHex$1[arr[offset2 + 6]] + byteToHex$1[arr[offset2 + 7]] + "-" + byteToHex$1[arr[offset2 + 8]] + byteToHex$1[arr[offset2 + 9]] + "-" + byteToHex$1[arr[offset2 + 10]] + byteToHex$1[arr[offset2 + 11]] + byteToHex$1[arr[offset2 + 12]] + byteToHex$1[arr[offset2 + 13]] + byteToHex$1[arr[offset2 + 14]] + byteToHex$1[arr[offset2 + 15]];
}
const randomUUID$1 = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native$1 = {
  randomUUID: randomUUID$1
};
function v4$1(options, buf, offset2) {
  if (native$1.randomUUID && !buf && !options) {
    return native$1.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng$1)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  return unsafeStringify$1(rnds);
}
function isId(value2) {
  return typeof value2 === "string" || typeof value2 === "number";
}
var Queue = /* @__PURE__ */ function() {
  function Queue2(options) {
    _classCallCheck$1(this, Queue2);
    _defineProperty$1(this, "_queue", []);
    _defineProperty$1(this, "_timeout", null);
    _defineProperty$1(this, "_extended", null);
    this.delay = null;
    this.max = Infinity;
    this.setOptions(options);
  }
  _createClass$1(Queue2, [{
    key: "setOptions",
    value: function setOptions(options) {
      if (options && typeof options.delay !== "undefined") {
        this.delay = options.delay;
      }
      if (options && typeof options.max !== "undefined") {
        this.max = options.max;
      }
      this._flushIfNeeded();
    }
    /**
     * Extend an object with queuing functionality.
     * The object will be extended with a function flush, and the methods provided in options.replace will be replaced with queued ones.
     *
     * @param object - The object to be extended.
     * @param options - Additional options.
     * @returns The created queue.
     */
  }, {
    key: "destroy",
    value: (
      /**
       * Destroy the queue. The queue will first flush all queued actions, and in case it has extended an object, will restore the original object.
       */
      function destroy() {
        this.flush();
        if (this._extended) {
          var object2 = this._extended.object;
          var methods = this._extended.methods;
          for (var i2 = 0; i2 < methods.length; i2++) {
            var method2 = methods[i2];
            if (method2.original) {
              object2[method2.name] = method2.original;
            } else {
              delete object2[method2.name];
            }
          }
          this._extended = null;
        }
      }
    )
    /**
     * Replace a method on an object with a queued version.
     *
     * @param object - Object having the method.
     * @param method - The method name.
     */
  }, {
    key: "replace",
    value: function replace2(object2, method2) {
      var me = this;
      var original = object2[method2];
      if (!original) {
        throw new Error("Method " + method2 + " undefined");
      }
      object2[method2] = function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        me.queue({
          args,
          fn: original,
          context: this
        });
      };
    }
    /**
     * Queue a call.
     *
     * @param entry - The function or entry to be queued.
     */
  }, {
    key: "queue",
    value: function queue2(entry) {
      if (typeof entry === "function") {
        this._queue.push({
          fn: entry
        });
      } else {
        this._queue.push(entry);
      }
      this._flushIfNeeded();
    }
    /**
     * Check whether the queue needs to be flushed.
     */
  }, {
    key: "_flushIfNeeded",
    value: function _flushIfNeeded() {
      var _this = this;
      if (this._queue.length > this.max) {
        this.flush();
      }
      if (this._timeout != null) {
        clearTimeout(this._timeout);
        this._timeout = null;
      }
      if (this.queue.length > 0 && typeof this.delay === "number") {
        this._timeout = _setTimeout$1(function() {
          _this.flush();
        }, this.delay);
      }
    }
    /**
     * Flush all queued calls
     */
  }, {
    key: "flush",
    value: function flush2() {
      var _context, _context2;
      _forEachInstanceProperty$1(_context = _spliceInstanceProperty$1(_context2 = this._queue).call(_context2, 0)).call(_context, function(entry) {
        entry.fn.apply(entry.context || entry.fn, entry.args || []);
      });
    }
  }], [{
    key: "extend",
    value: function extend2(object2, options) {
      var queue2 = new Queue2(options);
      if (object2.flush !== void 0) {
        throw new Error("Target object already has a property flush");
      }
      object2.flush = function() {
        queue2.flush();
      };
      var methods = [{
        name: "flush",
        original: void 0
      }];
      if (options && options.replace) {
        for (var i2 = 0; i2 < options.replace.length; i2++) {
          var name = options.replace[i2];
          methods.push({
            name,
            // @TODO: better solution?
            original: object2[name]
          });
          queue2.replace(object2, name);
        }
      }
      queue2._extended = {
        object: object2,
        methods
      };
      return queue2;
    }
  }]);
  return Queue2;
}();
var DataSetPart = /* @__PURE__ */ function() {
  function DataSetPart2() {
    _classCallCheck$1(this, DataSetPart2);
    _defineProperty$1(this, "_subscribers", {
      "*": [],
      add: [],
      remove: [],
      update: []
    });
    _defineProperty$1(this, "subscribe", DataSetPart2.prototype.on);
    _defineProperty$1(this, "unsubscribe", DataSetPart2.prototype.off);
  }
  _createClass$1(DataSetPart2, [{
    key: "_trigger",
    value: (
      /**
       * Trigger an event
       *
       * @param event - Event name.
       * @param payload - Event payload.
       * @param senderId - Id of the sender.
       */
      function _trigger(event, payload, senderId) {
        var _context, _context2;
        if (event === "*") {
          throw new Error("Cannot trigger event *");
        }
        _forEachInstanceProperty$1(_context = _concatInstanceProperty$1(_context2 = []).call(_context2, _toConsumableArray$1(this._subscribers[event]), _toConsumableArray$1(this._subscribers["*"]))).call(_context, function(subscriber) {
          subscriber(event, payload, senderId != null ? senderId : null);
        });
      }
    )
    /**
     * Subscribe to an event, add an event listener.
     *
     * @remarks Non-function callbacks are ignored.
     * @param event - Event name.
     * @param callback - Callback method.
     */
  }, {
    key: "on",
    value: function on(event, callback) {
      if (typeof callback === "function") {
        this._subscribers[event].push(callback);
      }
    }
    /**
     * Unsubscribe from an event, remove an event listener.
     *
     * @remarks If the same callback was subscribed more than once **all** occurences will be removed.
     * @param event - Event name.
     * @param callback - Callback method.
     */
  }, {
    key: "off",
    value: function off(event, callback) {
      var _context3;
      this._subscribers[event] = _filterInstanceProperty$1(_context3 = this._subscribers[event]).call(_context3, function(subscriber) {
        return subscriber !== callback;
      });
    }
  }]);
  return DataSetPart2;
}();
var collection$4 = collection$2$1;
var collectionStrong$3 = collectionStrong$2$1;
collection$4("Set", function(init) {
  return function Set2() {
    return init(this, arguments.length ? arguments[0] : void 0);
  };
}, collectionStrong$3);
var path$x = path$o$1;
var set$2$1 = path$x.Set;
var parent$3$1 = set$2$1;
var set$1$1 = parent$3$1;
var set$5 = set$1$1;
var _Set$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(set$5);
var getIterator$5 = getIterator$8;
var getIterator_1 = getIterator$5;
var parent$2$1 = getIterator_1;
var getIterator$4 = parent$2$1;
var parent$1$1 = getIterator$4;
var getIterator$3 = parent$1$1;
var parent$1c = getIterator$3;
var getIterator$2$1 = parent$1c;
var getIterator$1$1 = getIterator$2$1;
var getIterator$9 = getIterator$1$1;
var _getIterator = /* @__PURE__ */ getDefaultExportFromCjs$1(getIterator$9);
function _createForOfIteratorHelper$2$1(o2, allowArrayLike) {
  var it2 = typeof _Symbol$2 !== "undefined" && _getIteratorMethod$2(o2) || o2["@@iterator"];
  if (!it2) {
    if (_Array$isArray$2(o2) || (it2 = _unsupportedIterableToArray$2$1(o2)) || allowArrayLike) {
      if (it2) o2 = it2;
      var i2 = 0;
      var F = function F2() {
      };
      return { s: F, n: function n2() {
        if (i2 >= o2.length) return { done: true };
        return { done: false, value: o2[i2++] };
      }, e: function e2(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s2() {
    it2 = it2.call(o2);
  }, n: function n2() {
    var step = it2.next();
    normalCompletion = step.done;
    return step;
  }, e: function e2(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f2() {
    try {
      if (!normalCompletion && it2.return != null) it2.return();
    } finally {
      if (didErr) throw err;
    }
  } };
}
function _unsupportedIterableToArray$2$1(o2, minLen) {
  var _context10;
  if (!o2) return;
  if (typeof o2 === "string") return _arrayLikeToArray$2$1(o2, minLen);
  var n2 = _sliceInstanceProperty$2(_context10 = Object.prototype.toString.call(o2)).call(_context10, 8, -1);
  if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set") return _Array$from$1$1(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$2$1(o2, minLen);
}
function _arrayLikeToArray$2$1(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
  return arr2;
}
var DataStream = /* @__PURE__ */ function(_Symbol$iterator$12) {
  function DataStream2(pairs) {
    _classCallCheck$1(this, DataStream2);
    this._pairs = pairs;
  }
  _createClass$1(DataStream2, [{
    key: _Symbol$iterator$12,
    value: /* @__PURE__ */ _regeneratorRuntime.mark(function value2() {
      var _iterator, _step, _step$value, id2, item;
      return _regeneratorRuntime.wrap(function value$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _iterator = _createForOfIteratorHelper$2$1(this._pairs);
            _context.prev = 1;
            _iterator.s();
          case 3:
            if ((_step = _iterator.n()).done) {
              _context.next = 9;
              break;
            }
            _step$value = _slicedToArray$1(_step.value, 2), id2 = _step$value[0], item = _step$value[1];
            _context.next = 7;
            return [id2, item];
          case 7:
            _context.next = 3;
            break;
          case 9:
            _context.next = 14;
            break;
          case 11:
            _context.prev = 11;
            _context.t0 = _context["catch"](1);
            _iterator.e(_context.t0);
          case 14:
            _context.prev = 14;
            _iterator.f();
            return _context.finish(14);
          case 17:
          case "end":
            return _context.stop();
        }
      }, value2, this, [[1, 11, 14, 17]]);
    })
    /**
     * Return an iterable of key, value pairs for every entry in the stream.
     */
  }, {
    key: "entries",
    value: /* @__PURE__ */ _regeneratorRuntime.mark(function entries2() {
      var _iterator2, _step2, _step2$value, id2, item;
      return _regeneratorRuntime.wrap(function entries$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            _iterator2 = _createForOfIteratorHelper$2$1(this._pairs);
            _context2.prev = 1;
            _iterator2.s();
          case 3:
            if ((_step2 = _iterator2.n()).done) {
              _context2.next = 9;
              break;
            }
            _step2$value = _slicedToArray$1(_step2.value, 2), id2 = _step2$value[0], item = _step2$value[1];
            _context2.next = 7;
            return [id2, item];
          case 7:
            _context2.next = 3;
            break;
          case 9:
            _context2.next = 14;
            break;
          case 11:
            _context2.prev = 11;
            _context2.t0 = _context2["catch"](1);
            _iterator2.e(_context2.t0);
          case 14:
            _context2.prev = 14;
            _iterator2.f();
            return _context2.finish(14);
          case 17:
          case "end":
            return _context2.stop();
        }
      }, entries2, this, [[1, 11, 14, 17]]);
    })
    /**
     * Return an iterable of keys in the stream.
     */
  }, {
    key: "keys",
    value: /* @__PURE__ */ _regeneratorRuntime.mark(function keys6() {
      var _iterator3, _step3, _step3$value, id2;
      return _regeneratorRuntime.wrap(function keys$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            _iterator3 = _createForOfIteratorHelper$2$1(this._pairs);
            _context3.prev = 1;
            _iterator3.s();
          case 3:
            if ((_step3 = _iterator3.n()).done) {
              _context3.next = 9;
              break;
            }
            _step3$value = _slicedToArray$1(_step3.value, 1), id2 = _step3$value[0];
            _context3.next = 7;
            return id2;
          case 7:
            _context3.next = 3;
            break;
          case 9:
            _context3.next = 14;
            break;
          case 11:
            _context3.prev = 11;
            _context3.t0 = _context3["catch"](1);
            _iterator3.e(_context3.t0);
          case 14:
            _context3.prev = 14;
            _iterator3.f();
            return _context3.finish(14);
          case 17:
          case "end":
            return _context3.stop();
        }
      }, keys6, this, [[1, 11, 14, 17]]);
    })
    /**
     * Return an iterable of values in the stream.
     */
  }, {
    key: "values",
    value: /* @__PURE__ */ _regeneratorRuntime.mark(function values2() {
      var _iterator4, _step4, _step4$value, item;
      return _regeneratorRuntime.wrap(function values$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            _iterator4 = _createForOfIteratorHelper$2$1(this._pairs);
            _context4.prev = 1;
            _iterator4.s();
          case 3:
            if ((_step4 = _iterator4.n()).done) {
              _context4.next = 9;
              break;
            }
            _step4$value = _slicedToArray$1(_step4.value, 2), item = _step4$value[1];
            _context4.next = 7;
            return item;
          case 7:
            _context4.next = 3;
            break;
          case 9:
            _context4.next = 14;
            break;
          case 11:
            _context4.prev = 11;
            _context4.t0 = _context4["catch"](1);
            _iterator4.e(_context4.t0);
          case 14:
            _context4.prev = 14;
            _iterator4.f();
            return _context4.finish(14);
          case 17:
          case "end":
            return _context4.stop();
        }
      }, values2, this, [[1, 11, 14, 17]]);
    })
    /**
     * Return an array containing all the ids in this stream.
     *
     * @remarks
     * The array may contain duplicities.
     * @returns The array with all ids from this stream.
     */
  }, {
    key: "toIdArray",
    value: function toIdArray() {
      var _context5;
      return _mapInstanceProperty$1(_context5 = _toConsumableArray$1(this._pairs)).call(_context5, function(pair) {
        return pair[0];
      });
    }
    /**
     * Return an array containing all the items in this stream.
     *
     * @remarks
     * The array may contain duplicities.
     * @returns The array with all items from this stream.
     */
  }, {
    key: "toItemArray",
    value: function toItemArray() {
      var _context6;
      return _mapInstanceProperty$1(_context6 = _toConsumableArray$1(this._pairs)).call(_context6, function(pair) {
        return pair[1];
      });
    }
    /**
     * Return an array containing all the entries in this stream.
     *
     * @remarks
     * The array may contain duplicities.
     * @returns The array with all entries from this stream.
     */
  }, {
    key: "toEntryArray",
    value: function toEntryArray() {
      return _toConsumableArray$1(this._pairs);
    }
    /**
     * Return an object map containing all the items in this stream accessible by ids.
     *
     * @remarks
     * In case of duplicate ids (coerced to string so `7 == '7'`) the last encoutered appears in the returned object.
     * @returns The object map of all id → item pairs from this stream.
     */
  }, {
    key: "toObjectMap",
    value: function toObjectMap() {
      var map4 = _Object$create$1$1(null);
      var _iterator5 = _createForOfIteratorHelper$2$1(this._pairs), _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
          var _step5$value = _slicedToArray$1(_step5.value, 2), id2 = _step5$value[0], item = _step5$value[1];
          map4[id2] = item;
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      return map4;
    }
    /**
     * Return a map containing all the items in this stream accessible by ids.
     *
     * @returns The map of all id → item pairs from this stream.
     */
  }, {
    key: "toMap",
    value: function toMap() {
      return new _Map$1(this._pairs);
    }
    /**
     * Return a set containing all the (unique) ids in this stream.
     *
     * @returns The set of all ids from this stream.
     */
  }, {
    key: "toIdSet",
    value: function toIdSet() {
      return new _Set$1(this.toIdArray());
    }
    /**
     * Return a set containing all the (unique) items in this stream.
     *
     * @returns The set of all items from this stream.
     */
  }, {
    key: "toItemSet",
    value: function toItemSet() {
      return new _Set$1(this.toItemArray());
    }
    /**
     * Cache the items from this stream.
     *
     * @remarks
     * This method allows for items to be fetched immediatelly and used (possibly multiple times) later.
     * It can also be used to optimize performance as {@link DataStream} would otherwise reevaluate everything upon each iteration.
     *
     * ## Example
     * ```javascript
     * const ds = new DataSet([…])
     *
     * const cachedStream = ds.stream()
     *   .filter(…)
     *   .sort(…)
     *   .map(…)
     *   .cached(…) // Data are fetched, processed and cached here.
     *
     * ds.clear()
     * chachedStream // Still has all the items.
     * ```
     * @returns A new {@link DataStream} with cached items (detached from the original {@link DataSet}).
     */
  }, {
    key: "cache",
    value: function cache() {
      return new DataStream2(_toConsumableArray$1(this._pairs));
    }
    /**
     * Get the distinct values of given property.
     *
     * @param callback - The function that picks and possibly converts the property.
     * @typeParam T - The type of the distinct value.
     * @returns A set of all distinct properties.
     */
  }, {
    key: "distinct",
    value: function distinct(callback) {
      var set2 = new _Set$1();
      var _iterator6 = _createForOfIteratorHelper$2$1(this._pairs), _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done; ) {
          var _step6$value = _slicedToArray$1(_step6.value, 2), id2 = _step6$value[0], item = _step6$value[1];
          set2.add(callback(item, id2));
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      return set2;
    }
    /**
     * Filter the items of the stream.
     *
     * @param callback - The function that decides whether an item will be included.
     * @returns A new data stream with the filtered items.
     */
  }, {
    key: "filter",
    value: function filter4(callback) {
      var pairs = this._pairs;
      return new DataStream2({
        [_Symbol$iterator$2]() {
          return /* @__PURE__ */ _regeneratorRuntime.mark(function _callee() {
            var _iterator7, _step7, _step7$value, id2, item;
            return _regeneratorRuntime.wrap(function _callee$(_context7) {
              while (1) switch (_context7.prev = _context7.next) {
                case 0:
                  _iterator7 = _createForOfIteratorHelper$2$1(pairs);
                  _context7.prev = 1;
                  _iterator7.s();
                case 3:
                  if ((_step7 = _iterator7.n()).done) {
                    _context7.next = 10;
                    break;
                  }
                  _step7$value = _slicedToArray$1(_step7.value, 2), id2 = _step7$value[0], item = _step7$value[1];
                  if (!callback(item, id2)) {
                    _context7.next = 8;
                    break;
                  }
                  _context7.next = 8;
                  return [id2, item];
                case 8:
                  _context7.next = 3;
                  break;
                case 10:
                  _context7.next = 15;
                  break;
                case 12:
                  _context7.prev = 12;
                  _context7.t0 = _context7["catch"](1);
                  _iterator7.e(_context7.t0);
                case 15:
                  _context7.prev = 15;
                  _iterator7.f();
                  return _context7.finish(15);
                case 18:
                case "end":
                  return _context7.stop();
              }
            }, _callee, null, [[1, 12, 15, 18]]);
          })();
        }
      });
    }
    /**
     * Execute a callback for each item of the stream.
     *
     * @param callback - The function that will be invoked for each item.
     */
  }, {
    key: "forEach",
    value: function forEach5(callback) {
      var _iterator8 = _createForOfIteratorHelper$2$1(this._pairs), _step8;
      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done; ) {
          var _step8$value = _slicedToArray$1(_step8.value, 2), id2 = _step8$value[0], item = _step8$value[1];
          callback(item, id2);
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
    }
    /**
     * Map the items into a different type.
     *
     * @param callback - The function that does the conversion.
     * @typeParam Mapped - The type of the item after mapping.
     * @returns A new data stream with the mapped items.
     */
  }, {
    key: "map",
    value: function map4(callback) {
      var pairs = this._pairs;
      return new DataStream2({
        [_Symbol$iterator$2]() {
          return /* @__PURE__ */ _regeneratorRuntime.mark(function _callee2() {
            var _iterator9, _step9, _step9$value, id2, item;
            return _regeneratorRuntime.wrap(function _callee2$(_context8) {
              while (1) switch (_context8.prev = _context8.next) {
                case 0:
                  _iterator9 = _createForOfIteratorHelper$2$1(pairs);
                  _context8.prev = 1;
                  _iterator9.s();
                case 3:
                  if ((_step9 = _iterator9.n()).done) {
                    _context8.next = 9;
                    break;
                  }
                  _step9$value = _slicedToArray$1(_step9.value, 2), id2 = _step9$value[0], item = _step9$value[1];
                  _context8.next = 7;
                  return [id2, callback(item, id2)];
                case 7:
                  _context8.next = 3;
                  break;
                case 9:
                  _context8.next = 14;
                  break;
                case 11:
                  _context8.prev = 11;
                  _context8.t0 = _context8["catch"](1);
                  _iterator9.e(_context8.t0);
                case 14:
                  _context8.prev = 14;
                  _iterator9.f();
                  return _context8.finish(14);
                case 17:
                case "end":
                  return _context8.stop();
              }
            }, _callee2, null, [[1, 11, 14, 17]]);
          })();
        }
      });
    }
    /**
     * Get the item with the maximum value of given property.
     *
     * @param callback - The function that picks and possibly converts the property.
     * @returns The item with the maximum if found otherwise null.
     */
  }, {
    key: "max",
    value: function max2(callback) {
      var iter = _getIterator(this._pairs);
      var curr = iter.next();
      if (curr.done) {
        return null;
      }
      var maxItem = curr.value[1];
      var maxValue = callback(curr.value[1], curr.value[0]);
      while (!(curr = iter.next()).done) {
        var _curr$value = _slicedToArray$1(curr.value, 2), id2 = _curr$value[0], item = _curr$value[1];
        var _value = callback(item, id2);
        if (_value > maxValue) {
          maxValue = _value;
          maxItem = item;
        }
      }
      return maxItem;
    }
    /**
     * Get the item with the minimum value of given property.
     *
     * @param callback - The function that picks and possibly converts the property.
     * @returns The item with the minimum if found otherwise null.
     */
  }, {
    key: "min",
    value: function min2(callback) {
      var iter = _getIterator(this._pairs);
      var curr = iter.next();
      if (curr.done) {
        return null;
      }
      var minItem = curr.value[1];
      var minValue = callback(curr.value[1], curr.value[0]);
      while (!(curr = iter.next()).done) {
        var _curr$value2 = _slicedToArray$1(curr.value, 2), id2 = _curr$value2[0], item = _curr$value2[1];
        var _value2 = callback(item, id2);
        if (_value2 < minValue) {
          minValue = _value2;
          minItem = item;
        }
      }
      return minItem;
    }
    /**
     * Reduce the items into a single value.
     *
     * @param callback - The function that does the reduction.
     * @param accumulator - The initial value of the accumulator.
     * @typeParam T - The type of the accumulated value.
     * @returns The reduced value.
     */
  }, {
    key: "reduce",
    value: function reduce4(callback, accumulator) {
      var _iterator10 = _createForOfIteratorHelper$2$1(this._pairs), _step10;
      try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done; ) {
          var _step10$value = _slicedToArray$1(_step10.value, 2), id2 = _step10$value[0], item = _step10$value[1];
          accumulator = callback(accumulator, item, id2);
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }
      return accumulator;
    }
    /**
     * Sort the items.
     *
     * @param callback - Item comparator.
     * @returns A new stream with sorted items.
     */
  }, {
    key: "sort",
    value: function sort4(callback) {
      var _this = this;
      return new DataStream2({
        [_Symbol$iterator$2]: function() {
          var _context9;
          return _getIterator(_sortInstanceProperty$1(_context9 = _toConsumableArray$1(_this._pairs)).call(_context9, function(_ref, _ref2) {
            var _ref3 = _slicedToArray$1(_ref, 2), idA = _ref3[0], itemA = _ref3[1];
            var _ref4 = _slicedToArray$1(_ref2, 2), idB = _ref4[0], itemB = _ref4[1];
            return callback(itemA, itemB, idA, idB);
          }));
        }
      });
    }
  }]);
  return DataStream2;
}(_Symbol$iterator$2);
function ownKeys$8(e2, r2) {
  var t2 = _Object$keys$1(e2);
  if (_Object$getOwnPropertySymbols$1) {
    var o2 = _Object$getOwnPropertySymbols$1(e2);
    r2 && (o2 = _filterInstanceProperty$1(o2).call(o2, function(r3) {
      return _Object$getOwnPropertyDescriptor$2(e2, r3).enumerable;
    })), t2.push.apply(t2, o2);
  }
  return t2;
}
function _objectSpread$4(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var _context10, _context11;
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? _forEachInstanceProperty$1(_context10 = ownKeys$8(Object(t2), true)).call(_context10, function(r3) {
      _defineProperty$1(e2, r3, t2[r3]);
    }) : _Object$getOwnPropertyDescriptors$1 ? _Object$defineProperties$1(e2, _Object$getOwnPropertyDescriptors$1(t2)) : _forEachInstanceProperty$1(_context11 = ownKeys$8(Object(t2))).call(_context11, function(r3) {
      _Object$defineProperty$2(e2, r3, _Object$getOwnPropertyDescriptor$2(t2, r3));
    });
  }
  return e2;
}
function _createForOfIteratorHelper$1$1(o2, allowArrayLike) {
  var it2 = typeof _Symbol$2 !== "undefined" && _getIteratorMethod$2(o2) || o2["@@iterator"];
  if (!it2) {
    if (_Array$isArray$2(o2) || (it2 = _unsupportedIterableToArray$1$1(o2)) || allowArrayLike) {
      if (it2) o2 = it2;
      var i2 = 0;
      var F = function F2() {
      };
      return { s: F, n: function n2() {
        if (i2 >= o2.length) return { done: true };
        return { done: false, value: o2[i2++] };
      }, e: function e2(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s2() {
    it2 = it2.call(o2);
  }, n: function n2() {
    var step = it2.next();
    normalCompletion = step.done;
    return step;
  }, e: function e2(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f2() {
    try {
      if (!normalCompletion && it2.return != null) it2.return();
    } finally {
      if (didErr) throw err;
    }
  } };
}
function _unsupportedIterableToArray$1$1(o2, minLen) {
  var _context9;
  if (!o2) return;
  if (typeof o2 === "string") return _arrayLikeToArray$1$1(o2, minLen);
  var n2 = _sliceInstanceProperty$2(_context9 = Object.prototype.toString.call(o2)).call(_context9, 8, -1);
  if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set") return _Array$from$1$1(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$1$1(o2, minLen);
}
function _arrayLikeToArray$1$1(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
  return arr2;
}
function _createSuper$1$1(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$1$1();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf$1(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf$1(this).constructor;
      result = _Reflect$construct$1(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn$1(this, result);
  };
}
function _isNativeReflectConstruct$1$1() {
  if (typeof Reflect === "undefined" || !_Reflect$construct$1) return false;
  if (_Reflect$construct$1.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct$1(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function ensureFullItem(item, idProp) {
  if (item[idProp] == null) {
    item[idProp] = v4$1();
  }
  return item;
}
var DataSet = /* @__PURE__ */ function(_DataSetPart) {
  _inherits$1(DataSet2, _DataSetPart);
  var _super = _createSuper$1$1(DataSet2);
  function DataSet2(data2, options) {
    var _this;
    _classCallCheck$1(this, DataSet2);
    _this = _super.call(this);
    _defineProperty$1(_assertThisInitialized$2(_this), "_queue", null);
    if (data2 && !_Array$isArray$2(data2)) {
      options = data2;
      data2 = [];
    }
    _this._options = options || {};
    _this._data = new _Map$1();
    _this.length = 0;
    _this._idProp = _this._options.fieldId || "id";
    if (data2 && data2.length) {
      _this.add(data2);
    }
    _this.setOptions(options);
    return _this;
  }
  _createClass$1(DataSet2, [{
    key: "idProp",
    get: (
      /** Flush all queued calls. */
      /** @inheritDoc */
      /** @inheritDoc */
      function get2() {
        return this._idProp;
      }
    )
  }, {
    key: "setOptions",
    value: function setOptions(options) {
      if (options && options.queue !== void 0) {
        if (options.queue === false) {
          if (this._queue) {
            this._queue.destroy();
            this._queue = null;
          }
        } else {
          if (!this._queue) {
            this._queue = Queue.extend(this, {
              replace: ["add", "update", "remove"]
            });
          }
          if (options.queue && typeof options.queue === "object") {
            this._queue.setOptions(options.queue);
          }
        }
      }
    }
    /**
     * Add a data item or an array with items.
     *
     * After the items are added to the DataSet, the DataSet will trigger an event `add`. When a `senderId` is provided, this id will be passed with the triggered event to all subscribers.
     *
     * ## Example
     *
     * ```javascript
     * // create a DataSet
     * const data = new vis.DataSet()
     *
     * // add items
     * const ids = data.add([
     *   { id: 1, text: 'item 1' },
     *   { id: 2, text: 'item 2' },
     *   { text: 'item without an id' }
     * ])
     *
     * console.log(ids) // [1, 2, '<UUIDv4>']
     * ```
     *
     * @param data - Items to be added (ids will be generated if missing).
     * @param senderId - Sender id.
     * @returns addedIds - Array with the ids (generated if not present) of the added items.
     * @throws When an item with the same id as any of the added items already exists.
     */
  }, {
    key: "add",
    value: function add(data2, senderId) {
      var _this2 = this;
      var addedIds = [];
      var id2;
      if (_Array$isArray$2(data2)) {
        var idsToAdd = _mapInstanceProperty$1(data2).call(data2, function(d2) {
          return d2[_this2._idProp];
        });
        if (_someInstanceProperty$1(idsToAdd).call(idsToAdd, function(id3) {
          return _this2._data.has(id3);
        })) {
          throw new Error("A duplicate id was found in the parameter array.");
        }
        for (var i2 = 0, len = data2.length; i2 < len; i2++) {
          id2 = this._addItem(data2[i2]);
          addedIds.push(id2);
        }
      } else if (data2 && typeof data2 === "object") {
        id2 = this._addItem(data2);
        addedIds.push(id2);
      } else {
        throw new Error("Unknown dataType");
      }
      if (addedIds.length) {
        this._trigger("add", {
          items: addedIds
        }, senderId);
      }
      return addedIds;
    }
    /**
     * Update existing items. When an item does not exist, it will be created.
     *
     * @remarks
     * The provided properties will be merged in the existing item. When an item does not exist, it will be created.
     *
     * After the items are updated, the DataSet will trigger an event `add` for the added items, and an event `update`. When a `senderId` is provided, this id will be passed with the triggered event to all subscribers.
     *
     * ## Example
     *
     * ```javascript
     * // create a DataSet
     * const data = new vis.DataSet([
     *   { id: 1, text: 'item 1' },
     *   { id: 2, text: 'item 2' },
     *   { id: 3, text: 'item 3' }
     * ])
     *
     * // update items
     * const ids = data.update([
     *   { id: 2, text: 'item 2 (updated)' },
     *   { id: 4, text: 'item 4 (new)' }
     * ])
     *
     * console.log(ids) // [2, 4]
     * ```
     *
     * ## Warning for TypeScript users
     * This method may introduce partial items into the data set. Use add or updateOnly instead for better type safety.
     * @param data - Items to be updated (if the id is already present) or added (if the id is missing).
     * @param senderId - Sender id.
     * @returns updatedIds - The ids of the added (these may be newly generated if there was no id in the item from the data) or updated items.
     * @throws When the supplied data is neither an item nor an array of items.
     */
  }, {
    key: "update",
    value: function update(data2, senderId) {
      var _this3 = this;
      var addedIds = [];
      var updatedIds = [];
      var oldData = [];
      var updatedData = [];
      var idProp = this._idProp;
      var addOrUpdate = function addOrUpdate2(item) {
        var origId = item[idProp];
        if (origId != null && _this3._data.has(origId)) {
          var fullItem = item;
          var oldItem = _Object$assign$1({}, _this3._data.get(origId));
          var id2 = _this3._updateItem(fullItem);
          updatedIds.push(id2);
          updatedData.push(fullItem);
          oldData.push(oldItem);
        } else {
          var _id = _this3._addItem(item);
          addedIds.push(_id);
        }
      };
      if (_Array$isArray$2(data2)) {
        for (var i2 = 0, len = data2.length; i2 < len; i2++) {
          if (data2[i2] && typeof data2[i2] === "object") {
            addOrUpdate(data2[i2]);
          } else {
            console.warn("Ignoring input item, which is not an object at index " + i2);
          }
        }
      } else if (data2 && typeof data2 === "object") {
        addOrUpdate(data2);
      } else {
        throw new Error("Unknown dataType");
      }
      if (addedIds.length) {
        this._trigger("add", {
          items: addedIds
        }, senderId);
      }
      if (updatedIds.length) {
        var props = {
          items: updatedIds,
          oldData,
          data: updatedData
        };
        this._trigger("update", props, senderId);
      }
      return _concatInstanceProperty$1(addedIds).call(addedIds, updatedIds);
    }
    /**
     * Update existing items. When an item does not exist, an error will be thrown.
     *
     * @remarks
     * The provided properties will be deeply merged into the existing item.
     * When an item does not exist (id not present in the data set or absent), an error will be thrown and nothing will be changed.
     *
     * After the items are updated, the DataSet will trigger an event `update`.
     * When a `senderId` is provided, this id will be passed with the triggered event to all subscribers.
     *
     * ## Example
     *
     * ```javascript
     * // create a DataSet
     * const data = new vis.DataSet([
     *   { id: 1, text: 'item 1' },
     *   { id: 2, text: 'item 2' },
     *   { id: 3, text: 'item 3' },
     * ])
     *
     * // update items
     * const ids = data.update([
     *   { id: 2, text: 'item 2 (updated)' }, // works
     *   // { id: 4, text: 'item 4 (new)' }, // would throw
     *   // { text: 'item 4 (new)' }, // would also throw
     * ])
     *
     * console.log(ids) // [2]
     * ```
     * @param data - Updates (the id and optionally other props) to the items in this data set.
     * @param senderId - Sender id.
     * @returns updatedIds - The ids of the updated items.
     * @throws When the supplied data is neither an item nor an array of items, when the ids are missing.
     */
  }, {
    key: "updateOnly",
    value: function updateOnly(data2, senderId) {
      var _context, _this4 = this;
      if (!_Array$isArray$2(data2)) {
        data2 = [data2];
      }
      var updateEventData = _mapInstanceProperty$1(_context = _mapInstanceProperty$1(data2).call(data2, function(update) {
        var oldData = _this4._data.get(update[_this4._idProp]);
        if (oldData == null) {
          throw new Error("Updating non-existent items is not allowed.");
        }
        return {
          oldData,
          update
        };
      })).call(_context, function(_ref) {
        var oldData = _ref.oldData, update = _ref.update;
        var id2 = oldData[_this4._idProp];
        var updatedData = pureDeepObjectAssign(oldData, update);
        _this4._data.set(id2, updatedData);
        return {
          id: id2,
          oldData,
          updatedData
        };
      });
      if (updateEventData.length) {
        var props = {
          items: _mapInstanceProperty$1(updateEventData).call(updateEventData, function(value2) {
            return value2.id;
          }),
          oldData: _mapInstanceProperty$1(updateEventData).call(updateEventData, function(value2) {
            return value2.oldData;
          }),
          data: _mapInstanceProperty$1(updateEventData).call(updateEventData, function(value2) {
            return value2.updatedData;
          })
        };
        this._trigger("update", props, senderId);
        return props.items;
      } else {
        return [];
      }
    }
    /** @inheritDoc */
  }, {
    key: "get",
    value: function get2(first2, second) {
      var id2 = void 0;
      var ids = void 0;
      var options = void 0;
      if (isId(first2)) {
        id2 = first2;
        options = second;
      } else if (_Array$isArray$2(first2)) {
        ids = first2;
        options = second;
      } else {
        options = first2;
      }
      var returnType = options && options.returnType === "Object" ? "Object" : "Array";
      var filter4 = options && _filterInstanceProperty$1(options);
      var items = [];
      var item = void 0;
      var itemIds = void 0;
      var itemId = void 0;
      if (id2 != null) {
        item = this._data.get(id2);
        if (item && filter4 && !filter4(item)) {
          item = void 0;
        }
      } else if (ids != null) {
        for (var i2 = 0, len = ids.length; i2 < len; i2++) {
          item = this._data.get(ids[i2]);
          if (item != null && (!filter4 || filter4(item))) {
            items.push(item);
          }
        }
      } else {
        var _context2;
        itemIds = _toConsumableArray$1(_keysInstanceProperty(_context2 = this._data).call(_context2));
        for (var _i = 0, _len = itemIds.length; _i < _len; _i++) {
          itemId = itemIds[_i];
          item = this._data.get(itemId);
          if (item != null && (!filter4 || filter4(item))) {
            items.push(item);
          }
        }
      }
      if (options && options.order && id2 == void 0) {
        this._sort(items, options.order);
      }
      if (options && options.fields) {
        var fields = options.fields;
        if (id2 != void 0 && item != null) {
          item = this._filterFields(item, fields);
        } else {
          for (var _i2 = 0, _len2 = items.length; _i2 < _len2; _i2++) {
            items[_i2] = this._filterFields(items[_i2], fields);
          }
        }
      }
      if (returnType == "Object") {
        var result = {};
        for (var _i3 = 0, _len3 = items.length; _i3 < _len3; _i3++) {
          var resultant = items[_i3];
          var _id2 = resultant[this._idProp];
          result[_id2] = resultant;
        }
        return result;
      } else {
        if (id2 != null) {
          var _item;
          return (_item = item) !== null && _item !== void 0 ? _item : null;
        } else {
          return items;
        }
      }
    }
    /** @inheritDoc */
  }, {
    key: "getIds",
    value: function getIds(options) {
      var data2 = this._data;
      var filter4 = options && _filterInstanceProperty$1(options);
      var order2 = options && options.order;
      var itemIds = _toConsumableArray$1(_keysInstanceProperty(data2).call(data2));
      var ids = [];
      if (filter4) {
        if (order2) {
          var items = [];
          for (var i2 = 0, len = itemIds.length; i2 < len; i2++) {
            var id2 = itemIds[i2];
            var item = this._data.get(id2);
            if (item != null && filter4(item)) {
              items.push(item);
            }
          }
          this._sort(items, order2);
          for (var _i4 = 0, _len4 = items.length; _i4 < _len4; _i4++) {
            ids.push(items[_i4][this._idProp]);
          }
        } else {
          for (var _i5 = 0, _len5 = itemIds.length; _i5 < _len5; _i5++) {
            var _id3 = itemIds[_i5];
            var _item2 = this._data.get(_id3);
            if (_item2 != null && filter4(_item2)) {
              ids.push(_item2[this._idProp]);
            }
          }
        }
      } else {
        if (order2) {
          var _items = [];
          for (var _i6 = 0, _len6 = itemIds.length; _i6 < _len6; _i6++) {
            var _id4 = itemIds[_i6];
            _items.push(data2.get(_id4));
          }
          this._sort(_items, order2);
          for (var _i7 = 0, _len7 = _items.length; _i7 < _len7; _i7++) {
            ids.push(_items[_i7][this._idProp]);
          }
        } else {
          for (var _i8 = 0, _len8 = itemIds.length; _i8 < _len8; _i8++) {
            var _id5 = itemIds[_i8];
            var _item3 = data2.get(_id5);
            if (_item3 != null) {
              ids.push(_item3[this._idProp]);
            }
          }
        }
      }
      return ids;
    }
    /** @inheritDoc */
  }, {
    key: "getDataSet",
    value: function getDataSet() {
      return this;
    }
    /** @inheritDoc */
  }, {
    key: "forEach",
    value: function forEach5(callback, options) {
      var filter4 = options && _filterInstanceProperty$1(options);
      var data2 = this._data;
      var itemIds = _toConsumableArray$1(_keysInstanceProperty(data2).call(data2));
      if (options && options.order) {
        var items = this.get(options);
        for (var i2 = 0, len = items.length; i2 < len; i2++) {
          var item = items[i2];
          var id2 = item[this._idProp];
          callback(item, id2);
        }
      } else {
        for (var _i9 = 0, _len9 = itemIds.length; _i9 < _len9; _i9++) {
          var _id6 = itemIds[_i9];
          var _item4 = this._data.get(_id6);
          if (_item4 != null && (!filter4 || filter4(_item4))) {
            callback(_item4, _id6);
          }
        }
      }
    }
    /** @inheritDoc */
  }, {
    key: "map",
    value: function map4(callback, options) {
      var filter4 = options && _filterInstanceProperty$1(options);
      var mappedItems = [];
      var data2 = this._data;
      var itemIds = _toConsumableArray$1(_keysInstanceProperty(data2).call(data2));
      for (var i2 = 0, len = itemIds.length; i2 < len; i2++) {
        var id2 = itemIds[i2];
        var item = this._data.get(id2);
        if (item != null && (!filter4 || filter4(item))) {
          mappedItems.push(callback(item, id2));
        }
      }
      if (options && options.order) {
        this._sort(mappedItems, options.order);
      }
      return mappedItems;
    }
    /**
     * Filter the fields of an item.
     *
     * @param item - The item whose fields should be filtered.
     * @param fields - The names of the fields that will be kept.
     * @typeParam K - Field name type.
     * @returns The item without any additional fields.
     */
  }, {
    key: "_filterFields",
    value: function _filterFields(item, fields) {
      var _context3;
      if (!item) {
        return item;
      }
      return _reduceInstanceProperty$1(_context3 = _Array$isArray$2(fields) ? (
        // Use the supplied array
        fields
      ) : (
        // Use the keys of the supplied object
        _Object$keys$1(fields)
      )).call(_context3, function(filteredItem, field) {
        filteredItem[field] = item[field];
        return filteredItem;
      }, {});
    }
    /**
     * Sort the provided array with items.
     *
     * @param items - Items to be sorted in place.
     * @param order - A field name or custom sort function.
     * @typeParam T - The type of the items in the items array.
     */
  }, {
    key: "_sort",
    value: function _sort(items, order2) {
      if (typeof order2 === "string") {
        var name = order2;
        _sortInstanceProperty$1(items).call(items, function(a2, b2) {
          var av = a2[name];
          var bv = b2[name];
          return av > bv ? 1 : av < bv ? -1 : 0;
        });
      } else if (typeof order2 === "function") {
        _sortInstanceProperty$1(items).call(items, order2);
      } else {
        throw new TypeError("Order must be a function or a string");
      }
    }
    /**
     * Remove an item or multiple items by “reference” (only the id is used) or by id.
     *
     * The method ignores removal of non-existing items, and returns an array containing the ids of the items which are actually removed from the DataSet.
     *
     * After the items are removed, the DataSet will trigger an event `remove` for the removed items. When a `senderId` is provided, this id will be passed with the triggered event to all subscribers.
     *
     * ## Example
     * ```javascript
     * // create a DataSet
     * const data = new vis.DataSet([
     *   { id: 1, text: 'item 1' },
     *   { id: 2, text: 'item 2' },
     *   { id: 3, text: 'item 3' }
     * ])
     *
     * // remove items
     * const ids = data.remove([2, { id: 3 }, 4])
     *
     * console.log(ids) // [2, 3]
     * ```
     *
     * @param id - One or more items or ids of items to be removed.
     * @param senderId - Sender id.
     * @returns The ids of the removed items.
     */
  }, {
    key: "remove",
    value: function remove2(id2, senderId) {
      var removedIds = [];
      var removedItems = [];
      var ids = _Array$isArray$2(id2) ? id2 : [id2];
      for (var i2 = 0, len = ids.length; i2 < len; i2++) {
        var item = this._remove(ids[i2]);
        if (item) {
          var itemId = item[this._idProp];
          if (itemId != null) {
            removedIds.push(itemId);
            removedItems.push(item);
          }
        }
      }
      if (removedIds.length) {
        this._trigger("remove", {
          items: removedIds,
          oldData: removedItems
        }, senderId);
      }
      return removedIds;
    }
    /**
     * Remove an item by its id or reference.
     *
     * @param id - Id of an item or the item itself.
     * @returns The removed item if removed, null otherwise.
     */
  }, {
    key: "_remove",
    value: function _remove(id2) {
      var ident;
      if (isId(id2)) {
        ident = id2;
      } else if (id2 && typeof id2 === "object") {
        ident = id2[this._idProp];
      }
      if (ident != null && this._data.has(ident)) {
        var item = this._data.get(ident) || null;
        this._data.delete(ident);
        --this.length;
        return item;
      }
      return null;
    }
    /**
     * Clear the entire data set.
     *
     * After the items are removed, the {@link DataSet} will trigger an event `remove` for all removed items. When a `senderId` is provided, this id will be passed with the triggered event to all subscribers.
     *
     * @param senderId - Sender id.
     * @returns removedIds - The ids of all removed items.
     */
  }, {
    key: "clear",
    value: function clear2(senderId) {
      var _context4;
      var ids = _toConsumableArray$1(_keysInstanceProperty(_context4 = this._data).call(_context4));
      var items = [];
      for (var i2 = 0, len = ids.length; i2 < len; i2++) {
        items.push(this._data.get(ids[i2]));
      }
      this._data.clear();
      this.length = 0;
      this._trigger("remove", {
        items: ids,
        oldData: items
      }, senderId);
      return ids;
    }
    /**
     * Find the item with maximum value of a specified field.
     *
     * @param field - Name of the property that should be searched for max value.
     * @returns Item containing max value, or null if no items.
     */
  }, {
    key: "max",
    value: function max2(field) {
      var _context5;
      var max3 = null;
      var maxField = null;
      var _iterator = _createForOfIteratorHelper$1$1(_valuesInstanceProperty$1(_context5 = this._data).call(_context5)), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var item = _step.value;
          var itemField = item[field];
          if (typeof itemField === "number" && (maxField == null || itemField > maxField)) {
            max3 = item;
            maxField = itemField;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return max3 || null;
    }
    /**
     * Find the item with minimum value of a specified field.
     *
     * @param field - Name of the property that should be searched for min value.
     * @returns Item containing min value, or null if no items.
     */
  }, {
    key: "min",
    value: function min2(field) {
      var _context6;
      var min3 = null;
      var minField = null;
      var _iterator2 = _createForOfIteratorHelper$1$1(_valuesInstanceProperty$1(_context6 = this._data).call(_context6)), _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
          var item = _step2.value;
          var itemField = item[field];
          if (typeof itemField === "number" && (minField == null || itemField < minField)) {
            min3 = item;
            minField = itemField;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      return min3 || null;
    }
    /**
     * Find all distinct values of a specified field
     *
     * @param prop - The property name whose distinct values should be returned.
     * @returns Unordered array containing all distinct values. Items without specified property are ignored.
     */
  }, {
    key: "distinct",
    value: function distinct(prop) {
      var data2 = this._data;
      var itemIds = _toConsumableArray$1(_keysInstanceProperty(data2).call(data2));
      var values2 = [];
      var count = 0;
      for (var i2 = 0, len = itemIds.length; i2 < len; i2++) {
        var id2 = itemIds[i2];
        var item = data2.get(id2);
        var value2 = item[prop];
        var exists = false;
        for (var j2 = 0; j2 < count; j2++) {
          if (values2[j2] == value2) {
            exists = true;
            break;
          }
        }
        if (!exists && value2 !== void 0) {
          values2[count] = value2;
          count++;
        }
      }
      return values2;
    }
    /**
     * Add a single item. Will fail when an item with the same id already exists.
     *
     * @param item - A new item to be added.
     * @returns Added item's id. An id is generated when it is not present in the item.
     */
  }, {
    key: "_addItem",
    value: function _addItem(item) {
      var fullItem = ensureFullItem(item, this._idProp);
      var id2 = fullItem[this._idProp];
      if (this._data.has(id2)) {
        throw new Error("Cannot add item: item with id " + id2 + " already exists");
      }
      this._data.set(id2, fullItem);
      ++this.length;
      return id2;
    }
    /**
     * Update a single item: merge with existing item.
     * Will fail when the item has no id, or when there does not exist an item with the same id.
     *
     * @param update - The new item
     * @returns The id of the updated item.
     */
  }, {
    key: "_updateItem",
    value: function _updateItem(update) {
      var id2 = update[this._idProp];
      if (id2 == null) {
        throw new Error("Cannot update item: item has no id (item: " + _JSON$stringify$1(update) + ")");
      }
      var item = this._data.get(id2);
      if (!item) {
        throw new Error("Cannot update item: no item with id " + id2 + " found");
      }
      this._data.set(id2, _objectSpread$4(_objectSpread$4({}, item), update));
      return id2;
    }
    /** @inheritDoc */
  }, {
    key: "stream",
    value: function stream(ids) {
      if (ids) {
        var data2 = this._data;
        return new DataStream({
          [_Symbol$iterator$2]() {
            return /* @__PURE__ */ _regeneratorRuntime.mark(function _callee() {
              var _iterator3, _step3, id2, item;
              return _regeneratorRuntime.wrap(function _callee$(_context7) {
                while (1) switch (_context7.prev = _context7.next) {
                  case 0:
                    _iterator3 = _createForOfIteratorHelper$1$1(ids);
                    _context7.prev = 1;
                    _iterator3.s();
                  case 3:
                    if ((_step3 = _iterator3.n()).done) {
                      _context7.next = 11;
                      break;
                    }
                    id2 = _step3.value;
                    item = data2.get(id2);
                    if (!(item != null)) {
                      _context7.next = 9;
                      break;
                    }
                    _context7.next = 9;
                    return [id2, item];
                  case 9:
                    _context7.next = 3;
                    break;
                  case 11:
                    _context7.next = 16;
                    break;
                  case 13:
                    _context7.prev = 13;
                    _context7.t0 = _context7["catch"](1);
                    _iterator3.e(_context7.t0);
                  case 16:
                    _context7.prev = 16;
                    _iterator3.f();
                    return _context7.finish(16);
                  case 19:
                  case "end":
                    return _context7.stop();
                }
              }, _callee, null, [[1, 13, 16, 19]]);
            })();
          }
        });
      } else {
        var _context8;
        return new DataStream({
          [_Symbol$iterator$2]: _bindInstanceProperty$1$1(_context8 = _entriesInstanceProperty(this._data)).call(_context8, this._data)
        });
      }
    }
  }]);
  return DataSet2;
}(DataSetPart);
function isDataSetLike(idProp, v2) {
  return typeof v2 === "object" && v2 !== null && idProp === v2.idProp && typeof v2.add === "function" && typeof v2.clear === "function" && typeof v2.distinct === "function" && typeof _forEachInstanceProperty$1(v2) === "function" && typeof v2.get === "function" && typeof v2.getDataSet === "function" && typeof v2.getIds === "function" && typeof v2.length === "number" && typeof _mapInstanceProperty$1(v2) === "function" && typeof v2.max === "function" && typeof v2.min === "function" && typeof v2.off === "function" && typeof v2.on === "function" && typeof v2.remove === "function" && typeof v2.setOptions === "function" && typeof v2.stream === "function" && typeof v2.update === "function" && typeof v2.updateOnly === "function";
}
function isDataViewLike(idProp, v2) {
  return typeof v2 === "object" && v2 !== null && idProp === v2.idProp && typeof _forEachInstanceProperty$1(v2) === "function" && typeof v2.get === "function" && typeof v2.getDataSet === "function" && typeof v2.getIds === "function" && typeof v2.length === "number" && typeof _mapInstanceProperty$1(v2) === "function" && typeof v2.off === "function" && typeof v2.on === "function" && typeof v2.stream === "function" && isDataSetLike(idProp, v2.getDataSet());
}
/**
 * vis-network
 * https://visjs.github.io/vis-network/
 *
 * A dynamic, browser-based visualization library.
 *
 * @version 9.1.9
 * @date    2023-11-03T01:42:27.418Z
 *
 * @copyright (c) 2011-2017 Almende B.V, http://almende.com
 * @copyright (c) 2017-2019 visjs contributors, https://github.com/visjs
 *
 * @license
 * vis.js is dual licensed under both
 *
 *   1. The Apache 2.0 License
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   and
 *
 *   2. The MIT License
 *      http://opensource.org/licenses/MIT
 *
 * vis.js may be distributed under either license.
 */
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x2) {
  return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
}
var check$1 = function(it2) {
  return it2 && it2.Math === Math && it2;
};
var global$n = (
  // eslint-disable-next-line es/no-global-this -- safe
  check$1(typeof globalThis == "object" && globalThis) || check$1(typeof window == "object" && window) || // eslint-disable-next-line no-restricted-globals -- safe
  check$1(typeof self == "object" && self) || check$1(typeof commonjsGlobal == "object" && commonjsGlobal) || // eslint-disable-next-line no-new-func -- fallback
  /* @__PURE__ */ function() {
    return this;
  }() || commonjsGlobal || Function("return this")()
);
var fails$w = function(exec2) {
  try {
    return !!exec2();
  } catch (error) {
    return true;
  }
};
var fails$v = fails$w;
var functionBindNative = !fails$v(function() {
  var test2 = (function() {
  }).bind();
  return typeof test2 != "function" || test2.hasOwnProperty("prototype");
});
var NATIVE_BIND$4 = functionBindNative;
var FunctionPrototype$4 = Function.prototype;
var apply$5 = FunctionPrototype$4.apply;
var call$f = FunctionPrototype$4.call;
var functionApply = typeof Reflect == "object" && Reflect.apply || (NATIVE_BIND$4 ? call$f.bind(apply$5) : function() {
  return call$f.apply(apply$5, arguments);
});
var NATIVE_BIND$3 = functionBindNative;
var FunctionPrototype$3 = Function.prototype;
var call$e = FunctionPrototype$3.call;
var uncurryThisWithBind = NATIVE_BIND$3 && FunctionPrototype$3.bind.bind(call$e, call$e);
var functionUncurryThis = NATIVE_BIND$3 ? uncurryThisWithBind : function(fn2) {
  return function() {
    return call$e.apply(fn2, arguments);
  };
};
var uncurryThis$x = functionUncurryThis;
var toString$c = uncurryThis$x({}.toString);
var stringSlice$1 = uncurryThis$x("".slice);
var classofRaw$2 = function(it2) {
  return stringSlice$1(toString$c(it2), 8, -1);
};
var classofRaw$1 = classofRaw$2;
var uncurryThis$w = functionUncurryThis;
var functionUncurryThisClause = function(fn2) {
  if (classofRaw$1(fn2) === "Function") return uncurryThis$w(fn2);
};
var documentAll$2 = typeof document == "object" && document.all;
var IS_HTMLDDA = typeof documentAll$2 == "undefined" && documentAll$2 !== void 0;
var documentAll_1 = {
  all: documentAll$2,
  IS_HTMLDDA
};
var $documentAll$1 = documentAll_1;
var documentAll$1 = $documentAll$1.all;
var isCallable$i = $documentAll$1.IS_HTMLDDA ? function(argument) {
  return typeof argument == "function" || argument === documentAll$1;
} : function(argument) {
  return typeof argument == "function";
};
var objectGetOwnPropertyDescriptor = {};
var fails$u = fails$w;
var descriptors = !fails$u(function() {
  return Object.defineProperty({}, 1, { get: function() {
    return 7;
  } })[1] !== 7;
});
var NATIVE_BIND$2 = functionBindNative;
var call$d = Function.prototype.call;
var functionCall = NATIVE_BIND$2 ? call$d.bind(call$d) : function() {
  return call$d.apply(call$d, arguments);
};
var objectPropertyIsEnumerable = {};
var $propertyIsEnumerable$1 = {}.propertyIsEnumerable;
var getOwnPropertyDescriptor$9 = Object.getOwnPropertyDescriptor;
var NASHORN_BUG = getOwnPropertyDescriptor$9 && !$propertyIsEnumerable$1.call({ 1: 2 }, 1);
objectPropertyIsEnumerable.f = NASHORN_BUG ? function propertyIsEnumerable3(V) {
  var descriptor = getOwnPropertyDescriptor$9(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable$1;
var createPropertyDescriptor$5 = function(bitmap, value2) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value2
  };
};
var uncurryThis$v = functionUncurryThis;
var fails$t = fails$w;
var classof$e = classofRaw$2;
var $Object$5 = Object;
var split = uncurryThis$v("".split);
var indexedObject = fails$t(function() {
  return !$Object$5("z").propertyIsEnumerable(0);
}) ? function(it2) {
  return classof$e(it2) === "String" ? split(it2, "") : $Object$5(it2);
} : $Object$5;
var isNullOrUndefined$6 = function(it2) {
  return it2 === null || it2 === void 0;
};
var isNullOrUndefined$5 = isNullOrUndefined$6;
var $TypeError$g = TypeError;
var requireObjectCoercible$5 = function(it2) {
  if (isNullOrUndefined$5(it2)) throw new $TypeError$g("Can't call method on " + it2);
  return it2;
};
var IndexedObject$3 = indexedObject;
var requireObjectCoercible$4 = requireObjectCoercible$5;
var toIndexedObject$a = function(it2) {
  return IndexedObject$3(requireObjectCoercible$4(it2));
};
var isCallable$h = isCallable$i;
var $documentAll = documentAll_1;
var documentAll = $documentAll.all;
var isObject$j = $documentAll.IS_HTMLDDA ? function(it2) {
  return typeof it2 == "object" ? it2 !== null : isCallable$h(it2) || it2 === documentAll;
} : function(it2) {
  return typeof it2 == "object" ? it2 !== null : isCallable$h(it2);
};
var path$w = {};
var path$v = path$w;
var global$m = global$n;
var isCallable$g = isCallable$i;
var aFunction = function(variable) {
  return isCallable$g(variable) ? variable : void 0;
};
var getBuiltIn$c = function(namespace, method2) {
  return arguments.length < 2 ? aFunction(path$v[namespace]) || aFunction(global$m[namespace]) : path$v[namespace] && path$v[namespace][method2] || global$m[namespace] && global$m[namespace][method2];
};
var uncurryThis$u = functionUncurryThis;
var objectIsPrototypeOf = uncurryThis$u({}.isPrototypeOf);
var engineUserAgent = typeof navigator != "undefined" && String(navigator.userAgent) || "";
var global$l = global$n;
var userAgent$2 = engineUserAgent;
var process = global$l.process;
var Deno$1 = global$l.Deno;
var versions = process && process.versions || Deno$1 && Deno$1.version;
var v8 = versions && versions.v8;
var match, version;
if (v8) {
  match = v8.split(".");
  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
}
if (!version && userAgent$2) {
  match = userAgent$2.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent$2.match(/Chrome\/(\d+)/);
    if (match) version = +match[1];
  }
}
var engineV8Version = version;
var V8_VERSION$2 = engineV8Version;
var fails$s = fails$w;
var global$k = global$n;
var $String$5 = global$k.String;
var symbolConstructorDetection = !!Object.getOwnPropertySymbols && !fails$s(function() {
  var symbol2 = Symbol("symbol detection");
  return !$String$5(symbol2) || !(Object(symbol2) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
  !Symbol.sham && V8_VERSION$2 && V8_VERSION$2 < 41;
});
var NATIVE_SYMBOL$5 = symbolConstructorDetection;
var useSymbolAsUid = NATIVE_SYMBOL$5 && !Symbol.sham && typeof Symbol.iterator == "symbol";
var getBuiltIn$b = getBuiltIn$c;
var isCallable$f = isCallable$i;
var isPrototypeOf$k = objectIsPrototypeOf;
var USE_SYMBOL_AS_UID$1 = useSymbolAsUid;
var $Object$4 = Object;
var isSymbol$5 = USE_SYMBOL_AS_UID$1 ? function(it2) {
  return typeof it2 == "symbol";
} : function(it2) {
  var $Symbol2 = getBuiltIn$b("Symbol");
  return isCallable$f($Symbol2) && isPrototypeOf$k($Symbol2.prototype, $Object$4(it2));
};
var $String$4 = String;
var tryToString$6 = function(argument) {
  try {
    return $String$4(argument);
  } catch (error) {
    return "Object";
  }
};
var isCallable$e = isCallable$i;
var tryToString$5 = tryToString$6;
var $TypeError$f = TypeError;
var aCallable$7 = function(argument) {
  if (isCallable$e(argument)) return argument;
  throw new $TypeError$f(tryToString$5(argument) + " is not a function");
};
var aCallable$6 = aCallable$7;
var isNullOrUndefined$4 = isNullOrUndefined$6;
var getMethod$3 = function(V, P) {
  var func = V[P];
  return isNullOrUndefined$4(func) ? void 0 : aCallable$6(func);
};
var call$c = functionCall;
var isCallable$d = isCallable$i;
var isObject$i = isObject$j;
var $TypeError$e = TypeError;
var ordinaryToPrimitive$1 = function(input, pref) {
  var fn2, val;
  if (pref === "string" && isCallable$d(fn2 = input.toString) && !isObject$i(val = call$c(fn2, input))) return val;
  if (isCallable$d(fn2 = input.valueOf) && !isObject$i(val = call$c(fn2, input))) return val;
  if (pref !== "string" && isCallable$d(fn2 = input.toString) && !isObject$i(val = call$c(fn2, input))) return val;
  throw new $TypeError$e("Can't convert object to primitive value");
};
var shared$7 = { exports: {} };
var global$j = global$n;
var defineProperty$f = Object.defineProperty;
var defineGlobalProperty$1 = function(key2, value2) {
  try {
    defineProperty$f(global$j, key2, { value: value2, configurable: true, writable: true });
  } catch (error) {
    global$j[key2] = value2;
  }
  return value2;
};
var global$i = global$n;
var defineGlobalProperty = defineGlobalProperty$1;
var SHARED = "__core-js_shared__";
var store$3 = global$i[SHARED] || defineGlobalProperty(SHARED, {});
var sharedStore = store$3;
var store$2 = sharedStore;
(shared$7.exports = function(key2, value2) {
  return store$2[key2] || (store$2[key2] = value2 !== void 0 ? value2 : {});
})("versions", []).push({
  version: "3.33.0",
  mode: "pure",
  copyright: "© 2014-2023 Denis Pushkarev (zloirock.ru)",
  license: "https://github.com/zloirock/core-js/blob/v3.33.0/LICENSE",
  source: "https://github.com/zloirock/core-js"
});
var sharedExports = shared$7.exports;
var requireObjectCoercible$3 = requireObjectCoercible$5;
var $Object$3 = Object;
var toObject$e = function(argument) {
  return $Object$3(requireObjectCoercible$3(argument));
};
var uncurryThis$t = functionUncurryThis;
var toObject$d = toObject$e;
var hasOwnProperty = uncurryThis$t({}.hasOwnProperty);
var hasOwnProperty_1 = Object.hasOwn || function hasOwn3(it2, key2) {
  return hasOwnProperty(toObject$d(it2), key2);
};
var uncurryThis$s = functionUncurryThis;
var id$2 = 0;
var postfix = Math.random();
var toString$b = uncurryThis$s(1 .toString);
var uid$4 = function(key2) {
  return "Symbol(" + (key2 === void 0 ? "" : key2) + ")_" + toString$b(++id$2 + postfix, 36);
};
var global$h = global$n;
var shared$6 = sharedExports;
var hasOwn$h = hasOwnProperty_1;
var uid$3 = uid$4;
var NATIVE_SYMBOL$4 = symbolConstructorDetection;
var USE_SYMBOL_AS_UID = useSymbolAsUid;
var Symbol$5 = global$h.Symbol;
var WellKnownSymbolsStore$2 = shared$6("wks");
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol$5["for"] || Symbol$5 : Symbol$5 && Symbol$5.withoutSetter || uid$3;
var wellKnownSymbol$m = function(name) {
  if (!hasOwn$h(WellKnownSymbolsStore$2, name)) {
    WellKnownSymbolsStore$2[name] = NATIVE_SYMBOL$4 && hasOwn$h(Symbol$5, name) ? Symbol$5[name] : createWellKnownSymbol("Symbol." + name);
  }
  return WellKnownSymbolsStore$2[name];
};
var call$b = functionCall;
var isObject$h = isObject$j;
var isSymbol$4 = isSymbol$5;
var getMethod$2 = getMethod$3;
var ordinaryToPrimitive = ordinaryToPrimitive$1;
var wellKnownSymbol$l = wellKnownSymbol$m;
var $TypeError$d = TypeError;
var TO_PRIMITIVE = wellKnownSymbol$l("toPrimitive");
var toPrimitive$6 = function(input, pref) {
  if (!isObject$h(input) || isSymbol$4(input)) return input;
  var exoticToPrim = getMethod$2(input, TO_PRIMITIVE);
  var result;
  if (exoticToPrim) {
    if (pref === void 0) pref = "default";
    result = call$b(exoticToPrim, input, pref);
    if (!isObject$h(result) || isSymbol$4(result)) return result;
    throw new $TypeError$d("Can't convert object to primitive value");
  }
  if (pref === void 0) pref = "number";
  return ordinaryToPrimitive(input, pref);
};
var toPrimitive$5 = toPrimitive$6;
var isSymbol$3 = isSymbol$5;
var toPropertyKey$4 = function(argument) {
  var key2 = toPrimitive$5(argument, "string");
  return isSymbol$3(key2) ? key2 : key2 + "";
};
var global$g = global$n;
var isObject$g = isObject$j;
var document$1 = global$g.document;
var EXISTS$1 = isObject$g(document$1) && isObject$g(document$1.createElement);
var documentCreateElement$1 = function(it2) {
  return EXISTS$1 ? document$1.createElement(it2) : {};
};
var DESCRIPTORS$h = descriptors;
var fails$r = fails$w;
var createElement = documentCreateElement$1;
var ie8DomDefine = !DESCRIPTORS$h && !fails$r(function() {
  return Object.defineProperty(createElement("div"), "a", {
    get: function() {
      return 7;
    }
  }).a !== 7;
});
var DESCRIPTORS$g = descriptors;
var call$a = functionCall;
var propertyIsEnumerableModule$2 = objectPropertyIsEnumerable;
var createPropertyDescriptor$4 = createPropertyDescriptor$5;
var toIndexedObject$9 = toIndexedObject$a;
var toPropertyKey$3 = toPropertyKey$4;
var hasOwn$g = hasOwnProperty_1;
var IE8_DOM_DEFINE$1 = ie8DomDefine;
var $getOwnPropertyDescriptor$2 = Object.getOwnPropertyDescriptor;
objectGetOwnPropertyDescriptor.f = DESCRIPTORS$g ? $getOwnPropertyDescriptor$2 : function getOwnPropertyDescriptor6(O, P) {
  O = toIndexedObject$9(O);
  P = toPropertyKey$3(P);
  if (IE8_DOM_DEFINE$1) try {
    return $getOwnPropertyDescriptor$2(O, P);
  } catch (error) {
  }
  if (hasOwn$g(O, P)) return createPropertyDescriptor$4(!call$a(propertyIsEnumerableModule$2.f, O, P), O[P]);
};
var fails$q = fails$w;
var isCallable$c = isCallable$i;
var replacement = /#|\.prototype\./;
var isForced$1 = function(feature, detection) {
  var value2 = data[normalize(feature)];
  return value2 === POLYFILL ? true : value2 === NATIVE ? false : isCallable$c(detection) ? fails$q(detection) : !!detection;
};
var normalize = isForced$1.normalize = function(string2) {
  return String(string2).replace(replacement, ".").toLowerCase();
};
var data = isForced$1.data = {};
var NATIVE = isForced$1.NATIVE = "N";
var POLYFILL = isForced$1.POLYFILL = "P";
var isForced_1 = isForced$1;
var uncurryThis$r = functionUncurryThisClause;
var aCallable$5 = aCallable$7;
var NATIVE_BIND$1 = functionBindNative;
var bind$e = uncurryThis$r(uncurryThis$r.bind);
var functionBindContext = function(fn2, that) {
  aCallable$5(fn2);
  return that === void 0 ? fn2 : NATIVE_BIND$1 ? bind$e(fn2, that) : function() {
    return fn2.apply(that, arguments);
  };
};
var objectDefineProperty = {};
var DESCRIPTORS$f = descriptors;
var fails$p = fails$w;
var v8PrototypeDefineBug = DESCRIPTORS$f && fails$p(function() {
  return Object.defineProperty(function() {
  }, "prototype", {
    value: 42,
    writable: false
  }).prototype !== 42;
});
var isObject$f = isObject$j;
var $String$3 = String;
var $TypeError$c = TypeError;
var anObject$d = function(argument) {
  if (isObject$f(argument)) return argument;
  throw new $TypeError$c($String$3(argument) + " is not an object");
};
var DESCRIPTORS$e = descriptors;
var IE8_DOM_DEFINE = ie8DomDefine;
var V8_PROTOTYPE_DEFINE_BUG$1 = v8PrototypeDefineBug;
var anObject$c = anObject$d;
var toPropertyKey$2 = toPropertyKey$4;
var $TypeError$b = TypeError;
var $defineProperty$1 = Object.defineProperty;
var $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;
var ENUMERABLE = "enumerable";
var CONFIGURABLE$1 = "configurable";
var WRITABLE = "writable";
objectDefineProperty.f = DESCRIPTORS$e ? V8_PROTOTYPE_DEFINE_BUG$1 ? function defineProperty6(O, P, Attributes) {
  anObject$c(O);
  P = toPropertyKey$2(P);
  anObject$c(Attributes);
  if (typeof O === "function" && P === "prototype" && "value" in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
    var current = $getOwnPropertyDescriptor$1(O, P);
    if (current && current[WRITABLE]) {
      O[P] = Attributes.value;
      Attributes = {
        configurable: CONFIGURABLE$1 in Attributes ? Attributes[CONFIGURABLE$1] : current[CONFIGURABLE$1],
        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
        writable: false
      };
    }
  }
  return $defineProperty$1(O, P, Attributes);
} : $defineProperty$1 : function defineProperty7(O, P, Attributes) {
  anObject$c(O);
  P = toPropertyKey$2(P);
  anObject$c(Attributes);
  if (IE8_DOM_DEFINE) try {
    return $defineProperty$1(O, P, Attributes);
  } catch (error) {
  }
  if ("get" in Attributes || "set" in Attributes) throw new $TypeError$b("Accessors not supported");
  if ("value" in Attributes) O[P] = Attributes.value;
  return O;
};
var DESCRIPTORS$d = descriptors;
var definePropertyModule$3 = objectDefineProperty;
var createPropertyDescriptor$3 = createPropertyDescriptor$5;
var createNonEnumerableProperty$6 = DESCRIPTORS$d ? function(object2, key2, value2) {
  return definePropertyModule$3.f(object2, key2, createPropertyDescriptor$3(1, value2));
} : function(object2, key2, value2) {
  object2[key2] = value2;
  return object2;
};
var global$f = global$n;
var apply$4 = functionApply;
var uncurryThis$q = functionUncurryThisClause;
var isCallable$b = isCallable$i;
var getOwnPropertyDescriptor$8 = objectGetOwnPropertyDescriptor.f;
var isForced = isForced_1;
var path$u = path$w;
var bind$d = functionBindContext;
var createNonEnumerableProperty$5 = createNonEnumerableProperty$6;
var hasOwn$f = hasOwnProperty_1;
var wrapConstructor = function(NativeConstructor) {
  var Wrapper = function(a2, b2, c2) {
    if (this instanceof Wrapper) {
      switch (arguments.length) {
        case 0:
          return new NativeConstructor();
        case 1:
          return new NativeConstructor(a2);
        case 2:
          return new NativeConstructor(a2, b2);
      }
      return new NativeConstructor(a2, b2, c2);
    }
    return apply$4(NativeConstructor, this, arguments);
  };
  Wrapper.prototype = NativeConstructor.prototype;
  return Wrapper;
};
var _export = function(options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var PROTO = options.proto;
  var nativeSource = GLOBAL ? global$f : STATIC ? global$f[TARGET] : (global$f[TARGET] || {}).prototype;
  var target = GLOBAL ? path$u : path$u[TARGET] || createNonEnumerableProperty$5(path$u, TARGET, {})[TARGET];
  var targetPrototype = target.prototype;
  var FORCED2, USE_NATIVE, VIRTUAL_PROTOTYPE;
  var key2, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;
  for (key2 in source) {
    FORCED2 = isForced(GLOBAL ? key2 : TARGET + (STATIC ? "." : "#") + key2, options.forced);
    USE_NATIVE = !FORCED2 && nativeSource && hasOwn$f(nativeSource, key2);
    targetProperty = target[key2];
    if (USE_NATIVE) if (options.dontCallGetSet) {
      descriptor = getOwnPropertyDescriptor$8(nativeSource, key2);
      nativeProperty = descriptor && descriptor.value;
    } else nativeProperty = nativeSource[key2];
    sourceProperty = USE_NATIVE && nativeProperty ? nativeProperty : source[key2];
    if (USE_NATIVE && typeof targetProperty == typeof sourceProperty) continue;
    if (options.bind && USE_NATIVE) resultProperty = bind$d(sourceProperty, global$f);
    else if (options.wrap && USE_NATIVE) resultProperty = wrapConstructor(sourceProperty);
    else if (PROTO && isCallable$b(sourceProperty)) resultProperty = uncurryThis$q(sourceProperty);
    else resultProperty = sourceProperty;
    if (options.sham || sourceProperty && sourceProperty.sham || targetProperty && targetProperty.sham) {
      createNonEnumerableProperty$5(resultProperty, "sham", true);
    }
    createNonEnumerableProperty$5(target, key2, resultProperty);
    if (PROTO) {
      VIRTUAL_PROTOTYPE = TARGET + "Prototype";
      if (!hasOwn$f(path$u, VIRTUAL_PROTOTYPE)) {
        createNonEnumerableProperty$5(path$u, VIRTUAL_PROTOTYPE, {});
      }
      createNonEnumerableProperty$5(path$u[VIRTUAL_PROTOTYPE], key2, sourceProperty);
      if (options.real && targetPrototype && (FORCED2 || !targetPrototype[key2])) {
        createNonEnumerableProperty$5(targetPrototype, key2, sourceProperty);
      }
    }
  }
};
var ceil = Math.ceil;
var floor$1 = Math.floor;
var mathTrunc = Math.trunc || function trunc3(x2) {
  var n2 = +x2;
  return (n2 > 0 ? floor$1 : ceil)(n2);
};
var trunc = mathTrunc;
var toIntegerOrInfinity$4 = function(argument) {
  var number2 = +argument;
  return number2 !== number2 || number2 === 0 ? 0 : trunc(number2);
};
var toIntegerOrInfinity$3 = toIntegerOrInfinity$4;
var max$3 = Math.max;
var min$2 = Math.min;
var toAbsoluteIndex$5 = function(index2, length2) {
  var integer = toIntegerOrInfinity$3(index2);
  return integer < 0 ? max$3(integer + length2, 0) : min$2(integer, length2);
};
var toIntegerOrInfinity$2 = toIntegerOrInfinity$4;
var min$1 = Math.min;
var toLength$1 = function(argument) {
  return argument > 0 ? min$1(toIntegerOrInfinity$2(argument), 9007199254740991) : 0;
};
var toLength = toLength$1;
var lengthOfArrayLike$c = function(obj) {
  return toLength(obj.length);
};
var toIndexedObject$8 = toIndexedObject$a;
var toAbsoluteIndex$4 = toAbsoluteIndex$5;
var lengthOfArrayLike$b = lengthOfArrayLike$c;
var createMethod$4 = function(IS_INCLUDES) {
  return function($this, el, fromIndex) {
    var O = toIndexedObject$8($this);
    var length2 = lengthOfArrayLike$b(O);
    var index2 = toAbsoluteIndex$4(fromIndex, length2);
    var value2;
    if (IS_INCLUDES && el !== el) while (length2 > index2) {
      value2 = O[index2++];
      if (value2 !== value2) return true;
    }
    else for (; length2 > index2; index2++) {
      if ((IS_INCLUDES || index2 in O) && O[index2] === el) return IS_INCLUDES || index2 || 0;
    }
    return !IS_INCLUDES && -1;
  };
};
var arrayIncludes = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod$4(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod$4(false)
};
var hiddenKeys$6 = {};
var uncurryThis$p = functionUncurryThis;
var hasOwn$e = hasOwnProperty_1;
var toIndexedObject$7 = toIndexedObject$a;
var indexOf$4 = arrayIncludes.indexOf;
var hiddenKeys$5 = hiddenKeys$6;
var push$b = uncurryThis$p([].push);
var objectKeysInternal = function(object2, names) {
  var O = toIndexedObject$7(object2);
  var i2 = 0;
  var result = [];
  var key2;
  for (key2 in O) !hasOwn$e(hiddenKeys$5, key2) && hasOwn$e(O, key2) && push$b(result, key2);
  while (names.length > i2) if (hasOwn$e(O, key2 = names[i2++])) {
    ~indexOf$4(result, key2) || push$b(result, key2);
  }
  return result;
};
var enumBugKeys$3 = [
  "constructor",
  "hasOwnProperty",
  "isPrototypeOf",
  "propertyIsEnumerable",
  "toLocaleString",
  "toString",
  "valueOf"
];
var internalObjectKeys$1 = objectKeysInternal;
var enumBugKeys$2 = enumBugKeys$3;
var objectKeys$3 = Object.keys || function keys4(O) {
  return internalObjectKeys$1(O, enumBugKeys$2);
};
var objectGetOwnPropertySymbols = {};
objectGetOwnPropertySymbols.f = Object.getOwnPropertySymbols;
var DESCRIPTORS$c = descriptors;
var uncurryThis$o = functionUncurryThis;
var call$9 = functionCall;
var fails$o = fails$w;
var objectKeys$2 = objectKeys$3;
var getOwnPropertySymbolsModule$3 = objectGetOwnPropertySymbols;
var propertyIsEnumerableModule$1 = objectPropertyIsEnumerable;
var toObject$c = toObject$e;
var IndexedObject$2 = indexedObject;
var $assign = Object.assign;
var defineProperty$e = Object.defineProperty;
var concat$6 = uncurryThis$o([].concat);
var objectAssign = !$assign || fails$o(function() {
  if (DESCRIPTORS$c && $assign({ b: 1 }, $assign(defineProperty$e({}, "a", {
    enumerable: true,
    get: function() {
      defineProperty$e(this, "b", {
        value: 3,
        enumerable: false
      });
    }
  }), { b: 2 })).b !== 1) return true;
  var A = {};
  var B = {};
  var symbol2 = Symbol("assign detection");
  var alphabet = "abcdefghijklmnopqrst";
  A[symbol2] = 7;
  alphabet.split("").forEach(function(chr) {
    B[chr] = chr;
  });
  return $assign({}, A)[symbol2] !== 7 || objectKeys$2($assign({}, B)).join("") !== alphabet;
}) ? function assign3(target, source) {
  var T = toObject$c(target);
  var argumentsLength = arguments.length;
  var index2 = 1;
  var getOwnPropertySymbols4 = getOwnPropertySymbolsModule$3.f;
  var propertyIsEnumerable5 = propertyIsEnumerableModule$1.f;
  while (argumentsLength > index2) {
    var S = IndexedObject$2(arguments[index2++]);
    var keys6 = getOwnPropertySymbols4 ? concat$6(objectKeys$2(S), getOwnPropertySymbols4(S)) : objectKeys$2(S);
    var length2 = keys6.length;
    var j2 = 0;
    var key2;
    while (length2 > j2) {
      key2 = keys6[j2++];
      if (!DESCRIPTORS$c || call$9(propertyIsEnumerable5, S, key2)) T[key2] = S[key2];
    }
  }
  return T;
} : $assign;
var $$O = _export;
var assign$5 = objectAssign;
$$O({ target: "Object", stat: true, arity: 2, forced: Object.assign !== assign$5 }, {
  assign: assign$5
});
var path$t = path$w;
var assign$4 = path$t.Object.assign;
var parent$1b = assign$4;
var assign$3 = parent$1b;
var assign$2 = assign$3;
var _Object$assign = /* @__PURE__ */ getDefaultExportFromCjs(assign$2);
var uncurryThis$n = functionUncurryThis;
var arraySlice$5 = uncurryThis$n([].slice);
var uncurryThis$m = functionUncurryThis;
var aCallable$4 = aCallable$7;
var isObject$e = isObject$j;
var hasOwn$d = hasOwnProperty_1;
var arraySlice$4 = arraySlice$5;
var NATIVE_BIND = functionBindNative;
var $Function = Function;
var concat$5 = uncurryThis$m([].concat);
var join = uncurryThis$m([].join);
var factories = {};
var construct$4 = function(C, argsLength, args) {
  if (!hasOwn$d(factories, argsLength)) {
    var list2 = [];
    var i2 = 0;
    for (; i2 < argsLength; i2++) list2[i2] = "a[" + i2 + "]";
    factories[argsLength] = $Function("C,a", "return new C(" + join(list2, ",") + ")");
  }
  return factories[argsLength](C, args);
};
var functionBind = NATIVE_BIND ? $Function.bind : function bind3(that) {
  var F = aCallable$4(this);
  var Prototype = F.prototype;
  var partArgs = arraySlice$4(arguments, 1);
  var boundFunction = function bound() {
    var args = concat$5(partArgs, arraySlice$4(arguments));
    return this instanceof boundFunction ? construct$4(F, args.length, args) : F.apply(that, args);
  };
  if (isObject$e(Prototype)) boundFunction.prototype = Prototype;
  return boundFunction;
};
var $$N = _export;
var bind$c = functionBind;
$$N({ target: "Function", proto: true, forced: Function.bind !== bind$c }, {
  bind: bind$c
});
var path$s = path$w;
var entryVirtual$i = function(CONSTRUCTOR) {
  return path$s[CONSTRUCTOR + "Prototype"];
};
var entryVirtual$h = entryVirtual$i;
var bind$b = entryVirtual$h("Function").bind;
var isPrototypeOf$j = objectIsPrototypeOf;
var method$f = bind$b;
var FunctionPrototype$2 = Function.prototype;
var bind$a = function(it2) {
  var own = it2.bind;
  return it2 === FunctionPrototype$2 || isPrototypeOf$j(FunctionPrototype$2, it2) && own === FunctionPrototype$2.bind ? method$f : own;
};
var parent$1a = bind$a;
var bind$9 = parent$1a;
var bind$8 = bind$9;
var _bindInstanceProperty$1 = /* @__PURE__ */ getDefaultExportFromCjs(bind$8);
function drawCircle(ctx, x2, y2, r2) {
  ctx.beginPath();
  ctx.arc(x2, y2, r2, 0, 2 * Math.PI, false);
  ctx.closePath();
}
function drawSquare(ctx, x2, y2, r2) {
  ctx.beginPath();
  ctx.rect(x2 - r2, y2 - r2, r2 * 2, r2 * 2);
  ctx.closePath();
}
function drawTriangle(ctx, x2, y2, r2) {
  ctx.beginPath();
  r2 *= 1.15;
  y2 += 0.275 * r2;
  var s2 = r2 * 2;
  var s22 = s2 / 2;
  var ir = Math.sqrt(3) / 6 * s2;
  var h2 = Math.sqrt(s2 * s2 - s22 * s22);
  ctx.moveTo(x2, y2 - (h2 - ir));
  ctx.lineTo(x2 + s22, y2 + ir);
  ctx.lineTo(x2 - s22, y2 + ir);
  ctx.lineTo(x2, y2 - (h2 - ir));
  ctx.closePath();
}
function drawTriangleDown(ctx, x2, y2, r2) {
  ctx.beginPath();
  r2 *= 1.15;
  y2 -= 0.275 * r2;
  var s2 = r2 * 2;
  var s22 = s2 / 2;
  var ir = Math.sqrt(3) / 6 * s2;
  var h2 = Math.sqrt(s2 * s2 - s22 * s22);
  ctx.moveTo(x2, y2 + (h2 - ir));
  ctx.lineTo(x2 + s22, y2 - ir);
  ctx.lineTo(x2 - s22, y2 - ir);
  ctx.lineTo(x2, y2 + (h2 - ir));
  ctx.closePath();
}
function drawStar(ctx, x2, y2, r2) {
  ctx.beginPath();
  r2 *= 0.82;
  y2 += 0.1 * r2;
  for (var n2 = 0; n2 < 10; n2++) {
    var radius = n2 % 2 === 0 ? r2 * 1.3 : r2 * 0.5;
    ctx.lineTo(x2 + radius * Math.sin(n2 * 2 * Math.PI / 10), y2 - radius * Math.cos(n2 * 2 * Math.PI / 10));
  }
  ctx.closePath();
}
function drawDiamond(ctx, x2, y2, r2) {
  ctx.beginPath();
  ctx.lineTo(x2, y2 + r2);
  ctx.lineTo(x2 + r2, y2);
  ctx.lineTo(x2, y2 - r2);
  ctx.lineTo(x2 - r2, y2);
  ctx.closePath();
}
function drawRoundRect(ctx, x2, y2, w2, h2, r2) {
  var r2d = Math.PI / 180;
  if (w2 - 2 * r2 < 0) {
    r2 = w2 / 2;
  }
  if (h2 - 2 * r2 < 0) {
    r2 = h2 / 2;
  }
  ctx.beginPath();
  ctx.moveTo(x2 + r2, y2);
  ctx.lineTo(x2 + w2 - r2, y2);
  ctx.arc(x2 + w2 - r2, y2 + r2, r2, r2d * 270, r2d * 360, false);
  ctx.lineTo(x2 + w2, y2 + h2 - r2);
  ctx.arc(x2 + w2 - r2, y2 + h2 - r2, r2, 0, r2d * 90, false);
  ctx.lineTo(x2 + r2, y2 + h2);
  ctx.arc(x2 + r2, y2 + h2 - r2, r2, r2d * 90, r2d * 180, false);
  ctx.lineTo(x2, y2 + r2);
  ctx.arc(x2 + r2, y2 + r2, r2, r2d * 180, r2d * 270, false);
  ctx.closePath();
}
function drawEllipse(ctx, x2, y2, w2, h2) {
  var kappa = 0.5522848, ox = w2 / 2 * kappa, oy = h2 / 2 * kappa, xe = x2 + w2, ye = y2 + h2, xm = x2 + w2 / 2, ym = y2 + h2 / 2;
  ctx.beginPath();
  ctx.moveTo(x2, ym);
  ctx.bezierCurveTo(x2, ym - oy, xm - ox, y2, xm, y2);
  ctx.bezierCurveTo(xm + ox, y2, xe, ym - oy, xe, ym);
  ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
  ctx.bezierCurveTo(xm - ox, ye, x2, ym + oy, x2, ym);
  ctx.closePath();
}
function drawDatabase(ctx, x2, y2, w2, h2) {
  var f2 = 1 / 3;
  var wEllipse = w2;
  var hEllipse = h2 * f2;
  var kappa = 0.5522848, ox = wEllipse / 2 * kappa, oy = hEllipse / 2 * kappa, xe = x2 + wEllipse, ye = y2 + hEllipse, xm = x2 + wEllipse / 2, ym = y2 + hEllipse / 2, ymb = y2 + (h2 - hEllipse / 2), yeb = y2 + h2;
  ctx.beginPath();
  ctx.moveTo(xe, ym);
  ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
  ctx.bezierCurveTo(xm - ox, ye, x2, ym + oy, x2, ym);
  ctx.bezierCurveTo(x2, ym - oy, xm - ox, y2, xm, y2);
  ctx.bezierCurveTo(xm + ox, y2, xe, ym - oy, xe, ym);
  ctx.lineTo(xe, ymb);
  ctx.bezierCurveTo(xe, ymb + oy, xm + ox, yeb, xm, yeb);
  ctx.bezierCurveTo(xm - ox, yeb, x2, ymb + oy, x2, ymb);
  ctx.lineTo(x2, ym);
}
function drawDashedLine(ctx, x2, y2, x22, y22, pattern) {
  ctx.beginPath();
  ctx.moveTo(x2, y2);
  var patternLength = pattern.length;
  var dx = x22 - x2;
  var dy = y22 - y2;
  var slope = dy / dx;
  var distRemaining = Math.sqrt(dx * dx + dy * dy);
  var patternIndex = 0;
  var draw = true;
  var xStep = 0;
  var dashLength = +pattern[0];
  while (distRemaining >= 0.1) {
    dashLength = +pattern[patternIndex++ % patternLength];
    if (dashLength > distRemaining) {
      dashLength = distRemaining;
    }
    xStep = Math.sqrt(dashLength * dashLength / (1 + slope * slope));
    xStep = dx < 0 ? -xStep : xStep;
    x2 += xStep;
    y2 += slope * xStep;
    if (draw === true) {
      ctx.lineTo(x2, y2);
    } else {
      ctx.moveTo(x2, y2);
    }
    distRemaining -= dashLength;
    draw = !draw;
  }
}
function drawHexagon(ctx, x2, y2, r2) {
  ctx.beginPath();
  var sides = 6;
  var a2 = Math.PI * 2 / sides;
  ctx.moveTo(x2 + r2, y2);
  for (var i2 = 1; i2 < sides; i2++) {
    ctx.lineTo(x2 + r2 * Math.cos(a2 * i2), y2 + r2 * Math.sin(a2 * i2));
  }
  ctx.closePath();
}
var shapeMap = {
  circle: drawCircle,
  dashedLine: drawDashedLine,
  database: drawDatabase,
  diamond: drawDiamond,
  ellipse: drawEllipse,
  ellipse_vis: drawEllipse,
  hexagon: drawHexagon,
  roundRect: drawRoundRect,
  square: drawSquare,
  star: drawStar,
  triangle: drawTriangle,
  triangleDown: drawTriangleDown
};
function getShape(name) {
  if (Object.prototype.hasOwnProperty.call(shapeMap, name)) {
    return shapeMap[name];
  } else {
    return function(ctx) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      CanvasRenderingContext2D.prototype[name].call(ctx, args);
    };
  }
}
var componentEmitter = { exports: {} };
(function(module) {
  {
    module.exports = Emitter2;
  }
  function Emitter2(obj) {
    if (obj) return mixin(obj);
  }
  function mixin(obj) {
    for (var key2 in Emitter2.prototype) {
      obj[key2] = Emitter2.prototype[key2];
    }
    return obj;
  }
  Emitter2.prototype.on = Emitter2.prototype.addEventListener = function(event, fn2) {
    this._callbacks = this._callbacks || {};
    (this._callbacks["$" + event] = this._callbacks["$" + event] || []).push(fn2);
    return this;
  };
  Emitter2.prototype.once = function(event, fn2) {
    function on() {
      this.off(event, on);
      fn2.apply(this, arguments);
    }
    on.fn = fn2;
    this.on(event, on);
    return this;
  };
  Emitter2.prototype.off = Emitter2.prototype.removeListener = Emitter2.prototype.removeAllListeners = Emitter2.prototype.removeEventListener = function(event, fn2) {
    this._callbacks = this._callbacks || {};
    if (0 == arguments.length) {
      this._callbacks = {};
      return this;
    }
    var callbacks = this._callbacks["$" + event];
    if (!callbacks) return this;
    if (1 == arguments.length) {
      delete this._callbacks["$" + event];
      return this;
    }
    var cb;
    for (var i2 = 0; i2 < callbacks.length; i2++) {
      cb = callbacks[i2];
      if (cb === fn2 || cb.fn === fn2) {
        callbacks.splice(i2, 1);
        break;
      }
    }
    if (callbacks.length === 0) {
      delete this._callbacks["$" + event];
    }
    return this;
  };
  Emitter2.prototype.emit = function(event) {
    this._callbacks = this._callbacks || {};
    var args = new Array(arguments.length - 1), callbacks = this._callbacks["$" + event];
    for (var i2 = 1; i2 < arguments.length; i2++) {
      args[i2 - 1] = arguments[i2];
    }
    if (callbacks) {
      callbacks = callbacks.slice(0);
      for (var i2 = 0, len = callbacks.length; i2 < len; ++i2) {
        callbacks[i2].apply(this, args);
      }
    }
    return this;
  };
  Emitter2.prototype.listeners = function(event) {
    this._callbacks = this._callbacks || {};
    return this._callbacks["$" + event] || [];
  };
  Emitter2.prototype.hasListeners = function(event) {
    return !!this.listeners(event).length;
  };
})(componentEmitter);
var componentEmitterExports = componentEmitter.exports;
var Emitter = /* @__PURE__ */ getDefaultExportFromCjs(componentEmitterExports);
var wellKnownSymbol$k = wellKnownSymbol$m;
var TO_STRING_TAG$3 = wellKnownSymbol$k("toStringTag");
var test$2 = {};
test$2[TO_STRING_TAG$3] = "z";
var toStringTagSupport = String(test$2) === "[object z]";
var TO_STRING_TAG_SUPPORT$2 = toStringTagSupport;
var isCallable$a = isCallable$i;
var classofRaw = classofRaw$2;
var wellKnownSymbol$j = wellKnownSymbol$m;
var TO_STRING_TAG$2 = wellKnownSymbol$j("toStringTag");
var $Object$2 = Object;
var CORRECT_ARGUMENTS = classofRaw(/* @__PURE__ */ function() {
  return arguments;
}()) === "Arguments";
var tryGet = function(it2, key2) {
  try {
    return it2[key2];
  } catch (error) {
  }
};
var classof$d = TO_STRING_TAG_SUPPORT$2 ? classofRaw : function(it2) {
  var O, tag2, result;
  return it2 === void 0 ? "Undefined" : it2 === null ? "Null" : typeof (tag2 = tryGet(O = $Object$2(it2), TO_STRING_TAG$2)) == "string" ? tag2 : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) === "Object" && isCallable$a(O.callee) ? "Arguments" : result;
};
var classof$c = classof$d;
var $String$2 = String;
var toString$a = function(argument) {
  if (classof$c(argument) === "Symbol") throw new TypeError("Cannot convert a Symbol value to a string");
  return $String$2(argument);
};
var uncurryThis$l = functionUncurryThis;
var toIntegerOrInfinity$1 = toIntegerOrInfinity$4;
var toString$9 = toString$a;
var requireObjectCoercible$2 = requireObjectCoercible$5;
var charAt$3 = uncurryThis$l("".charAt);
var charCodeAt$1 = uncurryThis$l("".charCodeAt);
var stringSlice = uncurryThis$l("".slice);
var createMethod$3 = function(CONVERT_TO_STRING) {
  return function($this, pos) {
    var S = toString$9(requireObjectCoercible$2($this));
    var position = toIntegerOrInfinity$1(pos);
    var size = S.length;
    var first2, second;
    if (position < 0 || position >= size) return CONVERT_TO_STRING ? "" : void 0;
    first2 = charCodeAt$1(S, position);
    return first2 < 55296 || first2 > 56319 || position + 1 === size || (second = charCodeAt$1(S, position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? charAt$3(S, position) : first2 : CONVERT_TO_STRING ? stringSlice(S, position, position + 2) : (first2 - 55296 << 10) + (second - 56320) + 65536;
  };
};
var stringMultibyte = {
  // `String.prototype.codePointAt` method
  // https://tc39.es/ecma262/#sec-string.prototype.codepointat
  codeAt: createMethod$3(false),
  // `String.prototype.at` method
  // https://github.com/mathiasbynens/String.prototype.at
  charAt: createMethod$3(true)
};
var global$e = global$n;
var isCallable$9 = isCallable$i;
var WeakMap$1 = global$e.WeakMap;
var weakMapBasicDetection = isCallable$9(WeakMap$1) && /native code/.test(String(WeakMap$1));
var shared$5 = sharedExports;
var uid$2 = uid$4;
var keys$3 = shared$5("keys");
var sharedKey$4 = function(key2) {
  return keys$3[key2] || (keys$3[key2] = uid$2(key2));
};
var NATIVE_WEAK_MAP$1 = weakMapBasicDetection;
var global$d = global$n;
var isObject$d = isObject$j;
var createNonEnumerableProperty$4 = createNonEnumerableProperty$6;
var hasOwn$c = hasOwnProperty_1;
var shared$4 = sharedStore;
var sharedKey$3 = sharedKey$4;
var hiddenKeys$4 = hiddenKeys$6;
var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
var TypeError$2 = global$d.TypeError;
var WeakMap$2 = global$d.WeakMap;
var set$3, get$6, has;
var enforce = function(it2) {
  return has(it2) ? get$6(it2) : set$3(it2, {});
};
var getterFor = function(TYPE) {
  return function(it2) {
    var state;
    if (!isObject$d(it2) || (state = get$6(it2)).type !== TYPE) {
      throw new TypeError$2("Incompatible receiver, " + TYPE + " required");
    }
    return state;
  };
};
if (NATIVE_WEAK_MAP$1 || shared$4.state) {
  var store$1 = shared$4.state || (shared$4.state = new WeakMap$2());
  store$1.get = store$1.get;
  store$1.has = store$1.has;
  store$1.set = store$1.set;
  set$3 = function(it2, metadata) {
    if (store$1.has(it2)) throw new TypeError$2(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it2;
    store$1.set(it2, metadata);
    return metadata;
  };
  get$6 = function(it2) {
    return store$1.get(it2) || {};
  };
  has = function(it2) {
    return store$1.has(it2);
  };
} else {
  var STATE = sharedKey$3("state");
  hiddenKeys$4[STATE] = true;
  set$3 = function(it2, metadata) {
    if (hasOwn$c(it2, STATE)) throw new TypeError$2(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it2;
    createNonEnumerableProperty$4(it2, STATE, metadata);
    return metadata;
  };
  get$6 = function(it2) {
    return hasOwn$c(it2, STATE) ? it2[STATE] : {};
  };
  has = function(it2) {
    return hasOwn$c(it2, STATE);
  };
}
var internalState = {
  set: set$3,
  get: get$6,
  has,
  enforce,
  getterFor
};
var DESCRIPTORS$b = descriptors;
var hasOwn$b = hasOwnProperty_1;
var FunctionPrototype$1 = Function.prototype;
var getDescriptor = DESCRIPTORS$b && Object.getOwnPropertyDescriptor;
var EXISTS = hasOwn$b(FunctionPrototype$1, "name");
var PROPER = EXISTS && (function something2() {
}).name === "something";
var CONFIGURABLE = EXISTS && (!DESCRIPTORS$b || DESCRIPTORS$b && getDescriptor(FunctionPrototype$1, "name").configurable);
var functionName = {
  EXISTS,
  PROPER,
  CONFIGURABLE
};
var objectDefineProperties = {};
var DESCRIPTORS$a = descriptors;
var V8_PROTOTYPE_DEFINE_BUG = v8PrototypeDefineBug;
var definePropertyModule$2 = objectDefineProperty;
var anObject$b = anObject$d;
var toIndexedObject$6 = toIndexedObject$a;
var objectKeys$1 = objectKeys$3;
objectDefineProperties.f = DESCRIPTORS$a && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties5(O, Properties) {
  anObject$b(O);
  var props = toIndexedObject$6(Properties);
  var keys6 = objectKeys$1(Properties);
  var length2 = keys6.length;
  var index2 = 0;
  var key2;
  while (length2 > index2) definePropertyModule$2.f(O, key2 = keys6[index2++], props[key2]);
  return O;
};
var getBuiltIn$a = getBuiltIn$c;
var html$1 = getBuiltIn$a("document", "documentElement");
var anObject$a = anObject$d;
var definePropertiesModule$1 = objectDefineProperties;
var enumBugKeys$1 = enumBugKeys$3;
var hiddenKeys$3 = hiddenKeys$6;
var html = html$1;
var documentCreateElement = documentCreateElement$1;
var sharedKey$2 = sharedKey$4;
var GT = ">";
var LT = "<";
var PROTOTYPE$1 = "prototype";
var SCRIPT = "script";
var IE_PROTO$1 = sharedKey$2("IE_PROTO");
var EmptyConstructor = function() {
};
var scriptTag = function(content) {
  return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
};
var NullProtoObjectViaActiveX = function(activeXDocument2) {
  activeXDocument2.write(scriptTag(""));
  activeXDocument2.close();
  var temp = activeXDocument2.parentWindow.Object;
  activeXDocument2 = null;
  return temp;
};
var NullProtoObjectViaIFrame = function() {
  var iframe = documentCreateElement("iframe");
  var JS = "java" + SCRIPT + ":";
  var iframeDocument;
  iframe.style.display = "none";
  html.appendChild(iframe);
  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag("document.F=Object"));
  iframeDocument.close();
  return iframeDocument.F;
};
var activeXDocument;
var NullProtoObject = function() {
  try {
    activeXDocument = new ActiveXObject("htmlfile");
  } catch (error) {
  }
  NullProtoObject = typeof document != "undefined" ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument);
  var length2 = enumBugKeys$1.length;
  while (length2--) delete NullProtoObject[PROTOTYPE$1][enumBugKeys$1[length2]];
  return NullProtoObject();
};
hiddenKeys$3[IE_PROTO$1] = true;
var objectCreate = Object.create || function create5(O, Properties) {
  var result;
  if (O !== null) {
    EmptyConstructor[PROTOTYPE$1] = anObject$a(O);
    result = new EmptyConstructor();
    EmptyConstructor[PROTOTYPE$1] = null;
    result[IE_PROTO$1] = O;
  } else result = NullProtoObject();
  return Properties === void 0 ? result : definePropertiesModule$1.f(result, Properties);
};
var fails$n = fails$w;
var correctPrototypeGetter = !fails$n(function() {
  function F() {
  }
  F.prototype.constructor = null;
  return Object.getPrototypeOf(new F()) !== F.prototype;
});
var hasOwn$a = hasOwnProperty_1;
var isCallable$8 = isCallable$i;
var toObject$b = toObject$e;
var sharedKey$1 = sharedKey$4;
var CORRECT_PROTOTYPE_GETTER$1 = correctPrototypeGetter;
var IE_PROTO = sharedKey$1("IE_PROTO");
var $Object$1 = Object;
var ObjectPrototype$2 = $Object$1.prototype;
var objectGetPrototypeOf = CORRECT_PROTOTYPE_GETTER$1 ? $Object$1.getPrototypeOf : function(O) {
  var object2 = toObject$b(O);
  if (hasOwn$a(object2, IE_PROTO)) return object2[IE_PROTO];
  var constructor = object2.constructor;
  if (isCallable$8(constructor) && object2 instanceof constructor) {
    return constructor.prototype;
  }
  return object2 instanceof $Object$1 ? ObjectPrototype$2 : null;
};
var createNonEnumerableProperty$3 = createNonEnumerableProperty$6;
var defineBuiltIn$5 = function(target, key2, value2, options) {
  if (options && options.enumerable) target[key2] = value2;
  else createNonEnumerableProperty$3(target, key2, value2);
  return target;
};
var fails$m = fails$w;
var isCallable$7 = isCallable$i;
var isObject$c = isObject$j;
var create$a = objectCreate;
var getPrototypeOf$8 = objectGetPrototypeOf;
var defineBuiltIn$4 = defineBuiltIn$5;
var wellKnownSymbol$i = wellKnownSymbol$m;
var ITERATOR$6 = wellKnownSymbol$i("iterator");
var BUGGY_SAFARI_ITERATORS$1 = false;
var IteratorPrototype$1, PrototypeOfArrayIteratorPrototype, arrayIterator;
if ([].keys) {
  arrayIterator = [].keys();
  if (!("next" in arrayIterator)) BUGGY_SAFARI_ITERATORS$1 = true;
  else {
    PrototypeOfArrayIteratorPrototype = getPrototypeOf$8(getPrototypeOf$8(arrayIterator));
    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype$1 = PrototypeOfArrayIteratorPrototype;
  }
}
var NEW_ITERATOR_PROTOTYPE = !isObject$c(IteratorPrototype$1) || fails$m(function() {
  var test2 = {};
  return IteratorPrototype$1[ITERATOR$6].call(test2) !== test2;
});
if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype$1 = {};
else IteratorPrototype$1 = create$a(IteratorPrototype$1);
if (!isCallable$7(IteratorPrototype$1[ITERATOR$6])) {
  defineBuiltIn$4(IteratorPrototype$1, ITERATOR$6, function() {
    return this;
  });
}
var iteratorsCore = {
  IteratorPrototype: IteratorPrototype$1,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS$1
};
var TO_STRING_TAG_SUPPORT$1 = toStringTagSupport;
var classof$b = classof$d;
var objectToString = TO_STRING_TAG_SUPPORT$1 ? {}.toString : function toString3() {
  return "[object " + classof$b(this) + "]";
};
var TO_STRING_TAG_SUPPORT = toStringTagSupport;
var defineProperty$d = objectDefineProperty.f;
var createNonEnumerableProperty$2 = createNonEnumerableProperty$6;
var hasOwn$9 = hasOwnProperty_1;
var toString$8 = objectToString;
var wellKnownSymbol$h = wellKnownSymbol$m;
var TO_STRING_TAG$1 = wellKnownSymbol$h("toStringTag");
var setToStringTag$6 = function(it2, TAG, STATIC, SET_METHOD) {
  if (it2) {
    var target = STATIC ? it2 : it2.prototype;
    if (!hasOwn$9(target, TO_STRING_TAG$1)) {
      defineProperty$d(target, TO_STRING_TAG$1, { configurable: true, value: TAG });
    }
    if (SET_METHOD && !TO_STRING_TAG_SUPPORT) {
      createNonEnumerableProperty$2(target, "toString", toString$8);
    }
  }
};
var iterators = {};
var IteratorPrototype = iteratorsCore.IteratorPrototype;
var create$9 = objectCreate;
var createPropertyDescriptor$2 = createPropertyDescriptor$5;
var setToStringTag$5 = setToStringTag$6;
var Iterators$5 = iterators;
var returnThis$1 = function() {
  return this;
};
var iteratorCreateConstructor = function(IteratorConstructor, NAME2, next4, ENUMERABLE_NEXT) {
  var TO_STRING_TAG2 = NAME2 + " Iterator";
  IteratorConstructor.prototype = create$9(IteratorPrototype, { next: createPropertyDescriptor$2(+!ENUMERABLE_NEXT, next4) });
  setToStringTag$5(IteratorConstructor, TO_STRING_TAG2, false, true);
  Iterators$5[TO_STRING_TAG2] = returnThis$1;
  return IteratorConstructor;
};
var uncurryThis$k = functionUncurryThis;
var aCallable$3 = aCallable$7;
var functionUncurryThisAccessor = function(object2, key2, method2) {
  try {
    return uncurryThis$k(aCallable$3(Object.getOwnPropertyDescriptor(object2, key2)[method2]));
  } catch (error) {
  }
};
var isCallable$6 = isCallable$i;
var $String$1 = String;
var $TypeError$a = TypeError;
var aPossiblePrototype$1 = function(argument) {
  if (typeof argument == "object" || isCallable$6(argument)) return argument;
  throw new $TypeError$a("Can't set " + $String$1(argument) + " as a prototype");
};
var uncurryThisAccessor = functionUncurryThisAccessor;
var anObject$9 = anObject$d;
var aPossiblePrototype = aPossiblePrototype$1;
var objectSetPrototypeOf = Object.setPrototypeOf || ("__proto__" in {} ? function() {
  var CORRECT_SETTER = false;
  var test2 = {};
  var setter;
  try {
    setter = uncurryThisAccessor(Object.prototype, "__proto__", "set");
    setter(test2, []);
    CORRECT_SETTER = test2 instanceof Array;
  } catch (error) {
  }
  return function setPrototypeOf2(O, proto) {
    anObject$9(O);
    aPossiblePrototype(proto);
    if (CORRECT_SETTER) setter(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : void 0);
var $$M = _export;
var call$8 = functionCall;
var FunctionName = functionName;
var createIteratorConstructor = iteratorCreateConstructor;
var getPrototypeOf$7 = objectGetPrototypeOf;
var setToStringTag$4 = setToStringTag$6;
var defineBuiltIn$3 = defineBuiltIn$5;
var wellKnownSymbol$g = wellKnownSymbol$m;
var Iterators$4 = iterators;
var IteratorsCore = iteratorsCore;
var PROPER_FUNCTION_NAME = FunctionName.PROPER;
var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
var ITERATOR$5 = wellKnownSymbol$g("iterator");
var KEYS = "keys";
var VALUES = "values";
var ENTRIES = "entries";
var returnThis = function() {
  return this;
};
var iteratorDefine = function(Iterable, NAME2, IteratorConstructor, next4, DEFAULT, IS_SET, FORCED2) {
  createIteratorConstructor(IteratorConstructor, NAME2, next4);
  var getIterationMethod = function(KIND) {
    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS && KIND && KIND in IterablePrototype) return IterablePrototype[KIND];
    switch (KIND) {
      case KEYS:
        return function keys6() {
          return new IteratorConstructor(this, KIND);
        };
      case VALUES:
        return function values2() {
          return new IteratorConstructor(this, KIND);
        };
      case ENTRIES:
        return function entries2() {
          return new IteratorConstructor(this, KIND);
        };
    }
    return function() {
      return new IteratorConstructor(this);
    };
  };
  var TO_STRING_TAG2 = NAME2 + " Iterator";
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR$5] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME2 === "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY;
  if (anyNativeIterator) {
    CurrentIteratorPrototype = getPrototypeOf$7(anyNativeIterator.call(new Iterable()));
    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      setToStringTag$4(CurrentIteratorPrototype, TO_STRING_TAG2, true, true);
      Iterators$4[TO_STRING_TAG2] = returnThis;
    }
  }
  if (PROPER_FUNCTION_NAME && DEFAULT === VALUES && nativeIterator && nativeIterator.name !== VALUES) {
    {
      INCORRECT_VALUES_NAME = true;
      defaultIterator = function values2() {
        return call$8(nativeIterator, this);
      };
    }
  }
  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    };
    if (FORCED2) for (KEY in methods) {
      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
        defineBuiltIn$3(IterablePrototype, KEY, methods[KEY]);
      }
    }
    else $$M({ target: NAME2, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
  }
  if (FORCED2 && IterablePrototype[ITERATOR$5] !== defaultIterator) {
    defineBuiltIn$3(IterablePrototype, ITERATOR$5, defaultIterator, { name: DEFAULT });
  }
  Iterators$4[NAME2] = defaultIterator;
  return methods;
};
var createIterResultObject$3 = function(value2, done) {
  return { value: value2, done };
};
var charAt$2 = stringMultibyte.charAt;
var toString$7 = toString$a;
var InternalStateModule$5 = internalState;
var defineIterator$2 = iteratorDefine;
var createIterResultObject$2 = createIterResultObject$3;
var STRING_ITERATOR = "String Iterator";
var setInternalState$5 = InternalStateModule$5.set;
var getInternalState$2 = InternalStateModule$5.getterFor(STRING_ITERATOR);
defineIterator$2(String, "String", function(iterated) {
  setInternalState$5(this, {
    type: STRING_ITERATOR,
    string: toString$7(iterated),
    index: 0
  });
}, function next3() {
  var state = getInternalState$2(this);
  var string2 = state.string;
  var index2 = state.index;
  var point;
  if (index2 >= string2.length) return createIterResultObject$2(void 0, true);
  point = charAt$2(string2, index2);
  state.index += point.length;
  return createIterResultObject$2(point, false);
});
var call$7 = functionCall;
var anObject$8 = anObject$d;
var getMethod$1 = getMethod$3;
var iteratorClose$2 = function(iterator2, kind, value2) {
  var innerResult, innerError;
  anObject$8(iterator2);
  try {
    innerResult = getMethod$1(iterator2, "return");
    if (!innerResult) {
      if (kind === "throw") throw value2;
      return value2;
    }
    innerResult = call$7(innerResult, iterator2);
  } catch (error) {
    innerError = true;
    innerResult = error;
  }
  if (kind === "throw") throw value2;
  if (innerError) throw innerResult;
  anObject$8(innerResult);
  return value2;
};
var anObject$7 = anObject$d;
var iteratorClose$1 = iteratorClose$2;
var callWithSafeIterationClosing$1 = function(iterator2, fn2, value2, ENTRIES2) {
  try {
    return ENTRIES2 ? fn2(anObject$7(value2)[0], value2[1]) : fn2(value2);
  } catch (error) {
    iteratorClose$1(iterator2, "throw", error);
  }
};
var wellKnownSymbol$f = wellKnownSymbol$m;
var Iterators$3 = iterators;
var ITERATOR$4 = wellKnownSymbol$f("iterator");
var ArrayPrototype$g = Array.prototype;
var isArrayIteratorMethod$2 = function(it2) {
  return it2 !== void 0 && (Iterators$3.Array === it2 || ArrayPrototype$g[ITERATOR$4] === it2);
};
var uncurryThis$j = functionUncurryThis;
var isCallable$5 = isCallable$i;
var store$4 = sharedStore;
var functionToString = uncurryThis$j(Function.toString);
if (!isCallable$5(store$4.inspectSource)) {
  store$4.inspectSource = function(it2) {
    return functionToString(it2);
  };
}
var inspectSource$1 = store$4.inspectSource;
var uncurryThis$i = functionUncurryThis;
var fails$l = fails$w;
var isCallable$4 = isCallable$i;
var classof$a = classof$d;
var getBuiltIn$9 = getBuiltIn$c;
var inspectSource = inspectSource$1;
var noop = function() {
};
var empty = [];
var construct$3 = getBuiltIn$9("Reflect", "construct");
var constructorRegExp = /^\s*(?:class|function)\b/;
var exec$2 = uncurryThis$i(constructorRegExp.exec);
var INCORRECT_TO_STRING = !constructorRegExp.test(noop);
var isConstructorModern = function isConstructor4(argument) {
  if (!isCallable$4(argument)) return false;
  try {
    construct$3(noop, empty, argument);
    return true;
  } catch (error) {
    return false;
  }
};
var isConstructorLegacy = function isConstructor5(argument) {
  if (!isCallable$4(argument)) return false;
  switch (classof$a(argument)) {
    case "AsyncFunction":
    case "GeneratorFunction":
    case "AsyncGeneratorFunction":
      return false;
  }
  try {
    return INCORRECT_TO_STRING || !!exec$2(constructorRegExp, inspectSource(argument));
  } catch (error) {
    return true;
  }
};
isConstructorLegacy.sham = true;
var isConstructor$4 = !construct$3 || fails$l(function() {
  var called2;
  return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function() {
    called2 = true;
  }) || called2;
}) ? isConstructorLegacy : isConstructorModern;
var toPropertyKey$1 = toPropertyKey$4;
var definePropertyModule$1 = objectDefineProperty;
var createPropertyDescriptor$1 = createPropertyDescriptor$5;
var createProperty$6 = function(object2, key2, value2) {
  var propertyKey = toPropertyKey$1(key2);
  if (propertyKey in object2) definePropertyModule$1.f(object2, propertyKey, createPropertyDescriptor$1(0, value2));
  else object2[propertyKey] = value2;
};
var classof$9 = classof$d;
var getMethod = getMethod$3;
var isNullOrUndefined$3 = isNullOrUndefined$6;
var Iterators$2 = iterators;
var wellKnownSymbol$e = wellKnownSymbol$m;
var ITERATOR$3 = wellKnownSymbol$e("iterator");
var getIteratorMethod$9 = function(it2) {
  if (!isNullOrUndefined$3(it2)) return getMethod(it2, ITERATOR$3) || getMethod(it2, "@@iterator") || Iterators$2[classof$9(it2)];
};
var call$6 = functionCall;
var aCallable$2 = aCallable$7;
var anObject$6 = anObject$d;
var tryToString$4 = tryToString$6;
var getIteratorMethod$8 = getIteratorMethod$9;
var $TypeError$9 = TypeError;
var getIterator$2 = function(argument, usingIterator) {
  var iteratorMethod = arguments.length < 2 ? getIteratorMethod$8(argument) : usingIterator;
  if (aCallable$2(iteratorMethod)) return anObject$6(call$6(iteratorMethod, argument));
  throw new $TypeError$9(tryToString$4(argument) + " is not iterable");
};
var bind$7 = functionBindContext;
var call$5 = functionCall;
var toObject$a = toObject$e;
var callWithSafeIterationClosing = callWithSafeIterationClosing$1;
var isArrayIteratorMethod$1 = isArrayIteratorMethod$2;
var isConstructor$3 = isConstructor$4;
var lengthOfArrayLike$a = lengthOfArrayLike$c;
var createProperty$5 = createProperty$6;
var getIterator$1 = getIterator$2;
var getIteratorMethod$7 = getIteratorMethod$9;
var $Array$3 = Array;
var arrayFrom = function from3(arrayLike) {
  var O = toObject$a(arrayLike);
  var IS_CONSTRUCTOR = isConstructor$3(this);
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : void 0;
  var mapping = mapfn !== void 0;
  if (mapping) mapfn = bind$7(mapfn, argumentsLength > 2 ? arguments[2] : void 0);
  var iteratorMethod = getIteratorMethod$7(O);
  var index2 = 0;
  var length2, result, step, iterator2, next4, value2;
  if (iteratorMethod && !(this === $Array$3 && isArrayIteratorMethod$1(iteratorMethod))) {
    iterator2 = getIterator$1(O, iteratorMethod);
    next4 = iterator2.next;
    result = IS_CONSTRUCTOR ? new this() : [];
    for (; !(step = call$5(next4, iterator2)).done; index2++) {
      value2 = mapping ? callWithSafeIterationClosing(iterator2, mapfn, [step.value, index2], true) : step.value;
      createProperty$5(result, index2, value2);
    }
  } else {
    length2 = lengthOfArrayLike$a(O);
    result = IS_CONSTRUCTOR ? new this(length2) : $Array$3(length2);
    for (; length2 > index2; index2++) {
      value2 = mapping ? mapfn(O[index2], index2) : O[index2];
      createProperty$5(result, index2, value2);
    }
  }
  result.length = index2;
  return result;
};
var wellKnownSymbol$d = wellKnownSymbol$m;
var ITERATOR$2 = wellKnownSymbol$d("iterator");
var SAFE_CLOSING = false;
try {
  var called = 0;
  var iteratorWithReturn = {
    next: function() {
      return { done: !!called++ };
    },
    "return": function() {
      SAFE_CLOSING = true;
    }
  };
  iteratorWithReturn[ITERATOR$2] = function() {
    return this;
  };
  Array.from(iteratorWithReturn, function() {
    throw 2;
  });
} catch (error) {
}
var checkCorrectnessOfIteration$1 = function(exec2, SKIP_CLOSING) {
  try {
    if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
  } catch (error) {
    return false;
  }
  var ITERATION_SUPPORT = false;
  try {
    var object2 = {};
    object2[ITERATOR$2] = function() {
      return {
        next: function() {
          return { done: ITERATION_SUPPORT = true };
        }
      };
    };
    exec2(object2);
  } catch (error) {
  }
  return ITERATION_SUPPORT;
};
var $$L = _export;
var from$6 = arrayFrom;
var checkCorrectnessOfIteration = checkCorrectnessOfIteration$1;
var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function(iterable) {
  Array.from(iterable);
});
$$L({ target: "Array", stat: true, forced: INCORRECT_ITERATION }, {
  from: from$6
});
var path$r = path$w;
var from$5 = path$r.Array.from;
var parent$19 = from$5;
var from$4 = parent$19;
var from$3 = from$4;
var _Array$from$1 = /* @__PURE__ */ getDefaultExportFromCjs(from$3);
var toIndexedObject$5 = toIndexedObject$a;
var Iterators$1 = iterators;
var InternalStateModule$4 = internalState;
objectDefineProperty.f;
var defineIterator$1 = iteratorDefine;
var createIterResultObject$1 = createIterResultObject$3;
var ARRAY_ITERATOR = "Array Iterator";
var setInternalState$4 = InternalStateModule$4.set;
var getInternalState$1 = InternalStateModule$4.getterFor(ARRAY_ITERATOR);
defineIterator$1(Array, "Array", function(iterated, kind) {
  setInternalState$4(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject$5(iterated),
    // target
    index: 0,
    // next index
    kind
    // kind
  });
}, function() {
  var state = getInternalState$1(this);
  var target = state.target;
  var kind = state.kind;
  var index2 = state.index++;
  if (!target || index2 >= target.length) {
    state.target = void 0;
    return createIterResultObject$1(void 0, true);
  }
  switch (kind) {
    case "keys":
      return createIterResultObject$1(index2, false);
    case "values":
      return createIterResultObject$1(target[index2], false);
  }
  return createIterResultObject$1([index2, target[index2]], false);
}, "values");
Iterators$1.Arguments = Iterators$1.Array;
var getIteratorMethod$6 = getIteratorMethod$9;
var getIteratorMethod_1 = getIteratorMethod$6;
var domIterables = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};
var DOMIterables$2 = domIterables;
var global$c = global$n;
var classof$8 = classof$d;
var createNonEnumerableProperty$1 = createNonEnumerableProperty$6;
var Iterators = iterators;
var wellKnownSymbol$c = wellKnownSymbol$m;
var TO_STRING_TAG = wellKnownSymbol$c("toStringTag");
for (var COLLECTION_NAME in DOMIterables$2) {
  var Collection = global$c[COLLECTION_NAME];
  var CollectionPrototype = Collection && Collection.prototype;
  if (CollectionPrototype && classof$8(CollectionPrototype) !== TO_STRING_TAG) {
    createNonEnumerableProperty$1(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
  }
  Iterators[COLLECTION_NAME] = Iterators.Array;
}
var parent$18 = getIteratorMethod_1;
var getIteratorMethod$5 = parent$18;
var parent$17 = getIteratorMethod$5;
var getIteratorMethod$4 = parent$17;
var parent$16 = getIteratorMethod$4;
var getIteratorMethod$3 = parent$16;
var getIteratorMethod$2 = getIteratorMethod$3;
var _getIteratorMethod$1 = /* @__PURE__ */ getDefaultExportFromCjs(getIteratorMethod$2);
var getIteratorMethod$1 = getIteratorMethod$2;
var _getIteratorMethod = /* @__PURE__ */ getDefaultExportFromCjs(getIteratorMethod$1);
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
var defineProperty$c = { exports: {} };
var $$K = _export;
var DESCRIPTORS$9 = descriptors;
var defineProperty$b = objectDefineProperty.f;
$$K({ target: "Object", stat: true, forced: Object.defineProperty !== defineProperty$b, sham: !DESCRIPTORS$9 }, {
  defineProperty: defineProperty$b
});
var path$q = path$w;
var Object$5 = path$q.Object;
var defineProperty$a = defineProperty$c.exports = function defineProperty8(it2, key2, desc) {
  return Object$5.defineProperty(it2, key2, desc);
};
if (Object$5.defineProperty.sham) defineProperty$a.sham = true;
var definePropertyExports = defineProperty$c.exports;
var parent$15 = definePropertyExports;
var defineProperty$9 = parent$15;
var parent$14 = defineProperty$9;
var defineProperty$8 = parent$14;
var parent$13 = defineProperty$8;
var defineProperty$7 = parent$13;
var defineProperty$6 = defineProperty$7;
var _Object$defineProperty$1 = /* @__PURE__ */ getDefaultExportFromCjs(defineProperty$6);
var classof$7 = classofRaw$2;
var isArray$e = Array.isArray || function isArray3(argument) {
  return classof$7(argument) === "Array";
};
var $TypeError$8 = TypeError;
var MAX_SAFE_INTEGER = 9007199254740991;
var doesNotExceedSafeInteger$3 = function(it2) {
  if (it2 > MAX_SAFE_INTEGER) throw $TypeError$8("Maximum allowed index exceeded");
  return it2;
};
var isArray$d = isArray$e;
var isConstructor$2 = isConstructor$4;
var isObject$b = isObject$j;
var wellKnownSymbol$b = wellKnownSymbol$m;
var SPECIES$3 = wellKnownSymbol$b("species");
var $Array$2 = Array;
var arraySpeciesConstructor$1 = function(originalArray) {
  var C;
  if (isArray$d(originalArray)) {
    C = originalArray.constructor;
    if (isConstructor$2(C) && (C === $Array$2 || isArray$d(C.prototype))) C = void 0;
    else if (isObject$b(C)) {
      C = C[SPECIES$3];
      if (C === null) C = void 0;
    }
  }
  return C === void 0 ? $Array$2 : C;
};
var arraySpeciesConstructor = arraySpeciesConstructor$1;
var arraySpeciesCreate$3 = function(originalArray, length2) {
  return new (arraySpeciesConstructor(originalArray))(length2 === 0 ? 0 : length2);
};
var fails$k = fails$w;
var wellKnownSymbol$a = wellKnownSymbol$m;
var V8_VERSION$1 = engineV8Version;
var SPECIES$2 = wellKnownSymbol$a("species");
var arrayMethodHasSpeciesSupport$5 = function(METHOD_NAME) {
  return V8_VERSION$1 >= 51 || !fails$k(function() {
    var array2 = [];
    var constructor = array2.constructor = {};
    constructor[SPECIES$2] = function() {
      return { foo: 1 };
    };
    return array2[METHOD_NAME](Boolean).foo !== 1;
  });
};
var $$J = _export;
var fails$j = fails$w;
var isArray$c = isArray$e;
var isObject$a = isObject$j;
var toObject$9 = toObject$e;
var lengthOfArrayLike$9 = lengthOfArrayLike$c;
var doesNotExceedSafeInteger$2 = doesNotExceedSafeInteger$3;
var createProperty$4 = createProperty$6;
var arraySpeciesCreate$2 = arraySpeciesCreate$3;
var arrayMethodHasSpeciesSupport$4 = arrayMethodHasSpeciesSupport$5;
var wellKnownSymbol$9 = wellKnownSymbol$m;
var V8_VERSION = engineV8Version;
var IS_CONCAT_SPREADABLE = wellKnownSymbol$9("isConcatSpreadable");
var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails$j(function() {
  var array2 = [];
  array2[IS_CONCAT_SPREADABLE] = false;
  return array2.concat()[0] !== array2;
});
var isConcatSpreadable = function(O) {
  if (!isObject$a(O)) return false;
  var spreadable = O[IS_CONCAT_SPREADABLE];
  return spreadable !== void 0 ? !!spreadable : isArray$c(O);
};
var FORCED$a = !IS_CONCAT_SPREADABLE_SUPPORT || !arrayMethodHasSpeciesSupport$4("concat");
$$J({ target: "Array", proto: true, arity: 1, forced: FORCED$a }, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  concat: function concat3(arg) {
    var O = toObject$9(this);
    var A = arraySpeciesCreate$2(O, 0);
    var n2 = 0;
    var i2, k2, length2, len, E;
    for (i2 = -1, length2 = arguments.length; i2 < length2; i2++) {
      E = i2 === -1 ? O : arguments[i2];
      if (isConcatSpreadable(E)) {
        len = lengthOfArrayLike$9(E);
        doesNotExceedSafeInteger$2(n2 + len);
        for (k2 = 0; k2 < len; k2++, n2++) if (k2 in E) createProperty$4(A, n2, E[k2]);
      } else {
        doesNotExceedSafeInteger$2(n2 + 1);
        createProperty$4(A, n2++, E);
      }
    }
    A.length = n2;
    return A;
  }
});
var objectGetOwnPropertyNames = {};
var internalObjectKeys = objectKeysInternal;
var enumBugKeys = enumBugKeys$3;
var hiddenKeys$2 = enumBugKeys.concat("length", "prototype");
objectGetOwnPropertyNames.f = Object.getOwnPropertyNames || function getOwnPropertyNames5(O) {
  return internalObjectKeys(O, hiddenKeys$2);
};
var objectGetOwnPropertyNamesExternal = {};
var toAbsoluteIndex$3 = toAbsoluteIndex$5;
var lengthOfArrayLike$8 = lengthOfArrayLike$c;
var createProperty$3 = createProperty$6;
var $Array$1 = Array;
var max$2 = Math.max;
var arraySliceSimple = function(O, start2, end2) {
  var length2 = lengthOfArrayLike$8(O);
  var k2 = toAbsoluteIndex$3(start2, length2);
  var fin = toAbsoluteIndex$3(end2 === void 0 ? length2 : end2, length2);
  var result = $Array$1(max$2(fin - k2, 0));
  var n2 = 0;
  for (; k2 < fin; k2++, n2++) createProperty$3(result, n2, O[k2]);
  result.length = n2;
  return result;
};
var classof$6 = classofRaw$2;
var toIndexedObject$4 = toIndexedObject$a;
var $getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;
var arraySlice$3 = arraySliceSimple;
var windowNames = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
var getWindowNames = function(it2) {
  try {
    return $getOwnPropertyNames$1(it2);
  } catch (error) {
    return arraySlice$3(windowNames);
  }
};
objectGetOwnPropertyNamesExternal.f = function getOwnPropertyNames6(it2) {
  return windowNames && classof$6(it2) === "Window" ? getWindowNames(it2) : $getOwnPropertyNames$1(toIndexedObject$4(it2));
};
var defineProperty$5 = objectDefineProperty;
var defineBuiltInAccessor$3 = function(target, name, descriptor) {
  return defineProperty$5.f(target, name, descriptor);
};
var wellKnownSymbolWrapped = {};
var wellKnownSymbol$8 = wellKnownSymbol$m;
wellKnownSymbolWrapped.f = wellKnownSymbol$8;
var path$p = path$w;
var hasOwn$8 = hasOwnProperty_1;
var wrappedWellKnownSymbolModule$1 = wellKnownSymbolWrapped;
var defineProperty$4 = objectDefineProperty.f;
var wellKnownSymbolDefine = function(NAME2) {
  var Symbol2 = path$p.Symbol || (path$p.Symbol = {});
  if (!hasOwn$8(Symbol2, NAME2)) defineProperty$4(Symbol2, NAME2, {
    value: wrappedWellKnownSymbolModule$1.f(NAME2)
  });
};
var call$4 = functionCall;
var getBuiltIn$8 = getBuiltIn$c;
var wellKnownSymbol$7 = wellKnownSymbol$m;
var defineBuiltIn$2 = defineBuiltIn$5;
var symbolDefineToPrimitive = function() {
  var Symbol2 = getBuiltIn$8("Symbol");
  var SymbolPrototype2 = Symbol2 && Symbol2.prototype;
  var valueOf = SymbolPrototype2 && SymbolPrototype2.valueOf;
  var TO_PRIMITIVE2 = wellKnownSymbol$7("toPrimitive");
  if (SymbolPrototype2 && !SymbolPrototype2[TO_PRIMITIVE2]) {
    defineBuiltIn$2(SymbolPrototype2, TO_PRIMITIVE2, function(hint) {
      return call$4(valueOf, this);
    }, { arity: 1 });
  }
};
var bind$6 = functionBindContext;
var uncurryThis$h = functionUncurryThis;
var IndexedObject$1 = indexedObject;
var toObject$8 = toObject$e;
var lengthOfArrayLike$7 = lengthOfArrayLike$c;
var arraySpeciesCreate$1 = arraySpeciesCreate$3;
var push$a = uncurryThis$h([].push);
var createMethod$2 = function(TYPE) {
  var IS_MAP = TYPE === 1;
  var IS_FILTER = TYPE === 2;
  var IS_SOME = TYPE === 3;
  var IS_EVERY = TYPE === 4;
  var IS_FIND_INDEX = TYPE === 6;
  var IS_FILTER_REJECT = TYPE === 7;
  var NO_HOLES = TYPE === 5 || IS_FIND_INDEX;
  return function($this, callbackfn, that, specificCreate) {
    var O = toObject$8($this);
    var self2 = IndexedObject$1(O);
    var boundFunction = bind$6(callbackfn, that);
    var length2 = lengthOfArrayLike$7(self2);
    var index2 = 0;
    var create8 = specificCreate || arraySpeciesCreate$1;
    var target = IS_MAP ? create8($this, length2) : IS_FILTER || IS_FILTER_REJECT ? create8($this, 0) : void 0;
    var value2, result;
    for (; length2 > index2; index2++) if (NO_HOLES || index2 in self2) {
      value2 = self2[index2];
      result = boundFunction(value2, index2, O);
      if (TYPE) {
        if (IS_MAP) target[index2] = result;
        else if (result) switch (TYPE) {
          case 3:
            return true;
          case 5:
            return value2;
          case 6:
            return index2;
          case 2:
            push$a(target, value2);
        }
        else switch (TYPE) {
          case 4:
            return false;
          case 7:
            push$a(target, value2);
        }
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};
var arrayIteration = {
  // `Array.prototype.forEach` method
  // https://tc39.es/ecma262/#sec-array.prototype.foreach
  forEach: createMethod$2(0),
  // `Array.prototype.map` method
  // https://tc39.es/ecma262/#sec-array.prototype.map
  map: createMethod$2(1),
  // `Array.prototype.filter` method
  // https://tc39.es/ecma262/#sec-array.prototype.filter
  filter: createMethod$2(2),
  // `Array.prototype.some` method
  // https://tc39.es/ecma262/#sec-array.prototype.some
  some: createMethod$2(3),
  // `Array.prototype.every` method
  // https://tc39.es/ecma262/#sec-array.prototype.every
  every: createMethod$2(4),
  // `Array.prototype.find` method
  // https://tc39.es/ecma262/#sec-array.prototype.find
  find: createMethod$2(5),
  // `Array.prototype.findIndex` method
  // https://tc39.es/ecma262/#sec-array.prototype.findIndex
  findIndex: createMethod$2(6),
  // `Array.prototype.filterReject` method
  // https://github.com/tc39/proposal-array-filtering
  filterReject: createMethod$2(7)
};
var $$I = _export;
var global$b = global$n;
var call$3 = functionCall;
var uncurryThis$g = functionUncurryThis;
var DESCRIPTORS$8 = descriptors;
var NATIVE_SYMBOL$3 = symbolConstructorDetection;
var fails$i = fails$w;
var hasOwn$7 = hasOwnProperty_1;
var isPrototypeOf$i = objectIsPrototypeOf;
var anObject$5 = anObject$d;
var toIndexedObject$3 = toIndexedObject$a;
var toPropertyKey = toPropertyKey$4;
var $toString = toString$a;
var createPropertyDescriptor = createPropertyDescriptor$5;
var nativeObjectCreate = objectCreate;
var objectKeys = objectKeys$3;
var getOwnPropertyNamesModule$2 = objectGetOwnPropertyNames;
var getOwnPropertyNamesExternal = objectGetOwnPropertyNamesExternal;
var getOwnPropertySymbolsModule$2 = objectGetOwnPropertySymbols;
var getOwnPropertyDescriptorModule$2 = objectGetOwnPropertyDescriptor;
var definePropertyModule = objectDefineProperty;
var definePropertiesModule = objectDefineProperties;
var propertyIsEnumerableModule = objectPropertyIsEnumerable;
var defineBuiltIn$1 = defineBuiltIn$5;
var defineBuiltInAccessor$2 = defineBuiltInAccessor$3;
var shared$3 = sharedExports;
var sharedKey = sharedKey$4;
var hiddenKeys$1 = hiddenKeys$6;
var uid$1 = uid$4;
var wellKnownSymbol$6 = wellKnownSymbol$m;
var wrappedWellKnownSymbolModule = wellKnownSymbolWrapped;
var defineWellKnownSymbol$l = wellKnownSymbolDefine;
var defineSymbolToPrimitive$1 = symbolDefineToPrimitive;
var setToStringTag$3 = setToStringTag$6;
var InternalStateModule$3 = internalState;
var $forEach$1 = arrayIteration.forEach;
var HIDDEN = sharedKey("hidden");
var SYMBOL = "Symbol";
var PROTOTYPE = "prototype";
var setInternalState$3 = InternalStateModule$3.set;
var getInternalState = InternalStateModule$3.getterFor(SYMBOL);
var ObjectPrototype$1 = Object[PROTOTYPE];
var $Symbol = global$b.Symbol;
var SymbolPrototype = $Symbol && $Symbol[PROTOTYPE];
var RangeError$1 = global$b.RangeError;
var TypeError$1 = global$b.TypeError;
var QObject = global$b.QObject;
var nativeGetOwnPropertyDescriptor$1 = getOwnPropertyDescriptorModule$2.f;
var nativeDefineProperty = definePropertyModule.f;
var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
var push$9 = uncurryThis$g([].push);
var AllSymbols = shared$3("symbols");
var ObjectPrototypeSymbols = shared$3("op-symbols");
var WellKnownSymbolsStore$1 = shared$3("wks");
var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
var fallbackDefineProperty = function(O, P, Attributes) {
  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$1(ObjectPrototype$1, P);
  if (ObjectPrototypeDescriptor) delete ObjectPrototype$1[P];
  nativeDefineProperty(O, P, Attributes);
  if (ObjectPrototypeDescriptor && O !== ObjectPrototype$1) {
    nativeDefineProperty(ObjectPrototype$1, P, ObjectPrototypeDescriptor);
  }
};
var setSymbolDescriptor = DESCRIPTORS$8 && fails$i(function() {
  return nativeObjectCreate(nativeDefineProperty({}, "a", {
    get: function() {
      return nativeDefineProperty(this, "a", { value: 7 }).a;
    }
  })).a !== 7;
}) ? fallbackDefineProperty : nativeDefineProperty;
var wrap = function(tag2, description) {
  var symbol2 = AllSymbols[tag2] = nativeObjectCreate(SymbolPrototype);
  setInternalState$3(symbol2, {
    type: SYMBOL,
    tag: tag2,
    description
  });
  if (!DESCRIPTORS$8) symbol2.description = description;
  return symbol2;
};
var $defineProperty = function defineProperty9(O, P, Attributes) {
  if (O === ObjectPrototype$1) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
  anObject$5(O);
  var key2 = toPropertyKey(P);
  anObject$5(Attributes);
  if (hasOwn$7(AllSymbols, key2)) {
    if (!Attributes.enumerable) {
      if (!hasOwn$7(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
      O[HIDDEN][key2] = true;
    } else {
      if (hasOwn$7(O, HIDDEN) && O[HIDDEN][key2]) O[HIDDEN][key2] = false;
      Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
    }
    return setSymbolDescriptor(O, key2, Attributes);
  }
  return nativeDefineProperty(O, key2, Attributes);
};
var $defineProperties = function defineProperties6(O, Properties) {
  anObject$5(O);
  var properties = toIndexedObject$3(Properties);
  var keys6 = objectKeys(properties).concat($getOwnPropertySymbols(properties));
  $forEach$1(keys6, function(key2) {
    if (!DESCRIPTORS$8 || call$3($propertyIsEnumerable, properties, key2)) $defineProperty(O, key2, properties[key2]);
  });
  return O;
};
var $create = function create6(O, Properties) {
  return Properties === void 0 ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
};
var $propertyIsEnumerable = function propertyIsEnumerable4(V) {
  var P = toPropertyKey(V);
  var enumerable = call$3(nativePropertyIsEnumerable, this, P);
  if (this === ObjectPrototype$1 && hasOwn$7(AllSymbols, P) && !hasOwn$7(ObjectPrototypeSymbols, P)) return false;
  return enumerable || !hasOwn$7(this, P) || !hasOwn$7(AllSymbols, P) || hasOwn$7(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor7(O, P) {
  var it2 = toIndexedObject$3(O);
  var key2 = toPropertyKey(P);
  if (it2 === ObjectPrototype$1 && hasOwn$7(AllSymbols, key2) && !hasOwn$7(ObjectPrototypeSymbols, key2)) return;
  var descriptor = nativeGetOwnPropertyDescriptor$1(it2, key2);
  if (descriptor && hasOwn$7(AllSymbols, key2) && !(hasOwn$7(it2, HIDDEN) && it2[HIDDEN][key2])) {
    descriptor.enumerable = true;
  }
  return descriptor;
};
var $getOwnPropertyNames = function getOwnPropertyNames7(O) {
  var names = nativeGetOwnPropertyNames(toIndexedObject$3(O));
  var result = [];
  $forEach$1(names, function(key2) {
    if (!hasOwn$7(AllSymbols, key2) && !hasOwn$7(hiddenKeys$1, key2)) push$9(result, key2);
  });
  return result;
};
var $getOwnPropertySymbols = function(O) {
  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype$1;
  var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject$3(O));
  var result = [];
  $forEach$1(names, function(key2) {
    if (hasOwn$7(AllSymbols, key2) && (!IS_OBJECT_PROTOTYPE || hasOwn$7(ObjectPrototype$1, key2))) {
      push$9(result, AllSymbols[key2]);
    }
  });
  return result;
};
if (!NATIVE_SYMBOL$3) {
  $Symbol = function Symbol2() {
    if (isPrototypeOf$i(SymbolPrototype, this)) throw new TypeError$1("Symbol is not a constructor");
    var description = !arguments.length || arguments[0] === void 0 ? void 0 : $toString(arguments[0]);
    var tag2 = uid$1(description);
    var setter = function(value2) {
      if (this === ObjectPrototype$1) call$3(setter, ObjectPrototypeSymbols, value2);
      if (hasOwn$7(this, HIDDEN) && hasOwn$7(this[HIDDEN], tag2)) this[HIDDEN][tag2] = false;
      var descriptor = createPropertyDescriptor(1, value2);
      try {
        setSymbolDescriptor(this, tag2, descriptor);
      } catch (error) {
        if (!(error instanceof RangeError$1)) throw error;
        fallbackDefineProperty(this, tag2, descriptor);
      }
    };
    if (DESCRIPTORS$8 && USE_SETTER) setSymbolDescriptor(ObjectPrototype$1, tag2, { configurable: true, set: setter });
    return wrap(tag2, description);
  };
  SymbolPrototype = $Symbol[PROTOTYPE];
  defineBuiltIn$1(SymbolPrototype, "toString", function toString4() {
    return getInternalState(this).tag;
  });
  defineBuiltIn$1($Symbol, "withoutSetter", function(description) {
    return wrap(uid$1(description), description);
  });
  propertyIsEnumerableModule.f = $propertyIsEnumerable;
  definePropertyModule.f = $defineProperty;
  definePropertiesModule.f = $defineProperties;
  getOwnPropertyDescriptorModule$2.f = $getOwnPropertyDescriptor;
  getOwnPropertyNamesModule$2.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
  getOwnPropertySymbolsModule$2.f = $getOwnPropertySymbols;
  wrappedWellKnownSymbolModule.f = function(name) {
    return wrap(wellKnownSymbol$6(name), name);
  };
  if (DESCRIPTORS$8) {
    defineBuiltInAccessor$2(SymbolPrototype, "description", {
      configurable: true,
      get: function description() {
        return getInternalState(this).description;
      }
    });
  }
}
$$I({ global: true, constructor: true, wrap: true, forced: !NATIVE_SYMBOL$3, sham: !NATIVE_SYMBOL$3 }, {
  Symbol: $Symbol
});
$forEach$1(objectKeys(WellKnownSymbolsStore$1), function(name) {
  defineWellKnownSymbol$l(name);
});
$$I({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL$3 }, {
  useSetter: function() {
    USE_SETTER = true;
  },
  useSimple: function() {
    USE_SETTER = false;
  }
});
$$I({ target: "Object", stat: true, forced: !NATIVE_SYMBOL$3, sham: !DESCRIPTORS$8 }, {
  // `Object.create` method
  // https://tc39.es/ecma262/#sec-object.create
  create: $create,
  // `Object.defineProperty` method
  // https://tc39.es/ecma262/#sec-object.defineproperty
  defineProperty: $defineProperty,
  // `Object.defineProperties` method
  // https://tc39.es/ecma262/#sec-object.defineproperties
  defineProperties: $defineProperties,
  // `Object.getOwnPropertyDescriptor` method
  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
});
$$I({ target: "Object", stat: true, forced: !NATIVE_SYMBOL$3 }, {
  // `Object.getOwnPropertyNames` method
  // https://tc39.es/ecma262/#sec-object.getownpropertynames
  getOwnPropertyNames: $getOwnPropertyNames
});
defineSymbolToPrimitive$1();
setToStringTag$3($Symbol, SYMBOL);
hiddenKeys$1[HIDDEN] = true;
var NATIVE_SYMBOL$2 = symbolConstructorDetection;
var symbolRegistryDetection = NATIVE_SYMBOL$2 && !!Symbol["for"] && !!Symbol.keyFor;
var $$H = _export;
var getBuiltIn$7 = getBuiltIn$c;
var hasOwn$6 = hasOwnProperty_1;
var toString$6 = toString$a;
var shared$2 = sharedExports;
var NATIVE_SYMBOL_REGISTRY$1 = symbolRegistryDetection;
var StringToSymbolRegistry = shared$2("string-to-symbol-registry");
var SymbolToStringRegistry$1 = shared$2("symbol-to-string-registry");
$$H({ target: "Symbol", stat: true, forced: !NATIVE_SYMBOL_REGISTRY$1 }, {
  "for": function(key2) {
    var string2 = toString$6(key2);
    if (hasOwn$6(StringToSymbolRegistry, string2)) return StringToSymbolRegistry[string2];
    var symbol2 = getBuiltIn$7("Symbol")(string2);
    StringToSymbolRegistry[string2] = symbol2;
    SymbolToStringRegistry$1[symbol2] = string2;
    return symbol2;
  }
});
var $$G = _export;
var hasOwn$5 = hasOwnProperty_1;
var isSymbol$2 = isSymbol$5;
var tryToString$3 = tryToString$6;
var shared$1 = sharedExports;
var NATIVE_SYMBOL_REGISTRY = symbolRegistryDetection;
var SymbolToStringRegistry = shared$1("symbol-to-string-registry");
$$G({ target: "Symbol", stat: true, forced: !NATIVE_SYMBOL_REGISTRY }, {
  keyFor: function keyFor3(sym) {
    if (!isSymbol$2(sym)) throw new TypeError(tryToString$3(sym) + " is not a symbol");
    if (hasOwn$5(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
  }
});
var uncurryThis$f = functionUncurryThis;
var isArray$b = isArray$e;
var isCallable$3 = isCallable$i;
var classof$5 = classofRaw$2;
var toString$5 = toString$a;
var push$8 = uncurryThis$f([].push);
var getJsonReplacerFunction = function(replacer2) {
  if (isCallable$3(replacer2)) return replacer2;
  if (!isArray$b(replacer2)) return;
  var rawLength = replacer2.length;
  var keys6 = [];
  for (var i2 = 0; i2 < rawLength; i2++) {
    var element = replacer2[i2];
    if (typeof element == "string") push$8(keys6, element);
    else if (typeof element == "number" || classof$5(element) === "Number" || classof$5(element) === "String") push$8(keys6, toString$5(element));
  }
  var keysLength = keys6.length;
  var root = true;
  return function(key2, value2) {
    if (root) {
      root = false;
      return value2;
    }
    if (isArray$b(this)) return value2;
    for (var j2 = 0; j2 < keysLength; j2++) if (keys6[j2] === key2) return value2;
  };
};
var $$F = _export;
var getBuiltIn$6 = getBuiltIn$c;
var apply$3 = functionApply;
var call$2 = functionCall;
var uncurryThis$e = functionUncurryThis;
var fails$h = fails$w;
var isCallable$2 = isCallable$i;
var isSymbol$1 = isSymbol$5;
var arraySlice$2 = arraySlice$5;
var getReplacerFunction = getJsonReplacerFunction;
var NATIVE_SYMBOL$1 = symbolConstructorDetection;
var $String = String;
var $stringify = getBuiltIn$6("JSON", "stringify");
var exec$1 = uncurryThis$e(/./.exec);
var charAt$1 = uncurryThis$e("".charAt);
var charCodeAt = uncurryThis$e("".charCodeAt);
var replace$1 = uncurryThis$e("".replace);
var numberToString = uncurryThis$e(1 .toString);
var tester = /[\uD800-\uDFFF]/g;
var low = /^[\uD800-\uDBFF]$/;
var hi = /^[\uDC00-\uDFFF]$/;
var WRONG_SYMBOLS_CONVERSION = !NATIVE_SYMBOL$1 || fails$h(function() {
  var symbol2 = getBuiltIn$6("Symbol")("stringify detection");
  return $stringify([symbol2]) !== "[null]" || $stringify({ a: symbol2 }) !== "{}" || $stringify(Object(symbol2)) !== "{}";
});
var ILL_FORMED_UNICODE = fails$h(function() {
  return $stringify("\uDF06\uD834") !== '"\\udf06\\ud834"' || $stringify("\uDEAD") !== '"\\udead"';
});
var stringifyWithSymbolsFix = function(it2, replacer2) {
  var args = arraySlice$2(arguments);
  var $replacer = getReplacerFunction(replacer2);
  if (!isCallable$2($replacer) && (it2 === void 0 || isSymbol$1(it2))) return;
  args[1] = function(key2, value2) {
    if (isCallable$2($replacer)) value2 = call$2($replacer, this, $String(key2), value2);
    if (!isSymbol$1(value2)) return value2;
  };
  return apply$3($stringify, null, args);
};
var fixIllFormed = function(match2, offset2, string2) {
  var prev = charAt$1(string2, offset2 - 1);
  var next4 = charAt$1(string2, offset2 + 1);
  if (exec$1(low, match2) && !exec$1(hi, next4) || exec$1(hi, match2) && !exec$1(low, prev)) {
    return "\\u" + numberToString(charCodeAt(match2, 0), 16);
  }
  return match2;
};
if ($stringify) {
  $$F({ target: "JSON", stat: true, arity: 3, forced: WRONG_SYMBOLS_CONVERSION || ILL_FORMED_UNICODE }, {
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    stringify: function stringify4(it2, replacer2, space) {
      var args = arraySlice$2(arguments);
      var result = apply$3(WRONG_SYMBOLS_CONVERSION ? stringifyWithSymbolsFix : $stringify, null, args);
      return ILL_FORMED_UNICODE && typeof result == "string" ? replace$1(result, tester, fixIllFormed) : result;
    }
  });
}
var $$E = _export;
var NATIVE_SYMBOL = symbolConstructorDetection;
var fails$g = fails$w;
var getOwnPropertySymbolsModule$1 = objectGetOwnPropertySymbols;
var toObject$7 = toObject$e;
var FORCED$9 = !NATIVE_SYMBOL || fails$g(function() {
  getOwnPropertySymbolsModule$1.f(1);
});
$$E({ target: "Object", stat: true, forced: FORCED$9 }, {
  getOwnPropertySymbols: function getOwnPropertySymbols3(it2) {
    var $getOwnPropertySymbols2 = getOwnPropertySymbolsModule$1.f;
    return $getOwnPropertySymbols2 ? $getOwnPropertySymbols2(toObject$7(it2)) : [];
  }
});
var defineWellKnownSymbol$k = wellKnownSymbolDefine;
defineWellKnownSymbol$k("asyncIterator");
var defineWellKnownSymbol$j = wellKnownSymbolDefine;
defineWellKnownSymbol$j("hasInstance");
var defineWellKnownSymbol$i = wellKnownSymbolDefine;
defineWellKnownSymbol$i("isConcatSpreadable");
var defineWellKnownSymbol$h = wellKnownSymbolDefine;
defineWellKnownSymbol$h("iterator");
var defineWellKnownSymbol$g = wellKnownSymbolDefine;
defineWellKnownSymbol$g("match");
var defineWellKnownSymbol$f = wellKnownSymbolDefine;
defineWellKnownSymbol$f("matchAll");
var defineWellKnownSymbol$e = wellKnownSymbolDefine;
defineWellKnownSymbol$e("replace");
var defineWellKnownSymbol$d = wellKnownSymbolDefine;
defineWellKnownSymbol$d("search");
var defineWellKnownSymbol$c = wellKnownSymbolDefine;
defineWellKnownSymbol$c("species");
var defineWellKnownSymbol$b = wellKnownSymbolDefine;
defineWellKnownSymbol$b("split");
var defineWellKnownSymbol$a = wellKnownSymbolDefine;
var defineSymbolToPrimitive = symbolDefineToPrimitive;
defineWellKnownSymbol$a("toPrimitive");
defineSymbolToPrimitive();
var getBuiltIn$5 = getBuiltIn$c;
var defineWellKnownSymbol$9 = wellKnownSymbolDefine;
var setToStringTag$2 = setToStringTag$6;
defineWellKnownSymbol$9("toStringTag");
setToStringTag$2(getBuiltIn$5("Symbol"), "Symbol");
var defineWellKnownSymbol$8 = wellKnownSymbolDefine;
defineWellKnownSymbol$8("unscopables");
var global$a = global$n;
var setToStringTag$1 = setToStringTag$6;
setToStringTag$1(global$a.JSON, "JSON", true);
var path$o = path$w;
var symbol$5 = path$o.Symbol;
var parent$12 = symbol$5;
var symbol$4 = parent$12;
var wellKnownSymbol$5 = wellKnownSymbol$m;
var defineProperty$3 = objectDefineProperty.f;
var METADATA$1 = wellKnownSymbol$5("metadata");
var FunctionPrototype = Function.prototype;
if (FunctionPrototype[METADATA$1] === void 0) {
  defineProperty$3(FunctionPrototype, METADATA$1, {
    value: null
  });
}
var defineWellKnownSymbol$7 = wellKnownSymbolDefine;
defineWellKnownSymbol$7("asyncDispose");
var defineWellKnownSymbol$6 = wellKnownSymbolDefine;
defineWellKnownSymbol$6("dispose");
var defineWellKnownSymbol$5 = wellKnownSymbolDefine;
defineWellKnownSymbol$5("metadata");
var parent$11 = symbol$4;
var symbol$3 = parent$11;
var getBuiltIn$4 = getBuiltIn$c;
var uncurryThis$d = functionUncurryThis;
var Symbol$4 = getBuiltIn$4("Symbol");
var keyFor = Symbol$4.keyFor;
var thisSymbolValue$1 = uncurryThis$d(Symbol$4.prototype.valueOf);
var symbolIsRegistered = Symbol$4.isRegisteredSymbol || function isRegisteredSymbol3(value2) {
  try {
    return keyFor(thisSymbolValue$1(value2)) !== void 0;
  } catch (error) {
    return false;
  }
};
var $$D = _export;
var isRegisteredSymbol$1 = symbolIsRegistered;
$$D({ target: "Symbol", stat: true }, {
  isRegisteredSymbol: isRegisteredSymbol$1
});
var shared = sharedExports;
var getBuiltIn$3 = getBuiltIn$c;
var uncurryThis$c = functionUncurryThis;
var isSymbol = isSymbol$5;
var wellKnownSymbol$4 = wellKnownSymbol$m;
var Symbol$3 = getBuiltIn$3("Symbol");
var $isWellKnownSymbol = Symbol$3.isWellKnownSymbol;
var getOwnPropertyNames$4 = getBuiltIn$3("Object", "getOwnPropertyNames");
var thisSymbolValue = uncurryThis$c(Symbol$3.prototype.valueOf);
var WellKnownSymbolsStore = shared("wks");
for (var i$1 = 0, symbolKeys = getOwnPropertyNames$4(Symbol$3), symbolKeysLength = symbolKeys.length; i$1 < symbolKeysLength; i$1++) {
  try {
    var symbolKey = symbolKeys[i$1];
    if (isSymbol(Symbol$3[symbolKey])) wellKnownSymbol$4(symbolKey);
  } catch (error) {
  }
}
var symbolIsWellKnown = function isWellKnownSymbol3(value2) {
  if ($isWellKnownSymbol && $isWellKnownSymbol(value2)) return true;
  try {
    var symbol2 = thisSymbolValue(value2);
    for (var j2 = 0, keys6 = getOwnPropertyNames$4(WellKnownSymbolsStore), keysLength = keys6.length; j2 < keysLength; j2++) {
      if (WellKnownSymbolsStore[keys6[j2]] == symbol2) return true;
    }
  } catch (error) {
  }
  return false;
};
var $$C = _export;
var isWellKnownSymbol$1 = symbolIsWellKnown;
$$C({ target: "Symbol", stat: true, forced: true }, {
  isWellKnownSymbol: isWellKnownSymbol$1
});
var defineWellKnownSymbol$4 = wellKnownSymbolDefine;
defineWellKnownSymbol$4("matcher");
var defineWellKnownSymbol$3 = wellKnownSymbolDefine;
defineWellKnownSymbol$3("observable");
var $$B = _export;
var isRegisteredSymbol = symbolIsRegistered;
$$B({ target: "Symbol", stat: true, name: "isRegisteredSymbol" }, {
  isRegistered: isRegisteredSymbol
});
var $$A = _export;
var isWellKnownSymbol = symbolIsWellKnown;
$$A({ target: "Symbol", stat: true, name: "isWellKnownSymbol", forced: true }, {
  isWellKnown: isWellKnownSymbol
});
var defineWellKnownSymbol$2 = wellKnownSymbolDefine;
defineWellKnownSymbol$2("metadataKey");
var defineWellKnownSymbol$1 = wellKnownSymbolDefine;
defineWellKnownSymbol$1("patternMatch");
var defineWellKnownSymbol = wellKnownSymbolDefine;
defineWellKnownSymbol("replaceAll");
var parent$10 = symbol$3;
var symbol$2 = parent$10;
var symbol$1 = symbol$2;
var _Symbol$1 = /* @__PURE__ */ getDefaultExportFromCjs(symbol$1);
var WrappedWellKnownSymbolModule$1 = wellKnownSymbolWrapped;
var iterator$4 = WrappedWellKnownSymbolModule$1.f("iterator");
var parent$$ = iterator$4;
var iterator$3 = parent$$;
var parent$_ = iterator$3;
var iterator$2 = parent$_;
var parent$Z = iterator$2;
var iterator$1 = parent$Z;
var iterator = iterator$1;
var _Symbol$iterator = /* @__PURE__ */ getDefaultExportFromCjs(iterator);
function _typeof(o2) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof _Symbol$1 && "symbol" == typeof _Symbol$iterator ? function(o3) {
    return typeof o3;
  } : function(o3) {
    return o3 && "function" == typeof _Symbol$1 && o3.constructor === _Symbol$1 && o3 !== _Symbol$1.prototype ? "symbol" : typeof o3;
  }, _typeof(o2);
}
var WrappedWellKnownSymbolModule = wellKnownSymbolWrapped;
var toPrimitive$4 = WrappedWellKnownSymbolModule.f("toPrimitive");
var parent$Y = toPrimitive$4;
var toPrimitive$3 = parent$Y;
var parent$X = toPrimitive$3;
var toPrimitive$2 = parent$X;
var parent$W = toPrimitive$2;
var toPrimitive$1 = parent$W;
var toPrimitive = toPrimitive$1;
var _Symbol$toPrimitive = /* @__PURE__ */ getDefaultExportFromCjs(toPrimitive);
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null) return input;
  var prim = input[_Symbol$toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key2 = _toPrimitive(arg, "string");
  return _typeof(key2) === "symbol" ? key2 : String(key2);
}
function _defineProperties(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    _Object$defineProperty$1(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  _Object$defineProperty$1(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
var $$z = _export;
var isArray$a = isArray$e;
$$z({ target: "Array", stat: true }, {
  isArray: isArray$a
});
var path$n = path$w;
var isArray$9 = path$n.Array.isArray;
var parent$V = isArray$9;
var isArray$8 = parent$V;
var parent$U = isArray$8;
var isArray$7 = parent$U;
var parent$T = isArray$7;
var isArray$6 = parent$T;
var isArray$5 = isArray$6;
var _Array$isArray$1 = /* @__PURE__ */ getDefaultExportFromCjs(isArray$5);
function _arrayWithHoles(arr) {
  if (_Array$isArray$1(arr)) return arr;
}
var DESCRIPTORS$7 = descriptors;
var isArray$4 = isArray$e;
var $TypeError$7 = TypeError;
var getOwnPropertyDescriptor$7 = Object.getOwnPropertyDescriptor;
var SILENT_ON_NON_WRITABLE_LENGTH_SET = DESCRIPTORS$7 && !function() {
  if (this !== void 0) return true;
  try {
    Object.defineProperty([], "length", { writable: false }).length = 1;
  } catch (error) {
    return error instanceof TypeError;
  }
}();
var arraySetLength = SILENT_ON_NON_WRITABLE_LENGTH_SET ? function(O, length2) {
  if (isArray$4(O) && !getOwnPropertyDescriptor$7(O, "length").writable) {
    throw new $TypeError$7("Cannot set read only .length");
  }
  return O.length = length2;
} : function(O, length2) {
  return O.length = length2;
};
var $$y = _export;
var toObject$6 = toObject$e;
var lengthOfArrayLike$6 = lengthOfArrayLike$c;
var setArrayLength$1 = arraySetLength;
var doesNotExceedSafeInteger$1 = doesNotExceedSafeInteger$3;
var fails$f = fails$w;
var INCORRECT_TO_LENGTH = fails$f(function() {
  return [].push.call({ length: 4294967296 }, 1) !== 4294967297;
});
var properErrorOnNonWritableLength = function() {
  try {
    Object.defineProperty([], "length", { writable: false }).push();
  } catch (error) {
    return error instanceof TypeError;
  }
};
var FORCED$8 = INCORRECT_TO_LENGTH || !properErrorOnNonWritableLength();
$$y({ target: "Array", proto: true, arity: 1, forced: FORCED$8 }, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  push: function push3(item) {
    var O = toObject$6(this);
    var len = lengthOfArrayLike$6(O);
    var argCount = arguments.length;
    doesNotExceedSafeInteger$1(len + argCount);
    for (var i2 = 0; i2 < argCount; i2++) {
      O[len] = arguments[i2];
      len++;
    }
    setArrayLength$1(O, len);
    return len;
  }
});
var entryVirtual$g = entryVirtual$i;
var push$7 = entryVirtual$g("Array").push;
var isPrototypeOf$h = objectIsPrototypeOf;
var method$e = push$7;
var ArrayPrototype$f = Array.prototype;
var push$6 = function(it2) {
  var own = it2.push;
  return it2 === ArrayPrototype$f || isPrototypeOf$h(ArrayPrototype$f, it2) && own === ArrayPrototype$f.push ? method$e : own;
};
var parent$S = push$6;
var push$5 = parent$S;
var parent$R = push$5;
var push$4 = parent$R;
var parent$Q = push$4;
var push$3 = parent$Q;
var push$2 = push$3;
var _pushInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(push$2);
function _iterableToArrayLimit(r2, l2) {
  var t2 = null == r2 ? null : "undefined" != typeof _Symbol$1 && _getIteratorMethod$1(r2) || r2["@@iterator"];
  if (null != t2) {
    var e2, n2, i2, u2, a2 = [], f2 = true, o2 = false;
    try {
      if (i2 = (t2 = t2.call(r2)).next, 0 === l2) {
        if (Object(t2) !== t2) return;
        f2 = false;
      } else for (; !(f2 = (e2 = i2.call(t2)).done) && (_pushInstanceProperty(a2).call(a2, e2.value), a2.length !== l2); f2 = true) ;
    } catch (r3) {
      o2 = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2)) return;
      } finally {
        if (o2) throw n2;
      }
    }
    return a2;
  }
}
var $$x = _export;
var isArray$3 = isArray$e;
var isConstructor$1 = isConstructor$4;
var isObject$9 = isObject$j;
var toAbsoluteIndex$2 = toAbsoluteIndex$5;
var lengthOfArrayLike$5 = lengthOfArrayLike$c;
var toIndexedObject$2 = toIndexedObject$a;
var createProperty$2 = createProperty$6;
var wellKnownSymbol$3 = wellKnownSymbol$m;
var arrayMethodHasSpeciesSupport$3 = arrayMethodHasSpeciesSupport$5;
var nativeSlice = arraySlice$5;
var HAS_SPECIES_SUPPORT$3 = arrayMethodHasSpeciesSupport$3("slice");
var SPECIES$1 = wellKnownSymbol$3("species");
var $Array = Array;
var max$1 = Math.max;
$$x({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT$3 }, {
  slice: function slice3(start2, end2) {
    var O = toIndexedObject$2(this);
    var length2 = lengthOfArrayLike$5(O);
    var k2 = toAbsoluteIndex$2(start2, length2);
    var fin = toAbsoluteIndex$2(end2 === void 0 ? length2 : end2, length2);
    var Constructor, result, n2;
    if (isArray$3(O)) {
      Constructor = O.constructor;
      if (isConstructor$1(Constructor) && (Constructor === $Array || isArray$3(Constructor.prototype))) {
        Constructor = void 0;
      } else if (isObject$9(Constructor)) {
        Constructor = Constructor[SPECIES$1];
        if (Constructor === null) Constructor = void 0;
      }
      if (Constructor === $Array || Constructor === void 0) {
        return nativeSlice(O, k2, fin);
      }
    }
    result = new (Constructor === void 0 ? $Array : Constructor)(max$1(fin - k2, 0));
    for (n2 = 0; k2 < fin; k2++, n2++) if (k2 in O) createProperty$2(result, n2, O[k2]);
    result.length = n2;
    return result;
  }
});
var entryVirtual$f = entryVirtual$i;
var slice$6 = entryVirtual$f("Array").slice;
var isPrototypeOf$g = objectIsPrototypeOf;
var method$d = slice$6;
var ArrayPrototype$e = Array.prototype;
var slice$5 = function(it2) {
  var own = it2.slice;
  return it2 === ArrayPrototype$e || isPrototypeOf$g(ArrayPrototype$e, it2) && own === ArrayPrototype$e.slice ? method$d : own;
};
var parent$P = slice$5;
var slice$4 = parent$P;
var parent$O = slice$4;
var slice$3 = parent$O;
var parent$N = slice$3;
var slice$2 = parent$N;
var slice$1 = slice$2;
var _sliceInstanceProperty$1 = /* @__PURE__ */ getDefaultExportFromCjs(slice$1);
var parent$M = from$4;
var from$2 = parent$M;
var parent$L = from$2;
var from$1 = parent$L;
var from = from$1;
var _Array$from = /* @__PURE__ */ getDefaultExportFromCjs(from);
function _arrayLikeToArray$7(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
  return arr2;
}
function _unsupportedIterableToArray$7(o2, minLen) {
  var _context;
  if (!o2) return;
  if (typeof o2 === "string") return _arrayLikeToArray$7(o2, minLen);
  var n2 = _sliceInstanceProperty$1(_context = Object.prototype.toString.call(o2)).call(_context, 8, -1);
  if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set") return _Array$from(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$7(o2, minLen);
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(arr, i2) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray$7(arr, i2) || _nonIterableRest();
}
function _arrayWithoutHoles(arr) {
  if (_Array$isArray$1(arr)) return _arrayLikeToArray$7(arr);
}
function _iterableToArray(iter) {
  if (typeof _Symbol$1 !== "undefined" && _getIteratorMethod$1(iter) != null || iter["@@iterator"] != null) return _Array$from(iter);
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$7(arr) || _nonIterableSpread();
}
var symbol = symbol$4;
var _Symbol = /* @__PURE__ */ getDefaultExportFromCjs(symbol);
var entryVirtual$e = entryVirtual$i;
var concat$4 = entryVirtual$e("Array").concat;
var isPrototypeOf$f = objectIsPrototypeOf;
var method$c = concat$4;
var ArrayPrototype$d = Array.prototype;
var concat$3 = function(it2) {
  var own = it2.concat;
  return it2 === ArrayPrototype$d || isPrototypeOf$f(ArrayPrototype$d, it2) && own === ArrayPrototype$d.concat ? method$c : own;
};
var parent$K = concat$3;
var concat$2 = parent$K;
var concat$1 = concat$2;
var _concatInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(concat$1);
var slice = slice$4;
var _sliceInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(slice);
var getBuiltIn$2 = getBuiltIn$c;
var uncurryThis$b = functionUncurryThis;
var getOwnPropertyNamesModule$1 = objectGetOwnPropertyNames;
var getOwnPropertySymbolsModule = objectGetOwnPropertySymbols;
var anObject$4 = anObject$d;
var concat = uncurryThis$b([].concat);
var ownKeys$5 = getBuiltIn$2("Reflect", "ownKeys") || function ownKeys3(it2) {
  var keys6 = getOwnPropertyNamesModule$1.f(anObject$4(it2));
  var getOwnPropertySymbols4 = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols4 ? concat(keys6, getOwnPropertySymbols4(it2)) : keys6;
};
var isArray$2 = isArray$8;
var _Array$isArray = /* @__PURE__ */ getDefaultExportFromCjs(isArray$2);
var $$w = _export;
var $map = arrayIteration.map;
var arrayMethodHasSpeciesSupport$2 = arrayMethodHasSpeciesSupport$5;
var HAS_SPECIES_SUPPORT$2 = arrayMethodHasSpeciesSupport$2("map");
$$w({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT$2 }, {
  map: function map3(callbackfn) {
    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
  }
});
var entryVirtual$d = entryVirtual$i;
var map$6 = entryVirtual$d("Array").map;
var isPrototypeOf$e = objectIsPrototypeOf;
var method$b = map$6;
var ArrayPrototype$c = Array.prototype;
var map$5 = function(it2) {
  var own = it2.map;
  return it2 === ArrayPrototype$c || isPrototypeOf$e(ArrayPrototype$c, it2) && own === ArrayPrototype$c.map ? method$b : own;
};
var parent$J = map$5;
var map$4 = parent$J;
var map$3 = map$4;
var _mapInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(map$3);
var $$v = _export;
var toObject$5 = toObject$e;
var nativeKeys = objectKeys$3;
var fails$e = fails$w;
var FAILS_ON_PRIMITIVES$3 = fails$e(function() {
  nativeKeys(1);
});
$$v({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES$3 }, {
  keys: function keys5(it2) {
    return nativeKeys(toObject$5(it2));
  }
});
var path$m = path$w;
var keys$2 = path$m.Object.keys;
var parent$I = keys$2;
var keys$1 = parent$I;
var keys = keys$1;
var _Object$keys = /* @__PURE__ */ getDefaultExportFromCjs(keys);
var $$u = _export;
var uncurryThis$a = functionUncurryThis;
var $Date = Date;
var thisTimeValue = uncurryThis$a($Date.prototype.getTime);
$$u({ target: "Date", stat: true }, {
  now: function now2() {
    return thisTimeValue(new $Date());
  }
});
var path$l = path$w;
var now$3 = path$l.Date.now;
var parent$H = now$3;
var now$2 = parent$H;
var now$1 = now$2;
var _Date$now = /* @__PURE__ */ getDefaultExportFromCjs(now$1);
var fails$d = fails$w;
var arrayMethodIsStrict$6 = function(METHOD_NAME, argument) {
  var method2 = [][METHOD_NAME];
  return !!method2 && fails$d(function() {
    method2.call(null, argument || function() {
      return 1;
    }, 1);
  });
};
var $forEach = arrayIteration.forEach;
var arrayMethodIsStrict$5 = arrayMethodIsStrict$6;
var STRICT_METHOD$3 = arrayMethodIsStrict$5("forEach");
var arrayForEach = !STRICT_METHOD$3 ? function forEach4(callbackfn) {
  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
} : [].forEach;
var $$t = _export;
var forEach$6 = arrayForEach;
$$t({ target: "Array", proto: true, forced: [].forEach !== forEach$6 }, {
  forEach: forEach$6
});
var entryVirtual$c = entryVirtual$i;
var forEach$5 = entryVirtual$c("Array").forEach;
var parent$G = forEach$5;
var forEach$4 = parent$G;
var classof$4 = classof$d;
var hasOwn$4 = hasOwnProperty_1;
var isPrototypeOf$d = objectIsPrototypeOf;
var method$a = forEach$4;
var ArrayPrototype$b = Array.prototype;
var DOMIterables$1 = {
  DOMTokenList: true,
  NodeList: true
};
var forEach$3 = function(it2) {
  var own = it2.forEach;
  return it2 === ArrayPrototype$b || isPrototypeOf$d(ArrayPrototype$b, it2) && own === ArrayPrototype$b.forEach || hasOwn$4(DOMIterables$1, classof$4(it2)) ? method$a : own;
};
var forEach$2 = forEach$3;
var _forEachInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(forEach$2);
var $$s = _export;
var uncurryThis$9 = functionUncurryThis;
var isArray$1 = isArray$e;
var nativeReverse = uncurryThis$9([].reverse);
var test$1 = [1, 2];
$$s({ target: "Array", proto: true, forced: String(test$1) === String(test$1.reverse()) }, {
  reverse: function reverse3() {
    if (isArray$1(this)) this.length = this.length;
    return nativeReverse(this);
  }
});
var entryVirtual$b = entryVirtual$i;
var reverse$3 = entryVirtual$b("Array").reverse;
var isPrototypeOf$c = objectIsPrototypeOf;
var method$9 = reverse$3;
var ArrayPrototype$a = Array.prototype;
var reverse$2 = function(it2) {
  var own = it2.reverse;
  return it2 === ArrayPrototype$a || isPrototypeOf$c(ArrayPrototype$a, it2) && own === ArrayPrototype$a.reverse ? method$9 : own;
};
var parent$F = reverse$2;
var reverse$1 = parent$F;
var reverse = reverse$1;
var _reverseInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(reverse);
var tryToString$2 = tryToString$6;
var $TypeError$6 = TypeError;
var deletePropertyOrThrow$2 = function(O, P) {
  if (!delete O[P]) throw new $TypeError$6("Cannot delete property " + tryToString$2(P) + " of " + tryToString$2(O));
};
var $$r = _export;
var toObject$4 = toObject$e;
var toAbsoluteIndex$1 = toAbsoluteIndex$5;
var toIntegerOrInfinity = toIntegerOrInfinity$4;
var lengthOfArrayLike$4 = lengthOfArrayLike$c;
var setArrayLength = arraySetLength;
var doesNotExceedSafeInteger = doesNotExceedSafeInteger$3;
var arraySpeciesCreate = arraySpeciesCreate$3;
var createProperty$1 = createProperty$6;
var deletePropertyOrThrow$1 = deletePropertyOrThrow$2;
var arrayMethodHasSpeciesSupport$1 = arrayMethodHasSpeciesSupport$5;
var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport$1("splice");
var max = Math.max;
var min = Math.min;
$$r({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT$1 }, {
  splice: function splice3(start2, deleteCount) {
    var O = toObject$4(this);
    var len = lengthOfArrayLike$4(O);
    var actualStart = toAbsoluteIndex$1(start2, len);
    var argumentsLength = arguments.length;
    var insertCount, actualDeleteCount, A, k2, from4, to;
    if (argumentsLength === 0) {
      insertCount = actualDeleteCount = 0;
    } else if (argumentsLength === 1) {
      insertCount = 0;
      actualDeleteCount = len - actualStart;
    } else {
      insertCount = argumentsLength - 2;
      actualDeleteCount = min(max(toIntegerOrInfinity(deleteCount), 0), len - actualStart);
    }
    doesNotExceedSafeInteger(len + insertCount - actualDeleteCount);
    A = arraySpeciesCreate(O, actualDeleteCount);
    for (k2 = 0; k2 < actualDeleteCount; k2++) {
      from4 = actualStart + k2;
      if (from4 in O) createProperty$1(A, k2, O[from4]);
    }
    A.length = actualDeleteCount;
    if (insertCount < actualDeleteCount) {
      for (k2 = actualStart; k2 < len - actualDeleteCount; k2++) {
        from4 = k2 + actualDeleteCount;
        to = k2 + insertCount;
        if (from4 in O) O[to] = O[from4];
        else deletePropertyOrThrow$1(O, to);
      }
      for (k2 = len; k2 > len - actualDeleteCount + insertCount; k2--) deletePropertyOrThrow$1(O, k2 - 1);
    } else if (insertCount > actualDeleteCount) {
      for (k2 = len - actualDeleteCount; k2 > actualStart; k2--) {
        from4 = k2 + actualDeleteCount - 1;
        to = k2 + insertCount - 1;
        if (from4 in O) O[to] = O[from4];
        else deletePropertyOrThrow$1(O, to);
      }
    }
    for (k2 = 0; k2 < insertCount; k2++) {
      O[k2 + actualStart] = arguments[k2 + 2];
    }
    setArrayLength(O, len - actualDeleteCount + insertCount);
    return A;
  }
});
var entryVirtual$a = entryVirtual$i;
var splice$4 = entryVirtual$a("Array").splice;
var isPrototypeOf$b = objectIsPrototypeOf;
var method$8 = splice$4;
var ArrayPrototype$9 = Array.prototype;
var splice$3 = function(it2) {
  var own = it2.splice;
  return it2 === ArrayPrototype$9 || isPrototypeOf$b(ArrayPrototype$9, it2) && own === ArrayPrototype$9.splice ? method$8 : own;
};
var parent$E = splice$3;
var splice$2 = parent$E;
var splice$1 = splice$2;
var _spliceInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(splice$1);
var $$q = _export;
var $includes = arrayIncludes.includes;
var fails$c = fails$w;
var BROKEN_ON_SPARSE = fails$c(function() {
  return !Array(1).includes();
});
$$q({ target: "Array", proto: true, forced: BROKEN_ON_SPARSE }, {
  includes: function includes2(el) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : void 0);
  }
});
var entryVirtual$9 = entryVirtual$i;
var includes$4 = entryVirtual$9("Array").includes;
var isObject$8 = isObject$j;
var classof$3 = classofRaw$2;
var wellKnownSymbol$2 = wellKnownSymbol$m;
var MATCH$1 = wellKnownSymbol$2("match");
var isRegexp = function(it2) {
  var isRegExp2;
  return isObject$8(it2) && ((isRegExp2 = it2[MATCH$1]) !== void 0 ? !!isRegExp2 : classof$3(it2) === "RegExp");
};
var isRegExp = isRegexp;
var $TypeError$5 = TypeError;
var notARegexp = function(it2) {
  if (isRegExp(it2)) {
    throw new $TypeError$5("The method doesn't accept regular expressions");
  }
  return it2;
};
var wellKnownSymbol$1 = wellKnownSymbol$m;
var MATCH = wellKnownSymbol$1("match");
var correctIsRegexpLogic = function(METHOD_NAME) {
  var regexp = /./;
  try {
    "/./"[METHOD_NAME](regexp);
  } catch (error1) {
    try {
      regexp[MATCH] = false;
      return "/./"[METHOD_NAME](regexp);
    } catch (error2) {
    }
  }
  return false;
};
var $$p = _export;
var uncurryThis$8 = functionUncurryThis;
var notARegExp = notARegexp;
var requireObjectCoercible$1 = requireObjectCoercible$5;
var toString$4 = toString$a;
var correctIsRegExpLogic = correctIsRegexpLogic;
var stringIndexOf = uncurryThis$8("".indexOf);
$$p({ target: "String", proto: true, forced: !correctIsRegExpLogic("includes") }, {
  includes: function includes3(searchString) {
    return !!~stringIndexOf(
      toString$4(requireObjectCoercible$1(this)),
      toString$4(notARegExp(searchString)),
      arguments.length > 1 ? arguments[1] : void 0
    );
  }
});
var entryVirtual$8 = entryVirtual$i;
var includes$3 = entryVirtual$8("String").includes;
var isPrototypeOf$a = objectIsPrototypeOf;
var arrayMethod = includes$4;
var stringMethod = includes$3;
var ArrayPrototype$8 = Array.prototype;
var StringPrototype = String.prototype;
var includes$2 = function(it2) {
  var own = it2.includes;
  if (it2 === ArrayPrototype$8 || isPrototypeOf$a(ArrayPrototype$8, it2) && own === ArrayPrototype$8.includes) return arrayMethod;
  if (typeof it2 == "string" || it2 === StringPrototype || isPrototypeOf$a(StringPrototype, it2) && own === StringPrototype.includes) {
    return stringMethod;
  }
  return own;
};
var parent$D = includes$2;
var includes$1 = parent$D;
var includes$5 = includes$1;
var _includesInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(includes$5);
var $$o = _export;
var fails$b = fails$w;
var toObject$3 = toObject$e;
var nativeGetPrototypeOf = objectGetPrototypeOf;
var CORRECT_PROTOTYPE_GETTER = correctPrototypeGetter;
var FAILS_ON_PRIMITIVES$2 = fails$b(function() {
  nativeGetPrototypeOf(1);
});
$$o({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES$2, sham: !CORRECT_PROTOTYPE_GETTER }, {
  getPrototypeOf: function getPrototypeOf3(it2) {
    return nativeGetPrototypeOf(toObject$3(it2));
  }
});
var path$k = path$w;
var getPrototypeOf$6 = path$k.Object.getPrototypeOf;
var parent$C = getPrototypeOf$6;
var getPrototypeOf$5 = parent$C;
var getPrototypeOf$4 = getPrototypeOf$5;
var _Object$getPrototypeOf$1 = /* @__PURE__ */ getDefaultExportFromCjs(getPrototypeOf$4);
var $$n = _export;
var $filter = arrayIteration.filter;
var arrayMethodHasSpeciesSupport = arrayMethodHasSpeciesSupport$5;
var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("filter");
$$n({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
  filter: function filter3(callbackfn) {
    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
  }
});
var entryVirtual$7 = entryVirtual$i;
var filter$3 = entryVirtual$7("Array").filter;
var isPrototypeOf$9 = objectIsPrototypeOf;
var method$7 = filter$3;
var ArrayPrototype$7 = Array.prototype;
var filter$2 = function(it2) {
  var own = it2.filter;
  return it2 === ArrayPrototype$7 || isPrototypeOf$9(ArrayPrototype$7, it2) && own === ArrayPrototype$7.filter ? method$7 : own;
};
var parent$B = filter$2;
var filter$1 = parent$B;
var filter$4 = filter$1;
var _filterInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(filter$4);
var whitespaces$3 = "	\n\v\f\r                　\u2028\u2029\uFEFF";
var uncurryThis$7 = functionUncurryThis;
var requireObjectCoercible = requireObjectCoercible$5;
var toString$3 = toString$a;
var whitespaces$2 = whitespaces$3;
var replace = uncurryThis$7("".replace);
var ltrim = RegExp("^[" + whitespaces$2 + "]+");
var rtrim = RegExp("(^|[^" + whitespaces$2 + "])[" + whitespaces$2 + "]+$");
var createMethod$1 = function(TYPE) {
  return function($this) {
    var string2 = toString$3(requireObjectCoercible($this));
    if (TYPE & 1) string2 = replace(string2, ltrim, "");
    if (TYPE & 2) string2 = replace(string2, rtrim, "$1");
    return string2;
  };
};
var stringTrim = {
  // `String.prototype.{ trimLeft, trimStart }` methods
  // https://tc39.es/ecma262/#sec-string.prototype.trimstart
  start: createMethod$1(1),
  // `String.prototype.{ trimRight, trimEnd }` methods
  // https://tc39.es/ecma262/#sec-string.prototype.trimend
  end: createMethod$1(2),
  // `String.prototype.trim` method
  // https://tc39.es/ecma262/#sec-string.prototype.trim
  trim: createMethod$1(3)
};
var global$9 = global$n;
var fails$a = fails$w;
var uncurryThis$6 = functionUncurryThis;
var toString$2 = toString$a;
var trim$1 = stringTrim.trim;
var whitespaces$1 = whitespaces$3;
var $parseInt$1 = global$9.parseInt;
var Symbol$2 = global$9.Symbol;
var ITERATOR$1 = Symbol$2 && Symbol$2.iterator;
var hex = /^[+-]?0x/i;
var exec = uncurryThis$6(hex.exec);
var FORCED$7 = $parseInt$1(whitespaces$1 + "08") !== 8 || $parseInt$1(whitespaces$1 + "0x16") !== 22 || ITERATOR$1 && !fails$a(function() {
  $parseInt$1(Object(ITERATOR$1));
});
var numberParseInt = FORCED$7 ? function parseInt2(string2, radix) {
  var S = trim$1(toString$2(string2));
  return $parseInt$1(S, radix >>> 0 || (exec(hex, S) ? 16 : 10));
} : $parseInt$1;
var $$m = _export;
var $parseInt = numberParseInt;
$$m({ global: true, forced: parseInt !== $parseInt }, {
  parseInt: $parseInt
});
var path$j = path$w;
var _parseInt$3 = path$j.parseInt;
var parent$A = _parseInt$3;
var _parseInt$2 = parent$A;
var _parseInt = _parseInt$2;
var _parseInt$1 = /* @__PURE__ */ getDefaultExportFromCjs(_parseInt);
var $$l = _export;
var uncurryThis$5 = functionUncurryThisClause;
var $indexOf = arrayIncludes.indexOf;
var arrayMethodIsStrict$4 = arrayMethodIsStrict$6;
var nativeIndexOf = uncurryThis$5([].indexOf);
var NEGATIVE_ZERO = !!nativeIndexOf && 1 / nativeIndexOf([1], 1, -0) < 0;
var FORCED$6 = NEGATIVE_ZERO || !arrayMethodIsStrict$4("indexOf");
$$l({ target: "Array", proto: true, forced: FORCED$6 }, {
  indexOf: function indexOf2(searchElement) {
    var fromIndex = arguments.length > 1 ? arguments[1] : void 0;
    return NEGATIVE_ZERO ? nativeIndexOf(this, searchElement, fromIndex) || 0 : $indexOf(this, searchElement, fromIndex);
  }
});
var entryVirtual$6 = entryVirtual$i;
var indexOf$3 = entryVirtual$6("Array").indexOf;
var isPrototypeOf$8 = objectIsPrototypeOf;
var method$6 = indexOf$3;
var ArrayPrototype$6 = Array.prototype;
var indexOf$2 = function(it2) {
  var own = it2.indexOf;
  return it2 === ArrayPrototype$6 || isPrototypeOf$8(ArrayPrototype$6, it2) && own === ArrayPrototype$6.indexOf ? method$6 : own;
};
var parent$z = indexOf$2;
var indexOf$1 = parent$z;
var indexOf = indexOf$1;
var _indexOfInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(indexOf);
var $$k = _export;
var DESCRIPTORS$6 = descriptors;
var create$8 = objectCreate;
$$k({ target: "Object", stat: true, sham: !DESCRIPTORS$6 }, {
  create: create$8
});
var path$i = path$w;
var Object$4 = path$i.Object;
var create$7 = function create7(P, D) {
  return Object$4.create(P, D);
};
var parent$y = create$7;
var create$6 = parent$y;
var create$5 = create$6;
var _Object$create$1 = /* @__PURE__ */ getDefaultExportFromCjs(create$5);
var path$h = path$w;
var apply$2 = functionApply;
if (!path$h.JSON) path$h.JSON = { stringify: JSON.stringify };
var stringify$2 = function stringify3(it2, replacer2, space) {
  return apply$2(path$h.JSON.stringify, null, arguments);
};
var parent$x = stringify$2;
var stringify$1 = parent$x;
var stringify = stringify$1;
var _JSON$stringify = /* @__PURE__ */ getDefaultExportFromCjs(stringify);
var engineIsBun = typeof Bun == "function" && Bun && typeof Bun.version == "string";
var $TypeError$4 = TypeError;
var validateArgumentsLength$1 = function(passed, required) {
  if (passed < required) throw new $TypeError$4("Not enough arguments");
  return passed;
};
var global$8 = global$n;
var apply$1 = functionApply;
var isCallable$1 = isCallable$i;
var ENGINE_IS_BUN = engineIsBun;
var USER_AGENT = engineUserAgent;
var arraySlice$1 = arraySlice$5;
var validateArgumentsLength = validateArgumentsLength$1;
var Function$1 = global$8.Function;
var WRAP = /MSIE .\./.test(USER_AGENT) || ENGINE_IS_BUN && function() {
  var version2 = global$8.Bun.version.split(".");
  return version2.length < 3 || version2[0] === "0" && (version2[1] < 3 || version2[1] === "3" && version2[2] === "0");
}();
var schedulersFix$2 = function(scheduler, hasTimeArg) {
  var firstParamIndex = hasTimeArg ? 2 : 1;
  return WRAP ? function(handler, timeout) {
    var boundArgs = validateArgumentsLength(arguments.length, 1) > firstParamIndex;
    var fn2 = isCallable$1(handler) ? handler : Function$1(handler);
    var params = boundArgs ? arraySlice$1(arguments, firstParamIndex) : [];
    var callback = boundArgs ? function() {
      apply$1(fn2, this, params);
    } : fn2;
    return hasTimeArg ? scheduler(callback, timeout) : scheduler(callback);
  } : scheduler;
};
var $$j = _export;
var global$7 = global$n;
var schedulersFix$1 = schedulersFix$2;
var setInterval$2 = schedulersFix$1(global$7.setInterval, true);
$$j({ global: true, bind: true, forced: global$7.setInterval !== setInterval$2 }, {
  setInterval: setInterval$2
});
var $$i = _export;
var global$6 = global$n;
var schedulersFix = schedulersFix$2;
var setTimeout$3 = schedulersFix(global$6.setTimeout, true);
$$i({ global: true, bind: true, forced: global$6.setTimeout !== setTimeout$3 }, {
  setTimeout: setTimeout$3
});
var path$g = path$w;
var setTimeout$2 = path$g.setTimeout;
var setTimeout$1 = setTimeout$2;
var _setTimeout = /* @__PURE__ */ getDefaultExportFromCjs(setTimeout$1);
var toObject$2 = toObject$e;
var toAbsoluteIndex = toAbsoluteIndex$5;
var lengthOfArrayLike$3 = lengthOfArrayLike$c;
var arrayFill = function fill2(value2) {
  var O = toObject$2(this);
  var length2 = lengthOfArrayLike$3(O);
  var argumentsLength = arguments.length;
  var index2 = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : void 0, length2);
  var end2 = argumentsLength > 2 ? arguments[2] : void 0;
  var endPos = end2 === void 0 ? length2 : toAbsoluteIndex(end2, length2);
  while (endPos > index2) O[index2++] = value2;
  return O;
};
var $$h = _export;
var fill$4 = arrayFill;
$$h({ target: "Array", proto: true }, {
  fill: fill$4
});
var entryVirtual$5 = entryVirtual$i;
var fill$3 = entryVirtual$5("Array").fill;
var isPrototypeOf$7 = objectIsPrototypeOf;
var method$5 = fill$3;
var ArrayPrototype$5 = Array.prototype;
var fill$2 = function(it2) {
  var own = it2.fill;
  return it2 === ArrayPrototype$5 || isPrototypeOf$7(ArrayPrototype$5, it2) && own === ArrayPrototype$5.fill ? method$5 : own;
};
var parent$w = fill$2;
var fill$1 = parent$w;
var fill$5 = fill$1;
var _fillInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(fill$5);
/*! Hammer.JS - v2.0.17-rc - 2019-12-16
 * http://naver.github.io/egjs
 *
 * Forked By Naver egjs
 * Copyright (c) hammerjs
 * Licensed under the MIT license */
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}
function _assertThisInitialized$1(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
var assign;
if (typeof Object.assign !== "function") {
  assign = function assign4(target) {
    if (target === void 0 || target === null) {
      throw new TypeError("Cannot convert undefined or null to object");
    }
    var output = Object(target);
    for (var index2 = 1; index2 < arguments.length; index2++) {
      var source = arguments[index2];
      if (source !== void 0 && source !== null) {
        for (var nextKey in source) {
          if (source.hasOwnProperty(nextKey)) {
            output[nextKey] = source[nextKey];
          }
        }
      }
    }
    return output;
  };
} else {
  assign = Object.assign;
}
var assign$1 = assign;
var VENDOR_PREFIXES = ["", "webkit", "Moz", "MS", "ms", "o"];
var TEST_ELEMENT = typeof document === "undefined" ? {
  style: {}
} : document.createElement("div");
var TYPE_FUNCTION = "function";
var round = Math.round, abs$1 = Math.abs;
var now = Date.now;
function prefixed(obj, property) {
  var prefix;
  var prop;
  var camelProp = property[0].toUpperCase() + property.slice(1);
  var i2 = 0;
  while (i2 < VENDOR_PREFIXES.length) {
    prefix = VENDOR_PREFIXES[i2];
    prop = prefix ? prefix + camelProp : property;
    if (prop in obj) {
      return prop;
    }
    i2++;
  }
  return void 0;
}
var win;
if (typeof window === "undefined") {
  win = {};
} else {
  win = window;
}
var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, "touchAction");
var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== void 0;
function getTouchActionProps() {
  if (!NATIVE_TOUCH_ACTION) {
    return false;
  }
  var touchMap = {};
  var cssSupports = win.CSS && win.CSS.supports;
  ["auto", "manipulation", "pan-y", "pan-x", "pan-x pan-y", "none"].forEach(function(val) {
    return touchMap[val] = cssSupports ? win.CSS.supports("touch-action", val) : true;
  });
  return touchMap;
}
var TOUCH_ACTION_COMPUTE = "compute";
var TOUCH_ACTION_AUTO = "auto";
var TOUCH_ACTION_MANIPULATION = "manipulation";
var TOUCH_ACTION_NONE = "none";
var TOUCH_ACTION_PAN_X = "pan-x";
var TOUCH_ACTION_PAN_Y = "pan-y";
var TOUCH_ACTION_MAP = getTouchActionProps();
var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;
var SUPPORT_TOUCH = "ontouchstart" in win;
var SUPPORT_POINTER_EVENTS = prefixed(win, "PointerEvent") !== void 0;
var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);
var INPUT_TYPE_TOUCH = "touch";
var INPUT_TYPE_PEN = "pen";
var INPUT_TYPE_MOUSE = "mouse";
var INPUT_TYPE_KINECT = "kinect";
var COMPUTE_INTERVAL = 25;
var INPUT_START = 1;
var INPUT_MOVE = 2;
var INPUT_END = 4;
var INPUT_CANCEL = 8;
var DIRECTION_NONE = 1;
var DIRECTION_LEFT = 2;
var DIRECTION_RIGHT = 4;
var DIRECTION_UP = 8;
var DIRECTION_DOWN = 16;
var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;
var PROPS_XY = ["x", "y"];
var PROPS_CLIENT_XY = ["clientX", "clientY"];
function each(obj, iterator2, context) {
  var i2;
  if (!obj) {
    return;
  }
  if (obj.forEach) {
    obj.forEach(iterator2, context);
  } else if (obj.length !== void 0) {
    i2 = 0;
    while (i2 < obj.length) {
      iterator2.call(context, obj[i2], i2, obj);
      i2++;
    }
  } else {
    for (i2 in obj) {
      obj.hasOwnProperty(i2) && iterator2.call(context, obj[i2], i2, obj);
    }
  }
}
function boolOrFn(val, args) {
  if (typeof val === TYPE_FUNCTION) {
    return val.apply(args ? args[0] || void 0 : void 0, args);
  }
  return val;
}
function inStr(str, find2) {
  return str.indexOf(find2) > -1;
}
function cleanTouchActions(actions) {
  if (inStr(actions, TOUCH_ACTION_NONE)) {
    return TOUCH_ACTION_NONE;
  }
  var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
  var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);
  if (hasPanX && hasPanY) {
    return TOUCH_ACTION_NONE;
  }
  if (hasPanX || hasPanY) {
    return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
  }
  if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
    return TOUCH_ACTION_MANIPULATION;
  }
  return TOUCH_ACTION_AUTO;
}
var TouchAction = /* @__PURE__ */ function() {
  function TouchAction2(manager, value2) {
    this.manager = manager;
    this.set(value2);
  }
  var _proto = TouchAction2.prototype;
  _proto.set = function set2(value2) {
    if (value2 === TOUCH_ACTION_COMPUTE) {
      value2 = this.compute();
    }
    if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value2]) {
      this.manager.element.style[PREFIXED_TOUCH_ACTION] = value2;
    }
    this.actions = value2.toLowerCase().trim();
  };
  _proto.update = function update() {
    this.set(this.manager.options.touchAction);
  };
  _proto.compute = function compute() {
    var actions = [];
    each(this.manager.recognizers, function(recognizer) {
      if (boolOrFn(recognizer.options.enable, [recognizer])) {
        actions = actions.concat(recognizer.getTouchAction());
      }
    });
    return cleanTouchActions(actions.join(" "));
  };
  _proto.preventDefaults = function preventDefaults(input) {
    var srcEvent = input.srcEvent;
    var direction = input.offsetDirection;
    if (this.manager.session.prevented) {
      srcEvent.preventDefault();
      return;
    }
    var actions = this.actions;
    var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];
    if (hasNone) {
      var isTapPointer = input.pointers.length === 1;
      var isTapMovement = input.distance < 2;
      var isTapTouchTime = input.deltaTime < 250;
      if (isTapPointer && isTapMovement && isTapTouchTime) {
        return;
      }
    }
    if (hasPanX && hasPanY) {
      return;
    }
    if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) {
      return this.preventSrc(srcEvent);
    }
  };
  _proto.preventSrc = function preventSrc(srcEvent) {
    this.manager.session.prevented = true;
    srcEvent.preventDefault();
  };
  return TouchAction2;
}();
function hasParent(node2, parent2) {
  while (node2) {
    if (node2 === parent2) {
      return true;
    }
    node2 = node2.parentNode;
  }
  return false;
}
function getCenter(pointers) {
  var pointersLength = pointers.length;
  if (pointersLength === 1) {
    return {
      x: round(pointers[0].clientX),
      y: round(pointers[0].clientY)
    };
  }
  var x2 = 0;
  var y2 = 0;
  var i2 = 0;
  while (i2 < pointersLength) {
    x2 += pointers[i2].clientX;
    y2 += pointers[i2].clientY;
    i2++;
  }
  return {
    x: round(x2 / pointersLength),
    y: round(y2 / pointersLength)
  };
}
function simpleCloneInputData(input) {
  var pointers = [];
  var i2 = 0;
  while (i2 < input.pointers.length) {
    pointers[i2] = {
      clientX: round(input.pointers[i2].clientX),
      clientY: round(input.pointers[i2].clientY)
    };
    i2++;
  }
  return {
    timeStamp: now(),
    pointers,
    center: getCenter(pointers),
    deltaX: input.deltaX,
    deltaY: input.deltaY
  };
}
function getDistance(p1, p2, props) {
  if (!props) {
    props = PROPS_XY;
  }
  var x2 = p2[props[0]] - p1[props[0]];
  var y2 = p2[props[1]] - p1[props[1]];
  return Math.sqrt(x2 * x2 + y2 * y2);
}
function getAngle(p1, p2, props) {
  if (!props) {
    props = PROPS_XY;
  }
  var x2 = p2[props[0]] - p1[props[0]];
  var y2 = p2[props[1]] - p1[props[1]];
  return Math.atan2(y2, x2) * 180 / Math.PI;
}
function getDirection(x2, y2) {
  if (x2 === y2) {
    return DIRECTION_NONE;
  }
  if (abs$1(x2) >= abs$1(y2)) {
    return x2 < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
  }
  return y2 < 0 ? DIRECTION_UP : DIRECTION_DOWN;
}
function computeDeltaXY(session, input) {
  var center = input.center;
  var offset2 = session.offsetDelta || {};
  var prevDelta = session.prevDelta || {};
  var prevInput = session.prevInput || {};
  if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
    prevDelta = session.prevDelta = {
      x: prevInput.deltaX || 0,
      y: prevInput.deltaY || 0
    };
    offset2 = session.offsetDelta = {
      x: center.x,
      y: center.y
    };
  }
  input.deltaX = prevDelta.x + (center.x - offset2.x);
  input.deltaY = prevDelta.y + (center.y - offset2.y);
}
function getVelocity(deltaTime, x2, y2) {
  return {
    x: x2 / deltaTime || 0,
    y: y2 / deltaTime || 0
  };
}
function getScale(start2, end2) {
  return getDistance(end2[0], end2[1], PROPS_CLIENT_XY) / getDistance(start2[0], start2[1], PROPS_CLIENT_XY);
}
function getRotation(start2, end2) {
  return getAngle(end2[1], end2[0], PROPS_CLIENT_XY) + getAngle(start2[1], start2[0], PROPS_CLIENT_XY);
}
function computeIntervalInputData(session, input) {
  var last = session.lastInterval || input;
  var deltaTime = input.timeStamp - last.timeStamp;
  var velocity;
  var velocityX;
  var velocityY;
  var direction;
  if (input.eventType !== INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === void 0)) {
    var deltaX = input.deltaX - last.deltaX;
    var deltaY = input.deltaY - last.deltaY;
    var v2 = getVelocity(deltaTime, deltaX, deltaY);
    velocityX = v2.x;
    velocityY = v2.y;
    velocity = abs$1(v2.x) > abs$1(v2.y) ? v2.x : v2.y;
    direction = getDirection(deltaX, deltaY);
    session.lastInterval = input;
  } else {
    velocity = last.velocity;
    velocityX = last.velocityX;
    velocityY = last.velocityY;
    direction = last.direction;
  }
  input.velocity = velocity;
  input.velocityX = velocityX;
  input.velocityY = velocityY;
  input.direction = direction;
}
function computeInputData(manager, input) {
  var session = manager.session;
  var pointers = input.pointers;
  var pointersLength = pointers.length;
  if (!session.firstInput) {
    session.firstInput = simpleCloneInputData(input);
  }
  if (pointersLength > 1 && !session.firstMultiple) {
    session.firstMultiple = simpleCloneInputData(input);
  } else if (pointersLength === 1) {
    session.firstMultiple = false;
  }
  var firstInput = session.firstInput, firstMultiple = session.firstMultiple;
  var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
  var center = input.center = getCenter(pointers);
  input.timeStamp = now();
  input.deltaTime = input.timeStamp - firstInput.timeStamp;
  input.angle = getAngle(offsetCenter, center);
  input.distance = getDistance(offsetCenter, center);
  computeDeltaXY(session, input);
  input.offsetDirection = getDirection(input.deltaX, input.deltaY);
  var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
  input.overallVelocityX = overallVelocity.x;
  input.overallVelocityY = overallVelocity.y;
  input.overallVelocity = abs$1(overallVelocity.x) > abs$1(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;
  input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
  input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;
  input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;
  computeIntervalInputData(session, input);
  var target = manager.element;
  var srcEvent = input.srcEvent;
  var srcEventTarget;
  if (srcEvent.composedPath) {
    srcEventTarget = srcEvent.composedPath()[0];
  } else if (srcEvent.path) {
    srcEventTarget = srcEvent.path[0];
  } else {
    srcEventTarget = srcEvent.target;
  }
  if (hasParent(srcEventTarget, target)) {
    target = srcEventTarget;
  }
  input.target = target;
}
function inputHandler(manager, eventType, input) {
  var pointersLen = input.pointers.length;
  var changedPointersLen = input.changedPointers.length;
  var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;
  var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;
  input.isFirst = !!isFirst;
  input.isFinal = !!isFinal;
  if (isFirst) {
    manager.session = {};
  }
  input.eventType = eventType;
  computeInputData(manager, input);
  manager.emit("hammer.input", input);
  manager.recognize(input);
  manager.session.prevInput = input;
}
function splitStr(str) {
  return str.trim().split(/\s+/g);
}
function addEventListeners(target, types, handler) {
  each(splitStr(types), function(type) {
    target.addEventListener(type, handler, false);
  });
}
function removeEventListeners(target, types, handler) {
  each(splitStr(types), function(type) {
    target.removeEventListener(type, handler, false);
  });
}
function getWindowForElement(element) {
  var doc2 = element.ownerDocument || element;
  return doc2.defaultView || doc2.parentWindow || window;
}
var Input = /* @__PURE__ */ function() {
  function Input2(manager, callback) {
    var self2 = this;
    this.manager = manager;
    this.callback = callback;
    this.element = manager.element;
    this.target = manager.options.inputTarget;
    this.domHandler = function(ev) {
      if (boolOrFn(manager.options.enable, [manager])) {
        self2.handler(ev);
      }
    };
    this.init();
  }
  var _proto = Input2.prototype;
  _proto.handler = function handler() {
  };
  _proto.init = function init() {
    this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
    this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
    this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
  };
  _proto.destroy = function destroy() {
    this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
    this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
    this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
  };
  return Input2;
}();
function inArray(src, find2, findByKey) {
  if (src.indexOf && !findByKey) {
    return src.indexOf(find2);
  } else {
    var i2 = 0;
    while (i2 < src.length) {
      if (findByKey && src[i2][findByKey] == find2 || !findByKey && src[i2] === find2) {
        return i2;
      }
      i2++;
    }
    return -1;
  }
}
var POINTER_INPUT_MAP = {
  pointerdown: INPUT_START,
  pointermove: INPUT_MOVE,
  pointerup: INPUT_END,
  pointercancel: INPUT_CANCEL,
  pointerout: INPUT_CANCEL
};
var IE10_POINTER_TYPE_ENUM = {
  2: INPUT_TYPE_TOUCH,
  3: INPUT_TYPE_PEN,
  4: INPUT_TYPE_MOUSE,
  5: INPUT_TYPE_KINECT
  // see https://twitter.com/jacobrossi/status/480596438489890816
};
var POINTER_ELEMENT_EVENTS = "pointerdown";
var POINTER_WINDOW_EVENTS = "pointermove pointerup pointercancel";
if (win.MSPointerEvent && !win.PointerEvent) {
  POINTER_ELEMENT_EVENTS = "MSPointerDown";
  POINTER_WINDOW_EVENTS = "MSPointerMove MSPointerUp MSPointerCancel";
}
var PointerEventInput = /* @__PURE__ */ function(_Input) {
  _inheritsLoose(PointerEventInput2, _Input);
  function PointerEventInput2() {
    var _this;
    var proto = PointerEventInput2.prototype;
    proto.evEl = POINTER_ELEMENT_EVENTS;
    proto.evWin = POINTER_WINDOW_EVENTS;
    _this = _Input.apply(this, arguments) || this;
    _this.store = _this.manager.session.pointerEvents = [];
    return _this;
  }
  var _proto = PointerEventInput2.prototype;
  _proto.handler = function handler(ev) {
    var store2 = this.store;
    var removePointer = false;
    var eventTypeNormalized = ev.type.toLowerCase().replace("ms", "");
    var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
    var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;
    var isTouch = pointerType === INPUT_TYPE_TOUCH;
    var storeIndex = inArray(store2, ev.pointerId, "pointerId");
    if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
      if (storeIndex < 0) {
        store2.push(ev);
        storeIndex = store2.length - 1;
      }
    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
      removePointer = true;
    }
    if (storeIndex < 0) {
      return;
    }
    store2[storeIndex] = ev;
    this.callback(this.manager, eventType, {
      pointers: store2,
      changedPointers: [ev],
      pointerType,
      srcEvent: ev
    });
    if (removePointer) {
      store2.splice(storeIndex, 1);
    }
  };
  return PointerEventInput2;
}(Input);
function toArray(obj) {
  return Array.prototype.slice.call(obj, 0);
}
function uniqueArray(src, key2, sort4) {
  var results = [];
  var values2 = [];
  var i2 = 0;
  while (i2 < src.length) {
    var val = key2 ? src[i2][key2] : src[i2];
    if (inArray(values2, val) < 0) {
      results.push(src[i2]);
    }
    values2[i2] = val;
    i2++;
  }
  if (sort4) {
    if (!key2) {
      results = results.sort();
    } else {
      results = results.sort(function(a2, b2) {
        return a2[key2] > b2[key2];
      });
    }
  }
  return results;
}
var TOUCH_INPUT_MAP = {
  touchstart: INPUT_START,
  touchmove: INPUT_MOVE,
  touchend: INPUT_END,
  touchcancel: INPUT_CANCEL
};
var TOUCH_TARGET_EVENTS = "touchstart touchmove touchend touchcancel";
var TouchInput = /* @__PURE__ */ function(_Input) {
  _inheritsLoose(TouchInput2, _Input);
  function TouchInput2() {
    var _this;
    TouchInput2.prototype.evTarget = TOUCH_TARGET_EVENTS;
    _this = _Input.apply(this, arguments) || this;
    _this.targetIds = {};
    return _this;
  }
  var _proto = TouchInput2.prototype;
  _proto.handler = function handler(ev) {
    var type = TOUCH_INPUT_MAP[ev.type];
    var touches = getTouches.call(this, ev, type);
    if (!touches) {
      return;
    }
    this.callback(this.manager, type, {
      pointers: touches[0],
      changedPointers: touches[1],
      pointerType: INPUT_TYPE_TOUCH,
      srcEvent: ev
    });
  };
  return TouchInput2;
}(Input);
function getTouches(ev, type) {
  var allTouches = toArray(ev.touches);
  var targetIds = this.targetIds;
  if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
    targetIds[allTouches[0].identifier] = true;
    return [allTouches, allTouches];
  }
  var i2;
  var targetTouches;
  var changedTouches = toArray(ev.changedTouches);
  var changedTargetTouches = [];
  var target = this.target;
  targetTouches = allTouches.filter(function(touch) {
    return hasParent(touch.target, target);
  });
  if (type === INPUT_START) {
    i2 = 0;
    while (i2 < targetTouches.length) {
      targetIds[targetTouches[i2].identifier] = true;
      i2++;
    }
  }
  i2 = 0;
  while (i2 < changedTouches.length) {
    if (targetIds[changedTouches[i2].identifier]) {
      changedTargetTouches.push(changedTouches[i2]);
    }
    if (type & (INPUT_END | INPUT_CANCEL)) {
      delete targetIds[changedTouches[i2].identifier];
    }
    i2++;
  }
  if (!changedTargetTouches.length) {
    return;
  }
  return [
    // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
    uniqueArray(targetTouches.concat(changedTargetTouches), "identifier", true),
    changedTargetTouches
  ];
}
var MOUSE_INPUT_MAP = {
  mousedown: INPUT_START,
  mousemove: INPUT_MOVE,
  mouseup: INPUT_END
};
var MOUSE_ELEMENT_EVENTS = "mousedown";
var MOUSE_WINDOW_EVENTS = "mousemove mouseup";
var MouseInput = /* @__PURE__ */ function(_Input) {
  _inheritsLoose(MouseInput2, _Input);
  function MouseInput2() {
    var _this;
    var proto = MouseInput2.prototype;
    proto.evEl = MOUSE_ELEMENT_EVENTS;
    proto.evWin = MOUSE_WINDOW_EVENTS;
    _this = _Input.apply(this, arguments) || this;
    _this.pressed = false;
    return _this;
  }
  var _proto = MouseInput2.prototype;
  _proto.handler = function handler(ev) {
    var eventType = MOUSE_INPUT_MAP[ev.type];
    if (eventType & INPUT_START && ev.button === 0) {
      this.pressed = true;
    }
    if (eventType & INPUT_MOVE && ev.which !== 1) {
      eventType = INPUT_END;
    }
    if (!this.pressed) {
      return;
    }
    if (eventType & INPUT_END) {
      this.pressed = false;
    }
    this.callback(this.manager, eventType, {
      pointers: [ev],
      changedPointers: [ev],
      pointerType: INPUT_TYPE_MOUSE,
      srcEvent: ev
    });
  };
  return MouseInput2;
}(Input);
var DEDUP_TIMEOUT = 2500;
var DEDUP_DISTANCE = 25;
function setLastTouch(eventData) {
  var _eventData$changedPoi = eventData.changedPointers, touch = _eventData$changedPoi[0];
  if (touch.identifier === this.primaryTouch) {
    var lastTouch = {
      x: touch.clientX,
      y: touch.clientY
    };
    var lts = this.lastTouches;
    this.lastTouches.push(lastTouch);
    var removeLastTouch = function removeLastTouch2() {
      var i2 = lts.indexOf(lastTouch);
      if (i2 > -1) {
        lts.splice(i2, 1);
      }
    };
    setTimeout(removeLastTouch, DEDUP_TIMEOUT);
  }
}
function recordTouches(eventType, eventData) {
  if (eventType & INPUT_START) {
    this.primaryTouch = eventData.changedPointers[0].identifier;
    setLastTouch.call(this, eventData);
  } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
    setLastTouch.call(this, eventData);
  }
}
function isSyntheticEvent(eventData) {
  var x2 = eventData.srcEvent.clientX;
  var y2 = eventData.srcEvent.clientY;
  for (var i2 = 0; i2 < this.lastTouches.length; i2++) {
    var t2 = this.lastTouches[i2];
    var dx = Math.abs(x2 - t2.x);
    var dy = Math.abs(y2 - t2.y);
    if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
      return true;
    }
  }
  return false;
}
var TouchMouseInput = /* @__PURE__ */ function() {
  var TouchMouseInput2 = /* @__PURE__ */ function(_Input) {
    _inheritsLoose(TouchMouseInput3, _Input);
    function TouchMouseInput3(_manager, callback) {
      var _this;
      _this = _Input.call(this, _manager, callback) || this;
      _this.handler = function(manager, inputEvent, inputData) {
        var isTouch = inputData.pointerType === INPUT_TYPE_TOUCH;
        var isMouse = inputData.pointerType === INPUT_TYPE_MOUSE;
        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
          return;
        }
        if (isTouch) {
          recordTouches.call(_assertThisInitialized$1(_assertThisInitialized$1(_this)), inputEvent, inputData);
        } else if (isMouse && isSyntheticEvent.call(_assertThisInitialized$1(_assertThisInitialized$1(_this)), inputData)) {
          return;
        }
        _this.callback(manager, inputEvent, inputData);
      };
      _this.touch = new TouchInput(_this.manager, _this.handler);
      _this.mouse = new MouseInput(_this.manager, _this.handler);
      _this.primaryTouch = null;
      _this.lastTouches = [];
      return _this;
    }
    var _proto = TouchMouseInput3.prototype;
    _proto.destroy = function destroy() {
      this.touch.destroy();
      this.mouse.destroy();
    };
    return TouchMouseInput3;
  }(Input);
  return TouchMouseInput2;
}();
function createInputInstance(manager) {
  var Type;
  var inputClass = manager.options.inputClass;
  if (inputClass) {
    Type = inputClass;
  } else if (SUPPORT_POINTER_EVENTS) {
    Type = PointerEventInput;
  } else if (SUPPORT_ONLY_TOUCH) {
    Type = TouchInput;
  } else if (!SUPPORT_TOUCH) {
    Type = MouseInput;
  } else {
    Type = TouchMouseInput;
  }
  return new Type(manager, inputHandler);
}
function invokeArrayArg(arg, fn2, context) {
  if (Array.isArray(arg)) {
    each(arg, context[fn2], context);
    return true;
  }
  return false;
}
var STATE_POSSIBLE = 1;
var STATE_BEGAN = 2;
var STATE_CHANGED = 4;
var STATE_ENDED = 8;
var STATE_RECOGNIZED = STATE_ENDED;
var STATE_CANCELLED = 16;
var STATE_FAILED = 32;
var _uniqueId = 1;
function uniqueId() {
  return _uniqueId++;
}
function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
  var manager = recognizer.manager;
  if (manager) {
    return manager.get(otherRecognizer);
  }
  return otherRecognizer;
}
function stateStr(state) {
  if (state & STATE_CANCELLED) {
    return "cancel";
  } else if (state & STATE_ENDED) {
    return "end";
  } else if (state & STATE_CHANGED) {
    return "move";
  } else if (state & STATE_BEGAN) {
    return "start";
  }
  return "";
}
var Recognizer = /* @__PURE__ */ function() {
  function Recognizer2(options) {
    if (options === void 0) {
      options = {};
    }
    this.options = _extends({
      enable: true
    }, options);
    this.id = uniqueId();
    this.manager = null;
    this.state = STATE_POSSIBLE;
    this.simultaneous = {};
    this.requireFail = [];
  }
  var _proto = Recognizer2.prototype;
  _proto.set = function set2(options) {
    assign$1(this.options, options);
    this.manager && this.manager.touchAction.update();
    return this;
  };
  _proto.recognizeWith = function recognizeWith(otherRecognizer) {
    if (invokeArrayArg(otherRecognizer, "recognizeWith", this)) {
      return this;
    }
    var simultaneous = this.simultaneous;
    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
    if (!simultaneous[otherRecognizer.id]) {
      simultaneous[otherRecognizer.id] = otherRecognizer;
      otherRecognizer.recognizeWith(this);
    }
    return this;
  };
  _proto.dropRecognizeWith = function dropRecognizeWith(otherRecognizer) {
    if (invokeArrayArg(otherRecognizer, "dropRecognizeWith", this)) {
      return this;
    }
    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
    delete this.simultaneous[otherRecognizer.id];
    return this;
  };
  _proto.requireFailure = function requireFailure(otherRecognizer) {
    if (invokeArrayArg(otherRecognizer, "requireFailure", this)) {
      return this;
    }
    var requireFail = this.requireFail;
    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
    if (inArray(requireFail, otherRecognizer) === -1) {
      requireFail.push(otherRecognizer);
      otherRecognizer.requireFailure(this);
    }
    return this;
  };
  _proto.dropRequireFailure = function dropRequireFailure(otherRecognizer) {
    if (invokeArrayArg(otherRecognizer, "dropRequireFailure", this)) {
      return this;
    }
    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
    var index2 = inArray(this.requireFail, otherRecognizer);
    if (index2 > -1) {
      this.requireFail.splice(index2, 1);
    }
    return this;
  };
  _proto.hasRequireFailures = function hasRequireFailures() {
    return this.requireFail.length > 0;
  };
  _proto.canRecognizeWith = function canRecognizeWith(otherRecognizer) {
    return !!this.simultaneous[otherRecognizer.id];
  };
  _proto.emit = function emit2(input) {
    var self2 = this;
    var state = this.state;
    function emit3(event) {
      self2.manager.emit(event, input);
    }
    if (state < STATE_ENDED) {
      emit3(self2.options.event + stateStr(state));
    }
    emit3(self2.options.event);
    if (input.additionalEvent) {
      emit3(input.additionalEvent);
    }
    if (state >= STATE_ENDED) {
      emit3(self2.options.event + stateStr(state));
    }
  };
  _proto.tryEmit = function tryEmit(input) {
    if (this.canEmit()) {
      return this.emit(input);
    }
    this.state = STATE_FAILED;
  };
  _proto.canEmit = function canEmit() {
    var i2 = 0;
    while (i2 < this.requireFail.length) {
      if (!(this.requireFail[i2].state & (STATE_FAILED | STATE_POSSIBLE))) {
        return false;
      }
      i2++;
    }
    return true;
  };
  _proto.recognize = function recognize(inputData) {
    var inputDataClone = assign$1({}, inputData);
    if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
      this.reset();
      this.state = STATE_FAILED;
      return;
    }
    if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
      this.state = STATE_POSSIBLE;
    }
    this.state = this.process(inputDataClone);
    if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
      this.tryEmit(inputDataClone);
    }
  };
  _proto.process = function process2(inputData) {
  };
  _proto.getTouchAction = function getTouchAction() {
  };
  _proto.reset = function reset2() {
  };
  return Recognizer2;
}();
var TapRecognizer = /* @__PURE__ */ function(_Recognizer) {
  _inheritsLoose(TapRecognizer2, _Recognizer);
  function TapRecognizer2(options) {
    var _this;
    if (options === void 0) {
      options = {};
    }
    _this = _Recognizer.call(this, _extends({
      event: "tap",
      pointers: 1,
      taps: 1,
      interval: 300,
      // max time between the multi-tap taps
      time: 250,
      // max time of the pointer to be down (like finger on the screen)
      threshold: 9,
      // a minimal movement is ok, but keep it low
      posThreshold: 10
    }, options)) || this;
    _this.pTime = false;
    _this.pCenter = false;
    _this._timer = null;
    _this._input = null;
    _this.count = 0;
    return _this;
  }
  var _proto = TapRecognizer2.prototype;
  _proto.getTouchAction = function getTouchAction() {
    return [TOUCH_ACTION_MANIPULATION];
  };
  _proto.process = function process2(input) {
    var _this2 = this;
    var options = this.options;
    var validPointers = input.pointers.length === options.pointers;
    var validMovement = input.distance < options.threshold;
    var validTouchTime = input.deltaTime < options.time;
    this.reset();
    if (input.eventType & INPUT_START && this.count === 0) {
      return this.failTimeout();
    }
    if (validMovement && validTouchTime && validPointers) {
      if (input.eventType !== INPUT_END) {
        return this.failTimeout();
      }
      var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;
      var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;
      this.pTime = input.timeStamp;
      this.pCenter = input.center;
      if (!validMultiTap || !validInterval) {
        this.count = 1;
      } else {
        this.count += 1;
      }
      this._input = input;
      var tapCount = this.count % options.taps;
      if (tapCount === 0) {
        if (!this.hasRequireFailures()) {
          return STATE_RECOGNIZED;
        } else {
          this._timer = setTimeout(function() {
            _this2.state = STATE_RECOGNIZED;
            _this2.tryEmit();
          }, options.interval);
          return STATE_BEGAN;
        }
      }
    }
    return STATE_FAILED;
  };
  _proto.failTimeout = function failTimeout() {
    var _this3 = this;
    this._timer = setTimeout(function() {
      _this3.state = STATE_FAILED;
    }, this.options.interval);
    return STATE_FAILED;
  };
  _proto.reset = function reset2() {
    clearTimeout(this._timer);
  };
  _proto.emit = function emit2() {
    if (this.state === STATE_RECOGNIZED) {
      this._input.tapCount = this.count;
      this.manager.emit(this.options.event, this._input);
    }
  };
  return TapRecognizer2;
}(Recognizer);
var AttrRecognizer = /* @__PURE__ */ function(_Recognizer) {
  _inheritsLoose(AttrRecognizer2, _Recognizer);
  function AttrRecognizer2(options) {
    if (options === void 0) {
      options = {};
    }
    return _Recognizer.call(this, _extends({
      pointers: 1
    }, options)) || this;
  }
  var _proto = AttrRecognizer2.prototype;
  _proto.attrTest = function attrTest(input) {
    var optionPointers = this.options.pointers;
    return optionPointers === 0 || input.pointers.length === optionPointers;
  };
  _proto.process = function process2(input) {
    var state = this.state;
    var eventType = input.eventType;
    var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
    var isValid = this.attrTest(input);
    if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
      return state | STATE_CANCELLED;
    } else if (isRecognized || isValid) {
      if (eventType & INPUT_END) {
        return state | STATE_ENDED;
      } else if (!(state & STATE_BEGAN)) {
        return STATE_BEGAN;
      }
      return state | STATE_CHANGED;
    }
    return STATE_FAILED;
  };
  return AttrRecognizer2;
}(Recognizer);
function directionStr(direction) {
  if (direction === DIRECTION_DOWN) {
    return "down";
  } else if (direction === DIRECTION_UP) {
    return "up";
  } else if (direction === DIRECTION_LEFT) {
    return "left";
  } else if (direction === DIRECTION_RIGHT) {
    return "right";
  }
  return "";
}
var PanRecognizer = /* @__PURE__ */ function(_AttrRecognizer) {
  _inheritsLoose(PanRecognizer2, _AttrRecognizer);
  function PanRecognizer2(options) {
    var _this;
    if (options === void 0) {
      options = {};
    }
    _this = _AttrRecognizer.call(this, _extends({
      event: "pan",
      threshold: 10,
      pointers: 1,
      direction: DIRECTION_ALL
    }, options)) || this;
    _this.pX = null;
    _this.pY = null;
    return _this;
  }
  var _proto = PanRecognizer2.prototype;
  _proto.getTouchAction = function getTouchAction() {
    var direction = this.options.direction;
    var actions = [];
    if (direction & DIRECTION_HORIZONTAL) {
      actions.push(TOUCH_ACTION_PAN_Y);
    }
    if (direction & DIRECTION_VERTICAL) {
      actions.push(TOUCH_ACTION_PAN_X);
    }
    return actions;
  };
  _proto.directionTest = function directionTest(input) {
    var options = this.options;
    var hasMoved = true;
    var distance = input.distance;
    var direction = input.direction;
    var x2 = input.deltaX;
    var y2 = input.deltaY;
    if (!(direction & options.direction)) {
      if (options.direction & DIRECTION_HORIZONTAL) {
        direction = x2 === 0 ? DIRECTION_NONE : x2 < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
        hasMoved = x2 !== this.pX;
        distance = Math.abs(input.deltaX);
      } else {
        direction = y2 === 0 ? DIRECTION_NONE : y2 < 0 ? DIRECTION_UP : DIRECTION_DOWN;
        hasMoved = y2 !== this.pY;
        distance = Math.abs(input.deltaY);
      }
    }
    input.direction = direction;
    return hasMoved && distance > options.threshold && direction & options.direction;
  };
  _proto.attrTest = function attrTest(input) {
    return AttrRecognizer.prototype.attrTest.call(this, input) && // replace with a super call
    (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));
  };
  _proto.emit = function emit2(input) {
    this.pX = input.deltaX;
    this.pY = input.deltaY;
    var direction = directionStr(input.direction);
    if (direction) {
      input.additionalEvent = this.options.event + direction;
    }
    _AttrRecognizer.prototype.emit.call(this, input);
  };
  return PanRecognizer2;
}(AttrRecognizer);
var SwipeRecognizer = /* @__PURE__ */ function(_AttrRecognizer) {
  _inheritsLoose(SwipeRecognizer2, _AttrRecognizer);
  function SwipeRecognizer2(options) {
    if (options === void 0) {
      options = {};
    }
    return _AttrRecognizer.call(this, _extends({
      event: "swipe",
      threshold: 10,
      velocity: 0.3,
      direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
      pointers: 1
    }, options)) || this;
  }
  var _proto = SwipeRecognizer2.prototype;
  _proto.getTouchAction = function getTouchAction() {
    return PanRecognizer.prototype.getTouchAction.call(this);
  };
  _proto.attrTest = function attrTest(input) {
    var direction = this.options.direction;
    var velocity;
    if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
      velocity = input.overallVelocity;
    } else if (direction & DIRECTION_HORIZONTAL) {
      velocity = input.overallVelocityX;
    } else if (direction & DIRECTION_VERTICAL) {
      velocity = input.overallVelocityY;
    }
    return _AttrRecognizer.prototype.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers === this.options.pointers && abs$1(velocity) > this.options.velocity && input.eventType & INPUT_END;
  };
  _proto.emit = function emit2(input) {
    var direction = directionStr(input.offsetDirection);
    if (direction) {
      this.manager.emit(this.options.event + direction, input);
    }
    this.manager.emit(this.options.event, input);
  };
  return SwipeRecognizer2;
}(AttrRecognizer);
var PinchRecognizer = /* @__PURE__ */ function(_AttrRecognizer) {
  _inheritsLoose(PinchRecognizer2, _AttrRecognizer);
  function PinchRecognizer2(options) {
    if (options === void 0) {
      options = {};
    }
    return _AttrRecognizer.call(this, _extends({
      event: "pinch",
      threshold: 0,
      pointers: 2
    }, options)) || this;
  }
  var _proto = PinchRecognizer2.prototype;
  _proto.getTouchAction = function getTouchAction() {
    return [TOUCH_ACTION_NONE];
  };
  _proto.attrTest = function attrTest(input) {
    return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
  };
  _proto.emit = function emit2(input) {
    if (input.scale !== 1) {
      var inOut = input.scale < 1 ? "in" : "out";
      input.additionalEvent = this.options.event + inOut;
    }
    _AttrRecognizer.prototype.emit.call(this, input);
  };
  return PinchRecognizer2;
}(AttrRecognizer);
var RotateRecognizer = /* @__PURE__ */ function(_AttrRecognizer) {
  _inheritsLoose(RotateRecognizer2, _AttrRecognizer);
  function RotateRecognizer2(options) {
    if (options === void 0) {
      options = {};
    }
    return _AttrRecognizer.call(this, _extends({
      event: "rotate",
      threshold: 0,
      pointers: 2
    }, options)) || this;
  }
  var _proto = RotateRecognizer2.prototype;
  _proto.getTouchAction = function getTouchAction() {
    return [TOUCH_ACTION_NONE];
  };
  _proto.attrTest = function attrTest(input) {
    return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
  };
  return RotateRecognizer2;
}(AttrRecognizer);
var PressRecognizer = /* @__PURE__ */ function(_Recognizer) {
  _inheritsLoose(PressRecognizer2, _Recognizer);
  function PressRecognizer2(options) {
    var _this;
    if (options === void 0) {
      options = {};
    }
    _this = _Recognizer.call(this, _extends({
      event: "press",
      pointers: 1,
      time: 251,
      // minimal time of the pointer to be pressed
      threshold: 9
    }, options)) || this;
    _this._timer = null;
    _this._input = null;
    return _this;
  }
  var _proto = PressRecognizer2.prototype;
  _proto.getTouchAction = function getTouchAction() {
    return [TOUCH_ACTION_AUTO];
  };
  _proto.process = function process2(input) {
    var _this2 = this;
    var options = this.options;
    var validPointers = input.pointers.length === options.pointers;
    var validMovement = input.distance < options.threshold;
    var validTime = input.deltaTime > options.time;
    this._input = input;
    if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {
      this.reset();
    } else if (input.eventType & INPUT_START) {
      this.reset();
      this._timer = setTimeout(function() {
        _this2.state = STATE_RECOGNIZED;
        _this2.tryEmit();
      }, options.time);
    } else if (input.eventType & INPUT_END) {
      return STATE_RECOGNIZED;
    }
    return STATE_FAILED;
  };
  _proto.reset = function reset2() {
    clearTimeout(this._timer);
  };
  _proto.emit = function emit2(input) {
    if (this.state !== STATE_RECOGNIZED) {
      return;
    }
    if (input && input.eventType & INPUT_END) {
      this.manager.emit(this.options.event + "up", input);
    } else {
      this._input.timeStamp = now();
      this.manager.emit(this.options.event, this._input);
    }
  };
  return PressRecognizer2;
}(Recognizer);
var defaults = {
  /**
   * @private
   * set if DOM events are being triggered.
   * But this is slower and unused by simple implementations, so disabled by default.
   * @type {Boolean}
   * @default false
   */
  domEvents: false,
  /**
   * @private
   * The value for the touchAction property/fallback.
   * When set to `compute` it will magically set the correct value based on the added recognizers.
   * @type {String}
   * @default compute
   */
  touchAction: TOUCH_ACTION_COMPUTE,
  /**
   * @private
   * @type {Boolean}
   * @default true
   */
  enable: true,
  /**
   * @private
   * EXPERIMENTAL FEATURE -- can be removed/changed
   * Change the parent input target element.
   * If Null, then it is being set the to main element.
   * @type {Null|EventTarget}
   * @default null
   */
  inputTarget: null,
  /**
   * @private
   * force an input class
   * @type {Null|Function}
   * @default null
   */
  inputClass: null,
  /**
   * @private
   * Some CSS properties can be used to improve the working of Hammer.
   * Add them to this method and they will be set when creating a new Manager.
   * @namespace
   */
  cssProps: {
    /**
     * @private
     * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
     * @type {String}
     * @default 'none'
     */
    userSelect: "none",
    /**
     * @private
     * Disable the Windows Phone grippers when pressing an element.
     * @type {String}
     * @default 'none'
     */
    touchSelect: "none",
    /**
     * @private
     * Disables the default callout shown when you touch and hold a touch target.
     * On iOS, when you touch and hold a touch target such as a link, Safari displays
     * a callout containing information about the link. This property allows you to disable that callout.
     * @type {String}
     * @default 'none'
     */
    touchCallout: "none",
    /**
     * @private
     * Specifies whether zooming is enabled. Used by IE10>
     * @type {String}
     * @default 'none'
     */
    contentZooming: "none",
    /**
     * @private
     * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
     * @type {String}
     * @default 'none'
     */
    userDrag: "none",
    /**
     * @private
     * Overrides the highlight color shown when the user taps a link or a JavaScript
     * clickable element in iOS. This property obeys the alpha value, if specified.
     * @type {String}
     * @default 'rgba(0,0,0,0)'
     */
    tapHighlightColor: "rgba(0,0,0,0)"
  }
};
var preset = [[RotateRecognizer, {
  enable: false
}], [PinchRecognizer, {
  enable: false
}, ["rotate"]], [SwipeRecognizer, {
  direction: DIRECTION_HORIZONTAL
}], [PanRecognizer, {
  direction: DIRECTION_HORIZONTAL
}, ["swipe"]], [TapRecognizer], [TapRecognizer, {
  event: "doubletap",
  taps: 2
}, ["tap"]], [PressRecognizer]];
var STOP = 1;
var FORCED_STOP = 2;
function toggleCssProps(manager, add) {
  var element = manager.element;
  if (!element.style) {
    return;
  }
  var prop;
  each(manager.options.cssProps, function(value2, name) {
    prop = prefixed(element.style, name);
    if (add) {
      manager.oldCssProps[prop] = element.style[prop];
      element.style[prop] = value2;
    } else {
      element.style[prop] = manager.oldCssProps[prop] || "";
    }
  });
  if (!add) {
    manager.oldCssProps = {};
  }
}
function triggerDomEvent(event, data2) {
  var gestureEvent = document.createEvent("Event");
  gestureEvent.initEvent(event, true, true);
  gestureEvent.gesture = data2;
  data2.target.dispatchEvent(gestureEvent);
}
var Manager = /* @__PURE__ */ function() {
  function Manager2(element, options) {
    var _this = this;
    this.options = assign$1({}, defaults, options || {});
    this.options.inputTarget = this.options.inputTarget || element;
    this.handlers = {};
    this.session = {};
    this.recognizers = [];
    this.oldCssProps = {};
    this.element = element;
    this.input = createInputInstance(this);
    this.touchAction = new TouchAction(this, this.options.touchAction);
    toggleCssProps(this, true);
    each(this.options.recognizers, function(item) {
      var recognizer = _this.add(new item[0](item[1]));
      item[2] && recognizer.recognizeWith(item[2]);
      item[3] && recognizer.requireFailure(item[3]);
    }, this);
  }
  var _proto = Manager2.prototype;
  _proto.set = function set2(options) {
    assign$1(this.options, options);
    if (options.touchAction) {
      this.touchAction.update();
    }
    if (options.inputTarget) {
      this.input.destroy();
      this.input.target = options.inputTarget;
      this.input.init();
    }
    return this;
  };
  _proto.stop = function stop2(force) {
    this.session.stopped = force ? FORCED_STOP : STOP;
  };
  _proto.recognize = function recognize(inputData) {
    var session = this.session;
    if (session.stopped) {
      return;
    }
    this.touchAction.preventDefaults(inputData);
    var recognizer;
    var recognizers = this.recognizers;
    var curRecognizer = session.curRecognizer;
    if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {
      session.curRecognizer = null;
      curRecognizer = null;
    }
    var i2 = 0;
    while (i2 < recognizers.length) {
      recognizer = recognizers[i2];
      if (session.stopped !== FORCED_STOP && // 1
      (!curRecognizer || recognizer === curRecognizer || // 2
      recognizer.canRecognizeWith(curRecognizer))) {
        recognizer.recognize(inputData);
      } else {
        recognizer.reset();
      }
      if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
        session.curRecognizer = recognizer;
        curRecognizer = recognizer;
      }
      i2++;
    }
  };
  _proto.get = function get2(recognizer) {
    if (recognizer instanceof Recognizer) {
      return recognizer;
    }
    var recognizers = this.recognizers;
    for (var i2 = 0; i2 < recognizers.length; i2++) {
      if (recognizers[i2].options.event === recognizer) {
        return recognizers[i2];
      }
    }
    return null;
  };
  _proto.add = function add(recognizer) {
    if (invokeArrayArg(recognizer, "add", this)) {
      return this;
    }
    var existing = this.get(recognizer.options.event);
    if (existing) {
      this.remove(existing);
    }
    this.recognizers.push(recognizer);
    recognizer.manager = this;
    this.touchAction.update();
    return recognizer;
  };
  _proto.remove = function remove2(recognizer) {
    if (invokeArrayArg(recognizer, "remove", this)) {
      return this;
    }
    var targetRecognizer = this.get(recognizer);
    if (recognizer) {
      var recognizers = this.recognizers;
      var index2 = inArray(recognizers, targetRecognizer);
      if (index2 !== -1) {
        recognizers.splice(index2, 1);
        this.touchAction.update();
      }
    }
    return this;
  };
  _proto.on = function on(events, handler) {
    if (events === void 0 || handler === void 0) {
      return this;
    }
    var handlers = this.handlers;
    each(splitStr(events), function(event) {
      handlers[event] = handlers[event] || [];
      handlers[event].push(handler);
    });
    return this;
  };
  _proto.off = function off(events, handler) {
    if (events === void 0) {
      return this;
    }
    var handlers = this.handlers;
    each(splitStr(events), function(event) {
      if (!handler) {
        delete handlers[event];
      } else {
        handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
      }
    });
    return this;
  };
  _proto.emit = function emit2(event, data2) {
    if (this.options.domEvents) {
      triggerDomEvent(event, data2);
    }
    var handlers = this.handlers[event] && this.handlers[event].slice();
    if (!handlers || !handlers.length) {
      return;
    }
    data2.type = event;
    data2.preventDefault = function() {
      data2.srcEvent.preventDefault();
    };
    var i2 = 0;
    while (i2 < handlers.length) {
      handlers[i2](data2);
      i2++;
    }
  };
  _proto.destroy = function destroy() {
    this.element && toggleCssProps(this, false);
    this.handlers = {};
    this.session = {};
    this.input.destroy();
    this.element = null;
  };
  return Manager2;
}();
var SINGLE_TOUCH_INPUT_MAP = {
  touchstart: INPUT_START,
  touchmove: INPUT_MOVE,
  touchend: INPUT_END,
  touchcancel: INPUT_CANCEL
};
var SINGLE_TOUCH_TARGET_EVENTS = "touchstart";
var SINGLE_TOUCH_WINDOW_EVENTS = "touchstart touchmove touchend touchcancel";
var SingleTouchInput = /* @__PURE__ */ function(_Input) {
  _inheritsLoose(SingleTouchInput2, _Input);
  function SingleTouchInput2() {
    var _this;
    var proto = SingleTouchInput2.prototype;
    proto.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
    proto.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
    _this = _Input.apply(this, arguments) || this;
    _this.started = false;
    return _this;
  }
  var _proto = SingleTouchInput2.prototype;
  _proto.handler = function handler(ev) {
    var type = SINGLE_TOUCH_INPUT_MAP[ev.type];
    if (type === INPUT_START) {
      this.started = true;
    }
    if (!this.started) {
      return;
    }
    var touches = normalizeSingleTouches.call(this, ev, type);
    if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
      this.started = false;
    }
    this.callback(this.manager, type, {
      pointers: touches[0],
      changedPointers: touches[1],
      pointerType: INPUT_TYPE_TOUCH,
      srcEvent: ev
    });
  };
  return SingleTouchInput2;
}(Input);
function normalizeSingleTouches(ev, type) {
  var all2 = toArray(ev.touches);
  var changed = toArray(ev.changedTouches);
  if (type & (INPUT_END | INPUT_CANCEL)) {
    all2 = uniqueArray(all2.concat(changed), "identifier", true);
  }
  return [all2, changed];
}
function deprecate(method2, name, message2) {
  var deprecationMessage = "DEPRECATED METHOD: " + name + "\n" + message2 + " AT \n";
  return function() {
    var e2 = new Error("get-stack-trace");
    var stack2 = e2 && e2.stack ? e2.stack.replace(/^[^\(]+?[\n$]/gm, "").replace(/^\s+at\s+/gm, "").replace(/^Object.<anonymous>\s*\(/gm, "{anonymous}()@") : "Unknown Stack Trace";
    var log = window.console && (window.console.warn || window.console.log);
    if (log) {
      log.call(window.console, deprecationMessage, stack2);
    }
    return method2.apply(this, arguments);
  };
}
var extend = deprecate(function(dest, src, merge2) {
  var keys6 = Object.keys(src);
  var i2 = 0;
  while (i2 < keys6.length) {
    if (!merge2 || merge2 && dest[keys6[i2]] === void 0) {
      dest[keys6[i2]] = src[keys6[i2]];
    }
    i2++;
  }
  return dest;
}, "extend", "Use `assign`.");
var merge$2 = deprecate(function(dest, src) {
  return extend(dest, src, true);
}, "merge", "Use `assign`.");
function inherit(child2, base, properties) {
  var baseP = base.prototype;
  var childP;
  childP = child2.prototype = Object.create(baseP);
  childP.constructor = child2;
  childP._super = baseP;
  if (properties) {
    assign$1(childP, properties);
  }
}
function bindFn(fn2, context) {
  return function boundFn() {
    return fn2.apply(context, arguments);
  };
}
var Hammer$2 = /* @__PURE__ */ function() {
  var Hammer2 = (
    /**
      * @private
      * @const {string}
      */
    function Hammer3(element, options) {
      if (options === void 0) {
        options = {};
      }
      return new Manager(element, _extends({
        recognizers: preset.concat()
      }, options));
    }
  );
  Hammer2.VERSION = "2.0.17-rc";
  Hammer2.DIRECTION_ALL = DIRECTION_ALL;
  Hammer2.DIRECTION_DOWN = DIRECTION_DOWN;
  Hammer2.DIRECTION_LEFT = DIRECTION_LEFT;
  Hammer2.DIRECTION_RIGHT = DIRECTION_RIGHT;
  Hammer2.DIRECTION_UP = DIRECTION_UP;
  Hammer2.DIRECTION_HORIZONTAL = DIRECTION_HORIZONTAL;
  Hammer2.DIRECTION_VERTICAL = DIRECTION_VERTICAL;
  Hammer2.DIRECTION_NONE = DIRECTION_NONE;
  Hammer2.DIRECTION_DOWN = DIRECTION_DOWN;
  Hammer2.INPUT_START = INPUT_START;
  Hammer2.INPUT_MOVE = INPUT_MOVE;
  Hammer2.INPUT_END = INPUT_END;
  Hammer2.INPUT_CANCEL = INPUT_CANCEL;
  Hammer2.STATE_POSSIBLE = STATE_POSSIBLE;
  Hammer2.STATE_BEGAN = STATE_BEGAN;
  Hammer2.STATE_CHANGED = STATE_CHANGED;
  Hammer2.STATE_ENDED = STATE_ENDED;
  Hammer2.STATE_RECOGNIZED = STATE_RECOGNIZED;
  Hammer2.STATE_CANCELLED = STATE_CANCELLED;
  Hammer2.STATE_FAILED = STATE_FAILED;
  Hammer2.Manager = Manager;
  Hammer2.Input = Input;
  Hammer2.TouchAction = TouchAction;
  Hammer2.TouchInput = TouchInput;
  Hammer2.MouseInput = MouseInput;
  Hammer2.PointerEventInput = PointerEventInput;
  Hammer2.TouchMouseInput = TouchMouseInput;
  Hammer2.SingleTouchInput = SingleTouchInput;
  Hammer2.Recognizer = Recognizer;
  Hammer2.AttrRecognizer = AttrRecognizer;
  Hammer2.Tap = TapRecognizer;
  Hammer2.Pan = PanRecognizer;
  Hammer2.Swipe = SwipeRecognizer;
  Hammer2.Pinch = PinchRecognizer;
  Hammer2.Rotate = RotateRecognizer;
  Hammer2.Press = PressRecognizer;
  Hammer2.on = addEventListeners;
  Hammer2.off = removeEventListeners;
  Hammer2.each = each;
  Hammer2.merge = merge$2;
  Hammer2.extend = extend;
  Hammer2.bindFn = bindFn;
  Hammer2.assign = assign$1;
  Hammer2.inherit = inherit;
  Hammer2.bindFn = bindFn;
  Hammer2.prefixed = prefixed;
  Hammer2.toArray = toArray;
  Hammer2.inArray = inArray;
  Hammer2.uniqueArray = uniqueArray;
  Hammer2.splitStr = splitStr;
  Hammer2.boolOrFn = boolOrFn;
  Hammer2.hasParent = hasParent;
  Hammer2.addEventListeners = addEventListeners;
  Hammer2.removeEventListeners = removeEventListeners;
  Hammer2.defaults = assign$1({}, defaults, {
    preset
  });
  return Hammer2;
}();
Hammer$2.defaults;
var RealHammer = Hammer$2;
function _createForOfIteratorHelper$6(o2, allowArrayLike) {
  var it2 = typeof _Symbol !== "undefined" && _getIteratorMethod(o2) || o2["@@iterator"];
  if (!it2) {
    if (_Array$isArray(o2) || (it2 = _unsupportedIterableToArray$6(o2)) || allowArrayLike) {
      if (it2) o2 = it2;
      var i2 = 0;
      var F = function F2() {
      };
      return { s: F, n: function n2() {
        if (i2 >= o2.length) return { done: true };
        return { done: false, value: o2[i2++] };
      }, e: function e2(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s2() {
    it2 = it2.call(o2);
  }, n: function n2() {
    var step = it2.next();
    normalCompletion = step.done;
    return step;
  }, e: function e2(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f2() {
    try {
      if (!normalCompletion && it2.return != null) it2.return();
    } finally {
      if (didErr) throw err;
    }
  } };
}
function _unsupportedIterableToArray$6(o2, minLen) {
  var _context17;
  if (!o2) return;
  if (typeof o2 === "string") return _arrayLikeToArray$6(o2, minLen);
  var n2 = _sliceInstanceProperty(_context17 = Object.prototype.toString.call(o2)).call(_context17, 8, -1);
  if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set") return _Array$from$1(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$6(o2, minLen);
}
function _arrayLikeToArray$6(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
  return arr2;
}
_Symbol("DELETE");
function Alea() {
  for (var _len3 = arguments.length, seed = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    seed[_key3] = arguments[_key3];
  }
  return AleaImplementation(seed.length ? seed : [_Date$now()]);
}
function AleaImplementation(seed) {
  var _mashSeed = mashSeed(seed), _mashSeed2 = _slicedToArray(_mashSeed, 3), s0 = _mashSeed2[0], s1 = _mashSeed2[1], s2 = _mashSeed2[2];
  var c2 = 1;
  var random = function random2() {
    var t2 = 2091639 * s0 + c2 * 23283064365386963e-26;
    s0 = s1;
    s1 = s2;
    return s2 = t2 - (c2 = t2 | 0);
  };
  random.uint32 = function() {
    return random() * 4294967296;
  };
  random.fract53 = function() {
    return random() + (random() * 2097152 | 0) * 11102230246251565e-32;
  };
  random.algorithm = "Alea";
  random.seed = seed;
  random.version = "0.9";
  return random;
}
function mashSeed() {
  var mash = Mash();
  var s0 = mash(" ");
  var s1 = mash(" ");
  var s2 = mash(" ");
  for (var i2 = 0; i2 < arguments.length; i2++) {
    s0 -= mash(i2 < 0 || arguments.length <= i2 ? void 0 : arguments[i2]);
    if (s0 < 0) {
      s0 += 1;
    }
    s1 -= mash(i2 < 0 || arguments.length <= i2 ? void 0 : arguments[i2]);
    if (s1 < 0) {
      s1 += 1;
    }
    s2 -= mash(i2 < 0 || arguments.length <= i2 ? void 0 : arguments[i2]);
    if (s2 < 0) {
      s2 += 1;
    }
  }
  return [s0, s1, s2];
}
function Mash() {
  var n2 = 4022871197;
  return function(data2) {
    var string2 = data2.toString();
    for (var i2 = 0; i2 < string2.length; i2++) {
      n2 += string2.charCodeAt(i2);
      var h2 = 0.02519603282416938 * n2;
      n2 = h2 >>> 0;
      h2 -= n2;
      h2 *= n2;
      n2 = h2 >>> 0;
      h2 -= n2;
      n2 += h2 * 4294967296;
    }
    return (n2 >>> 0) * 23283064365386963e-26;
  };
}
function hammerMock() {
  var noop2 = function noop3() {
  };
  return {
    on: noop2,
    off: noop2,
    destroy: noop2,
    emit: noop2,
    get: function get2() {
      return {
        set: noop2
      };
    }
  };
}
var Hammer$1 = typeof window !== "undefined" ? window.Hammer || RealHammer : function() {
  return hammerMock();
};
function Activator$1(container) {
  var _this = this, _context3;
  this._cleanupQueue = [];
  this.active = false;
  this._dom = {
    container,
    overlay: document.createElement("div")
  };
  this._dom.overlay.classList.add("vis-overlay");
  this._dom.container.appendChild(this._dom.overlay);
  this._cleanupQueue.push(function() {
    _this._dom.overlay.parentNode.removeChild(_this._dom.overlay);
  });
  var hammer2 = Hammer$1(this._dom.overlay);
  hammer2.on("tap", _bindInstanceProperty$1(_context3 = this._onTapOverlay).call(_context3, this));
  this._cleanupQueue.push(function() {
    hammer2.destroy();
  });
  var events = ["tap", "doubletap", "press", "pinch", "pan", "panstart", "panmove", "panend"];
  _forEachInstanceProperty(events).call(events, function(event) {
    hammer2.on(event, function(event2) {
      event2.srcEvent.stopPropagation();
    });
  });
  if (document && document.body) {
    this._onClick = function(event) {
      if (!_hasParent(event.target, container)) {
        _this.deactivate();
      }
    };
    document.body.addEventListener("click", this._onClick);
    this._cleanupQueue.push(function() {
      document.body.removeEventListener("click", _this._onClick);
    });
  }
  this._escListener = function(event) {
    if ("key" in event ? event.key === "Escape" : event.keyCode === 27) {
      _this.deactivate();
    }
  };
}
Emitter(Activator$1.prototype);
Activator$1.current = null;
Activator$1.prototype.destroy = function() {
  var _context4, _context5;
  this.deactivate();
  var _iterator2 = _createForOfIteratorHelper$6(_reverseInstanceProperty(_context4 = _spliceInstanceProperty(_context5 = this._cleanupQueue).call(_context5, 0)).call(_context4)), _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
      var callback = _step2.value;
      callback();
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
};
Activator$1.prototype.activate = function() {
  if (Activator$1.current) {
    Activator$1.current.deactivate();
  }
  Activator$1.current = this;
  this.active = true;
  this._dom.overlay.style.display = "none";
  this._dom.container.classList.add("vis-active");
  this.emit("change");
  this.emit("activate");
  document.body.addEventListener("keydown", this._escListener);
};
Activator$1.prototype.deactivate = function() {
  this.active = false;
  this._dom.overlay.style.display = "block";
  this._dom.container.classList.remove("vis-active");
  document.body.removeEventListener("keydown", this._escListener);
  this.emit("change");
  this.emit("deactivate");
};
Activator$1.prototype._onTapOverlay = function(event) {
  this.activate();
  event.srcEvent.stopPropagation();
};
function _hasParent(element, parent2) {
  while (element) {
    if (element === parent2) {
      return true;
    }
    element = element.parentNode;
  }
  return false;
}
var fullHexRE = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i;
var shortHexRE = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
var rgbRE = /^rgb\( *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *\)$/i;
var rgbaRE = /^rgba\( *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *([01]|0?\.\d+) *\)$/i;
function recursiveDOMDelete(DOMobject) {
  if (DOMobject) {
    while (DOMobject.hasChildNodes() === true) {
      var child2 = DOMobject.firstChild;
      if (child2) {
        recursiveDOMDelete(child2);
        DOMobject.removeChild(child2);
      }
    }
  }
}
function isString(value2) {
  return value2 instanceof String || typeof value2 === "string";
}
function isObject$7(value2) {
  return _typeof(value2) === "object" && value2 !== null;
}
function copyOrDelete(a2, b2, prop, allowDeletion) {
  var doDeletion = false;
  if (allowDeletion === true) {
    doDeletion = b2[prop] === null && a2[prop] !== void 0;
  }
  if (doDeletion) {
    delete a2[prop];
  } else {
    a2[prop] = b2[prop];
  }
}
function fillIfDefined(a2, b2) {
  var allowDeletion = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  for (var prop in a2) {
    if (b2[prop] !== void 0) {
      if (b2[prop] === null || _typeof(b2[prop]) !== "object") {
        copyOrDelete(a2, b2, prop, allowDeletion);
      } else {
        var aProp = a2[prop];
        var bProp = b2[prop];
        if (isObject$7(aProp) && isObject$7(bProp)) {
          fillIfDefined(aProp, bProp, allowDeletion);
        }
      }
    }
  }
}
function selectiveDeepExtend(props, a2, b2) {
  var allowDeletion = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
  if (_Array$isArray(b2)) {
    throw new TypeError("Arrays are not supported by deepExtend");
  }
  for (var p2 = 0; p2 < props.length; p2++) {
    var prop = props[p2];
    if (Object.prototype.hasOwnProperty.call(b2, prop)) {
      if (b2[prop] && b2[prop].constructor === Object) {
        if (a2[prop] === void 0) {
          a2[prop] = {};
        }
        if (a2[prop].constructor === Object) {
          deepExtend(a2[prop], b2[prop], false, allowDeletion);
        } else {
          copyOrDelete(a2, b2, prop, allowDeletion);
        }
      } else if (_Array$isArray(b2[prop])) {
        throw new TypeError("Arrays are not supported by deepExtend");
      } else {
        copyOrDelete(a2, b2, prop, allowDeletion);
      }
    }
  }
  return a2;
}
function selectiveNotDeepExtend(propsToExclude, a2, b2) {
  var allowDeletion = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
  if (_Array$isArray(b2)) {
    throw new TypeError("Arrays are not supported by deepExtend");
  }
  for (var prop in b2) {
    if (!Object.prototype.hasOwnProperty.call(b2, prop)) {
      continue;
    }
    if (_includesInstanceProperty(propsToExclude).call(propsToExclude, prop)) {
      continue;
    }
    if (b2[prop] && b2[prop].constructor === Object) {
      if (a2[prop] === void 0) {
        a2[prop] = {};
      }
      if (a2[prop].constructor === Object) {
        deepExtend(a2[prop], b2[prop]);
      } else {
        copyOrDelete(a2, b2, prop, allowDeletion);
      }
    } else if (_Array$isArray(b2[prop])) {
      a2[prop] = [];
      for (var i2 = 0; i2 < b2[prop].length; i2++) {
        a2[prop].push(b2[prop][i2]);
      }
    } else {
      copyOrDelete(a2, b2, prop, allowDeletion);
    }
  }
  return a2;
}
function deepExtend(a2, b2) {
  var protoExtend = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  var allowDeletion = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
  for (var prop in b2) {
    if (Object.prototype.hasOwnProperty.call(b2, prop) || protoExtend === true) {
      if (_typeof(b2[prop]) === "object" && b2[prop] !== null && _Object$getPrototypeOf$1(b2[prop]) === Object.prototype) {
        if (a2[prop] === void 0) {
          a2[prop] = deepExtend({}, b2[prop], protoExtend);
        } else if (_typeof(a2[prop]) === "object" && a2[prop] !== null && _Object$getPrototypeOf$1(a2[prop]) === Object.prototype) {
          deepExtend(a2[prop], b2[prop], protoExtend);
        } else {
          copyOrDelete(a2, b2, prop, allowDeletion);
        }
      } else if (_Array$isArray(b2[prop])) {
        var _context6;
        a2[prop] = _sliceInstanceProperty(_context6 = b2[prop]).call(_context6);
      } else {
        copyOrDelete(a2, b2, prop, allowDeletion);
      }
    }
  }
  return a2;
}
function copyAndExtendArray(arr, newValue) {
  var _context7;
  return _concatInstanceProperty(_context7 = []).call(_context7, _toConsumableArray(arr), [newValue]);
}
function copyArray(arr) {
  return _sliceInstanceProperty(arr).call(arr);
}
function getAbsoluteLeft(elem) {
  return elem.getBoundingClientRect().left;
}
function getAbsoluteTop(elem) {
  return elem.getBoundingClientRect().top;
}
function forEach$1(object2, callback) {
  if (_Array$isArray(object2)) {
    var len = object2.length;
    for (var i2 = 0; i2 < len; i2++) {
      callback(object2[i2], i2, object2);
    }
  } else {
    for (var key2 in object2) {
      if (Object.prototype.hasOwnProperty.call(object2, key2)) {
        callback(object2[key2], key2, object2);
      }
    }
  }
}
function hexToRGB(hex2) {
  var result;
  switch (hex2.length) {
    case 3:
    case 4:
      result = shortHexRE.exec(hex2);
      return result ? {
        r: _parseInt$1(result[1] + result[1], 16),
        g: _parseInt$1(result[2] + result[2], 16),
        b: _parseInt$1(result[3] + result[3], 16)
      } : null;
    case 6:
    case 7:
      result = fullHexRE.exec(hex2);
      return result ? {
        r: _parseInt$1(result[1], 16),
        g: _parseInt$1(result[2], 16),
        b: _parseInt$1(result[3], 16)
      } : null;
    default:
      return null;
  }
}
function overrideOpacity(color, opacity) {
  if (_includesInstanceProperty(color).call(color, "rgba")) {
    return color;
  } else if (_includesInstanceProperty(color).call(color, "rgb")) {
    var rgb = color.substr(_indexOfInstanceProperty(color).call(color, "(") + 1).replace(")", "").split(",");
    return "rgba(" + rgb[0] + "," + rgb[1] + "," + rgb[2] + "," + opacity + ")";
  } else {
    var _rgb = hexToRGB(color);
    if (_rgb == null) {
      return color;
    } else {
      return "rgba(" + _rgb.r + "," + _rgb.g + "," + _rgb.b + "," + opacity + ")";
    }
  }
}
function RGBToHex(red, green, blue) {
  var _context10;
  return "#" + _sliceInstanceProperty(_context10 = ((1 << 24) + (red << 16) + (green << 8) + blue).toString(16)).call(_context10, 1);
}
function parseColor(inputColor, defaultColor) {
  if (isString(inputColor)) {
    var colorStr = inputColor;
    if (isValidRGB(colorStr)) {
      var _context11;
      var rgb = _mapInstanceProperty(_context11 = colorStr.substr(4).substr(0, colorStr.length - 5).split(",")).call(_context11, function(value2) {
        return _parseInt$1(value2);
      });
      colorStr = RGBToHex(rgb[0], rgb[1], rgb[2]);
    }
    if (isValidHex(colorStr) === true) {
      var hsv = hexToHSV(colorStr);
      var lighterColorHSV = {
        h: hsv.h,
        s: hsv.s * 0.8,
        v: Math.min(1, hsv.v * 1.02)
      };
      var darkerColorHSV = {
        h: hsv.h,
        s: Math.min(1, hsv.s * 1.25),
        v: hsv.v * 0.8
      };
      var darkerColorHex = HSVToHex(darkerColorHSV.h, darkerColorHSV.s, darkerColorHSV.v);
      var lighterColorHex = HSVToHex(lighterColorHSV.h, lighterColorHSV.s, lighterColorHSV.v);
      return {
        background: colorStr,
        border: darkerColorHex,
        highlight: {
          background: lighterColorHex,
          border: darkerColorHex
        },
        hover: {
          background: lighterColorHex,
          border: darkerColorHex
        }
      };
    } else {
      return {
        background: colorStr,
        border: colorStr,
        highlight: {
          background: colorStr,
          border: colorStr
        },
        hover: {
          background: colorStr,
          border: colorStr
        }
      };
    }
  } else {
    {
      var _color = {
        background: inputColor.background || void 0,
        border: inputColor.border || void 0,
        highlight: isString(inputColor.highlight) ? {
          border: inputColor.highlight,
          background: inputColor.highlight
        } : {
          background: inputColor.highlight && inputColor.highlight.background || void 0,
          border: inputColor.highlight && inputColor.highlight.border || void 0
        },
        hover: isString(inputColor.hover) ? {
          border: inputColor.hover,
          background: inputColor.hover
        } : {
          border: inputColor.hover && inputColor.hover.border || void 0,
          background: inputColor.hover && inputColor.hover.background || void 0
        }
      };
      return _color;
    }
  }
}
function RGBToHSV(red, green, blue) {
  red = red / 255;
  green = green / 255;
  blue = blue / 255;
  var minRGB = Math.min(red, Math.min(green, blue));
  var maxRGB = Math.max(red, Math.max(green, blue));
  if (minRGB === maxRGB) {
    return {
      h: 0,
      s: 0,
      v: minRGB
    };
  }
  var d2 = red === minRGB ? green - blue : blue === minRGB ? red - green : blue - red;
  var h2 = red === minRGB ? 3 : blue === minRGB ? 1 : 5;
  var hue = 60 * (h2 - d2 / (maxRGB - minRGB)) / 360;
  var saturation = (maxRGB - minRGB) / maxRGB;
  var value2 = maxRGB;
  return {
    h: hue,
    s: saturation,
    v: value2
  };
}
function HSVToRGB(h2, s2, v2) {
  var r2;
  var g2;
  var b2;
  var i2 = Math.floor(h2 * 6);
  var f2 = h2 * 6 - i2;
  var p2 = v2 * (1 - s2);
  var q2 = v2 * (1 - f2 * s2);
  var t2 = v2 * (1 - (1 - f2) * s2);
  switch (i2 % 6) {
    case 0:
      r2 = v2, g2 = t2, b2 = p2;
      break;
    case 1:
      r2 = q2, g2 = v2, b2 = p2;
      break;
    case 2:
      r2 = p2, g2 = v2, b2 = t2;
      break;
    case 3:
      r2 = p2, g2 = q2, b2 = v2;
      break;
    case 4:
      r2 = t2, g2 = p2, b2 = v2;
      break;
    case 5:
      r2 = v2, g2 = p2, b2 = q2;
      break;
  }
  return {
    r: Math.floor(r2 * 255),
    g: Math.floor(g2 * 255),
    b: Math.floor(b2 * 255)
  };
}
function HSVToHex(h2, s2, v2) {
  var rgb = HSVToRGB(h2, s2, v2);
  return RGBToHex(rgb.r, rgb.g, rgb.b);
}
function hexToHSV(hex2) {
  var rgb = hexToRGB(hex2);
  if (!rgb) {
    throw new TypeError("'".concat(hex2, "' is not a valid color."));
  }
  return RGBToHSV(rgb.r, rgb.g, rgb.b);
}
function isValidHex(hex2) {
  var isOk = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(hex2);
  return isOk;
}
function isValidRGB(rgb) {
  return rgbRE.test(rgb);
}
function isValidRGBA(rgba) {
  return rgbaRE.test(rgba);
}
function bridgeObject(referenceObject) {
  if (referenceObject === null || _typeof(referenceObject) !== "object") {
    return null;
  }
  if (referenceObject instanceof Element) {
    return referenceObject;
  }
  var objectTo = _Object$create$1(referenceObject);
  for (var i2 in referenceObject) {
    if (Object.prototype.hasOwnProperty.call(referenceObject, i2)) {
      if (_typeof(referenceObject[i2]) == "object") {
        objectTo[i2] = bridgeObject(referenceObject[i2]);
      }
    }
  }
  return objectTo;
}
function mergeOptions(mergeTarget, options, option) {
  var globalOptions = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
  var isPresent = function isPresent2(obj) {
    return obj !== null && obj !== void 0;
  };
  var isObject2 = function isObject3(obj) {
    return obj !== null && _typeof(obj) === "object";
  };
  var isEmpty2 = function isEmpty3(obj) {
    for (var x2 in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, x2)) {
        return false;
      }
    }
    return true;
  };
  if (!isObject2(mergeTarget)) {
    throw new Error("Parameter mergeTarget must be an object");
  }
  if (!isObject2(options)) {
    throw new Error("Parameter options must be an object");
  }
  if (!isPresent(option)) {
    throw new Error("Parameter option must have a value");
  }
  if (!isObject2(globalOptions)) {
    throw new Error("Parameter globalOptions must be an object");
  }
  var doMerge = function doMerge2(target, options2, option2) {
    if (!isObject2(target[option2])) {
      target[option2] = {};
    }
    var src = options2[option2];
    var dst = target[option2];
    for (var prop in src) {
      if (Object.prototype.hasOwnProperty.call(src, prop)) {
        dst[prop] = src[prop];
      }
    }
  };
  var srcOption = options[option];
  var globalPassed = isObject2(globalOptions) && !isEmpty2(globalOptions);
  var globalOption = globalPassed ? globalOptions[option] : void 0;
  var globalEnabled = globalOption ? globalOption.enabled : void 0;
  if (srcOption === void 0) {
    return;
  }
  if (typeof srcOption === "boolean") {
    if (!isObject2(mergeTarget[option])) {
      mergeTarget[option] = {};
    }
    mergeTarget[option].enabled = srcOption;
    return;
  }
  if (srcOption === null && !isObject2(mergeTarget[option])) {
    if (isPresent(globalOption)) {
      mergeTarget[option] = _Object$create$1(globalOption);
    } else {
      return;
    }
  }
  if (!isObject2(srcOption)) {
    return;
  }
  var enabled = true;
  if (srcOption.enabled !== void 0) {
    enabled = srcOption.enabled;
  } else {
    if (globalEnabled !== void 0) {
      enabled = globalOption.enabled;
    }
  }
  doMerge(mergeTarget, options, option);
  mergeTarget[option].enabled = enabled;
}
var easingFunctions = {
  /**
   * Provides no easing and no acceleration.
   *
   * @param t - Time.
   * @returns Value at time t.
   */
  linear: function linear(t2) {
    return t2;
  },
  /**
   * Accelerate from zero velocity.
   *
   * @param t - Time.
   * @returns Value at time t.
   */
  easeInQuad: function easeInQuad(t2) {
    return t2 * t2;
  },
  /**
   * Decelerate to zero velocity.
   *
   * @param t - Time.
   * @returns Value at time t.
   */
  easeOutQuad: function easeOutQuad(t2) {
    return t2 * (2 - t2);
  },
  /**
   * Accelerate until halfway, then decelerate.
   *
   * @param t - Time.
   * @returns Value at time t.
   */
  easeInOutQuad: function easeInOutQuad(t2) {
    return t2 < 0.5 ? 2 * t2 * t2 : -1 + (4 - 2 * t2) * t2;
  },
  /**
   * Accelerate from zero velocity.
   *
   * @param t - Time.
   * @returns Value at time t.
   */
  easeInCubic: function easeInCubic(t2) {
    return t2 * t2 * t2;
  },
  /**
   * Decelerate to zero velocity.
   *
   * @param t - Time.
   * @returns Value at time t.
   */
  easeOutCubic: function easeOutCubic(t2) {
    return --t2 * t2 * t2 + 1;
  },
  /**
   * Accelerate until halfway, then decelerate.
   *
   * @param t - Time.
   * @returns Value at time t.
   */
  easeInOutCubic: function easeInOutCubic(t2) {
    return t2 < 0.5 ? 4 * t2 * t2 * t2 : (t2 - 1) * (2 * t2 - 2) * (2 * t2 - 2) + 1;
  },
  /**
   * Accelerate from zero velocity.
   *
   * @param t - Time.
   * @returns Value at time t.
   */
  easeInQuart: function easeInQuart(t2) {
    return t2 * t2 * t2 * t2;
  },
  /**
   * Decelerate to zero velocity.
   *
   * @param t - Time.
   * @returns Value at time t.
   */
  easeOutQuart: function easeOutQuart(t2) {
    return 1 - --t2 * t2 * t2 * t2;
  },
  /**
   * Accelerate until halfway, then decelerate.
   *
   * @param t - Time.
   * @returns Value at time t.
   */
  easeInOutQuart: function easeInOutQuart(t2) {
    return t2 < 0.5 ? 8 * t2 * t2 * t2 * t2 : 1 - 8 * --t2 * t2 * t2 * t2;
  },
  /**
   * Accelerate from zero velocity.
   *
   * @param t - Time.
   * @returns Value at time t.
   */
  easeInQuint: function easeInQuint(t2) {
    return t2 * t2 * t2 * t2 * t2;
  },
  /**
   * Decelerate to zero velocity.
   *
   * @param t - Time.
   * @returns Value at time t.
   */
  easeOutQuint: function easeOutQuint(t2) {
    return 1 + --t2 * t2 * t2 * t2 * t2;
  },
  /**
   * Accelerate until halfway, then decelerate.
   *
   * @param t - Time.
   * @returns Value at time t.
   */
  easeInOutQuint: function easeInOutQuint(t2) {
    return t2 < 0.5 ? 16 * t2 * t2 * t2 * t2 * t2 : 1 + 16 * --t2 * t2 * t2 * t2 * t2;
  }
};
function topMost(pile, accessors) {
  var candidate;
  if (!_Array$isArray(accessors)) {
    accessors = [accessors];
  }
  var _iterator3 = _createForOfIteratorHelper$6(pile), _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
      var member = _step3.value;
      if (member) {
        candidate = member[accessors[0]];
        for (var i2 = 1; i2 < accessors.length; i2++) {
          if (candidate) {
            candidate = candidate[accessors[i2]];
          }
        }
        if (typeof candidate !== "undefined") {
          break;
        }
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
  return candidate;
}
var htmlColors = {
  black: "#000000",
  navy: "#000080",
  darkblue: "#00008B",
  mediumblue: "#0000CD",
  blue: "#0000FF",
  darkgreen: "#006400",
  green: "#008000",
  teal: "#008080",
  darkcyan: "#008B8B",
  deepskyblue: "#00BFFF",
  darkturquoise: "#00CED1",
  mediumspringgreen: "#00FA9A",
  lime: "#00FF00",
  springgreen: "#00FF7F",
  aqua: "#00FFFF",
  cyan: "#00FFFF",
  midnightblue: "#191970",
  dodgerblue: "#1E90FF",
  lightseagreen: "#20B2AA",
  forestgreen: "#228B22",
  seagreen: "#2E8B57",
  darkslategray: "#2F4F4F",
  limegreen: "#32CD32",
  mediumseagreen: "#3CB371",
  turquoise: "#40E0D0",
  royalblue: "#4169E1",
  steelblue: "#4682B4",
  darkslateblue: "#483D8B",
  mediumturquoise: "#48D1CC",
  indigo: "#4B0082",
  darkolivegreen: "#556B2F",
  cadetblue: "#5F9EA0",
  cornflowerblue: "#6495ED",
  mediumaquamarine: "#66CDAA",
  dimgray: "#696969",
  slateblue: "#6A5ACD",
  olivedrab: "#6B8E23",
  slategray: "#708090",
  lightslategray: "#778899",
  mediumslateblue: "#7B68EE",
  lawngreen: "#7CFC00",
  chartreuse: "#7FFF00",
  aquamarine: "#7FFFD4",
  maroon: "#800000",
  purple: "#800080",
  olive: "#808000",
  gray: "#808080",
  skyblue: "#87CEEB",
  lightskyblue: "#87CEFA",
  blueviolet: "#8A2BE2",
  darkred: "#8B0000",
  darkmagenta: "#8B008B",
  saddlebrown: "#8B4513",
  darkseagreen: "#8FBC8F",
  lightgreen: "#90EE90",
  mediumpurple: "#9370D8",
  darkviolet: "#9400D3",
  palegreen: "#98FB98",
  darkorchid: "#9932CC",
  yellowgreen: "#9ACD32",
  sienna: "#A0522D",
  brown: "#A52A2A",
  darkgray: "#A9A9A9",
  lightblue: "#ADD8E6",
  greenyellow: "#ADFF2F",
  paleturquoise: "#AFEEEE",
  lightsteelblue: "#B0C4DE",
  powderblue: "#B0E0E6",
  firebrick: "#B22222",
  darkgoldenrod: "#B8860B",
  mediumorchid: "#BA55D3",
  rosybrown: "#BC8F8F",
  darkkhaki: "#BDB76B",
  silver: "#C0C0C0",
  mediumvioletred: "#C71585",
  indianred: "#CD5C5C",
  peru: "#CD853F",
  chocolate: "#D2691E",
  tan: "#D2B48C",
  lightgrey: "#D3D3D3",
  palevioletred: "#D87093",
  thistle: "#D8BFD8",
  orchid: "#DA70D6",
  goldenrod: "#DAA520",
  crimson: "#DC143C",
  gainsboro: "#DCDCDC",
  plum: "#DDA0DD",
  burlywood: "#DEB887",
  lightcyan: "#E0FFFF",
  lavender: "#E6E6FA",
  darksalmon: "#E9967A",
  violet: "#EE82EE",
  palegoldenrod: "#EEE8AA",
  lightcoral: "#F08080",
  khaki: "#F0E68C",
  aliceblue: "#F0F8FF",
  honeydew: "#F0FFF0",
  azure: "#F0FFFF",
  sandybrown: "#F4A460",
  wheat: "#F5DEB3",
  beige: "#F5F5DC",
  whitesmoke: "#F5F5F5",
  mintcream: "#F5FFFA",
  ghostwhite: "#F8F8FF",
  salmon: "#FA8072",
  antiquewhite: "#FAEBD7",
  linen: "#FAF0E6",
  lightgoldenrodyellow: "#FAFAD2",
  oldlace: "#FDF5E6",
  red: "#FF0000",
  fuchsia: "#FF00FF",
  magenta: "#FF00FF",
  deeppink: "#FF1493",
  orangered: "#FF4500",
  tomato: "#FF6347",
  hotpink: "#FF69B4",
  coral: "#FF7F50",
  darkorange: "#FF8C00",
  lightsalmon: "#FFA07A",
  orange: "#FFA500",
  lightpink: "#FFB6C1",
  pink: "#FFC0CB",
  gold: "#FFD700",
  peachpuff: "#FFDAB9",
  navajowhite: "#FFDEAD",
  moccasin: "#FFE4B5",
  bisque: "#FFE4C4",
  mistyrose: "#FFE4E1",
  blanchedalmond: "#FFEBCD",
  papayawhip: "#FFEFD5",
  lavenderblush: "#FFF0F5",
  seashell: "#FFF5EE",
  cornsilk: "#FFF8DC",
  lemonchiffon: "#FFFACD",
  floralwhite: "#FFFAF0",
  snow: "#FFFAFA",
  yellow: "#FFFF00",
  lightyellow: "#FFFFE0",
  ivory: "#FFFFF0",
  white: "#FFFFFF"
};
var ColorPicker$1 = /* @__PURE__ */ function() {
  function ColorPicker() {
    var pixelRatio = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;
    _classCallCheck(this, ColorPicker);
    this.pixelRatio = pixelRatio;
    this.generated = false;
    this.centerCoordinates = {
      x: 289 / 2,
      y: 289 / 2
    };
    this.r = 289 * 0.49;
    this.color = {
      r: 255,
      g: 255,
      b: 255,
      a: 1
    };
    this.hueCircle = void 0;
    this.initialColor = {
      r: 255,
      g: 255,
      b: 255,
      a: 1
    };
    this.previousColor = void 0;
    this.applied = false;
    this.updateCallback = function() {
    };
    this.closeCallback = function() {
    };
    this._create();
  }
  _createClass(ColorPicker, [{
    key: "insertTo",
    value: function insertTo(container) {
      if (this.hammer !== void 0) {
        this.hammer.destroy();
        this.hammer = void 0;
      }
      this.container = container;
      this.container.appendChild(this.frame);
      this._bindHammer();
      this._setSize();
    }
    /**
     * the callback is executed on apply and save. Bind it to the application
     *
     * @param {Function} callback
     */
  }, {
    key: "setUpdateCallback",
    value: function setUpdateCallback(callback) {
      if (typeof callback === "function") {
        this.updateCallback = callback;
      } else {
        throw new Error("Function attempted to set as colorPicker update callback is not a function.");
      }
    }
    /**
     * the callback is executed on apply and save. Bind it to the application
     *
     * @param {Function} callback
     */
  }, {
    key: "setCloseCallback",
    value: function setCloseCallback(callback) {
      if (typeof callback === "function") {
        this.closeCallback = callback;
      } else {
        throw new Error("Function attempted to set as colorPicker closing callback is not a function.");
      }
    }
    /**
     *
     * @param {string} color
     * @returns {string}
     * @private
     */
  }, {
    key: "_isColorString",
    value: function _isColorString(color) {
      if (typeof color === "string") {
        return htmlColors[color];
      }
    }
    /**
     * Set the color of the colorPicker
     * Supported formats:
     * 'red'                   --> HTML color string
     * '#ffffff'               --> hex string
     * 'rgb(255,255,255)'      --> rgb string
     * 'rgba(255,255,255,1.0)' --> rgba string
     * {r:255,g:255,b:255}     --> rgb object
     * {r:255,g:255,b:255,a:1.0} --> rgba object
     *
     * @param {string | object} color
     * @param {boolean} [setInitial=true]
     */
  }, {
    key: "setColor",
    value: function setColor(color) {
      var setInitial = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      if (color === "none") {
        return;
      }
      var rgba;
      var htmlColor = this._isColorString(color);
      if (htmlColor !== void 0) {
        color = htmlColor;
      }
      if (isString(color) === true) {
        if (isValidRGB(color) === true) {
          var rgbaArray = color.substr(4).substr(0, color.length - 5).split(",");
          rgba = {
            r: rgbaArray[0],
            g: rgbaArray[1],
            b: rgbaArray[2],
            a: 1
          };
        } else if (isValidRGBA(color) === true) {
          var _rgbaArray = color.substr(5).substr(0, color.length - 6).split(",");
          rgba = {
            r: _rgbaArray[0],
            g: _rgbaArray[1],
            b: _rgbaArray[2],
            a: _rgbaArray[3]
          };
        } else if (isValidHex(color) === true) {
          var rgbObj = hexToRGB(color);
          rgba = {
            r: rgbObj.r,
            g: rgbObj.g,
            b: rgbObj.b,
            a: 1
          };
        }
      } else {
        if (color instanceof Object) {
          if (color.r !== void 0 && color.g !== void 0 && color.b !== void 0) {
            var alpha = color.a !== void 0 ? color.a : "1.0";
            rgba = {
              r: color.r,
              g: color.g,
              b: color.b,
              a: alpha
            };
          }
        }
      }
      if (rgba === void 0) {
        throw new Error("Unknown color passed to the colorPicker. Supported are strings: rgb, hex, rgba. Object: rgb ({r:r,g:g,b:b,[a:a]}). Supplied: " + _JSON$stringify(color));
      } else {
        this._setColor(rgba, setInitial);
      }
    }
    /**
     * this shows the color picker.
     * The hue circle is constructed once and stored.
     */
  }, {
    key: "show",
    value: function show() {
      if (this.closeCallback !== void 0) {
        this.closeCallback();
        this.closeCallback = void 0;
      }
      this.applied = false;
      this.frame.style.display = "block";
      this._generateHueCircle();
    }
    // ------------------------------------------ PRIVATE ----------------------------- //
    /**
     * Hide the picker. Is called by the cancel button.
     * Optional boolean to store the previous color for easy access later on.
     *
     * @param {boolean} [storePrevious=true]
     * @private
     */
  }, {
    key: "_hide",
    value: function _hide() {
      var _this2 = this;
      var storePrevious = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
      if (storePrevious === true) {
        this.previousColor = _Object$assign({}, this.color);
      }
      if (this.applied === true) {
        this.updateCallback(this.initialColor);
      }
      this.frame.style.display = "none";
      _setTimeout(function() {
        if (_this2.closeCallback !== void 0) {
          _this2.closeCallback();
          _this2.closeCallback = void 0;
        }
      }, 0);
    }
    /**
     * bound to the save button. Saves and hides.
     *
     * @private
     */
  }, {
    key: "_save",
    value: function _save() {
      this.updateCallback(this.color);
      this.applied = false;
      this._hide();
    }
    /**
     * Bound to apply button. Saves but does not close. Is undone by the cancel button.
     *
     * @private
     */
  }, {
    key: "_apply",
    value: function _apply() {
      this.applied = true;
      this.updateCallback(this.color);
      this._updatePicker(this.color);
    }
    /**
     * load the color from the previous session.
     *
     * @private
     */
  }, {
    key: "_loadLast",
    value: function _loadLast() {
      if (this.previousColor !== void 0) {
        this.setColor(this.previousColor, false);
      } else {
        alert("There is no last color to load...");
      }
    }
    /**
     * set the color, place the picker
     *
     * @param {object} rgba
     * @param {boolean} [setInitial=true]
     * @private
     */
  }, {
    key: "_setColor",
    value: function _setColor(rgba) {
      var setInitial = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      if (setInitial === true) {
        this.initialColor = _Object$assign({}, rgba);
      }
      this.color = rgba;
      var hsv = RGBToHSV(rgba.r, rgba.g, rgba.b);
      var angleConvert = 2 * Math.PI;
      var radius = this.r * hsv.s;
      var x2 = this.centerCoordinates.x + radius * Math.sin(angleConvert * hsv.h);
      var y2 = this.centerCoordinates.y + radius * Math.cos(angleConvert * hsv.h);
      this.colorPickerSelector.style.left = x2 - 0.5 * this.colorPickerSelector.clientWidth + "px";
      this.colorPickerSelector.style.top = y2 - 0.5 * this.colorPickerSelector.clientHeight + "px";
      this._updatePicker(rgba);
    }
    /**
     * bound to opacity control
     *
     * @param {number} value
     * @private
     */
  }, {
    key: "_setOpacity",
    value: function _setOpacity(value2) {
      this.color.a = value2 / 100;
      this._updatePicker(this.color);
    }
    /**
     * bound to brightness control
     *
     * @param {number} value
     * @private
     */
  }, {
    key: "_setBrightness",
    value: function _setBrightness(value2) {
      var hsv = RGBToHSV(this.color.r, this.color.g, this.color.b);
      hsv.v = value2 / 100;
      var rgba = HSVToRGB(hsv.h, hsv.s, hsv.v);
      rgba["a"] = this.color.a;
      this.color = rgba;
      this._updatePicker();
    }
    /**
     * update the color picker. A black circle overlays the hue circle to mimic the brightness decreasing.
     *
     * @param {object} rgba
     * @private
     */
  }, {
    key: "_updatePicker",
    value: function _updatePicker() {
      var rgba = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.color;
      var hsv = RGBToHSV(rgba.r, rgba.g, rgba.b);
      var ctx = this.colorPickerCanvas.getContext("2d");
      if (this.pixelRation === void 0) {
        this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);
      }
      ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
      var w2 = this.colorPickerCanvas.clientWidth;
      var h2 = this.colorPickerCanvas.clientHeight;
      ctx.clearRect(0, 0, w2, h2);
      ctx.putImageData(this.hueCircle, 0, 0);
      ctx.fillStyle = "rgba(0,0,0," + (1 - hsv.v) + ")";
      ctx.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r);
      _fillInstanceProperty(ctx).call(ctx);
      this.brightnessRange.value = 100 * hsv.v;
      this.opacityRange.value = 100 * rgba.a;
      this.initialColorDiv.style.backgroundColor = "rgba(" + this.initialColor.r + "," + this.initialColor.g + "," + this.initialColor.b + "," + this.initialColor.a + ")";
      this.newColorDiv.style.backgroundColor = "rgba(" + this.color.r + "," + this.color.g + "," + this.color.b + "," + this.color.a + ")";
    }
    /**
     * used by create to set the size of the canvas.
     *
     * @private
     */
  }, {
    key: "_setSize",
    value: function _setSize() {
      this.colorPickerCanvas.style.width = "100%";
      this.colorPickerCanvas.style.height = "100%";
      this.colorPickerCanvas.width = 289 * this.pixelRatio;
      this.colorPickerCanvas.height = 289 * this.pixelRatio;
    }
    /**
     * create all dom elements
     * TODO: cleanup, lots of similar dom elements
     *
     * @private
     */
  }, {
    key: "_create",
    value: function _create() {
      var _context12, _context13, _context14, _context15;
      this.frame = document.createElement("div");
      this.frame.className = "vis-color-picker";
      this.colorPickerDiv = document.createElement("div");
      this.colorPickerSelector = document.createElement("div");
      this.colorPickerSelector.className = "vis-selector";
      this.colorPickerDiv.appendChild(this.colorPickerSelector);
      this.colorPickerCanvas = document.createElement("canvas");
      this.colorPickerDiv.appendChild(this.colorPickerCanvas);
      if (!this.colorPickerCanvas.getContext) {
        var noCanvas = document.createElement("DIV");
        noCanvas.style.color = "red";
        noCanvas.style.fontWeight = "bold";
        noCanvas.style.padding = "10px";
        noCanvas.innerText = "Error: your browser does not support HTML canvas";
        this.colorPickerCanvas.appendChild(noCanvas);
      } else {
        var ctx = this.colorPickerCanvas.getContext("2d");
        this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);
        this.colorPickerCanvas.getContext("2d").setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
      }
      this.colorPickerDiv.className = "vis-color";
      this.opacityDiv = document.createElement("div");
      this.opacityDiv.className = "vis-opacity";
      this.brightnessDiv = document.createElement("div");
      this.brightnessDiv.className = "vis-brightness";
      this.arrowDiv = document.createElement("div");
      this.arrowDiv.className = "vis-arrow";
      this.opacityRange = document.createElement("input");
      try {
        this.opacityRange.type = "range";
        this.opacityRange.min = "0";
        this.opacityRange.max = "100";
      } catch (err) {
      }
      this.opacityRange.value = "100";
      this.opacityRange.className = "vis-range";
      this.brightnessRange = document.createElement("input");
      try {
        this.brightnessRange.type = "range";
        this.brightnessRange.min = "0";
        this.brightnessRange.max = "100";
      } catch (err) {
      }
      this.brightnessRange.value = "100";
      this.brightnessRange.className = "vis-range";
      this.opacityDiv.appendChild(this.opacityRange);
      this.brightnessDiv.appendChild(this.brightnessRange);
      var me = this;
      this.opacityRange.onchange = function() {
        me._setOpacity(this.value);
      };
      this.opacityRange.oninput = function() {
        me._setOpacity(this.value);
      };
      this.brightnessRange.onchange = function() {
        me._setBrightness(this.value);
      };
      this.brightnessRange.oninput = function() {
        me._setBrightness(this.value);
      };
      this.brightnessLabel = document.createElement("div");
      this.brightnessLabel.className = "vis-label vis-brightness";
      this.brightnessLabel.innerText = "brightness:";
      this.opacityLabel = document.createElement("div");
      this.opacityLabel.className = "vis-label vis-opacity";
      this.opacityLabel.innerText = "opacity:";
      this.newColorDiv = document.createElement("div");
      this.newColorDiv.className = "vis-new-color";
      this.newColorDiv.innerText = "new";
      this.initialColorDiv = document.createElement("div");
      this.initialColorDiv.className = "vis-initial-color";
      this.initialColorDiv.innerText = "initial";
      this.cancelButton = document.createElement("div");
      this.cancelButton.className = "vis-button vis-cancel";
      this.cancelButton.innerText = "cancel";
      this.cancelButton.onclick = _bindInstanceProperty$1(_context12 = this._hide).call(_context12, this, false);
      this.applyButton = document.createElement("div");
      this.applyButton.className = "vis-button vis-apply";
      this.applyButton.innerText = "apply";
      this.applyButton.onclick = _bindInstanceProperty$1(_context13 = this._apply).call(_context13, this);
      this.saveButton = document.createElement("div");
      this.saveButton.className = "vis-button vis-save";
      this.saveButton.innerText = "save";
      this.saveButton.onclick = _bindInstanceProperty$1(_context14 = this._save).call(_context14, this);
      this.loadButton = document.createElement("div");
      this.loadButton.className = "vis-button vis-load";
      this.loadButton.innerText = "load last";
      this.loadButton.onclick = _bindInstanceProperty$1(_context15 = this._loadLast).call(_context15, this);
      this.frame.appendChild(this.colorPickerDiv);
      this.frame.appendChild(this.arrowDiv);
      this.frame.appendChild(this.brightnessLabel);
      this.frame.appendChild(this.brightnessDiv);
      this.frame.appendChild(this.opacityLabel);
      this.frame.appendChild(this.opacityDiv);
      this.frame.appendChild(this.newColorDiv);
      this.frame.appendChild(this.initialColorDiv);
      this.frame.appendChild(this.cancelButton);
      this.frame.appendChild(this.applyButton);
      this.frame.appendChild(this.saveButton);
      this.frame.appendChild(this.loadButton);
    }
    /**
     * bind hammer to the color picker
     *
     * @private
     */
  }, {
    key: "_bindHammer",
    value: function _bindHammer() {
      var _this3 = this;
      this.drag = {};
      this.pinch = {};
      this.hammer = new Hammer$1(this.colorPickerCanvas);
      this.hammer.get("pinch").set({
        enable: true
      });
      this.hammer.on("hammer.input", function(event) {
        if (event.isFirst) {
          _this3._moveSelector(event);
        }
      });
      this.hammer.on("tap", function(event) {
        _this3._moveSelector(event);
      });
      this.hammer.on("panstart", function(event) {
        _this3._moveSelector(event);
      });
      this.hammer.on("panmove", function(event) {
        _this3._moveSelector(event);
      });
      this.hammer.on("panend", function(event) {
        _this3._moveSelector(event);
      });
    }
    /**
     * generate the hue circle. This is relatively heavy (200ms) and is done only once on the first time it is shown.
     *
     * @private
     */
  }, {
    key: "_generateHueCircle",
    value: function _generateHueCircle() {
      if (this.generated === false) {
        var ctx = this.colorPickerCanvas.getContext("2d");
        if (this.pixelRation === void 0) {
          this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);
        }
        ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
        var w2 = this.colorPickerCanvas.clientWidth;
        var h2 = this.colorPickerCanvas.clientHeight;
        ctx.clearRect(0, 0, w2, h2);
        var x2, y2, hue, sat;
        this.centerCoordinates = {
          x: w2 * 0.5,
          y: h2 * 0.5
        };
        this.r = 0.49 * w2;
        var angleConvert = 2 * Math.PI / 360;
        var hfac = 1 / 360;
        var sfac = 1 / this.r;
        var rgb;
        for (hue = 0; hue < 360; hue++) {
          for (sat = 0; sat < this.r; sat++) {
            x2 = this.centerCoordinates.x + sat * Math.sin(angleConvert * hue);
            y2 = this.centerCoordinates.y + sat * Math.cos(angleConvert * hue);
            rgb = HSVToRGB(hue * hfac, sat * sfac, 1);
            ctx.fillStyle = "rgb(" + rgb.r + "," + rgb.g + "," + rgb.b + ")";
            ctx.fillRect(x2 - 0.5, y2 - 0.5, 2, 2);
          }
        }
        ctx.strokeStyle = "rgba(0,0,0,1)";
        ctx.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r);
        ctx.stroke();
        this.hueCircle = ctx.getImageData(0, 0, w2, h2);
      }
      this.generated = true;
    }
    /**
     * move the selector. This is called by hammer functions.
     *
     * @param {Event}  event   The event
     * @private
     */
  }, {
    key: "_moveSelector",
    value: function _moveSelector(event) {
      var rect = this.colorPickerDiv.getBoundingClientRect();
      var left2 = event.center.x - rect.left;
      var top2 = event.center.y - rect.top;
      var centerY = 0.5 * this.colorPickerDiv.clientHeight;
      var centerX = 0.5 * this.colorPickerDiv.clientWidth;
      var x2 = left2 - centerX;
      var y2 = top2 - centerY;
      var angle = Math.atan2(x2, y2);
      var radius = 0.98 * Math.min(Math.sqrt(x2 * x2 + y2 * y2), centerX);
      var newTop = Math.cos(angle) * radius + centerY;
      var newLeft = Math.sin(angle) * radius + centerX;
      this.colorPickerSelector.style.top = newTop - 0.5 * this.colorPickerSelector.clientHeight + "px";
      this.colorPickerSelector.style.left = newLeft - 0.5 * this.colorPickerSelector.clientWidth + "px";
      var h2 = angle / (2 * Math.PI);
      h2 = h2 < 0 ? h2 + 1 : h2;
      var s2 = radius / this.r;
      var hsv = RGBToHSV(this.color.r, this.color.g, this.color.b);
      hsv.h = h2;
      hsv.s = s2;
      var rgba = HSVToRGB(hsv.h, hsv.s, hsv.v);
      rgba["a"] = this.color.a;
      this.color = rgba;
      this.initialColorDiv.style.backgroundColor = "rgba(" + this.initialColor.r + "," + this.initialColor.g + "," + this.initialColor.b + "," + this.initialColor.a + ")";
      this.newColorDiv.style.backgroundColor = "rgba(" + this.color.r + "," + this.color.g + "," + this.color.b + "," + this.color.a + ")";
    }
  }]);
  return ColorPicker;
}();
function wrapInTag() {
  for (var _len5 = arguments.length, rest = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
    rest[_key5] = arguments[_key5];
  }
  if (rest.length < 1) {
    throw new TypeError("Invalid arguments.");
  } else if (rest.length === 1) {
    return document.createTextNode(rest[0]);
  } else {
    var element = document.createElement(rest[0]);
    element.appendChild(wrapInTag.apply(void 0, _toConsumableArray(_sliceInstanceProperty(rest).call(rest, 1))));
    return element;
  }
}
var Configurator$1 = /* @__PURE__ */ function() {
  function Configurator2(parentModule, defaultContainer, configureOptions2) {
    var pixelRatio = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;
    var hideOption = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : function() {
      return false;
    };
    _classCallCheck(this, Configurator2);
    this.parent = parentModule;
    this.changedOptions = [];
    this.container = defaultContainer;
    this.allowCreation = false;
    this.hideOption = hideOption;
    this.options = {};
    this.initialized = false;
    this.popupCounter = 0;
    this.defaultOptions = {
      enabled: false,
      filter: true,
      container: void 0,
      showButton: true
    };
    _Object$assign(this.options, this.defaultOptions);
    this.configureOptions = configureOptions2;
    this.moduleOptions = {};
    this.domElements = [];
    this.popupDiv = {};
    this.popupLimit = 5;
    this.popupHistory = {};
    this.colorPicker = new ColorPicker$1(pixelRatio);
    this.wrapper = void 0;
  }
  _createClass(Configurator2, [{
    key: "setOptions",
    value: function setOptions(options) {
      if (options !== void 0) {
        this.popupHistory = {};
        this._removePopup();
        var enabled = true;
        if (typeof options === "string") {
          this.options.filter = options;
        } else if (_Array$isArray(options)) {
          this.options.filter = options.join();
        } else if (_typeof(options) === "object") {
          if (options == null) {
            throw new TypeError("options cannot be null");
          }
          if (options.container !== void 0) {
            this.options.container = options.container;
          }
          if (_filterInstanceProperty(options) !== void 0) {
            this.options.filter = _filterInstanceProperty(options);
          }
          if (options.showButton !== void 0) {
            this.options.showButton = options.showButton;
          }
          if (options.enabled !== void 0) {
            enabled = options.enabled;
          }
        } else if (typeof options === "boolean") {
          this.options.filter = true;
          enabled = options;
        } else if (typeof options === "function") {
          this.options.filter = options;
          enabled = true;
        }
        if (_filterInstanceProperty(this.options) === false) {
          enabled = false;
        }
        this.options.enabled = enabled;
      }
      this._clean();
    }
    /**
     *
     * @param {object} moduleOptions
     */
  }, {
    key: "setModuleOptions",
    value: function setModuleOptions(moduleOptions) {
      this.moduleOptions = moduleOptions;
      if (this.options.enabled === true) {
        this._clean();
        if (this.options.container !== void 0) {
          this.container = this.options.container;
        }
        this._create();
      }
    }
    /**
     * Create all DOM elements
     *
     * @private
     */
  }, {
    key: "_create",
    value: function _create() {
      this._clean();
      this.changedOptions = [];
      var filter4 = _filterInstanceProperty(this.options);
      var counter2 = 0;
      var show = false;
      for (var _option in this.configureOptions) {
        if (Object.prototype.hasOwnProperty.call(this.configureOptions, _option)) {
          this.allowCreation = false;
          show = false;
          if (typeof filter4 === "function") {
            show = filter4(_option, []);
            show = show || this._handleObject(this.configureOptions[_option], [_option], true);
          } else if (filter4 === true || _indexOfInstanceProperty(filter4).call(filter4, _option) !== -1) {
            show = true;
          }
          if (show !== false) {
            this.allowCreation = true;
            if (counter2 > 0) {
              this._makeItem([]);
            }
            this._makeHeader(_option);
            this._handleObject(this.configureOptions[_option], [_option]);
          }
          counter2++;
        }
      }
      this._makeButton();
      this._push();
    }
    /**
     * draw all DOM elements on the screen
     *
     * @private
     */
  }, {
    key: "_push",
    value: function _push() {
      this.wrapper = document.createElement("div");
      this.wrapper.className = "vis-configuration-wrapper";
      this.container.appendChild(this.wrapper);
      for (var i2 = 0; i2 < this.domElements.length; i2++) {
        this.wrapper.appendChild(this.domElements[i2]);
      }
      this._showPopupIfNeeded();
    }
    /**
     * delete all DOM elements
     *
     * @private
     */
  }, {
    key: "_clean",
    value: function _clean() {
      for (var i2 = 0; i2 < this.domElements.length; i2++) {
        this.wrapper.removeChild(this.domElements[i2]);
      }
      if (this.wrapper !== void 0) {
        this.container.removeChild(this.wrapper);
        this.wrapper = void 0;
      }
      this.domElements = [];
      this._removePopup();
    }
    /**
     * get the value from the actualOptions if it exists
     *
     * @param {Array} path    | where to look for the actual option
     * @returns {*}
     * @private
     */
  }, {
    key: "_getValue",
    value: function _getValue(path2) {
      var base = this.moduleOptions;
      for (var i2 = 0; i2 < path2.length; i2++) {
        if (base[path2[i2]] !== void 0) {
          base = base[path2[i2]];
        } else {
          base = void 0;
          break;
        }
      }
      return base;
    }
    /**
     * all option elements are wrapped in an item
     *
     * @param {Array} path    | where to look for the actual option
     * @param {Array.<Element>} domElements
     * @returns {number}
     * @private
     */
  }, {
    key: "_makeItem",
    value: function _makeItem(path2) {
      if (this.allowCreation === true) {
        var item = document.createElement("div");
        item.className = "vis-configuration vis-config-item vis-config-s" + path2.length;
        for (var _len6 = arguments.length, domElements = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
          domElements[_key6 - 1] = arguments[_key6];
        }
        _forEachInstanceProperty(domElements).call(domElements, function(element) {
          item.appendChild(element);
        });
        this.domElements.push(item);
        return this.domElements.length;
      }
      return 0;
    }
    /**
     * header for major subjects
     *
     * @param {string} name
     * @private
     */
  }, {
    key: "_makeHeader",
    value: function _makeHeader(name) {
      var div = document.createElement("div");
      div.className = "vis-configuration vis-config-header";
      div.innerText = name;
      this._makeItem([], div);
    }
    /**
     * make a label, if it is an object label, it gets different styling.
     *
     * @param {string} name
     * @param {Array} path    | where to look for the actual option
     * @param {string} objectLabel
     * @returns {HTMLElement}
     * @private
     */
  }, {
    key: "_makeLabel",
    value: function _makeLabel(name, path2) {
      var objectLabel = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var div = document.createElement("div");
      div.className = "vis-configuration vis-config-label vis-config-s" + path2.length;
      if (objectLabel === true) {
        while (div.firstChild) {
          div.removeChild(div.firstChild);
        }
        div.appendChild(wrapInTag("i", "b", name));
      } else {
        div.innerText = name + ":";
      }
      return div;
    }
    /**
     * make a dropdown list for multiple possible string optoins
     *
     * @param {Array.<number>} arr
     * @param {number} value
     * @param {Array} path    | where to look for the actual option
     * @private
     */
  }, {
    key: "_makeDropdown",
    value: function _makeDropdown(arr, value2, path2) {
      var select = document.createElement("select");
      select.className = "vis-configuration vis-config-select";
      var selectedValue = 0;
      if (value2 !== void 0) {
        if (_indexOfInstanceProperty(arr).call(arr, value2) !== -1) {
          selectedValue = _indexOfInstanceProperty(arr).call(arr, value2);
        }
      }
      for (var i2 = 0; i2 < arr.length; i2++) {
        var _option2 = document.createElement("option");
        _option2.value = arr[i2];
        if (i2 === selectedValue) {
          _option2.selected = "selected";
        }
        _option2.innerText = arr[i2];
        select.appendChild(_option2);
      }
      var me = this;
      select.onchange = function() {
        me._update(this.value, path2);
      };
      var label = this._makeLabel(path2[path2.length - 1], path2);
      this._makeItem(path2, label, select);
    }
    /**
     * make a range object for numeric options
     *
     * @param {Array.<number>} arr
     * @param {number} value
     * @param {Array} path    | where to look for the actual option
     * @private
     */
  }, {
    key: "_makeRange",
    value: function _makeRange(arr, value2, path2) {
      var defaultValue = arr[0];
      var min2 = arr[1];
      var max2 = arr[2];
      var step = arr[3];
      var range = document.createElement("input");
      range.className = "vis-configuration vis-config-range";
      try {
        range.type = "range";
        range.min = min2;
        range.max = max2;
      } catch (err) {
      }
      range.step = step;
      var popupString = "";
      var popupValue = 0;
      if (value2 !== void 0) {
        var factor = 1.2;
        if (value2 < 0 && value2 * factor < min2) {
          range.min = Math.ceil(value2 * factor);
          popupValue = range.min;
          popupString = "range increased";
        } else if (value2 / factor < min2) {
          range.min = Math.ceil(value2 / factor);
          popupValue = range.min;
          popupString = "range increased";
        }
        if (value2 * factor > max2 && max2 !== 1) {
          range.max = Math.ceil(value2 * factor);
          popupValue = range.max;
          popupString = "range increased";
        }
        range.value = value2;
      } else {
        range.value = defaultValue;
      }
      var input = document.createElement("input");
      input.className = "vis-configuration vis-config-rangeinput";
      input.value = range.value;
      var me = this;
      range.onchange = function() {
        input.value = this.value;
        me._update(Number(this.value), path2);
      };
      range.oninput = function() {
        input.value = this.value;
      };
      var label = this._makeLabel(path2[path2.length - 1], path2);
      var itemIndex = this._makeItem(path2, label, range, input);
      if (popupString !== "" && this.popupHistory[itemIndex] !== popupValue) {
        this.popupHistory[itemIndex] = popupValue;
        this._setupPopup(popupString, itemIndex);
      }
    }
    /**
     * make a button object
     *
     * @private
     */
  }, {
    key: "_makeButton",
    value: function _makeButton() {
      var _this4 = this;
      if (this.options.showButton === true) {
        var generateButton = document.createElement("div");
        generateButton.className = "vis-configuration vis-config-button";
        generateButton.innerText = "generate options";
        generateButton.onclick = function() {
          _this4._printOptions();
        };
        generateButton.onmouseover = function() {
          generateButton.className = "vis-configuration vis-config-button hover";
        };
        generateButton.onmouseout = function() {
          generateButton.className = "vis-configuration vis-config-button";
        };
        this.optionsContainer = document.createElement("div");
        this.optionsContainer.className = "vis-configuration vis-config-option-container";
        this.domElements.push(this.optionsContainer);
        this.domElements.push(generateButton);
      }
    }
    /**
     * prepare the popup
     *
     * @param {string} string
     * @param {number} index
     * @private
     */
  }, {
    key: "_setupPopup",
    value: function _setupPopup(string2, index2) {
      var _this5 = this;
      if (this.initialized === true && this.allowCreation === true && this.popupCounter < this.popupLimit) {
        var div = document.createElement("div");
        div.id = "vis-configuration-popup";
        div.className = "vis-configuration-popup";
        div.innerText = string2;
        div.onclick = function() {
          _this5._removePopup();
        };
        this.popupCounter += 1;
        this.popupDiv = {
          html: div,
          index: index2
        };
      }
    }
    /**
     * remove the popup from the dom
     *
     * @private
     */
  }, {
    key: "_removePopup",
    value: function _removePopup() {
      if (this.popupDiv.html !== void 0) {
        this.popupDiv.html.parentNode.removeChild(this.popupDiv.html);
        clearTimeout(this.popupDiv.hideTimeout);
        clearTimeout(this.popupDiv.deleteTimeout);
        this.popupDiv = {};
      }
    }
    /**
     * Show the popup if it is needed.
     *
     * @private
     */
  }, {
    key: "_showPopupIfNeeded",
    value: function _showPopupIfNeeded() {
      var _this6 = this;
      if (this.popupDiv.html !== void 0) {
        var correspondingElement = this.domElements[this.popupDiv.index];
        var rect = correspondingElement.getBoundingClientRect();
        this.popupDiv.html.style.left = rect.left + "px";
        this.popupDiv.html.style.top = rect.top - 30 + "px";
        document.body.appendChild(this.popupDiv.html);
        this.popupDiv.hideTimeout = _setTimeout(function() {
          _this6.popupDiv.html.style.opacity = 0;
        }, 1500);
        this.popupDiv.deleteTimeout = _setTimeout(function() {
          _this6._removePopup();
        }, 1800);
      }
    }
    /**
     * make a checkbox for boolean options.
     *
     * @param {number} defaultValue
     * @param {number} value
     * @param {Array} path    | where to look for the actual option
     * @private
     */
  }, {
    key: "_makeCheckbox",
    value: function _makeCheckbox(defaultValue, value2, path2) {
      var checkbox = document.createElement("input");
      checkbox.type = "checkbox";
      checkbox.className = "vis-configuration vis-config-checkbox";
      checkbox.checked = defaultValue;
      if (value2 !== void 0) {
        checkbox.checked = value2;
        if (value2 !== defaultValue) {
          if (_typeof(defaultValue) === "object") {
            if (value2 !== defaultValue.enabled) {
              this.changedOptions.push({
                path: path2,
                value: value2
              });
            }
          } else {
            this.changedOptions.push({
              path: path2,
              value: value2
            });
          }
        }
      }
      var me = this;
      checkbox.onchange = function() {
        me._update(this.checked, path2);
      };
      var label = this._makeLabel(path2[path2.length - 1], path2);
      this._makeItem(path2, label, checkbox);
    }
    /**
     * make a text input field for string options.
     *
     * @param {number} defaultValue
     * @param {number} value
     * @param {Array} path    | where to look for the actual option
     * @private
     */
  }, {
    key: "_makeTextInput",
    value: function _makeTextInput(defaultValue, value2, path2) {
      var checkbox = document.createElement("input");
      checkbox.type = "text";
      checkbox.className = "vis-configuration vis-config-text";
      checkbox.value = value2;
      if (value2 !== defaultValue) {
        this.changedOptions.push({
          path: path2,
          value: value2
        });
      }
      var me = this;
      checkbox.onchange = function() {
        me._update(this.value, path2);
      };
      var label = this._makeLabel(path2[path2.length - 1], path2);
      this._makeItem(path2, label, checkbox);
    }
    /**
     * make a color field with a color picker for color fields
     *
     * @param {Array.<number>} arr
     * @param {number} value
     * @param {Array} path    | where to look for the actual option
     * @private
     */
  }, {
    key: "_makeColorField",
    value: function _makeColorField(arr, value2, path2) {
      var _this7 = this;
      var defaultColor = arr[1];
      var div = document.createElement("div");
      value2 = value2 === void 0 ? defaultColor : value2;
      if (value2 !== "none") {
        div.className = "vis-configuration vis-config-colorBlock";
        div.style.backgroundColor = value2;
      } else {
        div.className = "vis-configuration vis-config-colorBlock none";
      }
      value2 = value2 === void 0 ? defaultColor : value2;
      div.onclick = function() {
        _this7._showColorPicker(value2, div, path2);
      };
      var label = this._makeLabel(path2[path2.length - 1], path2);
      this._makeItem(path2, label, div);
    }
    /**
     * used by the color buttons to call the color picker.
     *
     * @param {number} value
     * @param {HTMLElement} div
     * @param {Array} path    | where to look for the actual option
     * @private
     */
  }, {
    key: "_showColorPicker",
    value: function _showColorPicker(value2, div, path2) {
      var _this8 = this;
      div.onclick = function() {
      };
      this.colorPicker.insertTo(div);
      this.colorPicker.show();
      this.colorPicker.setColor(value2);
      this.colorPicker.setUpdateCallback(function(color) {
        var colorString = "rgba(" + color.r + "," + color.g + "," + color.b + "," + color.a + ")";
        div.style.backgroundColor = colorString;
        _this8._update(colorString, path2);
      });
      this.colorPicker.setCloseCallback(function() {
        div.onclick = function() {
          _this8._showColorPicker(value2, div, path2);
        };
      });
    }
    /**
     * parse an object and draw the correct items
     *
     * @param {object} obj
     * @param {Array} [path=[]]    | where to look for the actual option
     * @param {boolean} [checkOnly=false]
     * @returns {boolean}
     * @private
     */
  }, {
    key: "_handleObject",
    value: function _handleObject(obj) {
      var path2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
      var checkOnly = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var show = false;
      var filter4 = _filterInstanceProperty(this.options);
      var visibleInSet = false;
      for (var subObj in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, subObj)) {
          show = true;
          var item = obj[subObj];
          var newPath = copyAndExtendArray(path2, subObj);
          if (typeof filter4 === "function") {
            show = filter4(subObj, path2);
            if (show === false) {
              if (!_Array$isArray(item) && typeof item !== "string" && typeof item !== "boolean" && item instanceof Object) {
                this.allowCreation = false;
                show = this._handleObject(item, newPath, true);
                this.allowCreation = checkOnly === false;
              }
            }
          }
          if (show !== false) {
            visibleInSet = true;
            var value2 = this._getValue(newPath);
            if (_Array$isArray(item)) {
              this._handleArray(item, value2, newPath);
            } else if (typeof item === "string") {
              this._makeTextInput(item, value2, newPath);
            } else if (typeof item === "boolean") {
              this._makeCheckbox(item, value2, newPath);
            } else if (item instanceof Object) {
              if (!this.hideOption(path2, subObj, this.moduleOptions)) {
                if (item.enabled !== void 0) {
                  var enabledPath = copyAndExtendArray(newPath, "enabled");
                  var enabledValue = this._getValue(enabledPath);
                  if (enabledValue === true) {
                    var label = this._makeLabel(subObj, newPath, true);
                    this._makeItem(newPath, label);
                    visibleInSet = this._handleObject(item, newPath) || visibleInSet;
                  } else {
                    this._makeCheckbox(item, enabledValue, newPath);
                  }
                } else {
                  var _label = this._makeLabel(subObj, newPath, true);
                  this._makeItem(newPath, _label);
                  visibleInSet = this._handleObject(item, newPath) || visibleInSet;
                }
              }
            } else {
              console.error("dont know how to handle", item, subObj, newPath);
            }
          }
        }
      }
      return visibleInSet;
    }
    /**
     * handle the array type of option
     *
     * @param {Array.<number>} arr
     * @param {number} value
     * @param {Array} path    | where to look for the actual option
     * @private
     */
  }, {
    key: "_handleArray",
    value: function _handleArray(arr, value2, path2) {
      if (typeof arr[0] === "string" && arr[0] === "color") {
        this._makeColorField(arr, value2, path2);
        if (arr[1] !== value2) {
          this.changedOptions.push({
            path: path2,
            value: value2
          });
        }
      } else if (typeof arr[0] === "string") {
        this._makeDropdown(arr, value2, path2);
        if (arr[0] !== value2) {
          this.changedOptions.push({
            path: path2,
            value: value2
          });
        }
      } else if (typeof arr[0] === "number") {
        this._makeRange(arr, value2, path2);
        if (arr[0] !== value2) {
          this.changedOptions.push({
            path: path2,
            value: Number(value2)
          });
        }
      }
    }
    /**
     * called to update the network with the new settings.
     *
     * @param {number} value
     * @param {Array} path    | where to look for the actual option
     * @private
     */
  }, {
    key: "_update",
    value: function _update(value2, path2) {
      var options = this._constructOptions(value2, path2);
      if (this.parent.body && this.parent.body.emitter && this.parent.body.emitter.emit) {
        this.parent.body.emitter.emit("configChange", options);
      }
      this.initialized = true;
      this.parent.setOptions(options);
    }
    /**
     *
     * @param {string | boolean} value
     * @param {Array.<string>} path
     * @param {{}} optionsObj
     * @returns {{}}
     * @private
     */
  }, {
    key: "_constructOptions",
    value: function _constructOptions(value2, path2) {
      var optionsObj = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var pointer = optionsObj;
      value2 = value2 === "true" ? true : value2;
      value2 = value2 === "false" ? false : value2;
      for (var i2 = 0; i2 < path2.length; i2++) {
        if (path2[i2] !== "global") {
          if (pointer[path2[i2]] === void 0) {
            pointer[path2[i2]] = {};
          }
          if (i2 !== path2.length - 1) {
            pointer = pointer[path2[i2]];
          } else {
            pointer[path2[i2]] = value2;
          }
        }
      }
      return optionsObj;
    }
    /**
     * @private
     */
  }, {
    key: "_printOptions",
    value: function _printOptions() {
      var options = this.getOptions();
      while (this.optionsContainer.firstChild) {
        this.optionsContainer.removeChild(this.optionsContainer.firstChild);
      }
      this.optionsContainer.appendChild(wrapInTag("pre", "const options = " + _JSON$stringify(options, null, 2)));
    }
    /**
     *
     * @returns {{}} options
     */
  }, {
    key: "getOptions",
    value: function getOptions() {
      var options = {};
      for (var i2 = 0; i2 < this.changedOptions.length; i2++) {
        this._constructOptions(this.changedOptions[i2].value, this.changedOptions[i2].path, options);
      }
      return options;
    }
  }]);
  return Configurator2;
}();
var Popup$1 = /* @__PURE__ */ function() {
  function Popup2(container, overflowMethod) {
    _classCallCheck(this, Popup2);
    this.container = container;
    this.overflowMethod = overflowMethod || "cap";
    this.x = 0;
    this.y = 0;
    this.padding = 5;
    this.hidden = false;
    this.frame = document.createElement("div");
    this.frame.className = "vis-tooltip";
    this.container.appendChild(this.frame);
  }
  _createClass(Popup2, [{
    key: "setPosition",
    value: function setPosition(x2, y2) {
      this.x = _parseInt$1(x2);
      this.y = _parseInt$1(y2);
    }
    /**
     * Set the content for the popup window. This can be HTML code or text.
     *
     * @param {string | Element} content
     */
  }, {
    key: "setText",
    value: function setText(content) {
      if (content instanceof Element) {
        while (this.frame.firstChild) {
          this.frame.removeChild(this.frame.firstChild);
        }
        this.frame.appendChild(content);
      } else {
        this.frame.innerText = content;
      }
    }
    /**
     * Show the popup window
     *
     * @param {boolean} [doShow]    Show or hide the window
     */
  }, {
    key: "show",
    value: function show(doShow) {
      if (doShow === void 0) {
        doShow = true;
      }
      if (doShow === true) {
        var height = this.frame.clientHeight;
        var width = this.frame.clientWidth;
        var maxHeight = this.frame.parentNode.clientHeight;
        var maxWidth = this.frame.parentNode.clientWidth;
        var left2 = 0, top2 = 0;
        if (this.overflowMethod == "flip") {
          var isLeft = false, isTop = true;
          if (this.y - height < this.padding) {
            isTop = false;
          }
          if (this.x + width > maxWidth - this.padding) {
            isLeft = true;
          }
          if (isLeft) {
            left2 = this.x - width;
          } else {
            left2 = this.x;
          }
          if (isTop) {
            top2 = this.y - height;
          } else {
            top2 = this.y;
          }
        } else {
          top2 = this.y - height;
          if (top2 + height + this.padding > maxHeight) {
            top2 = maxHeight - height - this.padding;
          }
          if (top2 < this.padding) {
            top2 = this.padding;
          }
          left2 = this.x;
          if (left2 + width + this.padding > maxWidth) {
            left2 = maxWidth - width - this.padding;
          }
          if (left2 < this.padding) {
            left2 = this.padding;
          }
        }
        this.frame.style.left = left2 + "px";
        this.frame.style.top = top2 + "px";
        this.frame.style.visibility = "visible";
        this.hidden = false;
      } else {
        this.hide();
      }
    }
    /**
     * Hide the popup window
     */
  }, {
    key: "hide",
    value: function hide2() {
      this.hidden = true;
      this.frame.style.left = "0";
      this.frame.style.top = "0";
      this.frame.style.visibility = "hidden";
    }
    /**
     * Remove the popup window
     */
  }, {
    key: "destroy",
    value: function destroy() {
      this.frame.parentNode.removeChild(this.frame);
    }
  }]);
  return Popup2;
}();
var errorFound = false;
var allOptions$1;
var VALIDATOR_PRINT_STYLE$1 = "background: #FFeeee; color: #dd0000";
var Validator$1 = /* @__PURE__ */ function() {
  function Validator2() {
    _classCallCheck(this, Validator2);
  }
  _createClass(Validator2, null, [{
    key: "validate",
    value: (
      /**
       * Main function to be called
       *
       * @param {object} options
       * @param {object} referenceOptions
       * @param {object} subObject
       * @returns {boolean}
       * @static
       */
      function validate(options, referenceOptions, subObject) {
        errorFound = false;
        allOptions$1 = referenceOptions;
        var usedOptions = referenceOptions;
        if (subObject !== void 0) {
          usedOptions = referenceOptions[subObject];
        }
        Validator2.parse(options, usedOptions, []);
        return errorFound;
      }
    )
    /**
     * Will traverse an object recursively and check every value
     *
     * @param {object} options
     * @param {object} referenceOptions
     * @param {Array} path    | where to look for the actual option
     * @static
     */
  }, {
    key: "parse",
    value: function parse(options, referenceOptions, path2) {
      for (var _option3 in options) {
        if (Object.prototype.hasOwnProperty.call(options, _option3)) {
          Validator2.check(_option3, options, referenceOptions, path2);
        }
      }
    }
    /**
     * Check every value. If the value is an object, call the parse function on that object.
     *
     * @param {string} option
     * @param {object} options
     * @param {object} referenceOptions
     * @param {Array} path    | where to look for the actual option
     * @static
     */
  }, {
    key: "check",
    value: function check2(option, options, referenceOptions, path2) {
      if (referenceOptions[option] === void 0 && referenceOptions.__any__ === void 0) {
        Validator2.getSuggestion(option, referenceOptions, path2);
        return;
      }
      var referenceOption = option;
      var is_object = true;
      if (referenceOptions[option] === void 0 && referenceOptions.__any__ !== void 0) {
        referenceOption = "__any__";
        is_object = Validator2.getType(options[option]) === "object";
      }
      var refOptionObj = referenceOptions[referenceOption];
      if (is_object && refOptionObj.__type__ !== void 0) {
        refOptionObj = refOptionObj.__type__;
      }
      Validator2.checkFields(option, options, referenceOptions, referenceOption, refOptionObj, path2);
    }
    /**
     *
     * @param {string}  option           | the option property
     * @param {object}  options          | The supplied options object
     * @param {object}  referenceOptions | The reference options containing all options and their allowed formats
     * @param {string}  referenceOption  | Usually this is the same as option, except when handling an __any__ tag.
     * @param {string}  refOptionObj     | This is the type object from the reference options
     * @param {Array}   path             | where in the object is the option
     * @static
     */
  }, {
    key: "checkFields",
    value: function checkFields(option, options, referenceOptions, referenceOption, refOptionObj, path2) {
      var log = function log2(message2) {
        console.error("%c" + message2 + Validator2.printLocation(path2, option), VALIDATOR_PRINT_STYLE$1);
      };
      var optionType = Validator2.getType(options[option]);
      var refOptionType = refOptionObj[optionType];
      if (refOptionType !== void 0) {
        if (Validator2.getType(refOptionType) === "array" && _indexOfInstanceProperty(refOptionType).call(refOptionType, options[option]) === -1) {
          log('Invalid option detected in "' + option + '". Allowed values are:' + Validator2.print(refOptionType) + ' not "' + options[option] + '". ');
          errorFound = true;
        } else if (optionType === "object" && referenceOption !== "__any__") {
          path2 = copyAndExtendArray(path2, option);
          Validator2.parse(options[option], referenceOptions[referenceOption], path2);
        }
      } else if (refOptionObj["any"] === void 0) {
        log('Invalid type received for "' + option + '". Expected: ' + Validator2.print(_Object$keys(refOptionObj)) + ". Received [" + optionType + '] "' + options[option] + '"');
        errorFound = true;
      }
    }
    /**
     *
     * @param {object | boolean | number | string | Array.<number> | Date | Node | Moment | undefined | null} object
     * @returns {string}
     * @static
     */
  }, {
    key: "getType",
    value: function getType(object2) {
      var type = _typeof(object2);
      if (type === "object") {
        if (object2 === null) {
          return "null";
        }
        if (object2 instanceof Boolean) {
          return "boolean";
        }
        if (object2 instanceof Number) {
          return "number";
        }
        if (object2 instanceof String) {
          return "string";
        }
        if (_Array$isArray(object2)) {
          return "array";
        }
        if (object2 instanceof Date) {
          return "date";
        }
        if (object2.nodeType !== void 0) {
          return "dom";
        }
        if (object2._isAMomentObject === true) {
          return "moment";
        }
        return "object";
      } else if (type === "number") {
        return "number";
      } else if (type === "boolean") {
        return "boolean";
      } else if (type === "string") {
        return "string";
      } else if (type === void 0) {
        return "undefined";
      }
      return type;
    }
    /**
     * @param {string} option
     * @param {object} options
     * @param {Array.<string>} path
     * @static
     */
  }, {
    key: "getSuggestion",
    value: function getSuggestion(option, options, path2) {
      var localSearch = Validator2.findInOptions(option, options, path2, false);
      var globalSearch = Validator2.findInOptions(option, allOptions$1, [], true);
      var localSearchThreshold = 8;
      var globalSearchThreshold = 4;
      var msg;
      if (localSearch.indexMatch !== void 0) {
        msg = " in " + Validator2.printLocation(localSearch.path, option, "") + 'Perhaps it was incomplete? Did you mean: "' + localSearch.indexMatch + '"?\n\n';
      } else if (globalSearch.distance <= globalSearchThreshold && localSearch.distance > globalSearch.distance) {
        msg = " in " + Validator2.printLocation(localSearch.path, option, "") + "Perhaps it was misplaced? Matching option found at: " + Validator2.printLocation(globalSearch.path, globalSearch.closestMatch, "");
      } else if (localSearch.distance <= localSearchThreshold) {
        msg = '. Did you mean "' + localSearch.closestMatch + '"?' + Validator2.printLocation(localSearch.path, option);
      } else {
        msg = ". Did you mean one of these: " + Validator2.print(_Object$keys(options)) + Validator2.printLocation(path2, option);
      }
      console.error('%cUnknown option detected: "' + option + '"' + msg, VALIDATOR_PRINT_STYLE$1);
      errorFound = true;
    }
    /**
     * traverse the options in search for a match.
     *
     * @param {string} option
     * @param {object} options
     * @param {Array} path    | where to look for the actual option
     * @param {boolean} [recursive=false]
     * @returns {{closestMatch: string, path: Array, distance: number}}
     * @static
     */
  }, {
    key: "findInOptions",
    value: function findInOptions(option, options, path2) {
      var recursive = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      var min2 = 1e9;
      var closestMatch = "";
      var closestMatchPath = [];
      var lowerCaseOption = option.toLowerCase();
      var indexMatch = void 0;
      for (var op in options) {
        var distance = void 0;
        if (options[op].__type__ !== void 0 && recursive === true) {
          var result = Validator2.findInOptions(option, options[op], copyAndExtendArray(path2, op));
          if (min2 > result.distance) {
            closestMatch = result.closestMatch;
            closestMatchPath = result.path;
            min2 = result.distance;
            indexMatch = result.indexMatch;
          }
        } else {
          var _context16;
          if (_indexOfInstanceProperty(_context16 = op.toLowerCase()).call(_context16, lowerCaseOption) !== -1) {
            indexMatch = op;
          }
          distance = Validator2.levenshteinDistance(option, op);
          if (min2 > distance) {
            closestMatch = op;
            closestMatchPath = copyArray(path2);
            min2 = distance;
          }
        }
      }
      return {
        closestMatch,
        path: closestMatchPath,
        distance: min2,
        indexMatch
      };
    }
    /**
     * @param {Array.<string>} path
     * @param {object} option
     * @param {string} prefix
     * @returns {string}
     * @static
     */
  }, {
    key: "printLocation",
    value: function printLocation(path2, option) {
      var prefix = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "Problem value found at: \n";
      var str = "\n\n" + prefix + "options = {\n";
      for (var i2 = 0; i2 < path2.length; i2++) {
        for (var j2 = 0; j2 < i2 + 1; j2++) {
          str += "  ";
        }
        str += path2[i2] + ": {\n";
      }
      for (var _j = 0; _j < path2.length + 1; _j++) {
        str += "  ";
      }
      str += option + "\n";
      for (var _i5 = 0; _i5 < path2.length + 1; _i5++) {
        for (var _j2 = 0; _j2 < path2.length - _i5; _j2++) {
          str += "  ";
        }
        str += "}\n";
      }
      return str + "\n\n";
    }
    /**
     * @param {object} options
     * @returns {string}
     * @static
     */
  }, {
    key: "print",
    value: function print2(options) {
      return _JSON$stringify(options).replace(/(")|(\[)|(\])|(,"__type__")/g, "").replace(/(,)/g, ", ");
    }
    /**
     *  Compute the edit distance between the two given strings
     * http://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance#JavaScript
     *
     * Copyright (c) 2011 Andrei Mackenzie
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
     *
     * @param {string} a
     * @param {string} b
     * @returns {Array.<Array.<number>>}}
     * @static
     */
  }, {
    key: "levenshteinDistance",
    value: function levenshteinDistance(a2, b2) {
      if (a2.length === 0) return b2.length;
      if (b2.length === 0) return a2.length;
      var matrix = [];
      var i2;
      for (i2 = 0; i2 <= b2.length; i2++) {
        matrix[i2] = [i2];
      }
      var j2;
      for (j2 = 0; j2 <= a2.length; j2++) {
        matrix[0][j2] = j2;
      }
      for (i2 = 1; i2 <= b2.length; i2++) {
        for (j2 = 1; j2 <= a2.length; j2++) {
          if (b2.charAt(i2 - 1) == a2.charAt(j2 - 1)) {
            matrix[i2][j2] = matrix[i2 - 1][j2 - 1];
          } else {
            matrix[i2][j2] = Math.min(
              matrix[i2 - 1][j2 - 1] + 1,
              // substitution
              Math.min(
                matrix[i2][j2 - 1] + 1,
                // insertion
                matrix[i2 - 1][j2] + 1
              )
            );
          }
        }
      }
      return matrix[b2.length][a2.length];
    }
  }]);
  return Validator2;
}();
var Activator = Activator$1;
var Configurator = Configurator$1;
var Hammer = Hammer$1;
var Popup = Popup$1;
var VALIDATOR_PRINT_STYLE = VALIDATOR_PRINT_STYLE$1;
var Validator = Validator$1;
function parseDOT(data2) {
  dot = data2;
  return parseGraph();
}
var NODE_ATTR_MAPPING = {
  fontsize: "font.size",
  fontcolor: "font.color",
  labelfontcolor: "font.color",
  fontname: "font.face",
  color: ["color.border", "color.background"],
  fillcolor: "color.background",
  tooltip: "title",
  labeltooltip: "title"
};
var EDGE_ATTR_MAPPING = _Object$create$1(NODE_ATTR_MAPPING);
EDGE_ATTR_MAPPING.color = "color.color";
EDGE_ATTR_MAPPING.style = "dashes";
var TOKENTYPE = {
  NULL: 0,
  DELIMITER: 1,
  IDENTIFIER: 2,
  UNKNOWN: 3
};
var DELIMITERS = {
  "{": true,
  "}": true,
  "[": true,
  "]": true,
  ";": true,
  "=": true,
  ",": true,
  "->": true,
  "--": true
};
var dot = "";
var index = 0;
var c$1 = "";
var token = "";
var tokenType = TOKENTYPE.NULL;
function first() {
  index = 0;
  c$1 = dot.charAt(0);
}
function next() {
  index++;
  c$1 = dot.charAt(index);
}
function nextPreview() {
  return dot.charAt(index + 1);
}
function isAlphaNumeric(c2) {
  var charCode = c2.charCodeAt(0);
  if (charCode < 47) {
    return charCode === 35 || charCode === 46;
  }
  if (charCode < 59) {
    return charCode > 47;
  }
  if (charCode < 91) {
    return charCode > 64;
  }
  if (charCode < 96) {
    return charCode === 95;
  }
  if (charCode < 123) {
    return charCode > 96;
  }
  return false;
}
function merge$1(a2, b2) {
  if (!a2) {
    a2 = {};
  }
  if (b2) {
    for (var name in b2) {
      if (b2.hasOwnProperty(name)) {
        a2[name] = b2[name];
      }
    }
  }
  return a2;
}
function setValue(obj, path2, value2) {
  var keys6 = path2.split(".");
  var o2 = obj;
  while (keys6.length) {
    var key2 = keys6.shift();
    if (keys6.length) {
      if (!o2[key2]) {
        o2[key2] = {};
      }
      o2 = o2[key2];
    } else {
      o2[key2] = value2;
    }
  }
}
function addNode(graph, node2) {
  var i2, len;
  var current = null;
  var graphs = [graph];
  var root = graph;
  while (root.parent) {
    graphs.push(root.parent);
    root = root.parent;
  }
  if (root.nodes) {
    for (i2 = 0, len = root.nodes.length; i2 < len; i2++) {
      if (node2.id === root.nodes[i2].id) {
        current = root.nodes[i2];
        break;
      }
    }
  }
  if (!current) {
    current = {
      id: node2.id
    };
    if (graph.node) {
      current.attr = merge$1(current.attr, graph.node);
    }
  }
  for (i2 = graphs.length - 1; i2 >= 0; i2--) {
    var _context;
    var g2 = graphs[i2];
    if (!g2.nodes) {
      g2.nodes = [];
    }
    if (_indexOfInstanceProperty(_context = g2.nodes).call(_context, current) === -1) {
      g2.nodes.push(current);
    }
  }
  if (node2.attr) {
    current.attr = merge$1(current.attr, node2.attr);
  }
}
function addEdge(graph, edge2) {
  if (!graph.edges) {
    graph.edges = [];
  }
  graph.edges.push(edge2);
  if (graph.edge) {
    var attr = merge$1({}, graph.edge);
    edge2.attr = merge$1(attr, edge2.attr);
  }
}
function createEdge(graph, from4, to, type, attr) {
  var edge2 = {
    from: from4,
    to,
    type
  };
  if (graph.edge) {
    edge2.attr = merge$1({}, graph.edge);
  }
  edge2.attr = merge$1(edge2.attr || {}, attr);
  if (attr != null) {
    if (attr.hasOwnProperty("arrows") && attr["arrows"] != null) {
      edge2["arrows"] = {
        to: {
          enabled: true,
          type: attr.arrows.type
        }
      };
      attr["arrows"] = null;
    }
  }
  return edge2;
}
function getToken() {
  tokenType = TOKENTYPE.NULL;
  token = "";
  while (c$1 === " " || c$1 === "	" || c$1 === "\n" || c$1 === "\r") {
    next();
  }
  do {
    var isComment2 = false;
    if (c$1 === "#") {
      var i2 = index - 1;
      while (dot.charAt(i2) === " " || dot.charAt(i2) === "	") {
        i2--;
      }
      if (dot.charAt(i2) === "\n" || dot.charAt(i2) === "") {
        while (c$1 != "" && c$1 != "\n") {
          next();
        }
        isComment2 = true;
      }
    }
    if (c$1 === "/" && nextPreview() === "/") {
      while (c$1 != "" && c$1 != "\n") {
        next();
      }
      isComment2 = true;
    }
    if (c$1 === "/" && nextPreview() === "*") {
      while (c$1 != "") {
        if (c$1 === "*" && nextPreview() === "/") {
          next();
          next();
          break;
        } else {
          next();
        }
      }
      isComment2 = true;
    }
    while (c$1 === " " || c$1 === "	" || c$1 === "\n" || c$1 === "\r") {
      next();
    }
  } while (isComment2);
  if (c$1 === "") {
    tokenType = TOKENTYPE.DELIMITER;
    return;
  }
  var c2 = c$1 + nextPreview();
  if (DELIMITERS[c2]) {
    tokenType = TOKENTYPE.DELIMITER;
    token = c2;
    next();
    next();
    return;
  }
  if (DELIMITERS[c$1]) {
    tokenType = TOKENTYPE.DELIMITER;
    token = c$1;
    next();
    return;
  }
  if (isAlphaNumeric(c$1) || c$1 === "-") {
    token += c$1;
    next();
    while (isAlphaNumeric(c$1)) {
      token += c$1;
      next();
    }
    if (token === "false") {
      token = false;
    } else if (token === "true") {
      token = true;
    } else if (!isNaN(Number(token))) {
      token = Number(token);
    }
    tokenType = TOKENTYPE.IDENTIFIER;
    return;
  }
  if (c$1 === '"') {
    next();
    while (c$1 != "" && (c$1 != '"' || c$1 === '"' && nextPreview() === '"')) {
      if (c$1 === '"') {
        token += c$1;
        next();
      } else if (c$1 === "\\" && nextPreview() === "n") {
        token += "\n";
        next();
      } else {
        token += c$1;
      }
      next();
    }
    if (c$1 != '"') {
      throw newSyntaxError('End of string " expected');
    }
    next();
    tokenType = TOKENTYPE.IDENTIFIER;
    return;
  }
  tokenType = TOKENTYPE.UNKNOWN;
  while (c$1 != "") {
    token += c$1;
    next();
  }
  throw new SyntaxError('Syntax error in part "' + chop(token, 30) + '"');
}
function parseGraph() {
  var graph = {};
  first();
  getToken();
  if (token === "strict") {
    graph.strict = true;
    getToken();
  }
  if (token === "graph" || token === "digraph") {
    graph.type = token;
    getToken();
  }
  if (tokenType === TOKENTYPE.IDENTIFIER) {
    graph.id = token;
    getToken();
  }
  if (token != "{") {
    throw newSyntaxError("Angle bracket { expected");
  }
  getToken();
  parseStatements(graph);
  if (token != "}") {
    throw newSyntaxError("Angle bracket } expected");
  }
  getToken();
  if (token !== "") {
    throw newSyntaxError("End of file expected");
  }
  getToken();
  delete graph.node;
  delete graph.edge;
  delete graph.graph;
  return graph;
}
function parseStatements(graph) {
  while (token !== "" && token != "}") {
    parseStatement(graph);
    if (token === ";") {
      getToken();
    }
  }
}
function parseStatement(graph) {
  var subgraph = parseSubgraph(graph);
  if (subgraph) {
    parseEdge(graph, subgraph);
    return;
  }
  var attr = parseAttributeStatement(graph);
  if (attr) {
    return;
  }
  if (tokenType != TOKENTYPE.IDENTIFIER) {
    throw newSyntaxError("Identifier expected");
  }
  var id2 = token;
  getToken();
  if (token === "=") {
    getToken();
    if (tokenType != TOKENTYPE.IDENTIFIER) {
      throw newSyntaxError("Identifier expected");
    }
    graph[id2] = token;
    getToken();
  } else {
    parseNodeStatement(graph, id2);
  }
}
function parseSubgraph(graph) {
  var subgraph = null;
  if (token === "subgraph") {
    subgraph = {};
    subgraph.type = "subgraph";
    getToken();
    if (tokenType === TOKENTYPE.IDENTIFIER) {
      subgraph.id = token;
      getToken();
    }
  }
  if (token === "{") {
    getToken();
    if (!subgraph) {
      subgraph = {};
    }
    subgraph.parent = graph;
    subgraph.node = graph.node;
    subgraph.edge = graph.edge;
    subgraph.graph = graph.graph;
    parseStatements(subgraph);
    if (token != "}") {
      throw newSyntaxError("Angle bracket } expected");
    }
    getToken();
    delete subgraph.node;
    delete subgraph.edge;
    delete subgraph.graph;
    delete subgraph.parent;
    if (!graph.subgraphs) {
      graph.subgraphs = [];
    }
    graph.subgraphs.push(subgraph);
  }
  return subgraph;
}
function parseAttributeStatement(graph) {
  if (token === "node") {
    getToken();
    graph.node = parseAttributeList();
    return "node";
  } else if (token === "edge") {
    getToken();
    graph.edge = parseAttributeList();
    return "edge";
  } else if (token === "graph") {
    getToken();
    graph.graph = parseAttributeList();
    return "graph";
  }
  return null;
}
function parseNodeStatement(graph, id2) {
  var node2 = {
    id: id2
  };
  var attr = parseAttributeList();
  if (attr) {
    node2.attr = attr;
  }
  addNode(graph, node2);
  parseEdge(graph, id2);
}
function parseEdge(graph, from4) {
  while (token === "->" || token === "--") {
    var to;
    var type = token;
    getToken();
    var subgraph = parseSubgraph(graph);
    if (subgraph) {
      to = subgraph;
    } else {
      if (tokenType != TOKENTYPE.IDENTIFIER) {
        throw newSyntaxError("Identifier or subgraph expected");
      }
      to = token;
      addNode(graph, {
        id: to
      });
      getToken();
    }
    var attr = parseAttributeList();
    var edge2 = createEdge(graph, from4, to, type, attr);
    addEdge(graph, edge2);
    from4 = to;
  }
}
function parseAttributeList() {
  var i2;
  var attr = null;
  var edgeStyles = {
    dashed: true,
    solid: false,
    dotted: [1, 5]
  };
  var arrowTypes = {
    dot: "circle",
    box: "box",
    crow: "crow",
    curve: "curve",
    icurve: "inv_curve",
    normal: "triangle",
    inv: "inv_triangle",
    diamond: "diamond",
    tee: "bar",
    vee: "vee"
  };
  var attr_list = new Array();
  var attr_names = new Array();
  while (token === "[") {
    getToken();
    attr = {};
    while (token !== "" && token != "]") {
      if (tokenType != TOKENTYPE.IDENTIFIER) {
        throw newSyntaxError("Attribute name expected");
      }
      var name = token;
      getToken();
      if (token != "=") {
        throw newSyntaxError("Equal sign = expected");
      }
      getToken();
      if (tokenType != TOKENTYPE.IDENTIFIER) {
        throw newSyntaxError("Attribute value expected");
      }
      var value2 = token;
      if (name === "style") {
        value2 = edgeStyles[value2];
      }
      var arrowType;
      if (name === "arrowhead") {
        arrowType = arrowTypes[value2];
        name = "arrows";
        value2 = {
          to: {
            enabled: true,
            type: arrowType
          }
        };
      }
      if (name === "arrowtail") {
        arrowType = arrowTypes[value2];
        name = "arrows";
        value2 = {
          from: {
            enabled: true,
            type: arrowType
          }
        };
      }
      attr_list.push({
        attr,
        name,
        value: value2
      });
      attr_names.push(name);
      getToken();
      if (token == ",") {
        getToken();
      }
    }
    if (token != "]") {
      throw newSyntaxError("Bracket ] expected");
    }
    getToken();
  }
  if (_includesInstanceProperty(attr_names).call(attr_names, "dir")) {
    var idx = {};
    idx.arrows = {};
    for (i2 = 0; i2 < attr_list.length; i2++) {
      if (attr_list[i2].name === "arrows") {
        if (attr_list[i2].value.to != null) {
          idx.arrows.to = i2;
        } else if (attr_list[i2].value.from != null) {
          idx.arrows.from = i2;
        } else {
          throw newSyntaxError("Invalid value of arrows");
        }
      } else if (attr_list[i2].name === "dir") {
        idx.dir = i2;
      }
    }
    var dir_type = attr_list[idx.dir].value;
    if (!_includesInstanceProperty(attr_names).call(attr_names, "arrows")) {
      if (dir_type === "both") {
        attr_list.push({
          attr: attr_list[idx.dir].attr,
          name: "arrows",
          value: {
            to: {
              enabled: true
            }
          }
        });
        idx.arrows.to = attr_list.length - 1;
        attr_list.push({
          attr: attr_list[idx.dir].attr,
          name: "arrows",
          value: {
            from: {
              enabled: true
            }
          }
        });
        idx.arrows.from = attr_list.length - 1;
      } else if (dir_type === "forward") {
        attr_list.push({
          attr: attr_list[idx.dir].attr,
          name: "arrows",
          value: {
            to: {
              enabled: true
            }
          }
        });
        idx.arrows.to = attr_list.length - 1;
      } else if (dir_type === "back") {
        attr_list.push({
          attr: attr_list[idx.dir].attr,
          name: "arrows",
          value: {
            from: {
              enabled: true
            }
          }
        });
        idx.arrows.from = attr_list.length - 1;
      } else if (dir_type === "none") {
        attr_list.push({
          attr: attr_list[idx.dir].attr,
          name: "arrows",
          value: ""
        });
        idx.arrows.to = attr_list.length - 1;
      } else {
        throw newSyntaxError('Invalid dir type "' + dir_type + '"');
      }
    }
    var from_type;
    var to_type;
    if (dir_type === "both") {
      if (idx.arrows.to && idx.arrows.from) {
        to_type = attr_list[idx.arrows.to].value.to.type;
        from_type = attr_list[idx.arrows.from].value.from.type;
        attr_list[idx.arrows.to] = {
          attr: attr_list[idx.arrows.to].attr,
          name: attr_list[idx.arrows.to].name,
          value: {
            to: {
              enabled: true,
              type: to_type
            },
            from: {
              enabled: true,
              type: from_type
            }
          }
        };
        _spliceInstanceProperty(attr_list).call(attr_list, idx.arrows.from, 1);
      } else if (idx.arrows.to) {
        to_type = attr_list[idx.arrows.to].value.to.type;
        from_type = "arrow";
        attr_list[idx.arrows.to] = {
          attr: attr_list[idx.arrows.to].attr,
          name: attr_list[idx.arrows.to].name,
          value: {
            to: {
              enabled: true,
              type: to_type
            },
            from: {
              enabled: true,
              type: from_type
            }
          }
        };
      } else if (idx.arrows.from) {
        to_type = "arrow";
        from_type = attr_list[idx.arrows.from].value.from.type;
        attr_list[idx.arrows.from] = {
          attr: attr_list[idx.arrows.from].attr,
          name: attr_list[idx.arrows.from].name,
          value: {
            to: {
              enabled: true,
              type: to_type
            },
            from: {
              enabled: true,
              type: from_type
            }
          }
        };
      }
    } else if (dir_type === "back") {
      if (idx.arrows.to && idx.arrows.from) {
        to_type = "";
        from_type = attr_list[idx.arrows.from].value.from.type;
        attr_list[idx.arrows.from] = {
          attr: attr_list[idx.arrows.from].attr,
          name: attr_list[idx.arrows.from].name,
          value: {
            to: {
              enabled: true,
              type: to_type
            },
            from: {
              enabled: true,
              type: from_type
            }
          }
        };
      } else if (idx.arrows.to) {
        to_type = "";
        from_type = "arrow";
        idx.arrows.from = idx.arrows.to;
        attr_list[idx.arrows.from] = {
          attr: attr_list[idx.arrows.from].attr,
          name: attr_list[idx.arrows.from].name,
          value: {
            to: {
              enabled: true,
              type: to_type
            },
            from: {
              enabled: true,
              type: from_type
            }
          }
        };
      } else if (idx.arrows.from) {
        to_type = "";
        from_type = attr_list[idx.arrows.from].value.from.type;
        attr_list[idx.arrows.to] = {
          attr: attr_list[idx.arrows.from].attr,
          name: attr_list[idx.arrows.from].name,
          value: {
            to: {
              enabled: true,
              type: to_type
            },
            from: {
              enabled: true,
              type: from_type
            }
          }
        };
      }
      attr_list[idx.arrows.from] = {
        attr: attr_list[idx.arrows.from].attr,
        name: attr_list[idx.arrows.from].name,
        value: {
          from: {
            enabled: true,
            type: attr_list[idx.arrows.from].value.from.type
          }
        }
      };
    } else if (dir_type === "none") {
      var idx_arrow;
      if (idx.arrows.to) {
        idx_arrow = idx.arrows.to;
      } else {
        idx_arrow = idx.arrows.from;
      }
      attr_list[idx_arrow] = {
        attr: attr_list[idx_arrow].attr,
        name: attr_list[idx_arrow].name,
        value: ""
      };
    } else if (dir_type === "forward") {
      if (idx.arrows.to && idx.arrows.from) {
        to_type = attr_list[idx.arrows.to].value.to.type;
        from_type = "";
        attr_list[idx.arrows.to] = {
          attr: attr_list[idx.arrows.to].attr,
          name: attr_list[idx.arrows.to].name,
          value: {
            to: {
              enabled: true,
              type: to_type
            },
            from: {
              enabled: true,
              type: from_type
            }
          }
        };
      } else if (idx.arrows.to) {
        to_type = attr_list[idx.arrows.to].value.to.type;
        from_type = "";
        attr_list[idx.arrows.to] = {
          attr: attr_list[idx.arrows.to].attr,
          name: attr_list[idx.arrows.to].name,
          value: {
            to: {
              enabled: true,
              type: to_type
            },
            from: {
              enabled: true,
              type: from_type
            }
          }
        };
      } else if (idx.arrows.from) {
        to_type = "arrow";
        from_type = "";
        idx.arrows.to = idx.arrows.from;
        attr_list[idx.arrows.to] = {
          attr: attr_list[idx.arrows.to].attr,
          name: attr_list[idx.arrows.to].name,
          value: {
            to: {
              enabled: true,
              type: to_type
            },
            from: {
              enabled: true,
              type: from_type
            }
          }
        };
      }
      attr_list[idx.arrows.to] = {
        attr: attr_list[idx.arrows.to].attr,
        name: attr_list[idx.arrows.to].name,
        value: {
          to: {
            enabled: true,
            type: attr_list[idx.arrows.to].value.to.type
          }
        }
      };
    } else {
      throw newSyntaxError('Invalid dir type "' + dir_type + '"');
    }
    _spliceInstanceProperty(attr_list).call(attr_list, idx.dir, 1);
  }
  var nof_attr_list;
  if (_includesInstanceProperty(attr_names).call(attr_names, "penwidth")) {
    var tmp_attr_list = [];
    nof_attr_list = attr_list.length;
    for (i2 = 0; i2 < nof_attr_list; i2++) {
      if (attr_list[i2].name !== "width") {
        if (attr_list[i2].name === "penwidth") {
          attr_list[i2].name = "width";
        }
        tmp_attr_list.push(attr_list[i2]);
      }
    }
    attr_list = tmp_attr_list;
  }
  nof_attr_list = attr_list.length;
  for (i2 = 0; i2 < nof_attr_list; i2++) {
    setValue(attr_list[i2].attr, attr_list[i2].name, attr_list[i2].value);
  }
  return attr;
}
function newSyntaxError(message2) {
  return new SyntaxError(message2 + ', got "' + chop(token, 30) + '" (char ' + index + ")");
}
function chop(text, maxLength) {
  return text.length <= maxLength ? text : text.substr(0, 27) + "...";
}
function forEach2(array1, array2, fn2) {
  if (_Array$isArray(array1)) {
    _forEachInstanceProperty(array1).call(array1, function(elem1) {
      if (_Array$isArray(array2)) {
        _forEachInstanceProperty(array2).call(array2, function(elem2) {
          fn2(elem1, elem2);
        });
      } else {
        fn2(elem1, array2);
      }
    });
  } else {
    if (_Array$isArray(array2)) {
      _forEachInstanceProperty(array2).call(array2, function(elem2) {
        fn2(array1, elem2);
      });
    } else {
      fn2(array1, array2);
    }
  }
}
function setProp(object2, path2, value2) {
  var names = path2.split(".");
  var prop = names.pop();
  var obj = object2;
  for (var i2 = 0; i2 < names.length; i2++) {
    var name = names[i2];
    if (!(name in obj)) {
      obj[name] = {};
    }
    obj = obj[name];
  }
  obj[prop] = value2;
  return object2;
}
function convertAttr(attr, mapping) {
  var converted = {};
  for (var prop in attr) {
    if (attr.hasOwnProperty(prop)) {
      var visProp = mapping[prop];
      if (_Array$isArray(visProp)) {
        _forEachInstanceProperty(visProp).call(visProp, function(visPropI) {
          setProp(converted, visPropI, attr[prop]);
        });
      } else if (typeof visProp === "string") {
        setProp(converted, visProp, attr[prop]);
      } else {
        setProp(converted, prop, attr[prop]);
      }
    }
  }
  return converted;
}
function DOTToGraph(data2) {
  var dotData = parseDOT(data2);
  var graphData = {
    nodes: [],
    edges: [],
    options: {}
  };
  if (dotData.nodes) {
    var _context2;
    _forEachInstanceProperty(_context2 = dotData.nodes).call(_context2, function(dotNode) {
      var graphNode = {
        id: dotNode.id,
        label: String(dotNode.label || dotNode.id)
      };
      merge$1(graphNode, convertAttr(dotNode.attr, NODE_ATTR_MAPPING));
      if (graphNode.image) {
        graphNode.shape = "image";
      }
      graphData.nodes.push(graphNode);
    });
  }
  if (dotData.edges) {
    var _context3;
    var convertEdge = function convertEdge2(dotEdge) {
      var graphEdge = {
        from: dotEdge.from,
        to: dotEdge.to
      };
      merge$1(graphEdge, convertAttr(dotEdge.attr, EDGE_ATTR_MAPPING));
      if (graphEdge.arrows == null && dotEdge.type === "->") {
        graphEdge.arrows = "to";
      }
      return graphEdge;
    };
    _forEachInstanceProperty(_context3 = dotData.edges).call(_context3, function(dotEdge) {
      var from4, to;
      if (dotEdge.from instanceof Object) {
        from4 = dotEdge.from.nodes;
      } else {
        from4 = {
          id: dotEdge.from
        };
      }
      if (dotEdge.to instanceof Object) {
        to = dotEdge.to.nodes;
      } else {
        to = {
          id: dotEdge.to
        };
      }
      if (dotEdge.from instanceof Object && dotEdge.from.edges) {
        var _context4;
        _forEachInstanceProperty(_context4 = dotEdge.from.edges).call(_context4, function(subEdge) {
          var graphEdge = convertEdge(subEdge);
          graphData.edges.push(graphEdge);
        });
      }
      forEach2(from4, to, function(from5, to2) {
        var subEdge = createEdge(graphData, from5.id, to2.id, dotEdge.type, dotEdge.attr);
        var graphEdge = convertEdge(subEdge);
        graphData.edges.push(graphEdge);
      });
      if (dotEdge.to instanceof Object && dotEdge.to.edges) {
        var _context5;
        _forEachInstanceProperty(_context5 = dotEdge.to.edges).call(_context5, function(subEdge) {
          var graphEdge = convertEdge(subEdge);
          graphData.edges.push(graphEdge);
        });
      }
    });
  }
  if (dotData.attr) {
    graphData.options = dotData.attr;
  }
  return graphData;
}
function parseGephi(gephiJSON, optionsObj) {
  var _context;
  var options = {
    edges: {
      inheritColor: false
    },
    nodes: {
      fixed: false,
      parseColor: false
    }
  };
  if (optionsObj != null) {
    if (optionsObj.fixed != null) {
      options.nodes.fixed = optionsObj.fixed;
    }
    if (optionsObj.parseColor != null) {
      options.nodes.parseColor = optionsObj.parseColor;
    }
    if (optionsObj.inheritColor != null) {
      options.edges.inheritColor = optionsObj.inheritColor;
    }
  }
  var gEdges = gephiJSON.edges;
  var vEdges = _mapInstanceProperty(gEdges).call(gEdges, function(gEdge) {
    var vEdge = {
      from: gEdge.source,
      id: gEdge.id,
      to: gEdge.target
    };
    if (gEdge.attributes != null) {
      vEdge.attributes = gEdge.attributes;
    }
    if (gEdge.label != null) {
      vEdge.label = gEdge.label;
    }
    if (gEdge.attributes != null && gEdge.attributes.title != null) {
      vEdge.title = gEdge.attributes.title;
    }
    if (gEdge.type === "Directed") {
      vEdge.arrows = "to";
    }
    if (gEdge.color && options.edges.inheritColor === false) {
      vEdge.color = gEdge.color;
    }
    return vEdge;
  });
  var vNodes = _mapInstanceProperty(_context = gephiJSON.nodes).call(_context, function(gNode) {
    var vNode = {
      id: gNode.id,
      fixed: options.nodes.fixed && gNode.x != null && gNode.y != null
    };
    if (gNode.attributes != null) {
      vNode.attributes = gNode.attributes;
    }
    if (gNode.label != null) {
      vNode.label = gNode.label;
    }
    if (gNode.size != null) {
      vNode.size = gNode.size;
    }
    if (gNode.attributes != null && gNode.attributes.title != null) {
      vNode.title = gNode.attributes.title;
    }
    if (gNode.title != null) {
      vNode.title = gNode.title;
    }
    if (gNode.x != null) {
      vNode.x = gNode.x;
    }
    if (gNode.y != null) {
      vNode.y = gNode.y;
    }
    if (gNode.color != null) {
      if (options.nodes.parseColor === true) {
        vNode.color = gNode.color;
      } else {
        vNode.color = {
          background: gNode.color,
          border: gNode.color,
          highlight: {
            background: gNode.color,
            border: gNode.color
          },
          hover: {
            background: gNode.color,
            border: gNode.color
          }
        };
      }
    }
    return vNode;
  });
  return {
    nodes: vNodes,
    edges: vEdges
  };
}
var en = {
  addDescription: "Click in an empty space to place a new node.",
  addEdge: "Add Edge",
  addNode: "Add Node",
  back: "Back",
  close: "Close",
  createEdgeError: "Cannot link edges to a cluster.",
  del: "Delete selected",
  deleteClusterError: "Clusters cannot be deleted.",
  edgeDescription: "Click on a node and drag the edge to another node to connect them.",
  edit: "Edit",
  editClusterError: "Clusters cannot be edited.",
  editEdge: "Edit Edge",
  editEdgeDescription: "Click on the control points and drag them to a node to connect to it.",
  editNode: "Edit Node"
};
var de = {
  addDescription: "Klicke auf eine freie Stelle, um einen neuen Knoten zu plazieren.",
  addEdge: "Kante hinzufügen",
  addNode: "Knoten hinzufügen",
  back: "Zurück",
  close: "Schließen",
  createEdgeError: "Es ist nicht möglich, Kanten mit Clustern zu verbinden.",
  del: "Lösche Auswahl",
  deleteClusterError: "Cluster können nicht gelöscht werden.",
  edgeDescription: "Klicke auf einen Knoten und ziehe die Kante zu einem anderen Knoten, um diese zu verbinden.",
  edit: "Editieren",
  editClusterError: "Cluster können nicht editiert werden.",
  editEdge: "Kante editieren",
  editEdgeDescription: "Klicke auf die Verbindungspunkte und ziehe diese auf einen Knoten, um sie zu verbinden.",
  editNode: "Knoten editieren"
};
var es = {
  addDescription: "Haga clic en un lugar vacío para colocar un nuevo nodo.",
  addEdge: "Añadir arista",
  addNode: "Añadir nodo",
  back: "Atrás",
  close: "Cerrar",
  createEdgeError: "No se puede conectar una arista a un grupo.",
  del: "Eliminar selección",
  deleteClusterError: "No es posible eliminar grupos.",
  edgeDescription: "Haga clic en un nodo y arrastre la arista hacia otro nodo para conectarlos.",
  edit: "Editar",
  editClusterError: "No es posible editar grupos.",
  editEdge: "Editar arista",
  editEdgeDescription: "Haga clic en un punto de control y arrastrelo a un nodo para conectarlo.",
  editNode: "Editar nodo"
};
var it = {
  addDescription: "Clicca per aggiungere un nuovo nodo",
  addEdge: "Aggiungi un vertice",
  addNode: "Aggiungi un nodo",
  back: "Indietro",
  close: "Chiudere",
  createEdgeError: "Non si possono collegare vertici ad un cluster",
  del: "Cancella la selezione",
  deleteClusterError: "I cluster non possono essere cancellati",
  edgeDescription: "Clicca su un nodo e trascinalo ad un altro nodo per connetterli.",
  edit: "Modifica",
  editClusterError: "I clusters non possono essere modificati.",
  editEdge: "Modifica il vertice",
  editEdgeDescription: "Clicca sui Punti di controllo e trascinali ad un nodo per connetterli.",
  editNode: "Modifica il nodo"
};
var nl = {
  addDescription: "Klik op een leeg gebied om een nieuwe node te maken.",
  addEdge: "Link toevoegen",
  addNode: "Node toevoegen",
  back: "Terug",
  close: "Sluiten",
  createEdgeError: "Kan geen link maken naar een cluster.",
  del: "Selectie verwijderen",
  deleteClusterError: "Clusters kunnen niet worden verwijderd.",
  edgeDescription: "Klik op een node en sleep de link naar een andere node om ze te verbinden.",
  edit: "Wijzigen",
  editClusterError: "Clusters kunnen niet worden aangepast.",
  editEdge: "Link wijzigen",
  editEdgeDescription: "Klik op de verbindingspunten en sleep ze naar een node om daarmee te verbinden.",
  editNode: "Node wijzigen"
};
var pt = {
  addDescription: "Clique em um espaço em branco para adicionar um novo nó",
  addEdge: "Adicionar aresta",
  addNode: "Adicionar nó",
  back: "Voltar",
  close: "Fechar",
  createEdgeError: "Não foi possível linkar arestas a um cluster.",
  del: "Remover selecionado",
  deleteClusterError: "Clusters não puderam ser removidos.",
  edgeDescription: "Clique em um nó e arraste a aresta até outro nó para conectá-los",
  edit: "Editar",
  editClusterError: "Clusters não puderam ser editados.",
  editEdge: "Editar aresta",
  editEdgeDescription: "Clique nos pontos de controle e os arraste para um nó para conectá-los",
  editNode: "Editar nó"
};
var ru = {
  addDescription: "Кликните в свободное место, чтобы добавить новый узел.",
  addEdge: "Добавить ребро",
  addNode: "Добавить узел",
  back: "Назад",
  close: "Закрывать",
  createEdgeError: "Невозможно соединить ребра в кластер.",
  del: "Удалить выбранное",
  deleteClusterError: "Кластеры не могут быть удалены",
  edgeDescription: "Кликните на узел и протяните ребро к другому узлу, чтобы соединить их.",
  edit: "Редактировать",
  editClusterError: "Кластеры недоступны для редактирования.",
  editEdge: "Редактировать ребро",
  editEdgeDescription: "Кликните на контрольные точки и перетащите их в узел, чтобы подключиться к нему.",
  editNode: "Редактировать узел"
};
var cn = {
  addDescription: "单击空白处放置新节点。",
  addEdge: "添加连接线",
  addNode: "添加节点",
  back: "返回",
  close: "關閉",
  createEdgeError: "无法将连接线连接到群集。",
  del: "删除选定",
  deleteClusterError: "无法删除群集。",
  edgeDescription: "单击某个节点并将该连接线拖动到另一个节点以连接它们。",
  edit: "编辑",
  editClusterError: "无法编辑群集。",
  editEdge: "编辑连接线",
  editEdgeDescription: "单击控制节点并将它们拖到节点上连接。",
  editNode: "编辑节点"
};
var uk = {
  addDescription: "Kлікніть на вільне місце, щоб додати новий вузол.",
  addEdge: "Додати край",
  addNode: "Додати вузол",
  back: "Назад",
  close: "Закрити",
  createEdgeError: "Не можливо об'єднати краї в групу.",
  del: "Видалити обране",
  deleteClusterError: "Групи не можуть бути видалені.",
  edgeDescription: "Клікніть на вузол і перетягніть край до іншого вузла, щоб їх з'єднати.",
  edit: "Редагувати",
  editClusterError: "Групи недоступні для редагування.",
  editEdge: "Редагувати край",
  editEdgeDescription: "Клікніть на контрольні точки і перетягніть їх у вузол, щоб підключитися до нього.",
  editNode: "Редагувати вузол"
};
var fr = {
  addDescription: "Cliquez dans un endroit vide pour placer un nœud.",
  addEdge: "Ajouter un lien",
  addNode: "Ajouter un nœud",
  back: "Retour",
  close: "Fermer",
  createEdgeError: "Impossible de créer un lien vers un cluster.",
  del: "Effacer la sélection",
  deleteClusterError: "Les clusters ne peuvent pas être effacés.",
  edgeDescription: "Cliquez sur un nœud et glissez le lien vers un autre nœud pour les connecter.",
  edit: "Éditer",
  editClusterError: "Les clusters ne peuvent pas être édités.",
  editEdge: "Éditer le lien",
  editEdgeDescription: "Cliquez sur les points de contrôle et glissez-les pour connecter un nœud.",
  editNode: "Éditer le nœud"
};
var cs = {
  addDescription: "Kluknutím do prázdného prostoru můžete přidat nový vrchol.",
  addEdge: "Přidat hranu",
  addNode: "Přidat vrchol",
  back: "Zpět",
  close: "Zavřít",
  createEdgeError: "Nelze připojit hranu ke shluku.",
  del: "Smazat výběr",
  deleteClusterError: "Nelze mazat shluky.",
  edgeDescription: "Přetažením z jednoho vrcholu do druhého můžete spojit tyto vrcholy novou hranou.",
  edit: "Upravit",
  editClusterError: "Nelze upravovat shluky.",
  editEdge: "Upravit hranu",
  editEdgeDescription: "Přetažením kontrolního vrcholu hrany ji můžete připojit k jinému vrcholu.",
  editNode: "Upravit vrchol"
};
var locales = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  cn,
  cs,
  de,
  en,
  es,
  fr,
  it,
  nl,
  pt,
  ru,
  uk
});
function normalizeLanguageCode(locales2, rawCode) {
  try {
    var _rawCode$split = rawCode.split(/[-_ /]/, 2), _rawCode$split2 = _slicedToArray(_rawCode$split, 2), rawLanguage = _rawCode$split2[0], rawCountry = _rawCode$split2[1];
    var language2 = rawLanguage != null ? rawLanguage.toLowerCase() : null;
    var country = rawCountry != null ? rawCountry.toUpperCase() : null;
    if (language2 && country) {
      var code2 = language2 + "-" + country;
      if (Object.prototype.hasOwnProperty.call(locales2, code2)) {
        return code2;
      } else {
        var _context;
        console.warn(_concatInstanceProperty(_context = "Unknown variant ".concat(country, " of language ")).call(_context, language2, "."));
      }
    }
    if (language2) {
      var _code = language2;
      if (Object.prototype.hasOwnProperty.call(locales2, _code)) {
        return _code;
      } else {
        console.warn("Unknown language ".concat(language2));
      }
    }
    console.warn("Unknown locale ".concat(rawCode, ", falling back to English."));
    return "en";
  } catch (error) {
    console.error(error);
    console.warn("Unexpected error while normalizing locale ".concat(rawCode, ", falling back to English."));
    return "en";
  }
}
var CachedImage = /* @__PURE__ */ function() {
  function CachedImage2() {
    _classCallCheck(this, CachedImage2);
    this.NUM_ITERATIONS = 4;
    this.image = new Image();
    this.canvas = document.createElement("canvas");
  }
  _createClass(CachedImage2, [{
    key: "init",
    value: function init() {
      if (this.initialized()) return;
      this.src = this.image.src;
      var w2 = this.image.width;
      var h2 = this.image.height;
      this.width = w2;
      this.height = h2;
      var h22 = Math.floor(h2 / 2);
      var h4 = Math.floor(h2 / 4);
      var h8 = Math.floor(h2 / 8);
      var h16 = Math.floor(h2 / 16);
      var w22 = Math.floor(w2 / 2);
      var w4 = Math.floor(w2 / 4);
      var w8 = Math.floor(w2 / 8);
      var w16 = Math.floor(w2 / 16);
      this.canvas.width = 3 * w4;
      this.canvas.height = h22;
      this.coordinates = [[0, 0, w22, h22], [w22, 0, w4, h4], [w22, h4, w8, h8], [5 * w8, h4, w16, h16]];
      this._fillMipMap();
    }
    /**
     * @returns {boolean} true if init() has been called, false otherwise.
     */
  }, {
    key: "initialized",
    value: function initialized() {
      return this.coordinates !== void 0;
    }
    /**
     * Redraw main image in various sizes to the context.
     *
     * The rationale behind this is to reduce artefacts due to interpolation
     * at differing zoom levels.
     *
     * Source: http://stackoverflow.com/q/18761404/1223531
     *
     * This methods takes the resizing out of the drawing loop, in order to
     * reduce performance overhead.
     *
     * TODO: The code assumes that a 2D context can always be gotten. This is
     *       not necessarily true! OTOH, if not true then usage of this class
     *       is senseless.
     *
     * @private
     */
  }, {
    key: "_fillMipMap",
    value: function _fillMipMap() {
      var ctx = this.canvas.getContext("2d");
      var to = this.coordinates[0];
      ctx.drawImage(this.image, to[0], to[1], to[2], to[3]);
      for (var iterations = 1; iterations < this.NUM_ITERATIONS; iterations++) {
        var from4 = this.coordinates[iterations - 1];
        var _to = this.coordinates[iterations];
        ctx.drawImage(this.canvas, from4[0], from4[1], from4[2], from4[3], _to[0], _to[1], _to[2], _to[3]);
      }
    }
    /**
     * Draw the image, using the mipmap if necessary.
     *
     * MipMap is only used if param factor > 2; otherwise, original bitmap
     * is resized. This is also used to skip mipmap usage, e.g. by setting factor = 1
     *
     * Credits to 'Alex de Mulder' for original implementation.
     *
     * @param {CanvasRenderingContext2D} ctx  context on which to draw zoomed image
     * @param {Float} factor scale factor at which to draw
     * @param {number} left
     * @param {number} top
     * @param {number} width
     * @param {number} height
     */
  }, {
    key: "drawImageAtPosition",
    value: function drawImageAtPosition(ctx, factor, left2, top2, width, height) {
      if (!this.initialized()) return;
      if (factor > 2) {
        factor *= 0.5;
        var iterations = 0;
        while (factor > 2 && iterations < this.NUM_ITERATIONS) {
          factor *= 0.5;
          iterations += 1;
        }
        if (iterations >= this.NUM_ITERATIONS) {
          iterations = this.NUM_ITERATIONS - 1;
        }
        var from4 = this.coordinates[iterations];
        ctx.drawImage(this.canvas, from4[0], from4[1], from4[2], from4[3], left2, top2, width, height);
      } else {
        ctx.drawImage(this.image, left2, top2, width, height);
      }
    }
  }]);
  return CachedImage2;
}();
var Images = /* @__PURE__ */ function() {
  function Images2(callback) {
    _classCallCheck(this, Images2);
    this.images = {};
    this.imageBroken = {};
    this.callback = callback;
  }
  _createClass(Images2, [{
    key: "_tryloadBrokenUrl",
    value: function _tryloadBrokenUrl(url, brokenUrl, imageToLoadBrokenUrlOn) {
      if (url === void 0 || imageToLoadBrokenUrlOn === void 0) return;
      if (brokenUrl === void 0) {
        console.warn("No broken url image defined");
        return;
      }
      imageToLoadBrokenUrlOn.image.onerror = function() {
        console.error("Could not load brokenImage:", brokenUrl);
      };
      imageToLoadBrokenUrlOn.image.src = brokenUrl;
    }
    /**
     *
     * @param {vis.Image} imageToRedrawWith
     * @private
     */
  }, {
    key: "_redrawWithImage",
    value: function _redrawWithImage(imageToRedrawWith) {
      if (this.callback) {
        this.callback(imageToRedrawWith);
      }
    }
    /**
     * @param {string} url          Url of the image
     * @param {string} brokenUrl    Url of an image to use if the url image is not found
     * @returns {Image} img          The image object
     */
  }, {
    key: "load",
    value: function load(url, brokenUrl) {
      var _this = this;
      var cachedImage = this.images[url];
      if (cachedImage) return cachedImage;
      var img = new CachedImage();
      this.images[url] = img;
      img.image.onload = function() {
        _this._fixImageCoordinates(img.image);
        img.init();
        _this._redrawWithImage(img);
      };
      img.image.onerror = function() {
        console.error("Could not load image:", url);
        _this._tryloadBrokenUrl(url, brokenUrl, img);
      };
      img.image.src = url;
      return img;
    }
    /**
     * IE11 fix -- thanks dponch!
     *
     * Local helper function
     *
     * @param {vis.Image} imageToCache
     * @private
     */
  }, {
    key: "_fixImageCoordinates",
    value: function _fixImageCoordinates(imageToCache) {
      if (imageToCache.width === 0) {
        document.body.appendChild(imageToCache);
        imageToCache.width = imageToCache.offsetWidth;
        imageToCache.height = imageToCache.offsetHeight;
        document.body.removeChild(imageToCache);
      }
    }
  }]);
  return Images2;
}();
var internalMetadata = { exports: {} };
var fails$9 = fails$w;
var arrayBufferNonExtensible = fails$9(function() {
  if (typeof ArrayBuffer == "function") {
    var buffer2 = new ArrayBuffer(8);
    if (Object.isExtensible(buffer2)) Object.defineProperty(buffer2, "a", { value: 8 });
  }
});
var fails$8 = fails$w;
var isObject$6 = isObject$j;
var classof$2 = classofRaw$2;
var ARRAY_BUFFER_NON_EXTENSIBLE = arrayBufferNonExtensible;
var $isExtensible = Object.isExtensible;
var FAILS_ON_PRIMITIVES$1 = fails$8(function() {
  $isExtensible(1);
});
var objectIsExtensible = FAILS_ON_PRIMITIVES$1 || ARRAY_BUFFER_NON_EXTENSIBLE ? function isExtensible3(it2) {
  if (!isObject$6(it2)) return false;
  if (ARRAY_BUFFER_NON_EXTENSIBLE && classof$2(it2) === "ArrayBuffer") return false;
  return $isExtensible ? $isExtensible(it2) : true;
} : $isExtensible;
var fails$7 = fails$w;
var freezing = !fails$7(function() {
  return Object.isExtensible(Object.preventExtensions({}));
});
var $$g = _export;
var uncurryThis$4 = functionUncurryThis;
var hiddenKeys = hiddenKeys$6;
var isObject$5 = isObject$j;
var hasOwn$3 = hasOwnProperty_1;
var defineProperty$2 = objectDefineProperty.f;
var getOwnPropertyNamesModule = objectGetOwnPropertyNames;
var getOwnPropertyNamesExternalModule = objectGetOwnPropertyNamesExternal;
var isExtensible$1 = objectIsExtensible;
var uid = uid$4;
var FREEZING$1 = freezing;
var REQUIRED = false;
var METADATA = uid("meta");
var id$1 = 0;
var setMetadata = function(it2) {
  defineProperty$2(it2, METADATA, { value: {
    objectID: "O" + id$1++,
    // object ID
    weakData: {}
    // weak collections IDs
  } });
};
var fastKey$1 = function(it2, create8) {
  if (!isObject$5(it2)) return typeof it2 == "symbol" ? it2 : (typeof it2 == "string" ? "S" : "P") + it2;
  if (!hasOwn$3(it2, METADATA)) {
    if (!isExtensible$1(it2)) return "F";
    if (!create8) return "E";
    setMetadata(it2);
  }
  return it2[METADATA].objectID;
};
var getWeakData$1 = function(it2, create8) {
  if (!hasOwn$3(it2, METADATA)) {
    if (!isExtensible$1(it2)) return true;
    if (!create8) return false;
    setMetadata(it2);
  }
  return it2[METADATA].weakData;
};
var onFreeze = function(it2) {
  if (FREEZING$1 && REQUIRED && isExtensible$1(it2) && !hasOwn$3(it2, METADATA)) setMetadata(it2);
  return it2;
};
var enable = function() {
  meta$1.enable = function() {
  };
  REQUIRED = true;
  var getOwnPropertyNames9 = getOwnPropertyNamesModule.f;
  var splice4 = uncurryThis$4([].splice);
  var test2 = {};
  test2[METADATA] = 1;
  if (getOwnPropertyNames9(test2).length) {
    getOwnPropertyNamesModule.f = function(it2) {
      var result = getOwnPropertyNames9(it2);
      for (var i2 = 0, length2 = result.length; i2 < length2; i2++) {
        if (result[i2] === METADATA) {
          splice4(result, i2, 1);
          break;
        }
      }
      return result;
    };
    $$g({ target: "Object", stat: true, forced: true }, {
      getOwnPropertyNames: getOwnPropertyNamesExternalModule.f
    });
  }
};
var meta$1 = internalMetadata.exports = {
  enable,
  fastKey: fastKey$1,
  getWeakData: getWeakData$1,
  onFreeze
};
hiddenKeys[METADATA] = true;
var internalMetadataExports = internalMetadata.exports;
var bind$5 = functionBindContext;
var call$1 = functionCall;
var anObject$3 = anObject$d;
var tryToString$1 = tryToString$6;
var isArrayIteratorMethod = isArrayIteratorMethod$2;
var lengthOfArrayLike$2 = lengthOfArrayLike$c;
var isPrototypeOf$6 = objectIsPrototypeOf;
var getIterator = getIterator$2;
var getIteratorMethod = getIteratorMethod$9;
var iteratorClose = iteratorClose$2;
var $TypeError$3 = TypeError;
var Result = function(stopped, result) {
  this.stopped = stopped;
  this.result = result;
};
var ResultPrototype = Result.prototype;
var iterate$3 = function(iterable, unboundFunction, options) {
  var that = options && options.that;
  var AS_ENTRIES = !!(options && options.AS_ENTRIES);
  var IS_RECORD = !!(options && options.IS_RECORD);
  var IS_ITERATOR = !!(options && options.IS_ITERATOR);
  var INTERRUPTED = !!(options && options.INTERRUPTED);
  var fn2 = bind$5(unboundFunction, that);
  var iterator2, iterFn, index2, length2, result, next4, step;
  var stop2 = function(condition) {
    if (iterator2) iteratorClose(iterator2, "normal", condition);
    return new Result(true, condition);
  };
  var callFn = function(value2) {
    if (AS_ENTRIES) {
      anObject$3(value2);
      return INTERRUPTED ? fn2(value2[0], value2[1], stop2) : fn2(value2[0], value2[1]);
    }
    return INTERRUPTED ? fn2(value2, stop2) : fn2(value2);
  };
  if (IS_RECORD) {
    iterator2 = iterable.iterator;
  } else if (IS_ITERATOR) {
    iterator2 = iterable;
  } else {
    iterFn = getIteratorMethod(iterable);
    if (!iterFn) throw new $TypeError$3(tryToString$1(iterable) + " is not iterable");
    if (isArrayIteratorMethod(iterFn)) {
      for (index2 = 0, length2 = lengthOfArrayLike$2(iterable); length2 > index2; index2++) {
        result = callFn(iterable[index2]);
        if (result && isPrototypeOf$6(ResultPrototype, result)) return result;
      }
      return new Result(false);
    }
    iterator2 = getIterator(iterable, iterFn);
  }
  next4 = IS_RECORD ? iterable.next : iterator2.next;
  while (!(step = call$1(next4, iterator2)).done) {
    try {
      result = callFn(step.value);
    } catch (error) {
      iteratorClose(iterator2, "throw", error);
    }
    if (typeof result == "object" && result && isPrototypeOf$6(ResultPrototype, result)) return result;
  }
  return new Result(false);
};
var isPrototypeOf$5 = objectIsPrototypeOf;
var $TypeError$2 = TypeError;
var anInstance$3 = function(it2, Prototype) {
  if (isPrototypeOf$5(Prototype, it2)) return it2;
  throw new $TypeError$2("Incorrect invocation");
};
var $$f = _export;
var global$5 = global$n;
var InternalMetadataModule$1 = internalMetadataExports;
var fails$6 = fails$w;
var createNonEnumerableProperty = createNonEnumerableProperty$6;
var iterate$2 = iterate$3;
var anInstance$2 = anInstance$3;
var isCallable = isCallable$i;
var isObject$4 = isObject$j;
var isNullOrUndefined$2 = isNullOrUndefined$6;
var setToStringTag = setToStringTag$6;
var defineProperty$1 = objectDefineProperty.f;
var forEach = arrayIteration.forEach;
var DESCRIPTORS$5 = descriptors;
var InternalStateModule$2 = internalState;
var setInternalState$2 = InternalStateModule$2.set;
var internalStateGetterFor$2 = InternalStateModule$2.getterFor;
var collection$3 = function(CONSTRUCTOR_NAME, wrapper2, common) {
  var IS_MAP = CONSTRUCTOR_NAME.indexOf("Map") !== -1;
  var IS_WEAK = CONSTRUCTOR_NAME.indexOf("Weak") !== -1;
  var ADDER = IS_MAP ? "set" : "add";
  var NativeConstructor = global$5[CONSTRUCTOR_NAME];
  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
  var exported = {};
  var Constructor;
  if (!DESCRIPTORS$5 || !isCallable(NativeConstructor) || !(IS_WEAK || NativePrototype.forEach && !fails$6(function() {
    new NativeConstructor().entries().next();
  }))) {
    Constructor = common.getConstructor(wrapper2, CONSTRUCTOR_NAME, IS_MAP, ADDER);
    InternalMetadataModule$1.enable();
  } else {
    Constructor = wrapper2(function(target, iterable) {
      setInternalState$2(anInstance$2(target, Prototype), {
        type: CONSTRUCTOR_NAME,
        collection: new NativeConstructor()
      });
      if (!isNullOrUndefined$2(iterable)) iterate$2(iterable, target[ADDER], { that: target, AS_ENTRIES: IS_MAP });
    });
    var Prototype = Constructor.prototype;
    var getInternalState2 = internalStateGetterFor$2(CONSTRUCTOR_NAME);
    forEach(["add", "clear", "delete", "forEach", "get", "has", "set", "keys", "values", "entries"], function(KEY) {
      var IS_ADDER = KEY === "add" || KEY === "set";
      if (KEY in NativePrototype && !(IS_WEAK && KEY === "clear")) {
        createNonEnumerableProperty(Prototype, KEY, function(a2, b2) {
          var collection2 = getInternalState2(this).collection;
          if (!IS_ADDER && IS_WEAK && !isObject$4(a2)) return KEY === "get" ? void 0 : false;
          var result = collection2[KEY](a2 === 0 ? 0 : a2, b2);
          return IS_ADDER ? this : result;
        });
      }
    });
    IS_WEAK || defineProperty$1(Prototype, "size", {
      configurable: true,
      get: function() {
        return getInternalState2(this).collection.size;
      }
    });
  }
  setToStringTag(Constructor, CONSTRUCTOR_NAME, false, true);
  exported[CONSTRUCTOR_NAME] = Constructor;
  $$f({ global: true, forced: true }, exported);
  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
  return Constructor;
};
var defineBuiltIn = defineBuiltIn$5;
var defineBuiltIns$3 = function(target, src, options) {
  for (var key2 in src) {
    if (options && options.unsafe && target[key2]) target[key2] = src[key2];
    else defineBuiltIn(target, key2, src[key2], options);
  }
  return target;
};
var getBuiltIn$1 = getBuiltIn$c;
var defineBuiltInAccessor$1 = defineBuiltInAccessor$3;
var wellKnownSymbol = wellKnownSymbol$m;
var DESCRIPTORS$4 = descriptors;
var SPECIES = wellKnownSymbol("species");
var setSpecies$1 = function(CONSTRUCTOR_NAME) {
  var Constructor = getBuiltIn$1(CONSTRUCTOR_NAME);
  if (DESCRIPTORS$4 && Constructor && !Constructor[SPECIES]) {
    defineBuiltInAccessor$1(Constructor, SPECIES, {
      configurable: true,
      get: function() {
        return this;
      }
    });
  }
};
var create$4 = objectCreate;
var defineBuiltInAccessor = defineBuiltInAccessor$3;
var defineBuiltIns$2 = defineBuiltIns$3;
var bind$4 = functionBindContext;
var anInstance$1 = anInstance$3;
var isNullOrUndefined$1 = isNullOrUndefined$6;
var iterate$1 = iterate$3;
var defineIterator = iteratorDefine;
var createIterResultObject = createIterResultObject$3;
var setSpecies = setSpecies$1;
var DESCRIPTORS$3 = descriptors;
var fastKey = internalMetadataExports.fastKey;
var InternalStateModule$1 = internalState;
var setInternalState$1 = InternalStateModule$1.set;
var internalStateGetterFor$1 = InternalStateModule$1.getterFor;
var collectionStrong$2 = {
  getConstructor: function(wrapper2, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
    var Constructor = wrapper2(function(that, iterable) {
      anInstance$1(that, Prototype);
      setInternalState$1(that, {
        type: CONSTRUCTOR_NAME,
        index: create$4(null),
        first: void 0,
        last: void 0,
        size: 0
      });
      if (!DESCRIPTORS$3) that.size = 0;
      if (!isNullOrUndefined$1(iterable)) iterate$1(iterable, that[ADDER], { that, AS_ENTRIES: IS_MAP });
    });
    var Prototype = Constructor.prototype;
    var getInternalState2 = internalStateGetterFor$1(CONSTRUCTOR_NAME);
    var define = function(that, key2, value2) {
      var state = getInternalState2(that);
      var entry = getEntry(that, key2);
      var previous, index2;
      if (entry) {
        entry.value = value2;
      } else {
        state.last = entry = {
          index: index2 = fastKey(key2, true),
          key: key2,
          value: value2,
          previous: previous = state.last,
          next: void 0,
          removed: false
        };
        if (!state.first) state.first = entry;
        if (previous) previous.next = entry;
        if (DESCRIPTORS$3) state.size++;
        else that.size++;
        if (index2 !== "F") state.index[index2] = entry;
      }
      return that;
    };
    var getEntry = function(that, key2) {
      var state = getInternalState2(that);
      var index2 = fastKey(key2);
      var entry;
      if (index2 !== "F") return state.index[index2];
      for (entry = state.first; entry; entry = entry.next) {
        if (entry.key === key2) return entry;
      }
    };
    defineBuiltIns$2(Prototype, {
      // `{ Map, Set }.prototype.clear()` methods
      // https://tc39.es/ecma262/#sec-map.prototype.clear
      // https://tc39.es/ecma262/#sec-set.prototype.clear
      clear: function clear2() {
        var that = this;
        var state = getInternalState2(that);
        var data2 = state.index;
        var entry = state.first;
        while (entry) {
          entry.removed = true;
          if (entry.previous) entry.previous = entry.previous.next = void 0;
          delete data2[entry.index];
          entry = entry.next;
        }
        state.first = state.last = void 0;
        if (DESCRIPTORS$3) state.size = 0;
        else that.size = 0;
      },
      // `{ Map, Set }.prototype.delete(key)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.delete
      // https://tc39.es/ecma262/#sec-set.prototype.delete
      "delete": function(key2) {
        var that = this;
        var state = getInternalState2(that);
        var entry = getEntry(that, key2);
        if (entry) {
          var next4 = entry.next;
          var prev = entry.previous;
          delete state.index[entry.index];
          entry.removed = true;
          if (prev) prev.next = next4;
          if (next4) next4.previous = prev;
          if (state.first === entry) state.first = next4;
          if (state.last === entry) state.last = prev;
          if (DESCRIPTORS$3) state.size--;
          else that.size--;
        }
        return !!entry;
      },
      // `{ Map, Set }.prototype.forEach(callbackfn, thisArg = undefined)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.foreach
      // https://tc39.es/ecma262/#sec-set.prototype.foreach
      forEach: function forEach5(callbackfn) {
        var state = getInternalState2(this);
        var boundFunction = bind$4(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        var entry;
        while (entry = entry ? entry.next : state.first) {
          boundFunction(entry.value, entry.key, this);
          while (entry && entry.removed) entry = entry.previous;
        }
      },
      // `{ Map, Set}.prototype.has(key)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.has
      // https://tc39.es/ecma262/#sec-set.prototype.has
      has: function has2(key2) {
        return !!getEntry(this, key2);
      }
    });
    defineBuiltIns$2(Prototype, IS_MAP ? {
      // `Map.prototype.get(key)` method
      // https://tc39.es/ecma262/#sec-map.prototype.get
      get: function get2(key2) {
        var entry = getEntry(this, key2);
        return entry && entry.value;
      },
      // `Map.prototype.set(key, value)` method
      // https://tc39.es/ecma262/#sec-map.prototype.set
      set: function set2(key2, value2) {
        return define(this, key2 === 0 ? 0 : key2, value2);
      }
    } : {
      // `Set.prototype.add(value)` method
      // https://tc39.es/ecma262/#sec-set.prototype.add
      add: function add(value2) {
        return define(this, value2 = value2 === 0 ? 0 : value2, value2);
      }
    });
    if (DESCRIPTORS$3) defineBuiltInAccessor(Prototype, "size", {
      configurable: true,
      get: function() {
        return getInternalState2(this).size;
      }
    });
    return Constructor;
  },
  setStrong: function(Constructor, CONSTRUCTOR_NAME, IS_MAP) {
    var ITERATOR_NAME = CONSTRUCTOR_NAME + " Iterator";
    var getInternalCollectionState = internalStateGetterFor$1(CONSTRUCTOR_NAME);
    var getInternalIteratorState = internalStateGetterFor$1(ITERATOR_NAME);
    defineIterator(Constructor, CONSTRUCTOR_NAME, function(iterated, kind) {
      setInternalState$1(this, {
        type: ITERATOR_NAME,
        target: iterated,
        state: getInternalCollectionState(iterated),
        kind,
        last: void 0
      });
    }, function() {
      var state = getInternalIteratorState(this);
      var kind = state.kind;
      var entry = state.last;
      while (entry && entry.removed) entry = entry.previous;
      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
        state.target = void 0;
        return createIterResultObject(void 0, true);
      }
      if (kind === "keys") return createIterResultObject(entry.key, false);
      if (kind === "values") return createIterResultObject(entry.value, false);
      return createIterResultObject([entry.key, entry.value], false);
    }, IS_MAP ? "entries" : "values", !IS_MAP, true);
    setSpecies(CONSTRUCTOR_NAME);
  }
};
var collection$2 = collection$3;
var collectionStrong$1 = collectionStrong$2;
collection$2("Map", function(init) {
  return function Map2() {
    return init(this, arguments.length ? arguments[0] : void 0);
  };
}, collectionStrong$1);
var path$f = path$w;
var map$2 = path$f.Map;
var parent$v = map$2;
var map$1 = parent$v;
var map$7 = map$1;
var _Map = /* @__PURE__ */ getDefaultExportFromCjs(map$7);
var Groups = /* @__PURE__ */ function() {
  function Groups2() {
    _classCallCheck(this, Groups2);
    this.clear();
    this._defaultIndex = 0;
    this._groupIndex = 0;
    this._defaultGroups = [
      {
        border: "#2B7CE9",
        background: "#97C2FC",
        highlight: {
          border: "#2B7CE9",
          background: "#D2E5FF"
        },
        hover: {
          border: "#2B7CE9",
          background: "#D2E5FF"
        }
      },
      // 0: blue
      {
        border: "#FFA500",
        background: "#FFFF00",
        highlight: {
          border: "#FFA500",
          background: "#FFFFA3"
        },
        hover: {
          border: "#FFA500",
          background: "#FFFFA3"
        }
      },
      // 1: yellow
      {
        border: "#FA0A10",
        background: "#FB7E81",
        highlight: {
          border: "#FA0A10",
          background: "#FFAFB1"
        },
        hover: {
          border: "#FA0A10",
          background: "#FFAFB1"
        }
      },
      // 2: red
      {
        border: "#41A906",
        background: "#7BE141",
        highlight: {
          border: "#41A906",
          background: "#A1EC76"
        },
        hover: {
          border: "#41A906",
          background: "#A1EC76"
        }
      },
      // 3: green
      {
        border: "#E129F0",
        background: "#EB7DF4",
        highlight: {
          border: "#E129F0",
          background: "#F0B3F5"
        },
        hover: {
          border: "#E129F0",
          background: "#F0B3F5"
        }
      },
      // 4: magenta
      {
        border: "#7C29F0",
        background: "#AD85E4",
        highlight: {
          border: "#7C29F0",
          background: "#D3BDF0"
        },
        hover: {
          border: "#7C29F0",
          background: "#D3BDF0"
        }
      },
      // 5: purple
      {
        border: "#C37F00",
        background: "#FFA807",
        highlight: {
          border: "#C37F00",
          background: "#FFCA66"
        },
        hover: {
          border: "#C37F00",
          background: "#FFCA66"
        }
      },
      // 6: orange
      {
        border: "#4220FB",
        background: "#6E6EFD",
        highlight: {
          border: "#4220FB",
          background: "#9B9BFD"
        },
        hover: {
          border: "#4220FB",
          background: "#9B9BFD"
        }
      },
      // 7: darkblue
      {
        border: "#FD5A77",
        background: "#FFC0CB",
        highlight: {
          border: "#FD5A77",
          background: "#FFD1D9"
        },
        hover: {
          border: "#FD5A77",
          background: "#FFD1D9"
        }
      },
      // 8: pink
      {
        border: "#4AD63A",
        background: "#C2FABC",
        highlight: {
          border: "#4AD63A",
          background: "#E6FFE3"
        },
        hover: {
          border: "#4AD63A",
          background: "#E6FFE3"
        }
      },
      // 9: mint
      {
        border: "#990000",
        background: "#EE0000",
        highlight: {
          border: "#BB0000",
          background: "#FF3333"
        },
        hover: {
          border: "#BB0000",
          background: "#FF3333"
        }
      },
      // 10:bright red
      {
        border: "#FF6000",
        background: "#FF6000",
        highlight: {
          border: "#FF6000",
          background: "#FF6000"
        },
        hover: {
          border: "#FF6000",
          background: "#FF6000"
        }
      },
      // 12: real orange
      {
        border: "#97C2FC",
        background: "#2B7CE9",
        highlight: {
          border: "#D2E5FF",
          background: "#2B7CE9"
        },
        hover: {
          border: "#D2E5FF",
          background: "#2B7CE9"
        }
      },
      // 13: blue
      {
        border: "#399605",
        background: "#255C03",
        highlight: {
          border: "#399605",
          background: "#255C03"
        },
        hover: {
          border: "#399605",
          background: "#255C03"
        }
      },
      // 14: green
      {
        border: "#B70054",
        background: "#FF007E",
        highlight: {
          border: "#B70054",
          background: "#FF007E"
        },
        hover: {
          border: "#B70054",
          background: "#FF007E"
        }
      },
      // 15: magenta
      {
        border: "#AD85E4",
        background: "#7C29F0",
        highlight: {
          border: "#D3BDF0",
          background: "#7C29F0"
        },
        hover: {
          border: "#D3BDF0",
          background: "#7C29F0"
        }
      },
      // 16: purple
      {
        border: "#4557FA",
        background: "#000EA1",
        highlight: {
          border: "#6E6EFD",
          background: "#000EA1"
        },
        hover: {
          border: "#6E6EFD",
          background: "#000EA1"
        }
      },
      // 17: darkblue
      {
        border: "#FFC0CB",
        background: "#FD5A77",
        highlight: {
          border: "#FFD1D9",
          background: "#FD5A77"
        },
        hover: {
          border: "#FFD1D9",
          background: "#FD5A77"
        }
      },
      // 18: pink
      {
        border: "#C2FABC",
        background: "#74D66A",
        highlight: {
          border: "#E6FFE3",
          background: "#74D66A"
        },
        hover: {
          border: "#E6FFE3",
          background: "#74D66A"
        }
      },
      // 19: mint
      {
        border: "#EE0000",
        background: "#990000",
        highlight: {
          border: "#FF3333",
          background: "#BB0000"
        },
        hover: {
          border: "#FF3333",
          background: "#BB0000"
        }
      }
      // 20:bright red
    ];
    this.options = {};
    this.defaultOptions = {
      useDefaultGroups: true
    };
    _Object$assign(this.options, this.defaultOptions);
  }
  _createClass(Groups2, [{
    key: "setOptions",
    value: function setOptions(options) {
      var optionFields = ["useDefaultGroups"];
      if (options !== void 0) {
        for (var groupName in options) {
          if (Object.prototype.hasOwnProperty.call(options, groupName)) {
            if (_indexOfInstanceProperty(optionFields).call(optionFields, groupName) === -1) {
              var group = options[groupName];
              this.add(groupName, group);
            }
          }
        }
      }
    }
    /**
     * Clear all groups
     */
  }, {
    key: "clear",
    value: function clear2() {
      this._groups = new _Map();
      this._groupNames = [];
    }
    /**
     * Get group options of a groupname.
     * If groupname is not found, a new group may be created.
     *
     * @param {*}       groupname     Can be a number, string, Date, etc.
     * @param {boolean} [shouldCreate=true] If true, create a new group
     * @returns {object} The found or created group
     */
  }, {
    key: "get",
    value: function get2(groupname) {
      var shouldCreate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var group = this._groups.get(groupname);
      if (group === void 0 && shouldCreate) {
        if (this.options.useDefaultGroups === false && this._groupNames.length > 0) {
          var index2 = this._groupIndex % this._groupNames.length;
          ++this._groupIndex;
          group = {};
          group.color = this._groups.get(this._groupNames[index2]);
          this._groups.set(groupname, group);
        } else {
          var _index = this._defaultIndex % this._defaultGroups.length;
          this._defaultIndex++;
          group = {};
          group.color = this._defaultGroups[_index];
          this._groups.set(groupname, group);
        }
      }
      return group;
    }
    /**
     * Add custom group style.
     *
     * @param {string} groupName - The name of the group, a new group will be
     * created if a group with the same name doesn't exist, otherwise the old
     * groups style will be overwritten.
     * @param {object} style - An object containing borderColor, backgroundColor,
     * etc.
     * @returns {object} The created group object.
     */
  }, {
    key: "add",
    value: function add(groupName, style) {
      if (!this._groups.has(groupName)) {
        this._groupNames.push(groupName);
      }
      this._groups.set(groupName, style);
      return style;
    }
  }]);
  return Groups2;
}();
var $$e = _export;
$$e({ target: "Number", stat: true }, {
  isNaN: function isNaN2(number2) {
    return number2 !== number2;
  }
});
var path$e = path$w;
var isNan$2 = path$e.Number.isNaN;
var parent$u = isNan$2;
var isNan$1 = parent$u;
var isNan = isNan$1;
var _Number$isNaN = /* @__PURE__ */ getDefaultExportFromCjs(isNan);
var global$4 = global$n;
var globalIsFinite = global$4.isFinite;
var numberIsFinite$1 = Number.isFinite || function isFinite(it2) {
  return typeof it2 == "number" && globalIsFinite(it2);
};
var $$d = _export;
var numberIsFinite = numberIsFinite$1;
$$d({ target: "Number", stat: true }, { isFinite: numberIsFinite });
var path$d = path$w;
var _isFinite$2 = path$d.Number.isFinite;
var parent$t = _isFinite$2;
var _isFinite$1 = parent$t;
var _isFinite = _isFinite$1;
var _Number$isFinite = /* @__PURE__ */ getDefaultExportFromCjs(_isFinite);
var $$c = _export;
var $some = arrayIteration.some;
var arrayMethodIsStrict$3 = arrayMethodIsStrict$6;
var STRICT_METHOD$2 = arrayMethodIsStrict$3("some");
$$c({ target: "Array", proto: true, forced: !STRICT_METHOD$2 }, {
  some: function some3(callbackfn) {
    return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
  }
});
var entryVirtual$4 = entryVirtual$i;
var some$3 = entryVirtual$4("Array").some;
var isPrototypeOf$4 = objectIsPrototypeOf;
var method$4 = some$3;
var ArrayPrototype$4 = Array.prototype;
var some$2 = function(it2) {
  var own = it2.some;
  return it2 === ArrayPrototype$4 || isPrototypeOf$4(ArrayPrototype$4, it2) && own === ArrayPrototype$4.some ? method$4 : own;
};
var parent$s = some$2;
var some$1 = parent$s;
var some = some$1;
var _someInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(some);
var path$c = path$w;
var getOwnPropertySymbols$2 = path$c.Object.getOwnPropertySymbols;
var parent$r = getOwnPropertySymbols$2;
var getOwnPropertySymbols$1 = parent$r;
var getOwnPropertySymbols = getOwnPropertySymbols$1;
var _Object$getOwnPropertySymbols = /* @__PURE__ */ getDefaultExportFromCjs(getOwnPropertySymbols);
var getOwnPropertyDescriptor$6 = { exports: {} };
var $$b = _export;
var fails$5 = fails$w;
var toIndexedObject$1 = toIndexedObject$a;
var nativeGetOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
var DESCRIPTORS$2 = descriptors;
var FORCED$5 = !DESCRIPTORS$2 || fails$5(function() {
  nativeGetOwnPropertyDescriptor(1);
});
$$b({ target: "Object", stat: true, forced: FORCED$5, sham: !DESCRIPTORS$2 }, {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor8(it2, key2) {
    return nativeGetOwnPropertyDescriptor(toIndexedObject$1(it2), key2);
  }
});
var path$b = path$w;
var Object$3 = path$b.Object;
var getOwnPropertyDescriptor$5 = getOwnPropertyDescriptor$6.exports = function getOwnPropertyDescriptor9(it2, key2) {
  return Object$3.getOwnPropertyDescriptor(it2, key2);
};
if (Object$3.getOwnPropertyDescriptor.sham) getOwnPropertyDescriptor$5.sham = true;
var getOwnPropertyDescriptorExports = getOwnPropertyDescriptor$6.exports;
var parent$q = getOwnPropertyDescriptorExports;
var getOwnPropertyDescriptor$4 = parent$q;
var getOwnPropertyDescriptor$3 = getOwnPropertyDescriptor$4;
var _Object$getOwnPropertyDescriptor$1 = /* @__PURE__ */ getDefaultExportFromCjs(getOwnPropertyDescriptor$3);
var $$a = _export;
var DESCRIPTORS$1 = descriptors;
var ownKeys$4 = ownKeys$5;
var toIndexedObject = toIndexedObject$a;
var getOwnPropertyDescriptorModule$1 = objectGetOwnPropertyDescriptor;
var createProperty = createProperty$6;
$$a({ target: "Object", stat: true, sham: !DESCRIPTORS$1 }, {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors3(object2) {
    var O = toIndexedObject(object2);
    var getOwnPropertyDescriptor10 = getOwnPropertyDescriptorModule$1.f;
    var keys6 = ownKeys$4(O);
    var result = {};
    var index2 = 0;
    var key2, descriptor;
    while (keys6.length > index2) {
      descriptor = getOwnPropertyDescriptor10(O, key2 = keys6[index2++]);
      if (descriptor !== void 0) createProperty(result, key2, descriptor);
    }
    return result;
  }
});
var path$a = path$w;
var getOwnPropertyDescriptors$2 = path$a.Object.getOwnPropertyDescriptors;
var parent$p = getOwnPropertyDescriptors$2;
var getOwnPropertyDescriptors$1 = parent$p;
var getOwnPropertyDescriptors = getOwnPropertyDescriptors$1;
var _Object$getOwnPropertyDescriptors = /* @__PURE__ */ getDefaultExportFromCjs(getOwnPropertyDescriptors);
var defineProperties$4 = { exports: {} };
var $$9 = _export;
var DESCRIPTORS = descriptors;
var defineProperties$3 = objectDefineProperties.f;
$$9({ target: "Object", stat: true, forced: Object.defineProperties !== defineProperties$3, sham: !DESCRIPTORS }, {
  defineProperties: defineProperties$3
});
var path$9 = path$w;
var Object$2 = path$9.Object;
var defineProperties$2 = defineProperties$4.exports = function defineProperties7(T, D) {
  return Object$2.defineProperties(T, D);
};
if (Object$2.defineProperties.sham) defineProperties$2.sham = true;
var definePropertiesExports = defineProperties$4.exports;
var parent$o = definePropertiesExports;
var defineProperties$1 = parent$o;
var defineProperties = defineProperties$1;
var _Object$defineProperties = /* @__PURE__ */ getDefaultExportFromCjs(defineProperties);
var defineProperty = defineProperty$9;
var _Object$defineProperty = /* @__PURE__ */ getDefaultExportFromCjs(defineProperty);
function _defineProperty(obj, key2, value2) {
  key2 = _toPropertyKey(key2);
  if (key2 in obj) {
    _Object$defineProperty$1(obj, key2, {
      value: value2,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key2] = value2;
  }
  return obj;
}
var global$3 = global$n;
var fails$4 = fails$w;
var uncurryThis$3 = functionUncurryThis;
var toString$1 = toString$a;
var trim = stringTrim.trim;
var whitespaces = whitespaces$3;
var charAt = uncurryThis$3("".charAt);
var $parseFloat$1 = global$3.parseFloat;
var Symbol$1 = global$3.Symbol;
var ITERATOR = Symbol$1 && Symbol$1.iterator;
var FORCED$4 = 1 / $parseFloat$1(whitespaces + "-0") !== -Infinity || ITERATOR && !fails$4(function() {
  $parseFloat$1(Object(ITERATOR));
});
var numberParseFloat = FORCED$4 ? function parseFloat2(string2) {
  var trimmedString = trim(toString$1(string2));
  var result = $parseFloat$1(trimmedString);
  return result === 0 && charAt(trimmedString, 0) === "-" ? -0 : result;
} : $parseFloat$1;
var $$8 = _export;
var $parseFloat = numberParseFloat;
$$8({ global: true, forced: parseFloat !== $parseFloat }, {
  parseFloat: $parseFloat
});
var path$8 = path$w;
var _parseFloat$3 = path$8.parseFloat;
var parent$n = _parseFloat$3;
var _parseFloat$2 = parent$n;
var _parseFloat = _parseFloat$2;
var _parseFloat$1 = /* @__PURE__ */ getDefaultExportFromCjs(_parseFloat);
var $$7 = _export;
var fails$3 = fails$w;
var getOwnPropertyNames$3 = objectGetOwnPropertyNamesExternal.f;
var FAILS_ON_PRIMITIVES = fails$3(function() {
  return !Object.getOwnPropertyNames(1);
});
$$7({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES }, {
  getOwnPropertyNames: getOwnPropertyNames$3
});
var path$7 = path$w;
var Object$1 = path$7.Object;
var getOwnPropertyNames$2 = function getOwnPropertyNames8(it2) {
  return Object$1.getOwnPropertyNames(it2);
};
var parent$m = getOwnPropertyNames$2;
var getOwnPropertyNames$1 = parent$m;
var getOwnPropertyNames = getOwnPropertyNames$1;
var _Object$getOwnPropertyNames = /* @__PURE__ */ getDefaultExportFromCjs(getOwnPropertyNames);
function choosify(subOption, pile) {
  var allowed = ["node", "edge", "label"];
  var value2 = true;
  var chosen = topMost(pile, "chosen");
  if (typeof chosen === "boolean") {
    value2 = chosen;
  } else if (_typeof(chosen) === "object") {
    if (_indexOfInstanceProperty(allowed).call(allowed, subOption) === -1) {
      throw new Error("choosify: subOption '" + subOption + "' should be one of '" + allowed.join("', '") + "'");
    }
    var chosenEdge = topMost(pile, ["chosen", subOption]);
    if (typeof chosenEdge === "boolean" || typeof chosenEdge === "function") {
      value2 = chosenEdge;
    }
  }
  return value2;
}
function pointInRect(rect, point, rotationPoint) {
  if (rect.width <= 0 || rect.height <= 0) {
    return false;
  }
  if (rotationPoint !== void 0) {
    var tmp = {
      x: point.x - rotationPoint.x,
      y: point.y - rotationPoint.y
    };
    if (rotationPoint.angle !== 0) {
      var angle = -rotationPoint.angle;
      var tmp2 = {
        x: Math.cos(angle) * tmp.x - Math.sin(angle) * tmp.y,
        y: Math.sin(angle) * tmp.x + Math.cos(angle) * tmp.y
      };
      point = tmp2;
    } else {
      point = tmp;
    }
  }
  var right2 = rect.x + rect.width;
  var bottom2 = rect.y + rect.width;
  return rect.left < point.x && right2 > point.x && rect.top < point.y && bottom2 > point.y;
}
function isValidLabel(text) {
  return typeof text === "string" && text !== "";
}
function getSelfRefCoordinates(ctx, angle, radius, node2) {
  var x2 = node2.x;
  var y2 = node2.y;
  if (typeof node2.distanceToBorder === "function") {
    var toBorderDist = node2.distanceToBorder(ctx, angle);
    var yFromNodeCenter = Math.sin(angle) * toBorderDist;
    var xFromNodeCenter = Math.cos(angle) * toBorderDist;
    if (xFromNodeCenter === toBorderDist) {
      x2 += toBorderDist;
      y2 = node2.y;
    } else if (yFromNodeCenter === toBorderDist) {
      x2 = node2.x;
      y2 -= toBorderDist;
    } else {
      x2 += xFromNodeCenter;
      y2 -= yFromNodeCenter;
    }
  } else if (node2.shape.width > node2.shape.height) {
    x2 = node2.x + node2.shape.width * 0.5;
    y2 = node2.y - radius;
  } else {
    x2 = node2.x + radius;
    y2 = node2.y - node2.shape.height * 0.5;
  }
  return {
    x: x2,
    y: y2
  };
}
var entryVirtual$3 = entryVirtual$i;
var values$3 = entryVirtual$3("Array").values;
var parent$l = values$3;
var values$2 = parent$l;
var classof$1 = classof$d;
var hasOwn$2 = hasOwnProperty_1;
var isPrototypeOf$3 = objectIsPrototypeOf;
var method$3 = values$2;
var ArrayPrototype$3 = Array.prototype;
var DOMIterables = {
  DOMTokenList: true,
  NodeList: true
};
var values$1 = function(it2) {
  var own = it2.values;
  return it2 === ArrayPrototype$3 || isPrototypeOf$3(ArrayPrototype$3, it2) && own === ArrayPrototype$3.values || hasOwn$2(DOMIterables, classof$1(it2)) ? method$3 : own;
};
var values = values$1;
var _valuesInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(values);
var LabelAccumulator = /* @__PURE__ */ function() {
  function LabelAccumulator2(measureText) {
    _classCallCheck(this, LabelAccumulator2);
    this.measureText = measureText;
    this.current = 0;
    this.width = 0;
    this.height = 0;
    this.lines = [];
  }
  _createClass(LabelAccumulator2, [{
    key: "_add",
    value: function _add(l2, text) {
      var mod = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "normal";
      if (this.lines[l2] === void 0) {
        this.lines[l2] = {
          width: 0,
          height: 0,
          blocks: []
        };
      }
      var tmpText = text;
      if (text === void 0 || text === "") tmpText = " ";
      var result = this.measureText(tmpText, mod);
      var block = _Object$assign({}, _valuesInstanceProperty(result));
      block.text = text;
      block.width = result.width;
      block.mod = mod;
      if (text === void 0 || text === "") {
        block.width = 0;
      }
      this.lines[l2].blocks.push(block);
      this.lines[l2].width += block.width;
    }
    /**
     * Returns the width in pixels of the current line.
     *
     * @returns {number}
     */
  }, {
    key: "curWidth",
    value: function curWidth() {
      var line2 = this.lines[this.current];
      if (line2 === void 0) return 0;
      return line2.width;
    }
    /**
     * Add text in block to current line
     *
     * @param {string} text
     * @param {'bold'|'ital'|'boldital'|'mono'|'normal'} [mod='normal']
     */
  }, {
    key: "append",
    value: function append(text) {
      var mod = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "normal";
      this._add(this.current, text, mod);
    }
    /**
     * Add text in block to current line and start a new line
     *
     * @param {string} text
     * @param {'bold'|'ital'|'boldital'|'mono'|'normal'} [mod='normal']
     */
  }, {
    key: "newLine",
    value: function newLine(text) {
      var mod = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "normal";
      this._add(this.current, text, mod);
      this.current++;
    }
    /**
     * Determine and set the heights of all the lines currently contained in this instance
     *
     * Note that width has already been set.
     *
     * @private
     */
  }, {
    key: "determineLineHeights",
    value: function determineLineHeights() {
      for (var k2 = 0; k2 < this.lines.length; k2++) {
        var line2 = this.lines[k2];
        var height = 0;
        if (line2.blocks !== void 0) {
          for (var l2 = 0; l2 < line2.blocks.length; l2++) {
            var block = line2.blocks[l2];
            if (height < block.height) {
              height = block.height;
            }
          }
        }
        line2.height = height;
      }
    }
    /**
     * Determine the full size of the label text, as determined by current lines and blocks
     *
     * @private
     */
  }, {
    key: "determineLabelSize",
    value: function determineLabelSize() {
      var width = 0;
      var height = 0;
      for (var k2 = 0; k2 < this.lines.length; k2++) {
        var line2 = this.lines[k2];
        if (line2.width > width) {
          width = line2.width;
        }
        height += line2.height;
      }
      this.width = width;
      this.height = height;
    }
    /**
     * Remove all empty blocks and empty lines we don't need
     *
     * This must be done after the width/height determination,
     * so that these are set properly for processing here.
     *
     * @returns {Array<Line>} Lines with empty blocks (and some empty lines) removed
     * @private
     */
  }, {
    key: "removeEmptyBlocks",
    value: function removeEmptyBlocks() {
      var tmpLines = [];
      for (var k2 = 0; k2 < this.lines.length; k2++) {
        var line2 = this.lines[k2];
        if (line2.blocks.length === 0) continue;
        if (k2 === this.lines.length - 1) {
          if (line2.width === 0) continue;
        }
        var tmpLine = {};
        _Object$assign(tmpLine, line2);
        tmpLine.blocks = [];
        var firstEmptyBlock = void 0;
        var tmpBlocks = [];
        for (var l2 = 0; l2 < line2.blocks.length; l2++) {
          var block = line2.blocks[l2];
          if (block.width !== 0) {
            tmpBlocks.push(block);
          } else {
            if (firstEmptyBlock === void 0) {
              firstEmptyBlock = block;
            }
          }
        }
        if (tmpBlocks.length === 0 && firstEmptyBlock !== void 0) {
          tmpBlocks.push(firstEmptyBlock);
        }
        tmpLine.blocks = tmpBlocks;
        tmpLines.push(tmpLine);
      }
      return tmpLines;
    }
    /**
     * Set the sizes for all lines and the whole thing.
     *
     * @returns {{width: (number|*), height: (number|*), lines: Array}}
     */
  }, {
    key: "finalize",
    value: function finalize() {
      this.determineLineHeights();
      this.determineLabelSize();
      var tmpLines = this.removeEmptyBlocks();
      return {
        width: this.width,
        height: this.height,
        lines: tmpLines
      };
    }
  }]);
  return LabelAccumulator2;
}();
var tagPattern = {
  // HTML
  "<b>": /<b>/,
  "<i>": /<i>/,
  "<code>": /<code>/,
  "</b>": /<\/b>/,
  "</i>": /<\/i>/,
  "</code>": /<\/code>/,
  // Markdown
  "*": /\*/,
  // bold
  _: /_/,
  // ital
  "`": /`/,
  // mono
  afterBold: /[^*]/,
  afterItal: /[^_]/,
  afterMono: /[^`]/
};
var MarkupAccumulator = /* @__PURE__ */ function() {
  function MarkupAccumulator2(text) {
    _classCallCheck(this, MarkupAccumulator2);
    this.text = text;
    this.bold = false;
    this.ital = false;
    this.mono = false;
    this.spacing = false;
    this.position = 0;
    this.buffer = "";
    this.modStack = [];
    this.blocks = [];
  }
  _createClass(MarkupAccumulator2, [{
    key: "mod",
    value: function mod() {
      return this.modStack.length === 0 ? "normal" : this.modStack[0];
    }
    /**
     * Return the mod label currently active
     *
     * @returns {string}  label of active mod
     * @private
     */
  }, {
    key: "modName",
    value: function modName() {
      if (this.modStack.length === 0) return "normal";
      else if (this.modStack[0] === "mono") return "mono";
      else {
        if (this.bold && this.ital) {
          return "boldital";
        } else if (this.bold) {
          return "bold";
        } else if (this.ital) {
          return "ital";
        }
      }
    }
    /**
     * @private
     */
  }, {
    key: "emitBlock",
    value: function emitBlock() {
      if (this.spacing) {
        this.add(" ");
        this.spacing = false;
      }
      if (this.buffer.length > 0) {
        this.blocks.push({
          text: this.buffer,
          mod: this.modName()
        });
        this.buffer = "";
      }
    }
    /**
     * Output text to buffer
     *
     * @param {string} text  text to add
     * @private
     */
  }, {
    key: "add",
    value: function add(text) {
      if (text === " ") {
        this.spacing = true;
      }
      if (this.spacing) {
        this.buffer += " ";
        this.spacing = false;
      }
      if (text != " ") {
        this.buffer += text;
      }
    }
    /**
     * Handle parsing of whitespace
     *
     * @param {string} ch  the character to check
     * @returns {boolean} true if the character was processed as whitespace, false otherwise
     */
  }, {
    key: "parseWS",
    value: function parseWS(ch) {
      if (/[ \t]/.test(ch)) {
        if (!this.mono) {
          this.spacing = true;
        } else {
          this.add(ch);
        }
        return true;
      }
      return false;
    }
    /**
     * @param {string} tagName  label for block type to set
     * @private
     */
  }, {
    key: "setTag",
    value: function setTag(tagName) {
      this.emitBlock();
      this[tagName] = true;
      this.modStack.unshift(tagName);
    }
    /**
     * @param {string} tagName  label for block type to unset
     * @private
     */
  }, {
    key: "unsetTag",
    value: function unsetTag(tagName) {
      this.emitBlock();
      this[tagName] = false;
      this.modStack.shift();
    }
    /**
     * @param {string} tagName label for block type we are currently processing
     * @param {string|RegExp} tag string to match in text
     * @returns {boolean} true if the tag was processed, false otherwise
     */
  }, {
    key: "parseStartTag",
    value: function parseStartTag(tagName, tag2) {
      if (!this.mono && !this[tagName] && this.match(tag2)) {
        this.setTag(tagName);
        return true;
      }
      return false;
    }
    /**
     * @param {string|RegExp} tag
     * @param {number} [advance=true] if set, advance current position in text
     * @returns {boolean} true if match at given position, false otherwise
     * @private
     */
  }, {
    key: "match",
    value: function match2(tag2) {
      var advance = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var _this$prepareRegExp = this.prepareRegExp(tag2), _this$prepareRegExp2 = _slicedToArray(_this$prepareRegExp, 2), regExp = _this$prepareRegExp2[0], length2 = _this$prepareRegExp2[1];
      var matched = regExp.test(this.text.substr(this.position, length2));
      if (matched && advance) {
        this.position += length2 - 1;
      }
      return matched;
    }
    /**
     * @param {string} tagName label for block type we are currently processing
     * @param {string|RegExp} tag string to match in text
     * @param {RegExp} [nextTag] regular expression to match for characters *following* the current tag
     * @returns {boolean} true if the tag was processed, false otherwise
     */
  }, {
    key: "parseEndTag",
    value: function parseEndTag(tagName, tag2, nextTag) {
      var checkTag = this.mod() === tagName;
      if (tagName === "mono") {
        checkTag = checkTag && this.mono;
      } else {
        checkTag = checkTag && !this.mono;
      }
      if (checkTag && this.match(tag2)) {
        if (nextTag !== void 0) {
          if (this.position === this.text.length - 1 || this.match(nextTag, false)) {
            this.unsetTag(tagName);
          }
        } else {
          this.unsetTag(tagName);
        }
        return true;
      }
      return false;
    }
    /**
     * @param {string|RegExp} tag  string to match in text
     * @param {value} value  string to replace tag with, if found at current position
     * @returns {boolean} true if the tag was processed, false otherwise
     */
  }, {
    key: "replace",
    value: function replace2(tag2, value2) {
      if (this.match(tag2)) {
        this.add(value2);
        this.position += length - 1;
        return true;
      }
      return false;
    }
    /**
     * Create a regular expression for the tag if it isn't already one.
     *
     * The return value is an array `[RegExp, number]`, with exactly two value, where:
     *  - RegExp is the regular expression to use
     *  - number is the lenth of the input string to match
     *
     * @param {string|RegExp} tag  string to match in text
     * @returns {Array}  regular expression to use and length of input string to match
     * @private
     */
  }, {
    key: "prepareRegExp",
    value: function prepareRegExp(tag2) {
      var length2;
      var regExp;
      if (tag2 instanceof RegExp) {
        regExp = tag2;
        length2 = 1;
      } else {
        var prepared = tagPattern[tag2];
        if (prepared !== void 0) {
          regExp = prepared;
        } else {
          regExp = new RegExp(tag2);
        }
        length2 = tag2.length;
      }
      return [regExp, length2];
    }
  }]);
  return MarkupAccumulator2;
}();
var LabelSplitter = /* @__PURE__ */ function() {
  function LabelSplitter2(ctx, parent2, selected, hover) {
    var _this = this;
    _classCallCheck(this, LabelSplitter2);
    this.ctx = ctx;
    this.parent = parent2;
    this.selected = selected;
    this.hover = hover;
    var textWidth = function textWidth2(text, mod) {
      if (text === void 0) return 0;
      var values2 = _this.parent.getFormattingValues(ctx, selected, hover, mod);
      var width = 0;
      if (text !== "") {
        var measure = _this.ctx.measureText(text);
        width = measure.width;
      }
      return {
        width,
        values: values2
      };
    };
    this.lines = new LabelAccumulator(textWidth);
  }
  _createClass(LabelSplitter2, [{
    key: "process",
    value: function process2(text) {
      if (!isValidLabel(text)) {
        return this.lines.finalize();
      }
      var font2 = this.parent.fontOptions;
      text = text.replace(/\r\n/g, "\n");
      text = text.replace(/\r/g, "\n");
      var nlLines = String(text).split("\n");
      var lineCount = nlLines.length;
      if (font2.multi) {
        for (var i2 = 0; i2 < lineCount; i2++) {
          var blocks = this.splitBlocks(nlLines[i2], font2.multi);
          if (blocks === void 0) continue;
          if (blocks.length === 0) {
            this.lines.newLine("");
            continue;
          }
          if (font2.maxWdt > 0) {
            for (var j2 = 0; j2 < blocks.length; j2++) {
              var mod = blocks[j2].mod;
              var _text = blocks[j2].text;
              this.splitStringIntoLines(_text, mod, true);
            }
          } else {
            for (var _j = 0; _j < blocks.length; _j++) {
              var _mod = blocks[_j].mod;
              var _text2 = blocks[_j].text;
              this.lines.append(_text2, _mod);
            }
          }
          this.lines.newLine();
        }
      } else {
        if (font2.maxWdt > 0) {
          for (var _i = 0; _i < lineCount; _i++) {
            this.splitStringIntoLines(nlLines[_i]);
          }
        } else {
          for (var _i2 = 0; _i2 < lineCount; _i2++) {
            this.lines.newLine(nlLines[_i2]);
          }
        }
      }
      return this.lines.finalize();
    }
    /**
     * normalize the markup system
     *
     * @param {boolean|'md'|'markdown'|'html'} markupSystem
     * @returns {string}
     */
  }, {
    key: "decodeMarkupSystem",
    value: function decodeMarkupSystem(markupSystem) {
      var system = "none";
      if (markupSystem === "markdown" || markupSystem === "md") {
        system = "markdown";
      } else if (markupSystem === true || markupSystem === "html") {
        system = "html";
      }
      return system;
    }
    /**
     *
     * @param {string} text
     * @returns {Array}
     */
  }, {
    key: "splitHtmlBlocks",
    value: function splitHtmlBlocks(text) {
      var s2 = new MarkupAccumulator(text);
      var parseEntities = function parseEntities2(ch2) {
        if (/&/.test(ch2)) {
          var parsed2 = s2.replace(s2.text, "&lt;", "<") || s2.replace(s2.text, "&amp;", "&");
          if (!parsed2) {
            s2.add("&");
          }
          return true;
        }
        return false;
      };
      while (s2.position < s2.text.length) {
        var ch = s2.text.charAt(s2.position);
        var parsed = s2.parseWS(ch) || /</.test(ch) && (s2.parseStartTag("bold", "<b>") || s2.parseStartTag("ital", "<i>") || s2.parseStartTag("mono", "<code>") || s2.parseEndTag("bold", "</b>") || s2.parseEndTag("ital", "</i>") || s2.parseEndTag("mono", "</code>")) || parseEntities(ch);
        if (!parsed) {
          s2.add(ch);
        }
        s2.position++;
      }
      s2.emitBlock();
      return s2.blocks;
    }
    /**
     *
     * @param {string} text
     * @returns {Array}
     */
  }, {
    key: "splitMarkdownBlocks",
    value: function splitMarkdownBlocks(text) {
      var _this2 = this;
      var s2 = new MarkupAccumulator(text);
      var beginable = true;
      var parseOverride = function parseOverride2(ch2) {
        if (/\\/.test(ch2)) {
          if (s2.position < _this2.text.length + 1) {
            s2.position++;
            ch2 = _this2.text.charAt(s2.position);
            if (/ \t/.test(ch2)) {
              s2.spacing = true;
            } else {
              s2.add(ch2);
              beginable = false;
            }
          }
          return true;
        }
        return false;
      };
      while (s2.position < s2.text.length) {
        var ch = s2.text.charAt(s2.position);
        var parsed = s2.parseWS(ch) || parseOverride(ch) || (beginable || s2.spacing) && (s2.parseStartTag("bold", "*") || s2.parseStartTag("ital", "_") || s2.parseStartTag("mono", "`")) || s2.parseEndTag("bold", "*", "afterBold") || s2.parseEndTag("ital", "_", "afterItal") || s2.parseEndTag("mono", "`", "afterMono");
        if (!parsed) {
          s2.add(ch);
          beginable = false;
        }
        s2.position++;
      }
      s2.emitBlock();
      return s2.blocks;
    }
    /**
     * Explodes a piece of text into single-font blocks using a given markup
     *
     * @param {string} text
     * @param {boolean|'md'|'markdown'|'html'} markupSystem
     * @returns {Array.<{text: string, mod: string}>}
     * @private
     */
  }, {
    key: "splitBlocks",
    value: function splitBlocks(text, markupSystem) {
      var system = this.decodeMarkupSystem(markupSystem);
      if (system === "none") {
        return [{
          text,
          mod: "normal"
        }];
      } else if (system === "markdown") {
        return this.splitMarkdownBlocks(text);
      } else if (system === "html") {
        return this.splitHtmlBlocks(text);
      }
    }
    /**
     * @param {string} text
     * @returns {boolean} true if text length over the current max with
     * @private
     */
  }, {
    key: "overMaxWidth",
    value: function overMaxWidth(text) {
      var width = this.ctx.measureText(text).width;
      return this.lines.curWidth() + width > this.parent.fontOptions.maxWdt;
    }
    /**
     * Determine the longest part of the sentence which still fits in the
     * current max width.
     *
     * @param {Array} words  Array of strings signifying a text lines
     * @returns {number}      index of first item in string making string go over max
     * @private
     */
  }, {
    key: "getLongestFit",
    value: function getLongestFit(words) {
      var text = "";
      var w2 = 0;
      while (w2 < words.length) {
        var pre = text === "" ? "" : " ";
        var newText = text + pre + words[w2];
        if (this.overMaxWidth(newText)) break;
        text = newText;
        w2++;
      }
      return w2;
    }
    /**
     * Determine the longest part of the string which still fits in the
     * current max width.
     *
     * @param {Array} words Array of strings signifying a text lines
     * @returns {number} index of first item in string making string go over max
     */
  }, {
    key: "getLongestFitWord",
    value: function getLongestFitWord(words) {
      var w2 = 0;
      while (w2 < words.length) {
        if (this.overMaxWidth(_sliceInstanceProperty(words).call(words, 0, w2))) break;
        w2++;
      }
      return w2;
    }
    /**
     * Split the passed text into lines, according to width constraint (if any).
     *
     * The method assumes that the input string is a single line, i.e. without lines break.
     *
     * This method retains spaces, if still present (case `font.multi: false`).
     * A space which falls on an internal line break, will be replaced by a newline.
     * There is no special handling of tabs; these go along with the flow.
     *
     * @param {string} str
     * @param {string} [mod='normal']
     * @param {boolean} [appendLast=false]
     * @private
     */
  }, {
    key: "splitStringIntoLines",
    value: function splitStringIntoLines(str) {
      var mod = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "normal";
      var appendLast = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      this.parent.getFormattingValues(this.ctx, this.selected, this.hover, mod);
      str = str.replace(/^( +)/g, "$1\r");
      str = str.replace(/([^\r][^ ]*)( +)/g, "$1\r$2\r");
      var words = str.split("\r");
      while (words.length > 0) {
        var w2 = this.getLongestFit(words);
        if (w2 === 0) {
          var word = words[0];
          var x2 = this.getLongestFitWord(word);
          this.lines.newLine(_sliceInstanceProperty(word).call(word, 0, x2), mod);
          words[0] = _sliceInstanceProperty(word).call(word, x2);
        } else {
          var newW = w2;
          if (words[w2 - 1] === " ") {
            w2--;
          } else if (words[newW] === " ") {
            newW++;
          }
          var text = _sliceInstanceProperty(words).call(words, 0, w2).join("");
          if (w2 == words.length && appendLast) {
            this.lines.append(text, mod);
          } else {
            this.lines.newLine(text, mod);
          }
          words = _sliceInstanceProperty(words).call(words, newW);
        }
      }
    }
  }]);
  return LabelSplitter2;
}();
var multiFontStyle = ["bold", "ital", "boldital", "mono"];
var Label = /* @__PURE__ */ function() {
  function Label2(body, options) {
    var edgelabel = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    _classCallCheck(this, Label2);
    this.body = body;
    this.pointToSelf = false;
    this.baseSize = void 0;
    this.fontOptions = {};
    this.setOptions(options);
    this.size = {
      top: 0,
      left: 0,
      width: 0,
      height: 0,
      yLine: 0
    };
    this.isEdgeLabel = edgelabel;
  }
  _createClass(Label2, [{
    key: "setOptions",
    value: function setOptions(options) {
      this.elementOptions = options;
      this.initFontOptions(options.font);
      if (isValidLabel(options.label)) {
        this.labelDirty = true;
      } else {
        options.label = void 0;
      }
      if (options.font !== void 0 && options.font !== null) {
        if (typeof options.font === "string") {
          this.baseSize = this.fontOptions.size;
        } else if (_typeof(options.font) === "object") {
          var size = options.font.size;
          if (size !== void 0) {
            this.baseSize = size;
          }
        }
      }
    }
    /**
     * Init the font Options structure.
     *
     * Member fontOptions serves as an accumulator for the current font options.
     * As such, it needs to be completely separated from the node options.
     *
     * @param {object} newFontOptions the new font options to process
     * @private
     */
  }, {
    key: "initFontOptions",
    value: function initFontOptions(newFontOptions) {
      var _this = this;
      forEach$1(multiFontStyle, function(style) {
        _this.fontOptions[style] = {};
      });
      if (Label2.parseFontString(this.fontOptions, newFontOptions)) {
        this.fontOptions.vadjust = 0;
        return;
      }
      forEach$1(newFontOptions, function(prop, n2) {
        if (prop !== void 0 && prop !== null && _typeof(prop) !== "object") {
          _this.fontOptions[n2] = prop;
        }
      });
    }
    /**
     * If in-variable is a string, parse it as a font specifier.
     *
     * Note that following is not done here and have to be done after the call:
     * - Not all font options are set (vadjust, mod)
     *
     * @param {object} outOptions  out-parameter, object in which to store the parse results (if any)
     * @param {object} inOptions  font options to parse
     * @returns {boolean} true if font parsed as string, false otherwise
     * @static
     */
  }, {
    key: "constrain",
    value: (
      /**
       * Set the width and height constraints based on 'nearest' value
       *
       * @param {Array} pile array of option objects to consider
       * @returns {object} the actual constraint values to use
       * @private
       */
      function constrain(pile) {
        var fontOptions = {
          constrainWidth: false,
          maxWdt: -1,
          minWdt: -1,
          constrainHeight: false,
          minHgt: -1,
          valign: "middle"
        };
        var widthConstraint = topMost(pile, "widthConstraint");
        if (typeof widthConstraint === "number") {
          fontOptions.maxWdt = Number(widthConstraint);
          fontOptions.minWdt = Number(widthConstraint);
        } else if (_typeof(widthConstraint) === "object") {
          var widthConstraintMaximum = topMost(pile, ["widthConstraint", "maximum"]);
          if (typeof widthConstraintMaximum === "number") {
            fontOptions.maxWdt = Number(widthConstraintMaximum);
          }
          var widthConstraintMinimum = topMost(pile, ["widthConstraint", "minimum"]);
          if (typeof widthConstraintMinimum === "number") {
            fontOptions.minWdt = Number(widthConstraintMinimum);
          }
        }
        var heightConstraint = topMost(pile, "heightConstraint");
        if (typeof heightConstraint === "number") {
          fontOptions.minHgt = Number(heightConstraint);
        } else if (_typeof(heightConstraint) === "object") {
          var heightConstraintMinimum = topMost(pile, ["heightConstraint", "minimum"]);
          if (typeof heightConstraintMinimum === "number") {
            fontOptions.minHgt = Number(heightConstraintMinimum);
          }
          var heightConstraintValign = topMost(pile, ["heightConstraint", "valign"]);
          if (typeof heightConstraintValign === "string") {
            if (heightConstraintValign === "top" || heightConstraintValign === "bottom") {
              fontOptions.valign = heightConstraintValign;
            }
          }
        }
        return fontOptions;
      }
    )
    /**
     * Set options and update internal state
     *
     * @param {object} options  options to set
     * @param {Array}  pile     array of option objects to consider for option 'chosen'
     */
  }, {
    key: "update",
    value: function update(options, pile) {
      this.setOptions(options, true);
      this.propagateFonts(pile);
      deepExtend(this.fontOptions, this.constrain(pile));
      this.fontOptions.chooser = choosify("label", pile);
    }
    /**
     * When margins are set in an element, adjust sizes is called to remove them
     * from the width/height constraints. This must be done prior to label sizing.
     *
     * @param {{top: number, right: number, bottom: number, left: number}} margins
     */
  }, {
    key: "adjustSizes",
    value: function adjustSizes(margins) {
      var widthBias = margins ? margins.right + margins.left : 0;
      if (this.fontOptions.constrainWidth) {
        this.fontOptions.maxWdt -= widthBias;
        this.fontOptions.minWdt -= widthBias;
      }
      var heightBias = margins ? margins.top + margins.bottom : 0;
      if (this.fontOptions.constrainHeight) {
        this.fontOptions.minHgt -= heightBias;
      }
    }
    /////////////////////////////////////////////////////////
    // Methods for handling options piles
    // Eventually, these will be moved to a separate class
    /////////////////////////////////////////////////////////
    /**
     * Add the font members of the passed list of option objects to the pile.
     *
     * @param {Pile} dstPile  pile of option objects add to
     * @param {Pile} srcPile  pile of option objects to take font options from
     * @private
     */
  }, {
    key: "addFontOptionsToPile",
    value: function addFontOptionsToPile(dstPile, srcPile) {
      for (var i2 = 0; i2 < srcPile.length; ++i2) {
        this.addFontToPile(dstPile, srcPile[i2]);
      }
    }
    /**
     * Add given font option object to the list of objects (the 'pile') to consider for determining
     * multi-font option values.
     *
     * @param {Pile} pile  pile of option objects to use
     * @param {object} options  instance to add to pile
     * @private
     */
  }, {
    key: "addFontToPile",
    value: function addFontToPile(pile, options) {
      if (options === void 0) return;
      if (options.font === void 0 || options.font === null) return;
      var item = options.font;
      pile.push(item);
    }
    /**
     * Collect all own-property values from the font pile that aren't multi-font option objectss.
     *
     * @param {Pile} pile  pile of option objects to use
     * @returns {object} object with all current own basic font properties
     * @private
     */
  }, {
    key: "getBasicOptions",
    value: function getBasicOptions(pile) {
      var ret = {};
      for (var n2 = 0; n2 < pile.length; ++n2) {
        var fontOptions = pile[n2];
        var tmpShorthand = {};
        if (Label2.parseFontString(tmpShorthand, fontOptions)) {
          fontOptions = tmpShorthand;
        }
        forEach$1(fontOptions, function(opt, name) {
          if (opt === void 0) return;
          if (Object.prototype.hasOwnProperty.call(ret, name)) return;
          if (_indexOfInstanceProperty(multiFontStyle).call(multiFontStyle, name) !== -1) {
            ret[name] = {};
          } else {
            ret[name] = opt;
          }
        });
      }
      return ret;
    }
    /**
     * Return the value for given option for the given multi-font.
     *
     * All available option objects are trawled in the set order to construct the option values.
     *
     * ---------------------------------------------------------------------
     * ## Traversal of pile for multi-fonts
     *
     * The determination of multi-font option values is a special case, because any values not
     * present in the multi-font options should by definition be taken from the main font options,
     * i.e. from the current 'parent' object of the multi-font option.
     *
     * ### Search order for multi-fonts
     *
     * 'bold' used as example:
     *
     *   - search in option group 'bold' in local properties
     *   - search in main font option group in local properties
     *
     * ---------------------------------------------------------------------
     *
     * @param {Pile} pile  pile of option objects to use
     * @param {MultiFontStyle} multiName sub path for the multi-font
     * @param {string} option  the option to search for, for the given multi-font
     * @returns {string|number} the value for the given option
     * @private
     */
  }, {
    key: "getFontOption",
    value: function getFontOption(pile, multiName, option) {
      var multiFont;
      for (var n2 = 0; n2 < pile.length; ++n2) {
        var fontOptions = pile[n2];
        if (Object.prototype.hasOwnProperty.call(fontOptions, multiName)) {
          multiFont = fontOptions[multiName];
          if (multiFont === void 0 || multiFont === null) continue;
          var tmpShorthand = {};
          if (Label2.parseFontString(tmpShorthand, multiFont)) {
            multiFont = tmpShorthand;
          }
          if (Object.prototype.hasOwnProperty.call(multiFont, option)) {
            return multiFont[option];
          }
        }
      }
      if (Object.prototype.hasOwnProperty.call(this.fontOptions, option)) {
        return this.fontOptions[option];
      }
      throw new Error("Did not find value for multi-font for property: '" + option + "'");
    }
    /**
     * Return all options values for the given multi-font.
     *
     * All available option objects are trawled in the set order to construct the option values.
     *
     * @param {Pile} pile  pile of option objects to use
     * @param {MultiFontStyle} multiName sub path for the mod-font
     * @returns {MultiFontOptions}
     * @private
     */
  }, {
    key: "getFontOptions",
    value: function getFontOptions(pile, multiName) {
      var result = {};
      var optionNames = ["color", "size", "face", "mod", "vadjust"];
      for (var i2 = 0; i2 < optionNames.length; ++i2) {
        var mod = optionNames[i2];
        result[mod] = this.getFontOption(pile, multiName, mod);
      }
      return result;
    }
    /////////////////////////////////////////////////////////
    // End methods for handling options piles
    /////////////////////////////////////////////////////////
    /**
     * Collapse the font options for the multi-font to single objects, from
     * the chain of option objects passed (the 'pile').
     *
     * @param {Pile} pile  sequence of option objects to consider.
     *                     First item in list assumed to be the newly set options.
     */
  }, {
    key: "propagateFonts",
    value: function propagateFonts(pile) {
      var _this2 = this;
      var fontPile = [];
      this.addFontOptionsToPile(fontPile, pile);
      this.fontOptions = this.getBasicOptions(fontPile);
      var _loop = function _loop2() {
        var mod = multiFontStyle[i2];
        var modOptions = _this2.fontOptions[mod];
        var tmpMultiFontOptions = _this2.getFontOptions(fontPile, mod);
        forEach$1(tmpMultiFontOptions, function(option, n2) {
          modOptions[n2] = option;
        });
        modOptions.size = Number(modOptions.size);
        modOptions.vadjust = Number(modOptions.vadjust);
      };
      for (var i2 = 0; i2 < multiFontStyle.length; ++i2) {
        _loop();
      }
    }
    /**
     * Main function. This is called from anything that wants to draw a label.
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {number} x
     * @param {number} y
     * @param {boolean} selected
     * @param {boolean} hover
     * @param {string} [baseline='middle']
     */
  }, {
    key: "draw",
    value: function draw(ctx, x2, y2, selected, hover) {
      var baseline = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : "middle";
      if (this.elementOptions.label === void 0) return;
      var viewFontSize = this.fontOptions.size * this.body.view.scale;
      if (this.elementOptions.label && viewFontSize < this.elementOptions.scaling.label.drawThreshold - 1) return;
      if (viewFontSize >= this.elementOptions.scaling.label.maxVisible) {
        viewFontSize = Number(this.elementOptions.scaling.label.maxVisible) / this.body.view.scale;
      }
      this.calculateLabelSize(ctx, selected, hover, x2, y2, baseline);
      this._drawBackground(ctx);
      this._drawText(ctx, x2, this.size.yLine, baseline, viewFontSize);
    }
    /**
     * Draws the label background
     *
     * @param {CanvasRenderingContext2D} ctx
     * @private
     */
  }, {
    key: "_drawBackground",
    value: function _drawBackground(ctx) {
      if (this.fontOptions.background !== void 0 && this.fontOptions.background !== "none") {
        ctx.fillStyle = this.fontOptions.background;
        var size = this.getSize();
        ctx.fillRect(size.left, size.top, size.width, size.height);
      }
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {number} x
     * @param {number} y
     * @param {string} [baseline='middle']
     * @param {number} viewFontSize
     * @private
     */
  }, {
    key: "_drawText",
    value: function _drawText(ctx, x2, y2) {
      var baseline = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "middle";
      var viewFontSize = arguments.length > 4 ? arguments[4] : void 0;
      var _this$_setAlignment = this._setAlignment(ctx, x2, y2, baseline);
      var _this$_setAlignment2 = _slicedToArray(_this$_setAlignment, 2);
      x2 = _this$_setAlignment2[0];
      y2 = _this$_setAlignment2[1];
      ctx.textAlign = "left";
      x2 = x2 - this.size.width / 2;
      if (this.fontOptions.valign && this.size.height > this.size.labelHeight) {
        if (this.fontOptions.valign === "top") {
          y2 -= (this.size.height - this.size.labelHeight) / 2;
        }
        if (this.fontOptions.valign === "bottom") {
          y2 += (this.size.height - this.size.labelHeight) / 2;
        }
      }
      for (var i2 = 0; i2 < this.lineCount; i2++) {
        var line2 = this.lines[i2];
        if (line2 && line2.blocks) {
          var width = 0;
          if (this.isEdgeLabel || this.fontOptions.align === "center") {
            width += (this.size.width - line2.width) / 2;
          } else if (this.fontOptions.align === "right") {
            width += this.size.width - line2.width;
          }
          for (var j2 = 0; j2 < line2.blocks.length; j2++) {
            var block = line2.blocks[j2];
            ctx.font = block.font;
            var _this$_getColor = this._getColor(block.color, viewFontSize, block.strokeColor), _this$_getColor2 = _slicedToArray(_this$_getColor, 2), fontColor = _this$_getColor2[0], strokeColor = _this$_getColor2[1];
            if (block.strokeWidth > 0) {
              ctx.lineWidth = block.strokeWidth;
              ctx.strokeStyle = strokeColor;
              ctx.lineJoin = "round";
            }
            ctx.fillStyle = fontColor;
            if (block.strokeWidth > 0) {
              ctx.strokeText(block.text, x2 + width, y2 + block.vadjust);
            }
            ctx.fillText(block.text, x2 + width, y2 + block.vadjust);
            width += block.width;
          }
          y2 += line2.height;
        }
      }
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {number} x
     * @param {number} y
     * @param {string} baseline
     * @returns {Array.<number>}
     * @private
     */
  }, {
    key: "_setAlignment",
    value: function _setAlignment(ctx, x2, y2, baseline) {
      if (this.isEdgeLabel && this.fontOptions.align !== "horizontal" && this.pointToSelf === false) {
        x2 = 0;
        y2 = 0;
        var lineMargin = 2;
        if (this.fontOptions.align === "top") {
          ctx.textBaseline = "alphabetic";
          y2 -= 2 * lineMargin;
        } else if (this.fontOptions.align === "bottom") {
          ctx.textBaseline = "hanging";
          y2 += 2 * lineMargin;
        } else {
          ctx.textBaseline = "middle";
        }
      } else {
        ctx.textBaseline = baseline;
      }
      return [x2, y2];
    }
    /**
     * fade in when relative scale is between threshold and threshold - 1.
     * If the relative scale would be smaller than threshold -1 the draw function would have returned before coming here.
     *
     * @param {string} color  The font color to use
     * @param {number} viewFontSize
     * @param {string} initialStrokeColor
     * @returns {Array.<string>} An array containing the font color and stroke color
     * @private
     */
  }, {
    key: "_getColor",
    value: function _getColor(color, viewFontSize, initialStrokeColor) {
      var fontColor = color || "#000000";
      var strokeColor = initialStrokeColor || "#ffffff";
      if (viewFontSize <= this.elementOptions.scaling.label.drawThreshold) {
        var opacity = Math.max(0, Math.min(1, 1 - (this.elementOptions.scaling.label.drawThreshold - viewFontSize)));
        fontColor = overrideOpacity(fontColor, opacity);
        strokeColor = overrideOpacity(strokeColor, opacity);
      }
      return [fontColor, strokeColor];
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {boolean} selected
     * @param {boolean} hover
     * @returns {{width: number, height: number}}
     */
  }, {
    key: "getTextSize",
    value: function getTextSize(ctx) {
      var selected = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var hover = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      this._processLabel(ctx, selected, hover);
      return {
        width: this.size.width,
        height: this.size.height,
        lineCount: this.lineCount
      };
    }
    /**
     * Get the current dimensions of the label
     *
     * @returns {rect}
     */
  }, {
    key: "getSize",
    value: function getSize() {
      var lineMargin = 2;
      var x2 = this.size.left;
      var y2 = this.size.top - 0.5 * lineMargin;
      if (this.isEdgeLabel) {
        var x22 = -this.size.width * 0.5;
        switch (this.fontOptions.align) {
          case "middle":
            x2 = x22;
            y2 = -this.size.height * 0.5;
            break;
          case "top":
            x2 = x22;
            y2 = -(this.size.height + lineMargin);
            break;
          case "bottom":
            x2 = x22;
            y2 = lineMargin;
            break;
        }
      }
      var ret = {
        left: x2,
        top: y2,
        width: this.size.width,
        height: this.size.height
      };
      return ret;
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {boolean} selected
     * @param {boolean} hover
     * @param {number} [x=0]
     * @param {number} [y=0]
     * @param {'middle'|'hanging'} [baseline='middle']
     */
  }, {
    key: "calculateLabelSize",
    value: function calculateLabelSize(ctx, selected, hover) {
      var x2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
      var y2 = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
      var baseline = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : "middle";
      this._processLabel(ctx, selected, hover);
      this.size.left = x2 - this.size.width * 0.5;
      this.size.top = y2 - this.size.height * 0.5;
      this.size.yLine = y2 + (1 - this.lineCount) * 0.5 * this.fontOptions.size;
      if (baseline === "hanging") {
        this.size.top += 0.5 * this.fontOptions.size;
        this.size.top += 4;
        this.size.yLine += 4;
      }
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {boolean} selected
     * @param {boolean} hover
     * @param {string} mod
     * @returns {{color, size, face, mod, vadjust, strokeWidth: *, strokeColor: (*|string|allOptions.edges.font.strokeColor|{string}|allOptions.nodes.font.strokeColor|Array)}}
     */
  }, {
    key: "getFormattingValues",
    value: function getFormattingValues(ctx, selected, hover, mod) {
      var getValue2 = function getValue3(fontOptions, mod2, option) {
        if (mod2 === "normal") {
          if (option === "mod") return "";
          return fontOptions[option];
        }
        if (fontOptions[mod2][option] !== void 0) {
          return fontOptions[mod2][option];
        } else {
          return fontOptions[option];
        }
      };
      var values2 = {
        color: getValue2(this.fontOptions, mod, "color"),
        size: getValue2(this.fontOptions, mod, "size"),
        face: getValue2(this.fontOptions, mod, "face"),
        mod: getValue2(this.fontOptions, mod, "mod"),
        vadjust: getValue2(this.fontOptions, mod, "vadjust"),
        strokeWidth: this.fontOptions.strokeWidth,
        strokeColor: this.fontOptions.strokeColor
      };
      if (selected || hover) {
        if (mod === "normal" && this.fontOptions.chooser === true && this.elementOptions.labelHighlightBold) {
          values2.mod = "bold";
        } else {
          if (typeof this.fontOptions.chooser === "function") {
            this.fontOptions.chooser(values2, this.elementOptions.id, selected, hover);
          }
        }
      }
      var fontString = "";
      if (values2.mod !== void 0 && values2.mod !== "") {
        fontString += values2.mod + " ";
      }
      fontString += values2.size + "px " + values2.face;
      ctx.font = fontString.replace(/"/g, "");
      values2.font = ctx.font;
      values2.height = values2.size;
      return values2;
    }
    /**
     *
     * @param {boolean} selected
     * @param {boolean} hover
     * @returns {boolean}
     */
  }, {
    key: "differentState",
    value: function differentState(selected, hover) {
      return selected !== this.selectedState || hover !== this.hoverState;
    }
    /**
     * This explodes the passed text into lines and determines the width, height and number of lines.
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {boolean} selected
     * @param {boolean} hover
     * @param {string} inText  the text to explode
     * @returns {{width, height, lines}|*}
     * @private
     */
  }, {
    key: "_processLabelText",
    value: function _processLabelText(ctx, selected, hover, inText) {
      var splitter = new LabelSplitter(ctx, this, selected, hover);
      return splitter.process(inText);
    }
    /**
     * This explodes the label string into lines and sets the width, height and number of lines.
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {boolean} selected
     * @param {boolean} hover
     * @private
     */
  }, {
    key: "_processLabel",
    value: function _processLabel(ctx, selected, hover) {
      if (this.labelDirty === false && !this.differentState(selected, hover)) return;
      var state = this._processLabelText(ctx, selected, hover, this.elementOptions.label);
      if (this.fontOptions.minWdt > 0 && state.width < this.fontOptions.minWdt) {
        state.width = this.fontOptions.minWdt;
      }
      this.size.labelHeight = state.height;
      if (this.fontOptions.minHgt > 0 && state.height < this.fontOptions.minHgt) {
        state.height = this.fontOptions.minHgt;
      }
      this.lines = state.lines;
      this.lineCount = state.lines.length;
      this.size.width = state.width;
      this.size.height = state.height;
      this.selectedState = selected;
      this.hoverState = hover;
      this.labelDirty = false;
    }
    /**
     * Check if this label is visible
     *
     * @returns {boolean} true if this label will be show, false otherwise
     */
  }, {
    key: "visible",
    value: function visible() {
      if (this.size.width === 0 || this.size.height === 0 || this.elementOptions.label === void 0) {
        return false;
      }
      var viewFontSize = this.fontOptions.size * this.body.view.scale;
      if (viewFontSize < this.elementOptions.scaling.label.drawThreshold - 1) {
        return false;
      }
      return true;
    }
  }], [{
    key: "parseFontString",
    value: function parseFontString(outOptions, inOptions) {
      if (!inOptions || typeof inOptions !== "string") return false;
      var newOptionsArray = inOptions.split(" ");
      outOptions.size = +newOptionsArray[0].replace("px", "");
      outOptions.face = newOptionsArray[1];
      outOptions.color = newOptionsArray[2];
      return true;
    }
  }]);
  return Label2;
}();
var isConstructor = isConstructor$4;
var tryToString = tryToString$6;
var $TypeError$1 = TypeError;
var aConstructor$1 = function(argument) {
  if (isConstructor(argument)) return argument;
  throw new $TypeError$1(tryToString(argument) + " is not a constructor");
};
var $$6 = _export;
var getBuiltIn = getBuiltIn$c;
var apply = functionApply;
var bind$3 = functionBind;
var aConstructor = aConstructor$1;
var anObject$2 = anObject$d;
var isObject$3 = isObject$j;
var create$3 = objectCreate;
var fails$2 = fails$w;
var nativeConstruct = getBuiltIn("Reflect", "construct");
var ObjectPrototype = Object.prototype;
var push$1 = [].push;
var NEW_TARGET_BUG = fails$2(function() {
  function F() {
  }
  return !(nativeConstruct(function() {
  }, [], F) instanceof F);
});
var ARGS_BUG = !fails$2(function() {
  nativeConstruct(function() {
  });
});
var FORCED$3 = NEW_TARGET_BUG || ARGS_BUG;
$$6({ target: "Reflect", stat: true, forced: FORCED$3, sham: FORCED$3 }, {
  construct: function construct3(Target, args) {
    aConstructor(Target);
    anObject$2(args);
    var newTarget = arguments.length < 3 ? Target : aConstructor(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return nativeConstruct(Target, args, newTarget);
    if (Target === newTarget) {
      switch (args.length) {
        case 0:
          return new Target();
        case 1:
          return new Target(args[0]);
        case 2:
          return new Target(args[0], args[1]);
        case 3:
          return new Target(args[0], args[1], args[2]);
        case 4:
          return new Target(args[0], args[1], args[2], args[3]);
      }
      var $args = [null];
      apply(push$1, $args, args);
      return new (apply(bind$3, Target, $args))();
    }
    var proto = newTarget.prototype;
    var instance = create$3(isObject$3(proto) ? proto : ObjectPrototype);
    var result = apply(Target, instance, args);
    return isObject$3(result) ? result : instance;
  }
});
var path$6 = path$w;
var construct$2 = path$6.Reflect.construct;
var parent$k = construct$2;
var construct$1 = parent$k;
var construct = construct$1;
var _Reflect$construct = /* @__PURE__ */ getDefaultExportFromCjs(construct);
var parent$j = create$6;
var create$2 = parent$j;
var parent$i = create$2;
var create$1 = parent$i;
var create = create$1;
var _Object$create = /* @__PURE__ */ getDefaultExportFromCjs(create);
var $$5 = _export;
var setPrototypeOf$5 = objectSetPrototypeOf;
$$5({ target: "Object", stat: true }, {
  setPrototypeOf: setPrototypeOf$5
});
var path$5 = path$w;
var setPrototypeOf$4 = path$5.Object.setPrototypeOf;
var parent$h = setPrototypeOf$4;
var setPrototypeOf$3 = parent$h;
var parent$g = setPrototypeOf$3;
var setPrototypeOf$2 = parent$g;
var parent$f = setPrototypeOf$2;
var setPrototypeOf$1 = parent$f;
var setPrototypeOf = setPrototypeOf$1;
var _Object$setPrototypeOf = /* @__PURE__ */ getDefaultExportFromCjs(setPrototypeOf);
var parent$e = bind$9;
var bind$2 = parent$e;
var parent$d = bind$2;
var bind$1 = parent$d;
var bind = bind$1;
var _bindInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(bind);
function _setPrototypeOf(o2, p2) {
  var _context;
  _setPrototypeOf = _Object$setPrototypeOf ? _bindInstanceProperty(_context = _Object$setPrototypeOf).call(_context) : function _setPrototypeOf2(o3, p3) {
    o3.__proto__ = p3;
    return o3;
  };
  return _setPrototypeOf(o2, p2);
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = _Object$create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  _Object$defineProperty$1(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _possibleConstructorReturn(self2, call2) {
  if (call2 && (_typeof(call2) === "object" || typeof call2 === "function")) {
    return call2;
  } else if (call2 !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self2);
}
var parent$c = getPrototypeOf$5;
var getPrototypeOf$3 = parent$c;
var parent$b = getPrototypeOf$3;
var getPrototypeOf$2 = parent$b;
var getPrototypeOf$1 = getPrototypeOf$2;
var _Object$getPrototypeOf = /* @__PURE__ */ getDefaultExportFromCjs(getPrototypeOf$1);
function _getPrototypeOf(o2) {
  var _context;
  _getPrototypeOf = _Object$setPrototypeOf ? _bindInstanceProperty(_context = _Object$getPrototypeOf).call(_context) : function _getPrototypeOf2(o3) {
    return o3.__proto__ || _Object$getPrototypeOf(o3);
  };
  return _getPrototypeOf(o2);
}
var NodeBase = /* @__PURE__ */ function() {
  function NodeBase2(options, body, labelModule) {
    _classCallCheck(this, NodeBase2);
    this.body = body;
    this.labelModule = labelModule;
    this.setOptions(options);
    this.top = void 0;
    this.left = void 0;
    this.height = void 0;
    this.width = void 0;
    this.radius = void 0;
    this.margin = void 0;
    this.refreshNeeded = true;
    this.boundingBox = {
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    };
  }
  _createClass(NodeBase2, [{
    key: "setOptions",
    value: function setOptions(options) {
      this.options = options;
    }
    /**
     *
     * @param {Label} labelModule
     * @private
     */
  }, {
    key: "_setMargins",
    value: function _setMargins(labelModule) {
      this.margin = {};
      if (this.options.margin) {
        if (_typeof(this.options.margin) == "object") {
          this.margin.top = this.options.margin.top;
          this.margin.right = this.options.margin.right;
          this.margin.bottom = this.options.margin.bottom;
          this.margin.left = this.options.margin.left;
        } else {
          this.margin.top = this.options.margin;
          this.margin.right = this.options.margin;
          this.margin.bottom = this.options.margin;
          this.margin.left = this.options.margin;
        }
      }
      labelModule.adjustSizes(this.margin);
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {number} angle
     * @returns {number}
     * @private
     */
  }, {
    key: "_distanceToBorder",
    value: function _distanceToBorder(ctx, angle) {
      var borderWidth = this.options.borderWidth;
      if (ctx) {
        this.resize(ctx);
      }
      return Math.min(Math.abs(this.width / 2 / Math.cos(angle)), Math.abs(this.height / 2 / Math.sin(angle))) + borderWidth;
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {ArrowOptions} values
     */
  }, {
    key: "enableShadow",
    value: function enableShadow(ctx, values2) {
      if (values2.shadow) {
        ctx.shadowColor = values2.shadowColor;
        ctx.shadowBlur = values2.shadowSize;
        ctx.shadowOffsetX = values2.shadowX;
        ctx.shadowOffsetY = values2.shadowY;
      }
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {ArrowOptions} values
     */
  }, {
    key: "disableShadow",
    value: function disableShadow(ctx, values2) {
      if (values2.shadow) {
        ctx.shadowColor = "rgba(0,0,0,0)";
        ctx.shadowBlur = 0;
        ctx.shadowOffsetX = 0;
        ctx.shadowOffsetY = 0;
      }
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {ArrowOptions} values
     */
  }, {
    key: "enableBorderDashes",
    value: function enableBorderDashes(ctx, values2) {
      if (values2.borderDashes !== false) {
        if (ctx.setLineDash !== void 0) {
          var dashes = values2.borderDashes;
          if (dashes === true) {
            dashes = [5, 15];
          }
          ctx.setLineDash(dashes);
        } else {
          console.warn("setLineDash is not supported in this browser. The dashed borders cannot be used.");
          this.options.shapeProperties.borderDashes = false;
          values2.borderDashes = false;
        }
      }
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {ArrowOptions} values
     */
  }, {
    key: "disableBorderDashes",
    value: function disableBorderDashes(ctx, values2) {
      if (values2.borderDashes !== false) {
        if (ctx.setLineDash !== void 0) {
          ctx.setLineDash([0]);
        } else {
          console.warn("setLineDash is not supported in this browser. The dashed borders cannot be used.");
          this.options.shapeProperties.borderDashes = false;
          values2.borderDashes = false;
        }
      }
    }
    /**
     * Determine if the shape of a node needs to be recalculated.
     *
     * @param {boolean} selected
     * @param {boolean} hover
     * @returns {boolean}
     * @protected
     */
  }, {
    key: "needsRefresh",
    value: function needsRefresh(selected, hover) {
      if (this.refreshNeeded === true) {
        this.refreshNeeded = false;
        return true;
      }
      return this.width === void 0 || this.labelModule.differentState(selected, hover);
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {ArrowOptions} values
     */
  }, {
    key: "initContextForDraw",
    value: function initContextForDraw(ctx, values2) {
      var borderWidth = values2.borderWidth / this.body.view.scale;
      ctx.lineWidth = Math.min(this.width, borderWidth);
      ctx.strokeStyle = values2.borderColor;
      ctx.fillStyle = values2.color;
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {ArrowOptions} values
     */
  }, {
    key: "performStroke",
    value: function performStroke(ctx, values2) {
      var borderWidth = values2.borderWidth / this.body.view.scale;
      ctx.save();
      if (borderWidth > 0) {
        this.enableBorderDashes(ctx, values2);
        ctx.stroke();
        this.disableBorderDashes(ctx, values2);
      }
      ctx.restore();
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {ArrowOptions} values
     */
  }, {
    key: "performFill",
    value: function performFill(ctx, values2) {
      ctx.save();
      ctx.fillStyle = values2.color;
      this.enableShadow(ctx, values2);
      _fillInstanceProperty(ctx).call(ctx);
      this.disableShadow(ctx, values2);
      ctx.restore();
      this.performStroke(ctx, values2);
    }
    /**
     *
     * @param {number} margin
     * @private
     */
  }, {
    key: "_addBoundingBoxMargin",
    value: function _addBoundingBoxMargin(margin) {
      this.boundingBox.left -= margin;
      this.boundingBox.top -= margin;
      this.boundingBox.bottom += margin;
      this.boundingBox.right += margin;
    }
    /**
     * Actual implementation of this method call.
     *
     * Doing it like this makes it easier to override
     * in the child classes.
     *
     * @param {number} x width
     * @param {number} y height
     * @param {CanvasRenderingContext2D} ctx
     * @param {boolean} selected
     * @param {boolean} hover
     * @private
     */
  }, {
    key: "_updateBoundingBox",
    value: function _updateBoundingBox(x2, y2, ctx, selected, hover) {
      if (ctx !== void 0) {
        this.resize(ctx, selected, hover);
      }
      this.left = x2 - this.width / 2;
      this.top = y2 - this.height / 2;
      this.boundingBox.left = this.left;
      this.boundingBox.top = this.top;
      this.boundingBox.bottom = this.top + this.height;
      this.boundingBox.right = this.left + this.width;
    }
    /**
     * Default implementation of this method call.
     * This acts as a stub which can be overridden.
     *
     * @param {number} x width
     * @param {number} y height
     * @param {CanvasRenderingContext2D} ctx
     * @param {boolean} selected
     * @param {boolean} hover
     */
  }, {
    key: "updateBoundingBox",
    value: function updateBoundingBox(x2, y2, ctx, selected, hover) {
      this._updateBoundingBox(x2, y2, ctx, selected, hover);
    }
    /**
     * Determine the dimensions to use for nodes with an internal label
     *
     * Currently, these are: Circle, Ellipse, Database, Box
     * The other nodes have external labels, and will not call this method
     *
     * If there is no label, decent default values are supplied.
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {boolean} [selected]
     * @param {boolean} [hover]
     * @returns {{width:number, height:number}}
     */
  }, {
    key: "getDimensionsFromLabel",
    value: function getDimensionsFromLabel(ctx, selected, hover) {
      this.textSize = this.labelModule.getTextSize(ctx, selected, hover);
      var width = this.textSize.width;
      var height = this.textSize.height;
      var DEFAULT_SIZE = 14;
      if (width === 0) {
        width = DEFAULT_SIZE;
        height = DEFAULT_SIZE;
      }
      return {
        width,
        height
      };
    }
  }]);
  return NodeBase2;
}();
function _createSuper$s(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$s();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = _Reflect$construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$s() {
  if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
  if (_Reflect$construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var Box$1 = /* @__PURE__ */ function(_NodeBase) {
  _inherits(Box2, _NodeBase);
  var _super = _createSuper$s(Box2);
  function Box2(options, body, labelModule) {
    var _this;
    _classCallCheck(this, Box2);
    _this = _super.call(this, options, body, labelModule);
    _this._setMargins(labelModule);
    return _this;
  }
  _createClass(Box2, [{
    key: "resize",
    value: function resize(ctx) {
      var selected = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.selected;
      var hover = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.hover;
      if (this.needsRefresh(selected, hover)) {
        var dimensions = this.getDimensionsFromLabel(ctx, selected, hover);
        this.width = dimensions.width + this.margin.right + this.margin.left;
        this.height = dimensions.height + this.margin.top + this.margin.bottom;
        this.radius = this.width / 2;
      }
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {number} x width
     * @param {number} y height
     * @param {boolean} selected
     * @param {boolean} hover
     * @param {ArrowOptions} values
     */
  }, {
    key: "draw",
    value: function draw(ctx, x2, y2, selected, hover, values2) {
      this.resize(ctx, selected, hover);
      this.left = x2 - this.width / 2;
      this.top = y2 - this.height / 2;
      this.initContextForDraw(ctx, values2);
      drawRoundRect(ctx, this.left, this.top, this.width, this.height, values2.borderRadius);
      this.performFill(ctx, values2);
      this.updateBoundingBox(x2, y2, ctx, selected, hover);
      this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, selected, hover);
    }
    /**
     *
     * @param {number} x width
     * @param {number} y height
     * @param {CanvasRenderingContext2D} ctx
     * @param {boolean} selected
     * @param {boolean} hover
     */
  }, {
    key: "updateBoundingBox",
    value: function updateBoundingBox(x2, y2, ctx, selected, hover) {
      this._updateBoundingBox(x2, y2, ctx, selected, hover);
      var borderRadius = this.options.shapeProperties.borderRadius;
      this._addBoundingBoxMargin(borderRadius);
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {number} angle
     * @returns {number}
     */
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx, angle) {
      if (ctx) {
        this.resize(ctx);
      }
      var borderWidth = this.options.borderWidth;
      return Math.min(Math.abs(this.width / 2 / Math.cos(angle)), Math.abs(this.height / 2 / Math.sin(angle))) + borderWidth;
    }
  }]);
  return Box2;
}(NodeBase);
function _createSuper$r(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$r();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = _Reflect$construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$r() {
  if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
  if (_Reflect$construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var CircleImageBase = /* @__PURE__ */ function(_NodeBase) {
  _inherits(CircleImageBase2, _NodeBase);
  var _super = _createSuper$r(CircleImageBase2);
  function CircleImageBase2(options, body, labelModule) {
    var _this;
    _classCallCheck(this, CircleImageBase2);
    _this = _super.call(this, options, body, labelModule);
    _this.labelOffset = 0;
    _this.selected = false;
    return _this;
  }
  _createClass(CircleImageBase2, [{
    key: "setOptions",
    value: function setOptions(options, imageObj, imageObjAlt) {
      this.options = options;
      if (!(imageObj === void 0 && imageObjAlt === void 0)) {
        this.setImages(imageObj, imageObjAlt);
      }
    }
    /**
     * Set the images for this node.
     *
     * The images can be updated after the initial setting of options;
     * therefore, this method needs to be reentrant.
     *
     * For correct working in error cases, it is necessary to properly set
     * field 'nodes.brokenImage' in the options.
     *
     * @param {Image} imageObj  required; main image to show for this node
     * @param {Image|undefined} imageObjAlt optional; image to show when node is selected
     */
  }, {
    key: "setImages",
    value: function setImages(imageObj, imageObjAlt) {
      if (imageObjAlt && this.selected) {
        this.imageObj = imageObjAlt;
        this.imageObjAlt = imageObj;
      } else {
        this.imageObj = imageObj;
        this.imageObjAlt = imageObjAlt;
      }
    }
    /**
     * Set selection and switch between the base and the selected image.
     *
     * Do the switch only if imageObjAlt exists.
     *
     * @param {boolean} selected value of new selected state for current node
     */
  }, {
    key: "switchImages",
    value: function switchImages(selected) {
      var selection_changed = selected && !this.selected || !selected && this.selected;
      this.selected = selected;
      if (this.imageObjAlt !== void 0 && selection_changed) {
        var imageTmp = this.imageObj;
        this.imageObj = this.imageObjAlt;
        this.imageObjAlt = imageTmp;
      }
    }
    /**
     * Returns Image Padding from node options
     *
     * @returns {{top: number,left: number,bottom: number,right: number}} image padding inside this shape
     * @private
     */
  }, {
    key: "_getImagePadding",
    value: function _getImagePadding() {
      var imgPadding = {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
      if (this.options.imagePadding) {
        var optImgPadding = this.options.imagePadding;
        if (_typeof(optImgPadding) == "object") {
          imgPadding.top = optImgPadding.top;
          imgPadding.right = optImgPadding.right;
          imgPadding.bottom = optImgPadding.bottom;
          imgPadding.left = optImgPadding.left;
        } else {
          imgPadding.top = optImgPadding;
          imgPadding.right = optImgPadding;
          imgPadding.bottom = optImgPadding;
          imgPadding.left = optImgPadding;
        }
      }
      return imgPadding;
    }
    /**
     * Adjust the node dimensions for a loaded image.
     *
     * Pre: this.imageObj is valid
     */
  }, {
    key: "_resizeImage",
    value: function _resizeImage() {
      var width, height;
      if (this.options.shapeProperties.useImageSize === false) {
        var ratio_width = 1;
        var ratio_height = 1;
        if (this.imageObj.width && this.imageObj.height) {
          if (this.imageObj.width > this.imageObj.height) {
            ratio_width = this.imageObj.width / this.imageObj.height;
          } else {
            ratio_height = this.imageObj.height / this.imageObj.width;
          }
        }
        width = this.options.size * 2 * ratio_width;
        height = this.options.size * 2 * ratio_height;
      } else {
        var imgPadding = this._getImagePadding();
        width = this.imageObj.width + imgPadding.left + imgPadding.right;
        height = this.imageObj.height + imgPadding.top + imgPadding.bottom;
      }
      this.width = width;
      this.height = height;
      this.radius = 0.5 * this.width;
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {number} x width
     * @param {number} y height
     * @param {ArrowOptions} values
     * @private
     */
  }, {
    key: "_drawRawCircle",
    value: function _drawRawCircle(ctx, x2, y2, values2) {
      this.initContextForDraw(ctx, values2);
      drawCircle(ctx, x2, y2, values2.size);
      this.performFill(ctx, values2);
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {ArrowOptions} values
     * @private
     */
  }, {
    key: "_drawImageAtPosition",
    value: function _drawImageAtPosition(ctx, values2) {
      if (this.imageObj.width != 0) {
        ctx.globalAlpha = values2.opacity !== void 0 ? values2.opacity : 1;
        this.enableShadow(ctx, values2);
        var factor = 1;
        if (this.options.shapeProperties.interpolation === true) {
          factor = this.imageObj.width / this.width / this.body.view.scale;
        }
        var imgPadding = this._getImagePadding();
        var imgPosLeft = this.left + imgPadding.left;
        var imgPosTop = this.top + imgPadding.top;
        var imgWidth = this.width - imgPadding.left - imgPadding.right;
        var imgHeight = this.height - imgPadding.top - imgPadding.bottom;
        this.imageObj.drawImageAtPosition(ctx, factor, imgPosLeft, imgPosTop, imgWidth, imgHeight);
        this.disableShadow(ctx, values2);
      }
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {number} x width
     * @param {number} y height
     * @param {boolean} selected
     * @param {boolean} hover
     * @private
     */
  }, {
    key: "_drawImageLabel",
    value: function _drawImageLabel(ctx, x2, y2, selected, hover) {
      var offset2 = 0;
      if (this.height !== void 0) {
        offset2 = this.height * 0.5;
        var labelDimensions = this.labelModule.getTextSize(ctx, selected, hover);
        if (labelDimensions.lineCount >= 1) {
          offset2 += labelDimensions.height / 2;
        }
      }
      var yLabel = y2 + offset2;
      if (this.options.label) {
        this.labelOffset = offset2;
      }
      this.labelModule.draw(ctx, x2, yLabel, selected, hover, "hanging");
    }
  }]);
  return CircleImageBase2;
}(NodeBase);
function _createSuper$q(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$q();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = _Reflect$construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$q() {
  if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
  if (_Reflect$construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var Circle$1 = /* @__PURE__ */ function(_CircleImageBase) {
  _inherits(Circle2, _CircleImageBase);
  var _super = _createSuper$q(Circle2);
  function Circle2(options, body, labelModule) {
    var _this;
    _classCallCheck(this, Circle2);
    _this = _super.call(this, options, body, labelModule);
    _this._setMargins(labelModule);
    return _this;
  }
  _createClass(Circle2, [{
    key: "resize",
    value: function resize(ctx) {
      var selected = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.selected;
      var hover = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.hover;
      if (this.needsRefresh(selected, hover)) {
        var dimensions = this.getDimensionsFromLabel(ctx, selected, hover);
        var diameter = Math.max(dimensions.width + this.margin.right + this.margin.left, dimensions.height + this.margin.top + this.margin.bottom);
        this.options.size = diameter / 2;
        this.width = diameter;
        this.height = diameter;
        this.radius = this.width / 2;
      }
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {number} x width
     * @param {number} y height
     * @param {boolean} selected
     * @param {boolean} hover
     * @param {ArrowOptions} values
     */
  }, {
    key: "draw",
    value: function draw(ctx, x2, y2, selected, hover, values2) {
      this.resize(ctx, selected, hover);
      this.left = x2 - this.width / 2;
      this.top = y2 - this.height / 2;
      this._drawRawCircle(ctx, x2, y2, values2);
      this.updateBoundingBox(x2, y2);
      this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, y2, selected, hover);
    }
    /**
     *
     * @param {number} x width
     * @param {number} y height
     */
  }, {
    key: "updateBoundingBox",
    value: function updateBoundingBox(x2, y2) {
      this.boundingBox.top = y2 - this.options.size;
      this.boundingBox.left = x2 - this.options.size;
      this.boundingBox.right = x2 + this.options.size;
      this.boundingBox.bottom = y2 + this.options.size;
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @returns {number}
     */
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx) {
      if (ctx) {
        this.resize(ctx);
      }
      return this.width * 0.5;
    }
  }]);
  return Circle2;
}(CircleImageBase);
function _createSuper$p(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$p();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = _Reflect$construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$p() {
  if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
  if (_Reflect$construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var CircularImage = /* @__PURE__ */ function(_CircleImageBase) {
  _inherits(CircularImage2, _CircleImageBase);
  var _super = _createSuper$p(CircularImage2);
  function CircularImage2(options, body, labelModule, imageObj, imageObjAlt) {
    var _this;
    _classCallCheck(this, CircularImage2);
    _this = _super.call(this, options, body, labelModule);
    _this.setImages(imageObj, imageObjAlt);
    return _this;
  }
  _createClass(CircularImage2, [{
    key: "resize",
    value: function resize(ctx) {
      var selected = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.selected;
      var hover = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.hover;
      var imageAbsent = this.imageObj.src === void 0 || this.imageObj.width === void 0 || this.imageObj.height === void 0;
      if (imageAbsent) {
        var diameter = this.options.size * 2;
        this.width = diameter;
        this.height = diameter;
        this.radius = 0.5 * this.width;
        return;
      }
      if (this.needsRefresh(selected, hover)) {
        this._resizeImage();
      }
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {number} x width
     * @param {number} y height
     * @param {boolean} selected
     * @param {boolean} hover
     * @param {ArrowOptions} values
     */
  }, {
    key: "draw",
    value: function draw(ctx, x2, y2, selected, hover, values2) {
      this.switchImages(selected);
      this.resize();
      var labelX = x2, labelY = y2;
      if (this.options.shapeProperties.coordinateOrigin === "top-left") {
        this.left = x2;
        this.top = y2;
        labelX += this.width / 2;
        labelY += this.height / 2;
      } else {
        this.left = x2 - this.width / 2;
        this.top = y2 - this.height / 2;
      }
      this._drawRawCircle(ctx, labelX, labelY, values2);
      ctx.save();
      ctx.clip();
      this._drawImageAtPosition(ctx, values2);
      ctx.restore();
      this._drawImageLabel(ctx, labelX, labelY, selected, hover);
      this.updateBoundingBox(x2, y2);
    }
    // TODO: compare with Circle.updateBoundingBox(), consolidate? More stuff is happening here
    /**
     *
     * @param {number} x width
     * @param {number} y height
     */
  }, {
    key: "updateBoundingBox",
    value: function updateBoundingBox(x2, y2) {
      if (this.options.shapeProperties.coordinateOrigin === "top-left") {
        this.boundingBox.top = y2;
        this.boundingBox.left = x2;
        this.boundingBox.right = x2 + this.options.size * 2;
        this.boundingBox.bottom = y2 + this.options.size * 2;
      } else {
        this.boundingBox.top = y2 - this.options.size;
        this.boundingBox.left = x2 - this.options.size;
        this.boundingBox.right = x2 + this.options.size;
        this.boundingBox.bottom = y2 + this.options.size;
      }
      this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);
      this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);
      this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelOffset);
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @returns {number}
     */
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx) {
      if (ctx) {
        this.resize(ctx);
      }
      return this.width * 0.5;
    }
  }]);
  return CircularImage2;
}(CircleImageBase);
function _createSuper$o(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$o();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = _Reflect$construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$o() {
  if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
  if (_Reflect$construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var ShapeBase = /* @__PURE__ */ function(_NodeBase) {
  _inherits(ShapeBase2, _NodeBase);
  var _super = _createSuper$o(ShapeBase2);
  function ShapeBase2(options, body, labelModule) {
    _classCallCheck(this, ShapeBase2);
    return _super.call(this, options, body, labelModule);
  }
  _createClass(ShapeBase2, [{
    key: "resize",
    value: function resize(ctx) {
      var selected = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.selected;
      var hover = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.hover;
      var values2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {
        size: this.options.size
      };
      if (this.needsRefresh(selected, hover)) {
        var _this$customSizeWidth, _this$customSizeHeigh;
        this.labelModule.getTextSize(ctx, selected, hover);
        var size = 2 * values2.size;
        this.width = (_this$customSizeWidth = this.customSizeWidth) !== null && _this$customSizeWidth !== void 0 ? _this$customSizeWidth : size;
        this.height = (_this$customSizeHeigh = this.customSizeHeight) !== null && _this$customSizeHeigh !== void 0 ? _this$customSizeHeigh : size;
        this.radius = 0.5 * this.width;
      }
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {string} shape
     * @param {number} sizeMultiplier - Unused! TODO: Remove next major release
     * @param {number} x
     * @param {number} y
     * @param {boolean} selected
     * @param {boolean} hover
     * @param {ArrowOptions} values
     * @private
     * @returns {object} Callbacks to draw later on higher layers.
     */
  }, {
    key: "_drawShape",
    value: function _drawShape(ctx, shape, sizeMultiplier, x2, y2, selected, hover, values2) {
      var _this = this;
      this.resize(ctx, selected, hover, values2);
      this.left = x2 - this.width / 2;
      this.top = y2 - this.height / 2;
      this.initContextForDraw(ctx, values2);
      getShape(shape)(ctx, x2, y2, values2.size);
      this.performFill(ctx, values2);
      if (this.options.icon !== void 0) {
        if (this.options.icon.code !== void 0) {
          ctx.font = (selected ? "bold " : "") + this.height / 2 + "px " + (this.options.icon.face || "FontAwesome");
          ctx.fillStyle = this.options.icon.color || "black";
          ctx.textAlign = "center";
          ctx.textBaseline = "middle";
          ctx.fillText(this.options.icon.code, x2, y2);
        }
      }
      return {
        drawExternalLabel: function drawExternalLabel() {
          if (_this.options.label !== void 0) {
            _this.labelModule.calculateLabelSize(ctx, selected, hover, x2, y2, "hanging");
            var yLabel = y2 + 0.5 * _this.height + 0.5 * _this.labelModule.size.height;
            _this.labelModule.draw(ctx, x2, yLabel, selected, hover, "hanging");
          }
          _this.updateBoundingBox(x2, y2);
        }
      };
    }
    /**
     *
     * @param {number} x
     * @param {number} y
     */
  }, {
    key: "updateBoundingBox",
    value: function updateBoundingBox(x2, y2) {
      this.boundingBox.top = y2 - this.options.size;
      this.boundingBox.left = x2 - this.options.size;
      this.boundingBox.right = x2 + this.options.size;
      this.boundingBox.bottom = y2 + this.options.size;
      if (this.options.label !== void 0 && this.labelModule.size.width > 0) {
        this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);
        this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);
        this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelModule.size.height);
      }
    }
  }]);
  return ShapeBase2;
}(NodeBase);
function ownKeys$3(e2, r2) {
  var t2 = _Object$keys(e2);
  if (_Object$getOwnPropertySymbols) {
    var o2 = _Object$getOwnPropertySymbols(e2);
    r2 && (o2 = _filterInstanceProperty(o2).call(o2, function(r3) {
      return _Object$getOwnPropertyDescriptor$1(e2, r3).enumerable;
    })), t2.push.apply(t2, o2);
  }
  return t2;
}
function _objectSpread$3(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var _context, _context2;
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? _forEachInstanceProperty(_context = ownKeys$3(Object(t2), true)).call(_context, function(r3) {
      _defineProperty(e2, r3, t2[r3]);
    }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e2, _Object$getOwnPropertyDescriptors(t2)) : _forEachInstanceProperty(_context2 = ownKeys$3(Object(t2))).call(_context2, function(r3) {
      _Object$defineProperty(e2, r3, _Object$getOwnPropertyDescriptor$1(t2, r3));
    });
  }
  return e2;
}
function _createSuper$n(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$n();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = _Reflect$construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$n() {
  if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
  if (_Reflect$construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var CustomShape = /* @__PURE__ */ function(_ShapeBase) {
  _inherits(CustomShape2, _ShapeBase);
  var _super = _createSuper$n(CustomShape2);
  function CustomShape2(options, body, labelModule, ctxRenderer) {
    var _this;
    _classCallCheck(this, CustomShape2);
    _this = _super.call(this, options, body, labelModule, ctxRenderer);
    _this.ctxRenderer = ctxRenderer;
    return _this;
  }
  _createClass(CustomShape2, [{
    key: "draw",
    value: function draw(ctx, x2, y2, selected, hover, values2) {
      this.resize(ctx, selected, hover, values2);
      this.left = x2 - this.width / 2;
      this.top = y2 - this.height / 2;
      ctx.save();
      var drawLater = this.ctxRenderer({
        ctx,
        id: this.options.id,
        x: x2,
        y: y2,
        state: {
          selected,
          hover
        },
        style: _objectSpread$3({}, values2),
        label: this.options.label
      });
      if (drawLater.drawNode != null) {
        drawLater.drawNode();
      }
      ctx.restore();
      if (drawLater.drawExternalLabel) {
        var drawExternalLabel = drawLater.drawExternalLabel;
        drawLater.drawExternalLabel = function() {
          ctx.save();
          drawExternalLabel();
          ctx.restore();
        };
      }
      if (drawLater.nodeDimensions) {
        this.customSizeWidth = drawLater.nodeDimensions.width;
        this.customSizeHeight = drawLater.nodeDimensions.height;
      }
      return drawLater;
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {number} angle
     * @returns {number}
     */
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx, angle) {
      return this._distanceToBorder(ctx, angle);
    }
  }]);
  return CustomShape2;
}(ShapeBase);
function _createSuper$m(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$m();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = _Reflect$construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$m() {
  if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
  if (_Reflect$construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var Database = /* @__PURE__ */ function(_NodeBase) {
  _inherits(Database2, _NodeBase);
  var _super = _createSuper$m(Database2);
  function Database2(options, body, labelModule) {
    var _this;
    _classCallCheck(this, Database2);
    _this = _super.call(this, options, body, labelModule);
    _this._setMargins(labelModule);
    return _this;
  }
  _createClass(Database2, [{
    key: "resize",
    value: function resize(ctx, selected, hover) {
      if (this.needsRefresh(selected, hover)) {
        var dimensions = this.getDimensionsFromLabel(ctx, selected, hover);
        var size = dimensions.width + this.margin.right + this.margin.left;
        this.width = size;
        this.height = size;
        this.radius = this.width / 2;
      }
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {number} x width
     * @param {number} y height
     * @param {boolean} selected
     * @param {boolean} hover
     * @param {ArrowOptions} values
     */
  }, {
    key: "draw",
    value: function draw(ctx, x2, y2, selected, hover, values2) {
      this.resize(ctx, selected, hover);
      this.left = x2 - this.width / 2;
      this.top = y2 - this.height / 2;
      this.initContextForDraw(ctx, values2);
      drawDatabase(ctx, x2 - this.width / 2, y2 - this.height / 2, this.width, this.height);
      this.performFill(ctx, values2);
      this.updateBoundingBox(x2, y2, ctx, selected, hover);
      this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, selected, hover);
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {number} angle
     * @returns {number}
     */
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx, angle) {
      return this._distanceToBorder(ctx, angle);
    }
  }]);
  return Database2;
}(NodeBase);
function _createSuper$l(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$l();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = _Reflect$construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$l() {
  if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
  if (_Reflect$construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var Diamond$1 = /* @__PURE__ */ function(_ShapeBase) {
  _inherits(Diamond2, _ShapeBase);
  var _super = _createSuper$l(Diamond2);
  function Diamond2(options, body, labelModule) {
    _classCallCheck(this, Diamond2);
    return _super.call(this, options, body, labelModule);
  }
  _createClass(Diamond2, [{
    key: "draw",
    value: function draw(ctx, x2, y2, selected, hover, values2) {
      return this._drawShape(ctx, "diamond", 4, x2, y2, selected, hover, values2);
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {number} angle
     * @returns {number}
     */
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx, angle) {
      return this._distanceToBorder(ctx, angle);
    }
  }]);
  return Diamond2;
}(ShapeBase);
function _createSuper$k(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$k();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = _Reflect$construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$k() {
  if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
  if (_Reflect$construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var Dot = /* @__PURE__ */ function(_ShapeBase) {
  _inherits(Dot2, _ShapeBase);
  var _super = _createSuper$k(Dot2);
  function Dot2(options, body, labelModule) {
    _classCallCheck(this, Dot2);
    return _super.call(this, options, body, labelModule);
  }
  _createClass(Dot2, [{
    key: "draw",
    value: function draw(ctx, x2, y2, selected, hover, values2) {
      return this._drawShape(ctx, "circle", 2, x2, y2, selected, hover, values2);
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @returns {number}
     */
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx) {
      if (ctx) {
        this.resize(ctx);
      }
      return this.options.size;
    }
  }]);
  return Dot2;
}(ShapeBase);
function _createSuper$j(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$j();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = _Reflect$construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$j() {
  if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
  if (_Reflect$construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var Ellipse = /* @__PURE__ */ function(_NodeBase) {
  _inherits(Ellipse2, _NodeBase);
  var _super = _createSuper$j(Ellipse2);
  function Ellipse2(options, body, labelModule) {
    _classCallCheck(this, Ellipse2);
    return _super.call(this, options, body, labelModule);
  }
  _createClass(Ellipse2, [{
    key: "resize",
    value: function resize(ctx) {
      var selected = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.selected;
      var hover = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.hover;
      if (this.needsRefresh(selected, hover)) {
        var dimensions = this.getDimensionsFromLabel(ctx, selected, hover);
        this.height = dimensions.height * 2;
        this.width = dimensions.width + dimensions.height;
        this.radius = 0.5 * this.width;
      }
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {number} x width
     * @param {number} y height
     * @param {boolean} selected
     * @param {boolean} hover
     * @param {ArrowOptions} values
     */
  }, {
    key: "draw",
    value: function draw(ctx, x2, y2, selected, hover, values2) {
      this.resize(ctx, selected, hover);
      this.left = x2 - this.width * 0.5;
      this.top = y2 - this.height * 0.5;
      this.initContextForDraw(ctx, values2);
      drawEllipse(ctx, this.left, this.top, this.width, this.height);
      this.performFill(ctx, values2);
      this.updateBoundingBox(x2, y2, ctx, selected, hover);
      this.labelModule.draw(ctx, x2, y2, selected, hover);
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {number} angle
     * @returns {number}
     */
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx, angle) {
      if (ctx) {
        this.resize(ctx);
      }
      var a2 = this.width * 0.5;
      var b2 = this.height * 0.5;
      var w2 = Math.sin(angle) * a2;
      var h2 = Math.cos(angle) * b2;
      return a2 * b2 / Math.sqrt(w2 * w2 + h2 * h2);
    }
  }]);
  return Ellipse2;
}(NodeBase);
function _createSuper$i(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$i();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = _Reflect$construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$i() {
  if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
  if (_Reflect$construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var Icon = /* @__PURE__ */ function(_NodeBase) {
  _inherits(Icon2, _NodeBase);
  var _super = _createSuper$i(Icon2);
  function Icon2(options, body, labelModule) {
    var _this;
    _classCallCheck(this, Icon2);
    _this = _super.call(this, options, body, labelModule);
    _this._setMargins(labelModule);
    return _this;
  }
  _createClass(Icon2, [{
    key: "resize",
    value: function resize(ctx, selected, hover) {
      if (this.needsRefresh(selected, hover)) {
        this.iconSize = {
          width: Number(this.options.icon.size),
          height: Number(this.options.icon.size)
        };
        this.width = this.iconSize.width + this.margin.right + this.margin.left;
        this.height = this.iconSize.height + this.margin.top + this.margin.bottom;
        this.radius = 0.5 * this.width;
      }
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {number} x width
     * @param {number} y height
     * @param {boolean} selected
     * @param {boolean} hover
     * @param {ArrowOptions} values
     * @returns {object} Callbacks to draw later on higher layers.
     */
  }, {
    key: "draw",
    value: function draw(ctx, x2, y2, selected, hover, values2) {
      var _this2 = this;
      this.resize(ctx, selected, hover);
      this.options.icon.size = this.options.icon.size || 50;
      this.left = x2 - this.width / 2;
      this.top = y2 - this.height / 2;
      this._icon(ctx, x2, y2, selected, hover, values2);
      return {
        drawExternalLabel: function drawExternalLabel() {
          if (_this2.options.label !== void 0) {
            var iconTextSpacing = 5;
            _this2.labelModule.draw(ctx, _this2.left + _this2.iconSize.width / 2 + _this2.margin.left, y2 + _this2.height / 2 + iconTextSpacing, selected);
          }
          _this2.updateBoundingBox(x2, y2);
        }
      };
    }
    /**
     *
     * @param {number} x
     * @param {number} y
     */
  }, {
    key: "updateBoundingBox",
    value: function updateBoundingBox(x2, y2) {
      this.boundingBox.top = y2 - this.options.icon.size * 0.5;
      this.boundingBox.left = x2 - this.options.icon.size * 0.5;
      this.boundingBox.right = x2 + this.options.icon.size * 0.5;
      this.boundingBox.bottom = y2 + this.options.icon.size * 0.5;
      if (this.options.label !== void 0 && this.labelModule.size.width > 0) {
        var iconTextSpacing = 5;
        this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);
        this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);
        this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelModule.size.height + iconTextSpacing);
      }
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {number} x width
     * @param {number} y height
     * @param {boolean} selected
     * @param {boolean} hover - Unused
     * @param {ArrowOptions} values
     */
  }, {
    key: "_icon",
    value: function _icon(ctx, x2, y2, selected, hover, values2) {
      var iconSize = Number(this.options.icon.size);
      if (this.options.icon.code !== void 0) {
        ctx.font = [
          this.options.icon.weight != null ? this.options.icon.weight : selected ? "bold" : "",
          // If the weight is forced (for example to make Font Awesome 5 work
          // properly) substitute slightly bigger size for bold font face.
          (this.options.icon.weight != null && selected ? 5 : 0) + iconSize + "px",
          this.options.icon.face
        ].join(" ");
        ctx.fillStyle = this.options.icon.color || "black";
        ctx.textAlign = "center";
        ctx.textBaseline = "middle";
        this.enableShadow(ctx, values2);
        ctx.fillText(this.options.icon.code, x2, y2);
        this.disableShadow(ctx, values2);
      } else {
        console.error("When using the icon shape, you need to define the code in the icon options object. This can be done per node or globally.");
      }
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {number} angle
     * @returns {number}
     */
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx, angle) {
      return this._distanceToBorder(ctx, angle);
    }
  }]);
  return Icon2;
}(NodeBase);
function _createSuper$h(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$h();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = _Reflect$construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$h() {
  if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
  if (_Reflect$construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var Image$2 = /* @__PURE__ */ function(_CircleImageBase) {
  _inherits(Image2, _CircleImageBase);
  var _super = _createSuper$h(Image2);
  function Image2(options, body, labelModule, imageObj, imageObjAlt) {
    var _this;
    _classCallCheck(this, Image2);
    _this = _super.call(this, options, body, labelModule);
    _this.setImages(imageObj, imageObjAlt);
    return _this;
  }
  _createClass(Image2, [{
    key: "resize",
    value: function resize(ctx) {
      var selected = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.selected;
      var hover = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.hover;
      var imageAbsent = this.imageObj.src === void 0 || this.imageObj.width === void 0 || this.imageObj.height === void 0;
      if (imageAbsent) {
        var side = this.options.size * 2;
        this.width = side;
        this.height = side;
        return;
      }
      if (this.needsRefresh(selected, hover)) {
        this._resizeImage();
      }
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {number} x width
     * @param {number} y height
     * @param {boolean} selected
     * @param {boolean} hover
     * @param {ArrowOptions} values
     */
  }, {
    key: "draw",
    value: function draw(ctx, x2, y2, selected, hover, values2) {
      ctx.save();
      this.switchImages(selected);
      this.resize();
      var labelX = x2, labelY = y2;
      if (this.options.shapeProperties.coordinateOrigin === "top-left") {
        this.left = x2;
        this.top = y2;
        labelX += this.width / 2;
        labelY += this.height / 2;
      } else {
        this.left = x2 - this.width / 2;
        this.top = y2 - this.height / 2;
      }
      if (this.options.shapeProperties.useBorderWithImage === true) {
        var neutralborderWidth = this.options.borderWidth;
        var selectionLineWidth = this.options.borderWidthSelected || 2 * this.options.borderWidth;
        var borderWidth = (selected ? selectionLineWidth : neutralborderWidth) / this.body.view.scale;
        ctx.lineWidth = Math.min(this.width, borderWidth);
        ctx.beginPath();
        var strokeStyle = selected ? this.options.color.highlight.border : hover ? this.options.color.hover.border : this.options.color.border;
        var fillStyle = selected ? this.options.color.highlight.background : hover ? this.options.color.hover.background : this.options.color.background;
        if (values2.opacity !== void 0) {
          strokeStyle = overrideOpacity(strokeStyle, values2.opacity);
          fillStyle = overrideOpacity(fillStyle, values2.opacity);
        }
        ctx.strokeStyle = strokeStyle;
        ctx.fillStyle = fillStyle;
        ctx.rect(this.left - 0.5 * ctx.lineWidth, this.top - 0.5 * ctx.lineWidth, this.width + ctx.lineWidth, this.height + ctx.lineWidth);
        _fillInstanceProperty(ctx).call(ctx);
        this.performStroke(ctx, values2);
        ctx.closePath();
      }
      this._drawImageAtPosition(ctx, values2);
      this._drawImageLabel(ctx, labelX, labelY, selected, hover);
      this.updateBoundingBox(x2, y2);
      ctx.restore();
    }
    /**
     *
     * @param {number} x
     * @param {number} y
     */
  }, {
    key: "updateBoundingBox",
    value: function updateBoundingBox(x2, y2) {
      this.resize();
      if (this.options.shapeProperties.coordinateOrigin === "top-left") {
        this.left = x2;
        this.top = y2;
      } else {
        this.left = x2 - this.width / 2;
        this.top = y2 - this.height / 2;
      }
      this.boundingBox.left = this.left;
      this.boundingBox.top = this.top;
      this.boundingBox.bottom = this.top + this.height;
      this.boundingBox.right = this.left + this.width;
      if (this.options.label !== void 0 && this.labelModule.size.width > 0) {
        this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);
        this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);
        this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelOffset);
      }
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {number} angle
     * @returns {number}
     */
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx, angle) {
      return this._distanceToBorder(ctx, angle);
    }
  }]);
  return Image2;
}(CircleImageBase);
function _createSuper$g(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$g();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = _Reflect$construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$g() {
  if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
  if (_Reflect$construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var Square = /* @__PURE__ */ function(_ShapeBase) {
  _inherits(Square2, _ShapeBase);
  var _super = _createSuper$g(Square2);
  function Square2(options, body, labelModule) {
    _classCallCheck(this, Square2);
    return _super.call(this, options, body, labelModule);
  }
  _createClass(Square2, [{
    key: "draw",
    value: function draw(ctx, x2, y2, selected, hover, values2) {
      return this._drawShape(ctx, "square", 2, x2, y2, selected, hover, values2);
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {number} angle
     * @returns {number}
     */
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx, angle) {
      return this._distanceToBorder(ctx, angle);
    }
  }]);
  return Square2;
}(ShapeBase);
function _createSuper$f(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$f();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = _Reflect$construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$f() {
  if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
  if (_Reflect$construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var Hexagon = /* @__PURE__ */ function(_ShapeBase) {
  _inherits(Hexagon2, _ShapeBase);
  var _super = _createSuper$f(Hexagon2);
  function Hexagon2(options, body, labelModule) {
    _classCallCheck(this, Hexagon2);
    return _super.call(this, options, body, labelModule);
  }
  _createClass(Hexagon2, [{
    key: "draw",
    value: function draw(ctx, x2, y2, selected, hover, values2) {
      return this._drawShape(ctx, "hexagon", 4, x2, y2, selected, hover, values2);
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {number} angle
     * @returns {number}
     */
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx, angle) {
      return this._distanceToBorder(ctx, angle);
    }
  }]);
  return Hexagon2;
}(ShapeBase);
function _createSuper$e(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$e();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = _Reflect$construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$e() {
  if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
  if (_Reflect$construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var Star = /* @__PURE__ */ function(_ShapeBase) {
  _inherits(Star2, _ShapeBase);
  var _super = _createSuper$e(Star2);
  function Star2(options, body, labelModule) {
    _classCallCheck(this, Star2);
    return _super.call(this, options, body, labelModule);
  }
  _createClass(Star2, [{
    key: "draw",
    value: function draw(ctx, x2, y2, selected, hover, values2) {
      return this._drawShape(ctx, "star", 4, x2, y2, selected, hover, values2);
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {number} angle
     * @returns {number}
     */
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx, angle) {
      return this._distanceToBorder(ctx, angle);
    }
  }]);
  return Star2;
}(ShapeBase);
function _createSuper$d(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$d();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = _Reflect$construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$d() {
  if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
  if (_Reflect$construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var Text = /* @__PURE__ */ function(_NodeBase) {
  _inherits(Text2, _NodeBase);
  var _super = _createSuper$d(Text2);
  function Text2(options, body, labelModule) {
    var _this;
    _classCallCheck(this, Text2);
    _this = _super.call(this, options, body, labelModule);
    _this._setMargins(labelModule);
    return _this;
  }
  _createClass(Text2, [{
    key: "resize",
    value: function resize(ctx, selected, hover) {
      if (this.needsRefresh(selected, hover)) {
        this.textSize = this.labelModule.getTextSize(ctx, selected, hover);
        this.width = this.textSize.width + this.margin.right + this.margin.left;
        this.height = this.textSize.height + this.margin.top + this.margin.bottom;
        this.radius = 0.5 * this.width;
      }
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {number} x width
     * @param {number} y height
     * @param {boolean} selected
     * @param {boolean} hover
     * @param {ArrowOptions} values
     */
  }, {
    key: "draw",
    value: function draw(ctx, x2, y2, selected, hover, values2) {
      this.resize(ctx, selected, hover);
      this.left = x2 - this.width / 2;
      this.top = y2 - this.height / 2;
      this.enableShadow(ctx, values2);
      this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, selected, hover);
      this.disableShadow(ctx, values2);
      this.updateBoundingBox(x2, y2, ctx, selected, hover);
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {number} angle
     * @returns {number}
     */
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx, angle) {
      return this._distanceToBorder(ctx, angle);
    }
  }]);
  return Text2;
}(NodeBase);
function _createSuper$c(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$c();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = _Reflect$construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$c() {
  if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
  if (_Reflect$construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var Triangle$1 = /* @__PURE__ */ function(_ShapeBase) {
  _inherits(Triangle2, _ShapeBase);
  var _super = _createSuper$c(Triangle2);
  function Triangle2(options, body, labelModule) {
    _classCallCheck(this, Triangle2);
    return _super.call(this, options, body, labelModule);
  }
  _createClass(Triangle2, [{
    key: "draw",
    value: function draw(ctx, x2, y2, selected, hover, values2) {
      return this._drawShape(ctx, "triangle", 3, x2, y2, selected, hover, values2);
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {number} angle
     * @returns {number}
     */
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx, angle) {
      return this._distanceToBorder(ctx, angle);
    }
  }]);
  return Triangle2;
}(ShapeBase);
function _createSuper$b(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$b();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = _Reflect$construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$b() {
  if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
  if (_Reflect$construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var TriangleDown = /* @__PURE__ */ function(_ShapeBase) {
  _inherits(TriangleDown2, _ShapeBase);
  var _super = _createSuper$b(TriangleDown2);
  function TriangleDown2(options, body, labelModule) {
    _classCallCheck(this, TriangleDown2);
    return _super.call(this, options, body, labelModule);
  }
  _createClass(TriangleDown2, [{
    key: "draw",
    value: function draw(ctx, x2, y2, selected, hover, values2) {
      return this._drawShape(ctx, "triangleDown", 3, x2, y2, selected, hover, values2);
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {number} angle
     * @returns {number}
     */
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx, angle) {
      return this._distanceToBorder(ctx, angle);
    }
  }]);
  return TriangleDown2;
}(ShapeBase);
function ownKeys$2(e2, r2) {
  var t2 = _Object$keys(e2);
  if (_Object$getOwnPropertySymbols) {
    var o2 = _Object$getOwnPropertySymbols(e2);
    r2 && (o2 = _filterInstanceProperty(o2).call(o2, function(r3) {
      return _Object$getOwnPropertyDescriptor$1(e2, r3).enumerable;
    })), t2.push.apply(t2, o2);
  }
  return t2;
}
function _objectSpread$2(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var _context5, _context6;
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? _forEachInstanceProperty(_context5 = ownKeys$2(Object(t2), true)).call(_context5, function(r3) {
      _defineProperty(e2, r3, t2[r3]);
    }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e2, _Object$getOwnPropertyDescriptors(t2)) : _forEachInstanceProperty(_context6 = ownKeys$2(Object(t2))).call(_context6, function(r3) {
      _Object$defineProperty(e2, r3, _Object$getOwnPropertyDescriptor$1(t2, r3));
    });
  }
  return e2;
}
var Node$1 = /* @__PURE__ */ function() {
  function Node2(options, body, imagelist, grouplist, globalOptions, defaultOptions) {
    _classCallCheck(this, Node2);
    this.options = bridgeObject(globalOptions);
    this.globalOptions = globalOptions;
    this.defaultOptions = defaultOptions;
    this.body = body;
    this.edges = [];
    this.id = void 0;
    this.imagelist = imagelist;
    this.grouplist = grouplist;
    this.x = void 0;
    this.y = void 0;
    this.baseSize = this.options.size;
    this.baseFontSize = this.options.font.size;
    this.predefinedPosition = false;
    this.selected = false;
    this.hover = false;
    this.labelModule = new Label(
      this.body,
      this.options,
      false
      /* Not edge label */
    );
    this.setOptions(options);
  }
  _createClass(Node2, [{
    key: "attachEdge",
    value: function attachEdge(edge2) {
      var _context;
      if (_indexOfInstanceProperty(_context = this.edges).call(_context, edge2) === -1) {
        this.edges.push(edge2);
      }
    }
    /**
     * Detach a edge from the node
     *
     * @param {Edge} edge
     */
  }, {
    key: "detachEdge",
    value: function detachEdge(edge2) {
      var _context2;
      var index2 = _indexOfInstanceProperty(_context2 = this.edges).call(_context2, edge2);
      if (index2 != -1) {
        var _context3;
        _spliceInstanceProperty(_context3 = this.edges).call(_context3, index2, 1);
      }
    }
    /**
     * Set or overwrite options for the node
     *
     * @param {object} options an object with options
     * @returns {null|boolean}
     */
  }, {
    key: "setOptions",
    value: function setOptions(options) {
      var currentShape = this.options.shape;
      if (!options) {
        return;
      }
      if (typeof options.color !== "undefined") {
        this._localColor = options.color;
      }
      if (options.id !== void 0) {
        this.id = options.id;
      }
      if (this.id === void 0) {
        throw new Error("Node must have an id");
      }
      Node2.checkMass(options, this.id);
      if (options.x !== void 0) {
        if (options.x === null) {
          this.x = void 0;
          this.predefinedPosition = false;
        } else {
          this.x = _parseInt$1(options.x);
          this.predefinedPosition = true;
        }
      }
      if (options.y !== void 0) {
        if (options.y === null) {
          this.y = void 0;
          this.predefinedPosition = false;
        } else {
          this.y = _parseInt$1(options.y);
          this.predefinedPosition = true;
        }
      }
      if (options.size !== void 0) {
        this.baseSize = options.size;
      }
      if (options.value !== void 0) {
        options.value = _parseFloat$1(options.value);
      }
      Node2.parseOptions(this.options, options, true, this.globalOptions, this.grouplist);
      var pile = [options, this.options, this.defaultOptions];
      this.chooser = choosify("node", pile);
      this._load_images();
      this.updateLabelModule(options);
      if (options.opacity !== void 0 && Node2.checkOpacity(options.opacity)) {
        this.options.opacity = options.opacity;
      }
      this.updateShape(currentShape);
      return options.hidden !== void 0 || options.physics !== void 0;
    }
    /**
     * Load the images from the options, for the nodes that need them.
     *
     * Images are always loaded, even if they are not used in the current shape.
     * The user may switch to an image shape later on.
     *
     * @private
     */
  }, {
    key: "_load_images",
    value: function _load_images() {
      if (this.options.shape === "circularImage" || this.options.shape === "image") {
        if (this.options.image === void 0) {
          throw new Error("Option image must be defined for node type '" + this.options.shape + "'");
        }
      }
      if (this.options.image === void 0) {
        return;
      }
      if (this.imagelist === void 0) {
        throw new Error("Internal Error: No images provided");
      }
      if (typeof this.options.image === "string") {
        this.imageObj = this.imagelist.load(this.options.image, this.options.brokenImage, this.id);
      } else {
        if (this.options.image.unselected === void 0) {
          throw new Error("No unselected image provided");
        }
        this.imageObj = this.imagelist.load(this.options.image.unselected, this.options.brokenImage, this.id);
        if (this.options.image.selected !== void 0) {
          this.imageObjAlt = this.imagelist.load(this.options.image.selected, this.options.brokenImage, this.id);
        } else {
          this.imageObjAlt = void 0;
        }
      }
    }
    /**
     * Check that opacity is only between 0 and 1
     *
     * @param {number} opacity
     * @returns {boolean}
     */
  }, {
    key: "getFormattingValues",
    value: (
      /**
       *
       * @returns {{color: *, borderWidth: *, borderColor: *, size: *, borderDashes: (boolean|Array|allOptions.nodes.shapeProperties.borderDashes|{boolean, array}), borderRadius: (number|allOptions.nodes.shapeProperties.borderRadius|{number}|Array), shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *}}
       */
      function getFormattingValues() {
        var values2 = {
          color: this.options.color.background,
          opacity: this.options.opacity,
          borderWidth: this.options.borderWidth,
          borderColor: this.options.color.border,
          size: this.options.size,
          borderDashes: this.options.shapeProperties.borderDashes,
          borderRadius: this.options.shapeProperties.borderRadius,
          shadow: this.options.shadow.enabled,
          shadowColor: this.options.shadow.color,
          shadowSize: this.options.shadow.size,
          shadowX: this.options.shadow.x,
          shadowY: this.options.shadow.y
        };
        if (this.selected || this.hover) {
          if (this.chooser === true) {
            if (this.selected) {
              if (this.options.borderWidthSelected != null) {
                values2.borderWidth = this.options.borderWidthSelected;
              } else {
                values2.borderWidth *= 2;
              }
              values2.color = this.options.color.highlight.background;
              values2.borderColor = this.options.color.highlight.border;
              values2.shadow = this.options.shadow.enabled;
            } else if (this.hover) {
              values2.color = this.options.color.hover.background;
              values2.borderColor = this.options.color.hover.border;
              values2.shadow = this.options.shadow.enabled;
            }
          } else if (typeof this.chooser === "function") {
            this.chooser(values2, this.options.id, this.selected, this.hover);
            if (values2.shadow === false) {
              if (values2.shadowColor !== this.options.shadow.color || values2.shadowSize !== this.options.shadow.size || values2.shadowX !== this.options.shadow.x || values2.shadowY !== this.options.shadow.y) {
                values2.shadow = true;
              }
            }
          }
        } else {
          values2.shadow = this.options.shadow.enabled;
        }
        if (this.options.opacity !== void 0) {
          var opacity = this.options.opacity;
          values2.borderColor = overrideOpacity(values2.borderColor, opacity);
          values2.color = overrideOpacity(values2.color, opacity);
          values2.shadowColor = overrideOpacity(values2.shadowColor, opacity);
        }
        return values2;
      }
    )
    /**
     *
     * @param {object} options
     */
  }, {
    key: "updateLabelModule",
    value: function updateLabelModule(options) {
      if (this.options.label === void 0 || this.options.label === null) {
        this.options.label = "";
      }
      Node2.updateGroupOptions(this.options, _objectSpread$2(_objectSpread$2({}, options), {}, {
        color: options && options.color || this._localColor || void 0
      }), this.grouplist);
      var currentGroup = this.grouplist.get(this.options.group, false);
      var pile = [
        options,
        // new options
        this.options,
        // current node options, see comment above for prototype
        currentGroup,
        // group options, if any
        this.globalOptions,
        // Currently set global node options
        this.defaultOptions
        // Default global node options
      ];
      this.labelModule.update(this.options, pile);
      if (this.labelModule.baseSize !== void 0) {
        this.baseFontSize = this.labelModule.baseSize;
      }
    }
    /**
     *
     * @param {string} currentShape
     */
  }, {
    key: "updateShape",
    value: function updateShape(currentShape) {
      if (currentShape === this.options.shape && this.shape) {
        this.shape.setOptions(this.options, this.imageObj, this.imageObjAlt);
      } else {
        switch (this.options.shape) {
          case "box":
            this.shape = new Box$1(this.options, this.body, this.labelModule);
            break;
          case "circle":
            this.shape = new Circle$1(this.options, this.body, this.labelModule);
            break;
          case "circularImage":
            this.shape = new CircularImage(this.options, this.body, this.labelModule, this.imageObj, this.imageObjAlt);
            break;
          case "custom":
            this.shape = new CustomShape(this.options, this.body, this.labelModule, this.options.ctxRenderer);
            break;
          case "database":
            this.shape = new Database(this.options, this.body, this.labelModule);
            break;
          case "diamond":
            this.shape = new Diamond$1(this.options, this.body, this.labelModule);
            break;
          case "dot":
            this.shape = new Dot(this.options, this.body, this.labelModule);
            break;
          case "ellipse":
            this.shape = new Ellipse(this.options, this.body, this.labelModule);
            break;
          case "icon":
            this.shape = new Icon(this.options, this.body, this.labelModule);
            break;
          case "image":
            this.shape = new Image$2(this.options, this.body, this.labelModule, this.imageObj, this.imageObjAlt);
            break;
          case "square":
            this.shape = new Square(this.options, this.body, this.labelModule);
            break;
          case "hexagon":
            this.shape = new Hexagon(this.options, this.body, this.labelModule);
            break;
          case "star":
            this.shape = new Star(this.options, this.body, this.labelModule);
            break;
          case "text":
            this.shape = new Text(this.options, this.body, this.labelModule);
            break;
          case "triangle":
            this.shape = new Triangle$1(this.options, this.body, this.labelModule);
            break;
          case "triangleDown":
            this.shape = new TriangleDown(this.options, this.body, this.labelModule);
            break;
          default:
            this.shape = new Ellipse(this.options, this.body, this.labelModule);
            break;
        }
      }
      this.needsRefresh();
    }
    /**
     * select this node
     */
  }, {
    key: "select",
    value: function select() {
      this.selected = true;
      this.needsRefresh();
    }
    /**
     * unselect this node
     */
  }, {
    key: "unselect",
    value: function unselect() {
      this.selected = false;
      this.needsRefresh();
    }
    /**
     * Reset the calculated size of the node, forces it to recalculate its size
     */
  }, {
    key: "needsRefresh",
    value: function needsRefresh() {
      this.shape.refreshNeeded = true;
    }
    /**
     * get the title of this node.
     *
     * @returns {string} title    The title of the node, or undefined when no title
     *                           has been set.
     */
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.options.title;
    }
    /**
     * Calculate the distance to the border of the Node
     *
     * @param {CanvasRenderingContext2D}   ctx
     * @param {number} angle        Angle in radians
     * @returns {number} distance   Distance to the border in pixels
     */
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx, angle) {
      return this.shape.distanceToBorder(ctx, angle);
    }
    /**
     * Check if this node has a fixed x and y position
     *
     * @returns {boolean}      true if fixed, false if not
     */
  }, {
    key: "isFixed",
    value: function isFixed() {
      return this.options.fixed.x && this.options.fixed.y;
    }
    /**
     * check if this node is selecte
     *
     * @returns {boolean} selected   True if node is selected, else false
     */
  }, {
    key: "isSelected",
    value: function isSelected() {
      return this.selected;
    }
    /**
     * Retrieve the value of the node. Can be undefined
     *
     * @returns {number} value
     */
  }, {
    key: "getValue",
    value: function getValue2() {
      return this.options.value;
    }
    /**
     * Get the current dimensions of the label
     *
     * @returns {rect}
     */
  }, {
    key: "getLabelSize",
    value: function getLabelSize() {
      return this.labelModule.size();
    }
    /**
     * Adjust the value range of the node. The node will adjust it's size
     * based on its value.
     *
     * @param {number} min
     * @param {number} max
     * @param {number} total
     */
  }, {
    key: "setValueRange",
    value: function setValueRange(min2, max2, total) {
      if (this.options.value !== void 0) {
        var scale = this.options.scaling.customScalingFunction(min2, max2, total, this.options.value);
        var sizeDiff = this.options.scaling.max - this.options.scaling.min;
        if (this.options.scaling.label.enabled === true) {
          var fontDiff = this.options.scaling.label.max - this.options.scaling.label.min;
          this.options.font.size = this.options.scaling.label.min + scale * fontDiff;
        }
        this.options.size = this.options.scaling.min + scale * sizeDiff;
      } else {
        this.options.size = this.baseSize;
        this.options.font.size = this.baseFontSize;
      }
      this.updateLabelModule();
    }
    /**
     * Draw this node in the given canvas
     * The 2d context of a HTML canvas can be retrieved by canvas.getContext("2d");
     *
     * @param {CanvasRenderingContext2D}   ctx
     * @returns {object} Callbacks to draw later on higher layers.
     */
  }, {
    key: "draw",
    value: function draw(ctx) {
      var values2 = this.getFormattingValues();
      return this.shape.draw(ctx, this.x, this.y, this.selected, this.hover, values2) || {};
    }
    /**
     * Update the bounding box of the shape
     *
     * @param {CanvasRenderingContext2D}   ctx
     */
  }, {
    key: "updateBoundingBox",
    value: function updateBoundingBox(ctx) {
      this.shape.updateBoundingBox(this.x, this.y, ctx);
    }
    /**
     * Recalculate the size of this node in the given canvas
     * The 2d context of a HTML canvas can be retrieved by canvas.getContext("2d");
     *
     * @param {CanvasRenderingContext2D}   ctx
     */
  }, {
    key: "resize",
    value: function resize(ctx) {
      var values2 = this.getFormattingValues();
      this.shape.resize(ctx, this.selected, this.hover, values2);
    }
    /**
     * Determine all visual elements of this node instance, in which the given
     * point falls within the bounding shape.
     *
     * @param {point} point
     * @returns {Array.<nodeClickItem|nodeLabelClickItem>} list with the items which are on the point
     */
  }, {
    key: "getItemsOnPoint",
    value: function getItemsOnPoint(point) {
      var ret = [];
      if (this.labelModule.visible()) {
        if (pointInRect(this.labelModule.getSize(), point)) {
          ret.push({
            nodeId: this.id,
            labelId: 0
          });
        }
      }
      if (pointInRect(this.shape.boundingBox, point)) {
        ret.push({
          nodeId: this.id
        });
      }
      return ret;
    }
    /**
     * Check if this object is overlapping with the provided object
     *
     * @param {object} obj   an object with parameters left, top, right, bottom
     * @returns {boolean}     True if location is located on node
     */
  }, {
    key: "isOverlappingWith",
    value: function isOverlappingWith(obj) {
      return this.shape.left < obj.right && this.shape.left + this.shape.width > obj.left && this.shape.top < obj.bottom && this.shape.top + this.shape.height > obj.top;
    }
    /**
     * Check if this object is overlapping with the provided object
     *
     * @param {object} obj   an object with parameters left, top, right, bottom
     * @returns {boolean}     True if location is located on node
     */
  }, {
    key: "isBoundingBoxOverlappingWith",
    value: function isBoundingBoxOverlappingWith(obj) {
      return this.shape.boundingBox.left < obj.right && this.shape.boundingBox.right > obj.left && this.shape.boundingBox.top < obj.bottom && this.shape.boundingBox.bottom > obj.top;
    }
    /**
     * Check valid values for mass
     *
     * The mass may not be negative or zero. If it is, reset to 1
     *
     * @param {object} options
     * @param {Node.id} id
     * @static
     */
  }], [{
    key: "checkOpacity",
    value: function checkOpacity(opacity) {
      return 0 <= opacity && opacity <= 1;
    }
    /**
     * Check that origin is 'center' or 'top-left'
     *
     * @param {string} origin
     * @returns {boolean}
     */
  }, {
    key: "checkCoordinateOrigin",
    value: function checkCoordinateOrigin(origin) {
      return origin === void 0 || origin === "center" || origin === "top-left";
    }
    /**
     * Copy group option values into the node options.
     *
     * The group options override the global node options, so the copy of group options
     *  must happen *after* the global node options have been set.
     *
     * This method must also be called also if the global node options have changed and the group options did not.
     *
     * @param {object} parentOptions
     * @param {object} newOptions  new values for the options, currently only passed in for check
     * @param {object} groupList
     */
  }, {
    key: "updateGroupOptions",
    value: function updateGroupOptions(parentOptions, newOptions, groupList) {
      var _context4;
      if (groupList === void 0) return;
      var group = parentOptions.group;
      if (newOptions !== void 0 && newOptions.group !== void 0 && group !== newOptions.group) {
        throw new Error("updateGroupOptions: group values in options don't match.");
      }
      var hasGroup = typeof group === "number" || typeof group === "string" && group != "";
      if (!hasGroup) return;
      var groupObj = groupList.get(group);
      if (groupObj.opacity !== void 0 && newOptions.opacity === void 0) {
        if (!Node2.checkOpacity(groupObj.opacity)) {
          console.error("Invalid option for node opacity. Value must be between 0 and 1, found: " + groupObj.opacity);
          groupObj.opacity = void 0;
        }
      }
      var skipProperties = _filterInstanceProperty(_context4 = _Object$getOwnPropertyNames(newOptions)).call(_context4, function(p2) {
        return newOptions[p2] != null;
      });
      skipProperties.push("font");
      selectiveNotDeepExtend(skipProperties, parentOptions, groupObj);
      parentOptions.color = parseColor(parentOptions.color);
    }
    /**
     * This process all possible shorthands in the new options and makes sure that the parentOptions are fully defined.
     * Static so it can also be used by the handler.
     *
     * @param {object} parentOptions
     * @param {object} newOptions
     * @param {boolean} [allowDeletion=false]
     * @param {object} [globalOptions={}]
     * @param {object} [groupList]
     * @static
     */
  }, {
    key: "parseOptions",
    value: function parseOptions(parentOptions, newOptions) {
      var allowDeletion = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var globalOptions = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
      var groupList = arguments.length > 4 ? arguments[4] : void 0;
      var fields = ["color", "fixed", "shadow"];
      selectiveNotDeepExtend(fields, parentOptions, newOptions, allowDeletion);
      Node2.checkMass(newOptions);
      if (parentOptions.opacity !== void 0) {
        if (!Node2.checkOpacity(parentOptions.opacity)) {
          console.error("Invalid option for node opacity. Value must be between 0 and 1, found: " + parentOptions.opacity);
          parentOptions.opacity = void 0;
        }
      }
      if (newOptions.opacity !== void 0) {
        if (!Node2.checkOpacity(newOptions.opacity)) {
          console.error("Invalid option for node opacity. Value must be between 0 and 1, found: " + newOptions.opacity);
          newOptions.opacity = void 0;
        }
      }
      if (newOptions.shapeProperties && !Node2.checkCoordinateOrigin(newOptions.shapeProperties.coordinateOrigin)) {
        console.error("Invalid option for node coordinateOrigin, found: " + newOptions.shapeProperties.coordinateOrigin);
      }
      mergeOptions(parentOptions, newOptions, "shadow", globalOptions);
      if (newOptions.color !== void 0 && newOptions.color !== null) {
        var parsedColor = parseColor(newOptions.color);
        fillIfDefined(parentOptions.color, parsedColor);
      } else if (allowDeletion === true && newOptions.color === null) {
        parentOptions.color = bridgeObject(globalOptions.color);
      }
      if (newOptions.fixed !== void 0 && newOptions.fixed !== null) {
        if (typeof newOptions.fixed === "boolean") {
          parentOptions.fixed.x = newOptions.fixed;
          parentOptions.fixed.y = newOptions.fixed;
        } else {
          if (newOptions.fixed.x !== void 0 && typeof newOptions.fixed.x === "boolean") {
            parentOptions.fixed.x = newOptions.fixed.x;
          }
          if (newOptions.fixed.y !== void 0 && typeof newOptions.fixed.y === "boolean") {
            parentOptions.fixed.y = newOptions.fixed.y;
          }
        }
      }
      if (allowDeletion === true && newOptions.font === null) {
        parentOptions.font = bridgeObject(globalOptions.font);
      }
      Node2.updateGroupOptions(parentOptions, newOptions, groupList);
      if (newOptions.scaling !== void 0) {
        mergeOptions(parentOptions.scaling, newOptions.scaling, "label", globalOptions.scaling);
      }
    }
  }, {
    key: "checkMass",
    value: function checkMass(options, id2) {
      if (options.mass !== void 0 && options.mass <= 0) {
        var strId = "";
        if (id2 !== void 0) {
          strId = " in node id: " + id2;
        }
        console.error("%cNegative or zero mass disallowed" + strId + ", setting mass to 1.", VALIDATOR_PRINT_STYLE);
        options.mass = 1;
      }
    }
  }]);
  return Node2;
}();
function _createForOfIteratorHelper$5(o2, allowArrayLike) {
  var it2 = typeof _Symbol !== "undefined" && _getIteratorMethod(o2) || o2["@@iterator"];
  if (!it2) {
    if (_Array$isArray(o2) || (it2 = _unsupportedIterableToArray$5(o2)) || allowArrayLike) {
      if (it2) o2 = it2;
      var i2 = 0;
      var F = function F2() {
      };
      return { s: F, n: function n2() {
        if (i2 >= o2.length) return { done: true };
        return { done: false, value: o2[i2++] };
      }, e: function e2(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s2() {
    it2 = it2.call(o2);
  }, n: function n2() {
    var step = it2.next();
    normalCompletion = step.done;
    return step;
  }, e: function e2(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f2() {
    try {
      if (!normalCompletion && it2.return != null) it2.return();
    } finally {
      if (didErr) throw err;
    }
  } };
}
function _unsupportedIterableToArray$5(o2, minLen) {
  var _context4;
  if (!o2) return;
  if (typeof o2 === "string") return _arrayLikeToArray$5(o2, minLen);
  var n2 = _sliceInstanceProperty(_context4 = Object.prototype.toString.call(o2)).call(_context4, 8, -1);
  if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set") return _Array$from$1(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$5(o2, minLen);
}
function _arrayLikeToArray$5(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
  return arr2;
}
var NodesHandler = /* @__PURE__ */ function() {
  function NodesHandler2(body, images2, groups, layoutEngine) {
    var _context, _this = this;
    _classCallCheck(this, NodesHandler2);
    this.body = body;
    this.images = images2;
    this.groups = groups;
    this.layoutEngine = layoutEngine;
    this.body.functions.createNode = _bindInstanceProperty$1(_context = this.create).call(_context, this);
    this.nodesListeners = {
      add: function add(event, params) {
        _this.add(params.items);
      },
      update: function update(event, params) {
        _this.update(params.items, params.data, params.oldData);
      },
      remove: function remove2(event, params) {
        _this.remove(params.items);
      }
    };
    this.defaultOptions = {
      borderWidth: 1,
      borderWidthSelected: void 0,
      brokenImage: void 0,
      color: {
        border: "#2B7CE9",
        background: "#97C2FC",
        highlight: {
          border: "#2B7CE9",
          background: "#D2E5FF"
        },
        hover: {
          border: "#2B7CE9",
          background: "#D2E5FF"
        }
      },
      opacity: void 0,
      // number between 0 and 1
      fixed: {
        x: false,
        y: false
      },
      font: {
        color: "#343434",
        size: 14,
        // px
        face: "arial",
        background: "none",
        strokeWidth: 0,
        // px
        strokeColor: "#ffffff",
        align: "center",
        vadjust: 0,
        multi: false,
        bold: {
          mod: "bold"
        },
        boldital: {
          mod: "bold italic"
        },
        ital: {
          mod: "italic"
        },
        mono: {
          mod: "",
          size: 15,
          // px
          face: "monospace",
          vadjust: 2
        }
      },
      group: void 0,
      hidden: false,
      icon: {
        face: "FontAwesome",
        //'FontAwesome',
        code: void 0,
        //'\uf007',
        size: 50,
        //50,
        color: "#2B7CE9"
        //'#aa00ff'
      },
      image: void 0,
      // --> URL
      imagePadding: {
        // only for image shape
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      },
      label: void 0,
      labelHighlightBold: true,
      level: void 0,
      margin: {
        top: 5,
        right: 5,
        bottom: 5,
        left: 5
      },
      mass: 1,
      physics: true,
      scaling: {
        min: 10,
        max: 30,
        label: {
          enabled: false,
          min: 14,
          max: 30,
          maxVisible: 30,
          drawThreshold: 5
        },
        customScalingFunction: function customScalingFunction(min2, max2, total, value2) {
          if (max2 === min2) {
            return 0.5;
          } else {
            var scale = 1 / (max2 - min2);
            return Math.max(0, (value2 - min2) * scale);
          }
        }
      },
      shadow: {
        enabled: false,
        color: "rgba(0,0,0,0.5)",
        size: 10,
        x: 5,
        y: 5
      },
      shape: "ellipse",
      shapeProperties: {
        borderDashes: false,
        // only for borders
        borderRadius: 6,
        // only for box shape
        interpolation: true,
        // only for image and circularImage shapes
        useImageSize: false,
        // only for image and circularImage shapes
        useBorderWithImage: false,
        // only for image shape
        coordinateOrigin: "center"
        // only for image and circularImage shapes
      },
      size: 25,
      title: void 0,
      value: void 0,
      x: void 0,
      y: void 0
    };
    if (this.defaultOptions.mass <= 0) {
      throw "Internal error: mass in defaultOptions of NodesHandler may not be zero or negative";
    }
    this.options = bridgeObject(this.defaultOptions);
    this.bindEventListeners();
  }
  _createClass(NodesHandler2, [{
    key: "bindEventListeners",
    value: function bindEventListeners() {
      var _context2, _context3, _this2 = this;
      this.body.emitter.on("refreshNodes", _bindInstanceProperty$1(_context2 = this.refresh).call(_context2, this));
      this.body.emitter.on("refresh", _bindInstanceProperty$1(_context3 = this.refresh).call(_context3, this));
      this.body.emitter.on("destroy", function() {
        forEach$1(_this2.nodesListeners, function(callback, event) {
          if (_this2.body.data.nodes) _this2.body.data.nodes.off(event, callback);
        });
        delete _this2.body.functions.createNode;
        delete _this2.nodesListeners.add;
        delete _this2.nodesListeners.update;
        delete _this2.nodesListeners.remove;
        delete _this2.nodesListeners;
      });
    }
    /**
     *
     * @param {object} options
     */
  }, {
    key: "setOptions",
    value: function setOptions(options) {
      if (options !== void 0) {
        Node$1.parseOptions(this.options, options);
        if (options.opacity !== void 0) {
          if (_Number$isNaN(options.opacity) || !_Number$isFinite(options.opacity) || options.opacity < 0 || options.opacity > 1) {
            console.error("Invalid option for node opacity. Value must be between 0 and 1, found: " + options.opacity);
          } else {
            this.options.opacity = options.opacity;
          }
        }
        if (options.shape !== void 0) {
          for (var nodeId in this.body.nodes) {
            if (Object.prototype.hasOwnProperty.call(this.body.nodes, nodeId)) {
              this.body.nodes[nodeId].updateShape();
            }
          }
        }
        if (typeof options.font !== "undefined" || typeof options.widthConstraint !== "undefined" || typeof options.heightConstraint !== "undefined") {
          for (var _i = 0, _Object$keys$12 = _Object$keys(this.body.nodes); _i < _Object$keys$12.length; _i++) {
            var _nodeId = _Object$keys$12[_i];
            this.body.nodes[_nodeId].updateLabelModule();
            this.body.nodes[_nodeId].needsRefresh();
          }
        }
        if (options.size !== void 0) {
          for (var _nodeId2 in this.body.nodes) {
            if (Object.prototype.hasOwnProperty.call(this.body.nodes, _nodeId2)) {
              this.body.nodes[_nodeId2].needsRefresh();
            }
          }
        }
        if (options.hidden !== void 0 || options.physics !== void 0) {
          this.body.emitter.emit("_dataChanged");
        }
      }
    }
    /**
     * Set a data set with nodes for the network
     *
     * @param {Array | DataSet | DataView} nodes         The data containing the nodes.
     * @param {boolean} [doNotEmit=false] - Suppress data changed event.
     * @private
     */
  }, {
    key: "setData",
    value: function setData(nodes2) {
      var doNotEmit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var oldNodesData = this.body.data.nodes;
      if (isDataViewLike("id", nodes2)) {
        this.body.data.nodes = nodes2;
      } else if (_Array$isArray(nodes2)) {
        this.body.data.nodes = new DataSet();
        this.body.data.nodes.add(nodes2);
      } else if (!nodes2) {
        this.body.data.nodes = new DataSet();
      } else {
        throw new TypeError("Array or DataSet expected");
      }
      if (oldNodesData) {
        forEach$1(this.nodesListeners, function(callback, event) {
          oldNodesData.off(event, callback);
        });
      }
      this.body.nodes = {};
      if (this.body.data.nodes) {
        var me = this;
        forEach$1(this.nodesListeners, function(callback, event) {
          me.body.data.nodes.on(event, callback);
        });
        var ids = this.body.data.nodes.getIds();
        this.add(ids, true);
      }
      if (doNotEmit === false) {
        this.body.emitter.emit("_dataChanged");
      }
    }
    /**
     * Add nodes
     *
     * @param {number[] | string[]} ids
     * @param {boolean} [doNotEmit=false]
     * @private
     */
  }, {
    key: "add",
    value: function add(ids) {
      var doNotEmit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var id2;
      var newNodes = [];
      for (var i2 = 0; i2 < ids.length; i2++) {
        id2 = ids[i2];
        var properties = this.body.data.nodes.get(id2);
        var node2 = this.create(properties);
        newNodes.push(node2);
        this.body.nodes[id2] = node2;
      }
      this.layoutEngine.positionInitially(newNodes);
      if (doNotEmit === false) {
        this.body.emitter.emit("_dataChanged");
      }
    }
    /**
     * Update existing nodes, or create them when not yet existing
     *
     * @param {number[] | string[]} ids id's of changed nodes
     * @param {Array} changedData array with changed data
     * @param {Array|undefined} oldData optional; array with previous data
     * @private
     */
  }, {
    key: "update",
    value: function update(ids, changedData, oldData) {
      var nodes2 = this.body.nodes;
      var dataChanged = false;
      for (var i2 = 0; i2 < ids.length; i2++) {
        var id2 = ids[i2];
        var node2 = nodes2[id2];
        var data2 = changedData[i2];
        if (node2 !== void 0) {
          if (node2.setOptions(data2)) {
            dataChanged = true;
          }
        } else {
          dataChanged = true;
          node2 = this.create(data2);
          nodes2[id2] = node2;
        }
      }
      if (!dataChanged && oldData !== void 0) {
        dataChanged = _someInstanceProperty(changedData).call(changedData, function(newValue, index2) {
          var oldValue = oldData[index2];
          return oldValue && oldValue.level !== newValue.level;
        });
      }
      if (dataChanged === true) {
        this.body.emitter.emit("_dataChanged");
      } else {
        this.body.emitter.emit("_dataUpdated");
      }
    }
    /**
     * Remove existing nodes. If nodes do not exist, the method will just ignore it.
     *
     * @param {number[] | string[]} ids
     * @private
     */
  }, {
    key: "remove",
    value: function remove2(ids) {
      var nodes2 = this.body.nodes;
      for (var i2 = 0; i2 < ids.length; i2++) {
        var id2 = ids[i2];
        delete nodes2[id2];
      }
      this.body.emitter.emit("_dataChanged");
    }
    /**
     * create a node
     *
     * @param {object} properties
     * @param {class} [constructorClass=Node.default]
     * @returns {*}
     */
  }, {
    key: "create",
    value: function create8(properties) {
      var constructorClass = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Node$1;
      return new constructorClass(properties, this.body, this.images, this.groups, this.options, this.defaultOptions);
    }
    /**
     *
     * @param {boolean} [clearPositions=false]
     */
  }, {
    key: "refresh",
    value: function refresh() {
      var _this3 = this;
      var clearPositions = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      forEach$1(this.body.nodes, function(node2, nodeId) {
        var data2 = _this3.body.data.nodes.get(nodeId);
        if (data2 !== void 0) {
          if (clearPositions === true) {
            node2.setOptions({
              x: null,
              y: null
            });
          }
          node2.setOptions({
            fixed: false
          });
          node2.setOptions(data2);
        }
      });
    }
    /**
     * Returns the positions of the nodes.
     *
     * @param {Array.<Node.id> | string} [ids]  --> optional, can be array of nodeIds, can be string
     * @returns {{}}
     */
  }, {
    key: "getPositions",
    value: function getPositions(ids) {
      var dataArray = {};
      if (ids !== void 0) {
        if (_Array$isArray(ids) === true) {
          for (var i2 = 0; i2 < ids.length; i2++) {
            if (this.body.nodes[ids[i2]] !== void 0) {
              var node2 = this.body.nodes[ids[i2]];
              dataArray[ids[i2]] = {
                x: Math.round(node2.x),
                y: Math.round(node2.y)
              };
            }
          }
        } else {
          if (this.body.nodes[ids] !== void 0) {
            var _node = this.body.nodes[ids];
            dataArray[ids] = {
              x: Math.round(_node.x),
              y: Math.round(_node.y)
            };
          }
        }
      } else {
        for (var _i2 = 0; _i2 < this.body.nodeIndices.length; _i2++) {
          var _node2 = this.body.nodes[this.body.nodeIndices[_i2]];
          dataArray[this.body.nodeIndices[_i2]] = {
            x: Math.round(_node2.x),
            y: Math.round(_node2.y)
          };
        }
      }
      return dataArray;
    }
    /**
     * Retrieves the x y position of a specific id.
     *
     * @param {string} id The id to retrieve.
     * @throws {TypeError} If no id is included.
     * @throws {ReferenceError} If an invalid id is provided.
     * @returns {{ x: number, y: number }} Returns X, Y canvas position of the node with given id.
     */
  }, {
    key: "getPosition",
    value: function getPosition(id2) {
      if (id2 == void 0) {
        throw new TypeError("No id was specified for getPosition method.");
      } else if (this.body.nodes[id2] == void 0) {
        throw new ReferenceError("NodeId provided for getPosition does not exist. Provided: ".concat(id2));
      } else {
        return {
          x: Math.round(this.body.nodes[id2].x),
          y: Math.round(this.body.nodes[id2].y)
        };
      }
    }
    /**
     * Load the XY positions of the nodes into the dataset.
     */
  }, {
    key: "storePositions",
    value: function storePositions() {
      var dataArray = [];
      var dataset = this.body.data.nodes.getDataSet();
      var _iterator = _createForOfIteratorHelper$5(dataset.get()), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var dsNode = _step.value;
          var id2 = dsNode.id;
          var bodyNode = this.body.nodes[id2];
          var x2 = Math.round(bodyNode.x);
          var y2 = Math.round(bodyNode.y);
          if (dsNode.x !== x2 || dsNode.y !== y2) {
            dataArray.push({
              id: id2,
              x: x2,
              y: y2
            });
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      dataset.update(dataArray);
    }
    /**
     * get the bounding box of a node.
     *
     * @param {Node.id} nodeId
     * @returns {j|*}
     */
  }, {
    key: "getBoundingBox",
    value: function getBoundingBox(nodeId) {
      if (this.body.nodes[nodeId] !== void 0) {
        return this.body.nodes[nodeId].shape.boundingBox;
      }
    }
    /**
     * Get the Ids of nodes connected to this node.
     *
     * @param {Node.id} nodeId
     * @param {'to'|'from'|undefined} direction values 'from' and 'to' select respectively parent and child nodes only.
     *                                          Any other value returns both parent and child nodes.
     * @returns {Array}
     */
  }, {
    key: "getConnectedNodes",
    value: function getConnectedNodes(nodeId, direction) {
      var nodeList = [];
      if (this.body.nodes[nodeId] !== void 0) {
        var node2 = this.body.nodes[nodeId];
        var nodeObj = {};
        for (var i2 = 0; i2 < node2.edges.length; i2++) {
          var edge2 = node2.edges[i2];
          if (direction !== "to" && edge2.toId == node2.id) {
            if (nodeObj[edge2.fromId] === void 0) {
              nodeList.push(edge2.fromId);
              nodeObj[edge2.fromId] = true;
            }
          } else if (direction !== "from" && edge2.fromId == node2.id) {
            if (nodeObj[edge2.toId] === void 0) {
              nodeList.push(edge2.toId);
              nodeObj[edge2.toId] = true;
            }
          }
        }
      }
      return nodeList;
    }
    /**
     * Get the ids of the edges connected to this node.
     *
     * @param {Node.id} nodeId
     * @returns {*}
     */
  }, {
    key: "getConnectedEdges",
    value: function getConnectedEdges(nodeId) {
      var edgeList = [];
      if (this.body.nodes[nodeId] !== void 0) {
        var node2 = this.body.nodes[nodeId];
        for (var i2 = 0; i2 < node2.edges.length; i2++) {
          edgeList.push(node2.edges[i2].id);
        }
      } else {
        console.error("NodeId provided for getConnectedEdges does not exist. Provided: ", nodeId);
      }
      return edgeList;
    }
    /**
     * Move a node.
     *
     * @param {Node.id} nodeId
     * @param {number} x
     * @param {number} y
     */
  }, {
    key: "moveNode",
    value: function moveNode(nodeId, x2, y2) {
      var _this4 = this;
      if (this.body.nodes[nodeId] !== void 0) {
        this.body.nodes[nodeId].x = Number(x2);
        this.body.nodes[nodeId].y = Number(y2);
        _setTimeout(function() {
          _this4.body.emitter.emit("startSimulation");
        }, 0);
      } else {
        console.error("Node id supplied to moveNode does not exist. Provided: ", nodeId);
      }
    }
  }]);
  return NodesHandler2;
}();
var hasOwn$1 = hasOwnProperty_1;
var isDataDescriptor$1 = function(descriptor) {
  return descriptor !== void 0 && (hasOwn$1(descriptor, "value") || hasOwn$1(descriptor, "writable"));
};
var $$4 = _export;
var call = functionCall;
var isObject$2 = isObject$j;
var anObject$1 = anObject$d;
var isDataDescriptor = isDataDescriptor$1;
var getOwnPropertyDescriptorModule = objectGetOwnPropertyDescriptor;
var getPrototypeOf = objectGetPrototypeOf;
function get$5(target, propertyKey) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var descriptor, prototype;
  if (anObject$1(target) === receiver) return target[propertyKey];
  descriptor = getOwnPropertyDescriptorModule.f(target, propertyKey);
  if (descriptor) return isDataDescriptor(descriptor) ? descriptor.value : descriptor.get === void 0 ? void 0 : call(descriptor.get, receiver);
  if (isObject$2(prototype = getPrototypeOf(target))) return get$5(prototype, propertyKey, receiver);
}
$$4({ target: "Reflect", stat: true }, {
  get: get$5
});
var path$4 = path$w;
var get$4 = path$4.Reflect.get;
var parent$a = get$4;
var get$3 = parent$a;
var parent$9 = get$3;
var get$2 = parent$9;
var parent$8 = get$2;
var get$1 = parent$8;
var get = get$1;
var _Reflect$get = /* @__PURE__ */ getDefaultExportFromCjs(get);
var parent$7 = getOwnPropertyDescriptor$4;
var getOwnPropertyDescriptor$2 = parent$7;
var parent$6 = getOwnPropertyDescriptor$2;
var getOwnPropertyDescriptor$1 = parent$6;
var getOwnPropertyDescriptor = getOwnPropertyDescriptor$1;
var _Object$getOwnPropertyDescriptor = /* @__PURE__ */ getDefaultExportFromCjs(getOwnPropertyDescriptor);
function _superPropBase(object2, property) {
  while (!Object.prototype.hasOwnProperty.call(object2, property)) {
    object2 = _getPrototypeOf(object2);
    if (object2 === null) break;
  }
  return object2;
}
function _get() {
  if (typeof Reflect !== "undefined" && _Reflect$get) {
    var _context;
    _get = _bindInstanceProperty(_context = _Reflect$get).call(_context);
  } else {
    _get = function _get2(target, property, receiver) {
      var base = _superPropBase(target, property);
      if (!base) return;
      var desc = _Object$getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get.apply(this, arguments);
}
var $$3 = _export;
var $hypot = Math.hypot;
var abs = Math.abs;
var sqrt = Math.sqrt;
var FORCED$2 = !!$hypot && $hypot(Infinity, NaN) !== Infinity;
$$3({ target: "Math", stat: true, arity: 2, forced: FORCED$2 }, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  hypot: function hypot2(value1, value2) {
    var sum = 0;
    var i2 = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i2 < aLen) {
      arg = abs(arguments[i2++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * sqrt(sum);
  }
});
var path$3 = path$w;
var hypot$2 = path$3.Math.hypot;
var parent$5 = hypot$2;
var hypot$1 = parent$5;
var hypot = hypot$1;
var _Math$hypot = /* @__PURE__ */ getDefaultExportFromCjs(hypot);
function _createSuper$a(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$a();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = _Reflect$construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$a() {
  if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
  if (_Reflect$construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var EndPoint = /* @__PURE__ */ function() {
  function EndPoint2() {
    _classCallCheck(this, EndPoint2);
  }
  _createClass(EndPoint2, null, [{
    key: "transform",
    value: (
      /**
       * Apply transformation on points for display.
       *
       * The following is done:
       * - rotate by the specified angle
       * - multiply the (normalized) coordinates by the passed length
       * - offset by the target coordinates
       *
       * @param points - The point(s) to be transformed.
       * @param arrowData - The data determining the result of the transformation.
       */
      function transform2(points, arrowData) {
        if (!_Array$isArray(points)) {
          points = [points];
        }
        var x2 = arrowData.point.x;
        var y2 = arrowData.point.y;
        var angle = arrowData.angle;
        var length2 = arrowData.length;
        for (var i2 = 0; i2 < points.length; ++i2) {
          var p2 = points[i2];
          var xt = p2.x * Math.cos(angle) - p2.y * Math.sin(angle);
          var yt = p2.x * Math.sin(angle) + p2.y * Math.cos(angle);
          p2.x = x2 + length2 * xt;
          p2.y = y2 + length2 * yt;
        }
      }
    )
    /**
     * Draw a closed path using the given real coordinates.
     *
     * @param ctx - The path will be rendered into this context.
     * @param points - The points of the path.
     */
  }, {
    key: "drawPath",
    value: function drawPath(ctx, points) {
      ctx.beginPath();
      ctx.moveTo(points[0].x, points[0].y);
      for (var i2 = 1; i2 < points.length; ++i2) {
        ctx.lineTo(points[i2].x, points[i2].y);
      }
      ctx.closePath();
    }
  }]);
  return EndPoint2;
}();
var Image$1 = /* @__PURE__ */ function(_EndPoint) {
  _inherits(Image2, _EndPoint);
  var _super = _createSuper$a(Image2);
  function Image2() {
    _classCallCheck(this, Image2);
    return _super.apply(this, arguments);
  }
  _createClass(Image2, null, [{
    key: "draw",
    value: (
      /**
       * Draw this shape at the end of a line.
       *
       * @param ctx - The shape will be rendered into this context.
       * @param arrowData - The data determining the shape.
       * @returns False as there is no way to fill an image.
       */
      function draw(ctx, arrowData) {
        if (arrowData.image) {
          ctx.save();
          ctx.translate(arrowData.point.x, arrowData.point.y);
          ctx.rotate(Math.PI / 2 + arrowData.angle);
          var width = arrowData.imageWidth != null ? arrowData.imageWidth : arrowData.image.width;
          var height = arrowData.imageHeight != null ? arrowData.imageHeight : arrowData.image.height;
          arrowData.image.drawImageAtPosition(
            ctx,
            1,
            // scale
            -width / 2,
            // x
            0,
            // y
            width,
            height
          );
          ctx.restore();
        }
        return false;
      }
    )
  }]);
  return Image2;
}(EndPoint);
var Arrow = /* @__PURE__ */ function(_EndPoint2) {
  _inherits(Arrow2, _EndPoint2);
  var _super2 = _createSuper$a(Arrow2);
  function Arrow2() {
    _classCallCheck(this, Arrow2);
    return _super2.apply(this, arguments);
  }
  _createClass(Arrow2, null, [{
    key: "draw",
    value: (
      /**
       * Draw this shape at the end of a line.
       *
       * @param ctx - The shape will be rendered into this context.
       * @param arrowData - The data determining the shape.
       * @returns True because ctx.fill() can be used to fill the arrow.
       */
      function draw(ctx, arrowData) {
        var points = [{
          x: 0,
          y: 0
        }, {
          x: -1,
          y: 0.3
        }, {
          x: -0.9,
          y: 0
        }, {
          x: -1,
          y: -0.3
        }];
        EndPoint.transform(points, arrowData);
        EndPoint.drawPath(ctx, points);
        return true;
      }
    )
  }]);
  return Arrow2;
}(EndPoint);
var Crow = /* @__PURE__ */ function() {
  function Crow2() {
    _classCallCheck(this, Crow2);
  }
  _createClass(Crow2, null, [{
    key: "draw",
    value: (
      /**
       * Draw this shape at the end of a line.
       *
       * @param ctx - The shape will be rendered into this context.
       * @param arrowData - The data determining the shape.
       * @returns True because ctx.fill() can be used to fill the arrow.
       */
      function draw(ctx, arrowData) {
        var points = [{
          x: -1,
          y: 0
        }, {
          x: 0,
          y: 0.3
        }, {
          x: -0.4,
          y: 0
        }, {
          x: 0,
          y: -0.3
        }];
        EndPoint.transform(points, arrowData);
        EndPoint.drawPath(ctx, points);
        return true;
      }
    )
  }]);
  return Crow2;
}();
var Curve = /* @__PURE__ */ function() {
  function Curve2() {
    _classCallCheck(this, Curve2);
  }
  _createClass(Curve2, null, [{
    key: "draw",
    value: (
      /**
       * Draw this shape at the end of a line.
       *
       * @param ctx - The shape will be rendered into this context.
       * @param arrowData - The data determining the shape.
       * @returns True because ctx.fill() can be used to fill the arrow.
       */
      function draw(ctx, arrowData) {
        var point = {
          x: -0.4,
          y: 0
        };
        EndPoint.transform(point, arrowData);
        ctx.strokeStyle = ctx.fillStyle;
        ctx.fillStyle = "rgba(0, 0, 0, 0)";
        var pi = Math.PI;
        var startAngle = arrowData.angle - pi / 2;
        var endAngle = arrowData.angle + pi / 2;
        ctx.beginPath();
        ctx.arc(point.x, point.y, arrowData.length * 0.4, startAngle, endAngle, false);
        ctx.stroke();
        return true;
      }
    )
  }]);
  return Curve2;
}();
var InvertedCurve = /* @__PURE__ */ function() {
  function InvertedCurve2() {
    _classCallCheck(this, InvertedCurve2);
  }
  _createClass(InvertedCurve2, null, [{
    key: "draw",
    value: (
      /**
       * Draw this shape at the end of a line.
       *
       * @param ctx - The shape will be rendered into this context.
       * @param arrowData - The data determining the shape.
       * @returns True because ctx.fill() can be used to fill the arrow.
       */
      function draw(ctx, arrowData) {
        var point = {
          x: -0.3,
          y: 0
        };
        EndPoint.transform(point, arrowData);
        ctx.strokeStyle = ctx.fillStyle;
        ctx.fillStyle = "rgba(0, 0, 0, 0)";
        var pi = Math.PI;
        var startAngle = arrowData.angle + pi / 2;
        var endAngle = arrowData.angle + 3 * pi / 2;
        ctx.beginPath();
        ctx.arc(point.x, point.y, arrowData.length * 0.4, startAngle, endAngle, false);
        ctx.stroke();
        return true;
      }
    )
  }]);
  return InvertedCurve2;
}();
var Triangle = /* @__PURE__ */ function() {
  function Triangle2() {
    _classCallCheck(this, Triangle2);
  }
  _createClass(Triangle2, null, [{
    key: "draw",
    value: (
      /**
       * Draw this shape at the end of a line.
       *
       * @param ctx - The shape will be rendered into this context.
       * @param arrowData - The data determining the shape.
       * @returns True because ctx.fill() can be used to fill the arrow.
       */
      function draw(ctx, arrowData) {
        var points = [{
          x: 0.02,
          y: 0
        }, {
          x: -1,
          y: 0.3
        }, {
          x: -1,
          y: -0.3
        }];
        EndPoint.transform(points, arrowData);
        EndPoint.drawPath(ctx, points);
        return true;
      }
    )
  }]);
  return Triangle2;
}();
var InvertedTriangle = /* @__PURE__ */ function() {
  function InvertedTriangle2() {
    _classCallCheck(this, InvertedTriangle2);
  }
  _createClass(InvertedTriangle2, null, [{
    key: "draw",
    value: (
      /**
       * Draw this shape at the end of a line.
       *
       * @param ctx - The shape will be rendered into this context.
       * @param arrowData - The data determining the shape.
       * @returns True because ctx.fill() can be used to fill the arrow.
       */
      function draw(ctx, arrowData) {
        var points = [{
          x: 0,
          y: 0.3
        }, {
          x: 0,
          y: -0.3
        }, {
          x: -1,
          y: 0
        }];
        EndPoint.transform(points, arrowData);
        EndPoint.drawPath(ctx, points);
        return true;
      }
    )
  }]);
  return InvertedTriangle2;
}();
var Circle = /* @__PURE__ */ function() {
  function Circle2() {
    _classCallCheck(this, Circle2);
  }
  _createClass(Circle2, null, [{
    key: "draw",
    value: (
      /**
       * Draw this shape at the end of a line.
       *
       * @param ctx - The shape will be rendered into this context.
       * @param arrowData - The data determining the shape.
       * @returns True because ctx.fill() can be used to fill the arrow.
       */
      function draw(ctx, arrowData) {
        var point = {
          x: -0.4,
          y: 0
        };
        EndPoint.transform(point, arrowData);
        drawCircle(ctx, point.x, point.y, arrowData.length * 0.4);
        return true;
      }
    )
  }]);
  return Circle2;
}();
var Bar = /* @__PURE__ */ function() {
  function Bar2() {
    _classCallCheck(this, Bar2);
  }
  _createClass(Bar2, null, [{
    key: "draw",
    value: (
      /**
       * Draw this shape at the end of a line.
       *
       * @param ctx - The shape will be rendered into this context.
       * @param arrowData - The data determining the shape.
       * @returns True because ctx.fill() can be used to fill the arrow.
       */
      function draw(ctx, arrowData) {
        var points = [{
          x: 0,
          y: 0.5
        }, {
          x: 0,
          y: -0.5
        }, {
          x: -0.15,
          y: -0.5
        }, {
          x: -0.15,
          y: 0.5
        }];
        EndPoint.transform(points, arrowData);
        EndPoint.drawPath(ctx, points);
        return true;
      }
    )
  }]);
  return Bar2;
}();
var Box = /* @__PURE__ */ function() {
  function Box2() {
    _classCallCheck(this, Box2);
  }
  _createClass(Box2, null, [{
    key: "draw",
    value: (
      /**
       * Draw this shape at the end of a line.
       *
       * @param ctx - The shape will be rendered into this context.
       * @param arrowData - The data determining the shape.
       * @returns True because ctx.fill() can be used to fill the arrow.
       */
      function draw(ctx, arrowData) {
        var points = [{
          x: 0,
          y: 0.3
        }, {
          x: 0,
          y: -0.3
        }, {
          x: -0.6,
          y: -0.3
        }, {
          x: -0.6,
          y: 0.3
        }];
        EndPoint.transform(points, arrowData);
        EndPoint.drawPath(ctx, points);
        return true;
      }
    )
  }]);
  return Box2;
}();
var Diamond = /* @__PURE__ */ function() {
  function Diamond2() {
    _classCallCheck(this, Diamond2);
  }
  _createClass(Diamond2, null, [{
    key: "draw",
    value: (
      /**
       * Draw this shape at the end of a line.
       *
       * @param ctx - The shape will be rendered into this context.
       * @param arrowData - The data determining the shape.
       * @returns True because ctx.fill() can be used to fill the arrow.
       */
      function draw(ctx, arrowData) {
        var points = [{
          x: 0,
          y: 0
        }, {
          x: -0.5,
          y: -0.3
        }, {
          x: -1,
          y: 0
        }, {
          x: -0.5,
          y: 0.3
        }];
        EndPoint.transform(points, arrowData);
        EndPoint.drawPath(ctx, points);
        return true;
      }
    )
  }]);
  return Diamond2;
}();
var Vee = /* @__PURE__ */ function() {
  function Vee2() {
    _classCallCheck(this, Vee2);
  }
  _createClass(Vee2, null, [{
    key: "draw",
    value: (
      /**
       * Draw this shape at the end of a line.
       *
       * @param ctx - The shape will be rendered into this context.
       * @param arrowData - The data determining the shape.
       * @returns True because ctx.fill() can be used to fill the arrow.
       */
      function draw(ctx, arrowData) {
        var points = [{
          x: -1,
          y: 0.3
        }, {
          x: -0.5,
          y: 0
        }, {
          x: -1,
          y: -0.3
        }, {
          x: 0,
          y: 0
        }];
        EndPoint.transform(points, arrowData);
        EndPoint.drawPath(ctx, points);
        return true;
      }
    )
  }]);
  return Vee2;
}();
var EndPoints = /* @__PURE__ */ function() {
  function EndPoints2() {
    _classCallCheck(this, EndPoints2);
  }
  _createClass(EndPoints2, null, [{
    key: "draw",
    value: (
      /**
       * Draw an endpoint.
       *
       * @param ctx - The shape will be rendered into this context.
       * @param arrowData - The data determining the shape.
       * @returns True if ctx.fill() can be used to fill the arrow, false otherwise.
       */
      function draw(ctx, arrowData) {
        var type;
        if (arrowData.type) {
          type = arrowData.type.toLowerCase();
        }
        switch (type) {
          case "image":
            return Image$1.draw(ctx, arrowData);
          case "circle":
            return Circle.draw(ctx, arrowData);
          case "box":
            return Box.draw(ctx, arrowData);
          case "crow":
            return Crow.draw(ctx, arrowData);
          case "curve":
            return Curve.draw(ctx, arrowData);
          case "diamond":
            return Diamond.draw(ctx, arrowData);
          case "inv_curve":
            return InvertedCurve.draw(ctx, arrowData);
          case "triangle":
            return Triangle.draw(ctx, arrowData);
          case "inv_triangle":
            return InvertedTriangle.draw(ctx, arrowData);
          case "bar":
            return Bar.draw(ctx, arrowData);
          case "vee":
            return Vee.draw(ctx, arrowData);
          case "arrow":
          default:
            return Arrow.draw(ctx, arrowData);
        }
      }
    )
  }]);
  return EndPoints2;
}();
function ownKeys$1(e2, r2) {
  var t2 = _Object$keys(e2);
  if (_Object$getOwnPropertySymbols) {
    var o2 = _Object$getOwnPropertySymbols(e2);
    r2 && (o2 = _filterInstanceProperty(o2).call(o2, function(r3) {
      return _Object$getOwnPropertyDescriptor$1(e2, r3).enumerable;
    })), t2.push.apply(t2, o2);
  }
  return t2;
}
function _objectSpread$1(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var _context2, _context3;
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? _forEachInstanceProperty(_context2 = ownKeys$1(Object(t2), true)).call(_context2, function(r3) {
      _defineProperty(e2, r3, t2[r3]);
    }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e2, _Object$getOwnPropertyDescriptors(t2)) : _forEachInstanceProperty(_context3 = ownKeys$1(Object(t2))).call(_context3, function(r3) {
      _Object$defineProperty(e2, r3, _Object$getOwnPropertyDescriptor$1(t2, r3));
    });
  }
  return e2;
}
var EdgeBase = /* @__PURE__ */ function() {
  function EdgeBase2(options, _body, _labelModule) {
    _classCallCheck(this, EdgeBase2);
    this._body = _body;
    this._labelModule = _labelModule;
    this.color = {};
    this.colorDirty = true;
    this.hoverWidth = 1.5;
    this.selectionWidth = 2;
    this.setOptions(options);
    this.fromPoint = this.from;
    this.toPoint = this.to;
  }
  _createClass(EdgeBase2, [{
    key: "connect",
    value: function connect() {
      this.from = this._body.nodes[this.options.from];
      this.to = this._body.nodes[this.options.to];
    }
    /** @inheritDoc */
  }, {
    key: "cleanup",
    value: function cleanup() {
      return false;
    }
    /**
     * Set new edge options.
     *
     * @param options - The new edge options object.
     */
  }, {
    key: "setOptions",
    value: function setOptions(options) {
      this.options = options;
      this.from = this._body.nodes[this.options.from];
      this.to = this._body.nodes[this.options.to];
      this.id = this.options.id;
    }
    /** @inheritDoc */
  }, {
    key: "drawLine",
    value: function drawLine(ctx, values2, _selected, _hover) {
      var viaNode = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : this.getViaNode();
      ctx.strokeStyle = this.getColor(ctx, values2);
      ctx.lineWidth = values2.width;
      if (values2.dashes !== false) {
        this._drawDashedLine(ctx, values2, viaNode);
      } else {
        this._drawLine(ctx, values2, viaNode);
      }
    }
    /**
     * Draw a line with given style between two nodes through supplied node(s).
     *
     * @param ctx - The context that will be used for rendering.
     * @param values - Formatting values like color, opacity or shadow.
     * @param viaNode - Additional control point(s) for the edge.
     * @param fromPoint - TODO: Seems ignored, remove?
     * @param toPoint - TODO: Seems ignored, remove?
     */
  }, {
    key: "_drawLine",
    value: function _drawLine(ctx, values2, viaNode, fromPoint, toPoint) {
      if (this.from != this.to) {
        this._line(ctx, values2, viaNode, fromPoint, toPoint);
      } else {
        var _this$_getCircleData = this._getCircleData(ctx), _this$_getCircleData2 = _slicedToArray(_this$_getCircleData, 3), x2 = _this$_getCircleData2[0], y2 = _this$_getCircleData2[1], radius = _this$_getCircleData2[2];
        this._circle(ctx, values2, x2, y2, radius);
      }
    }
    /**
     * Draw a dashed line with given style between two nodes through supplied node(s).
     *
     * @param ctx - The context that will be used for rendering.
     * @param values - Formatting values like color, opacity or shadow.
     * @param viaNode - Additional control point(s) for the edge.
     * @param _fromPoint - Ignored (TODO: remove in the future).
     * @param _toPoint - Ignored (TODO: remove in the future).
     */
  }, {
    key: "_drawDashedLine",
    value: function _drawDashedLine(ctx, values2, viaNode, _fromPoint, _toPoint) {
      ctx.lineCap = "round";
      var pattern = _Array$isArray(values2.dashes) ? values2.dashes : [5, 5];
      if (ctx.setLineDash !== void 0) {
        ctx.save();
        ctx.setLineDash(pattern);
        ctx.lineDashOffset = 0;
        if (this.from != this.to) {
          this._line(ctx, values2, viaNode);
        } else {
          var _this$_getCircleData3 = this._getCircleData(ctx), _this$_getCircleData4 = _slicedToArray(_this$_getCircleData3, 3), x2 = _this$_getCircleData4[0], y2 = _this$_getCircleData4[1], radius = _this$_getCircleData4[2];
          this._circle(ctx, values2, x2, y2, radius);
        }
        ctx.setLineDash([0]);
        ctx.lineDashOffset = 0;
        ctx.restore();
      } else {
        if (this.from != this.to) {
          drawDashedLine(ctx, this.from.x, this.from.y, this.to.x, this.to.y, pattern);
        } else {
          var _this$_getCircleData5 = this._getCircleData(ctx), _this$_getCircleData6 = _slicedToArray(_this$_getCircleData5, 3), _x = _this$_getCircleData6[0], _y = _this$_getCircleData6[1], _radius = _this$_getCircleData6[2];
          this._circle(ctx, values2, _x, _y, _radius);
        }
        this.enableShadow(ctx, values2);
        ctx.stroke();
        this.disableShadow(ctx, values2);
      }
    }
    /**
     * Find the intersection between the border of the node and the edge.
     *
     * @param node - The node (either from or to node of the edge).
     * @param ctx - The context that will be used for rendering.
     * @param options - Additional options.
     * @returns Cartesian coordinates of the intersection between the border of the node and the edge.
     */
  }, {
    key: "findBorderPosition",
    value: function findBorderPosition(node2, ctx, options) {
      if (this.from != this.to) {
        return this._findBorderPosition(node2, ctx, options);
      } else {
        return this._findBorderPositionCircle(node2, ctx, options);
      }
    }
    /** @inheritDoc */
  }, {
    key: "findBorderPositions",
    value: function findBorderPositions(ctx) {
      if (this.from != this.to) {
        return {
          from: this._findBorderPosition(this.from, ctx),
          to: this._findBorderPosition(this.to, ctx)
        };
      } else {
        var _context;
        var _this$_getCircleData$ = _sliceInstanceProperty(_context = this._getCircleData(ctx)).call(_context, 0, 2), _this$_getCircleData$2 = _slicedToArray(_this$_getCircleData$, 2), x2 = _this$_getCircleData$2[0], y2 = _this$_getCircleData$2[1];
        return {
          from: this._findBorderPositionCircle(this.from, ctx, {
            x: x2,
            y: y2,
            low: 0.25,
            high: 0.6,
            direction: -1
          }),
          to: this._findBorderPositionCircle(this.from, ctx, {
            x: x2,
            y: y2,
            low: 0.6,
            high: 0.8,
            direction: 1
          })
        };
      }
    }
    /**
     * Compute the center point and radius of an edge connected to the same node at both ends.
     *
     * @param ctx - The context that will be used for rendering.
     * @returns `[x, y, radius]`
     */
  }, {
    key: "_getCircleData",
    value: function _getCircleData(ctx) {
      var radius = this.options.selfReference.size;
      if (ctx !== void 0) {
        if (this.from.shape.width === void 0) {
          this.from.shape.resize(ctx);
        }
      }
      var coordinates = getSelfRefCoordinates(ctx, this.options.selfReference.angle, radius, this.from);
      return [coordinates.x, coordinates.y, radius];
    }
    /**
     * Get a point on a circle.
     *
     * @param x - Center of the circle on the x axis.
     * @param y - Center of the circle on the y axis.
     * @param radius - Radius of the circle.
     * @param position - Value between 0 (line start) and 1 (line end).
     * @returns Cartesian coordinates of requested point on the circle.
     */
  }, {
    key: "_pointOnCircle",
    value: function _pointOnCircle(x2, y2, radius, position) {
      var angle = position * 2 * Math.PI;
      return {
        x: x2 + radius * Math.cos(angle),
        y: y2 - radius * Math.sin(angle)
      };
    }
    /**
     * Find the intersection between the border of the node and the edge.
     *
     * @remarks
     * This function uses binary search to look for the point where the circle crosses the border of the node.
     * @param nearNode - The node (either from or to node of the edge).
     * @param ctx - The context that will be used for rendering.
     * @param options - Additional options.
     * @returns Cartesian coordinates of the intersection between the border of the node and the edge.
     */
  }, {
    key: "_findBorderPositionCircle",
    value: function _findBorderPositionCircle(nearNode, ctx, options) {
      var x2 = options.x;
      var y2 = options.y;
      var low2 = options.low;
      var high = options.high;
      var direction = options.direction;
      var maxIterations = 10;
      var radius = this.options.selfReference.size;
      var threshold = 0.05;
      var pos;
      var middle = (low2 + high) * 0.5;
      var endPointOffset = 0;
      if (this.options.arrowStrikethrough === true) {
        if (direction === -1) {
          endPointOffset = this.options.endPointOffset.from;
        } else if (direction === 1) {
          endPointOffset = this.options.endPointOffset.to;
        }
      }
      var iteration = 0;
      do {
        middle = (low2 + high) * 0.5;
        pos = this._pointOnCircle(x2, y2, radius, middle);
        var angle = Math.atan2(nearNode.y - pos.y, nearNode.x - pos.x);
        var distanceToBorder = nearNode.distanceToBorder(ctx, angle) + endPointOffset;
        var distanceToPoint = Math.sqrt(Math.pow(pos.x - nearNode.x, 2) + Math.pow(pos.y - nearNode.y, 2));
        var difference = distanceToBorder - distanceToPoint;
        if (Math.abs(difference) < threshold) {
          break;
        } else if (difference > 0) {
          if (direction > 0) {
            low2 = middle;
          } else {
            high = middle;
          }
        } else {
          if (direction > 0) {
            high = middle;
          } else {
            low2 = middle;
          }
        }
        ++iteration;
      } while (low2 <= high && iteration < maxIterations);
      return _objectSpread$1(_objectSpread$1({}, pos), {}, {
        t: middle
      });
    }
    /**
     * Get the line width of the edge. Depends on width and whether one of the connected nodes is selected.
     *
     * @param selected - Determines wheter the line is selected.
     * @param hover - Determines wheter the line is being hovered, only applies if selected is false.
     * @returns The width of the line.
     */
  }, {
    key: "getLineWidth",
    value: function getLineWidth(selected, hover) {
      if (selected === true) {
        return Math.max(this.selectionWidth, 0.3 / this._body.view.scale);
      } else if (hover === true) {
        return Math.max(this.hoverWidth, 0.3 / this._body.view.scale);
      } else {
        return Math.max(this.options.width, 0.3 / this._body.view.scale);
      }
    }
    /**
     * Compute the color or gradient for given edge.
     *
     * @param ctx - The context that will be used for rendering.
     * @param values - Formatting values like color, opacity or shadow.
     * @param _selected - Ignored (TODO: remove in the future).
     * @param _hover - Ignored (TODO: remove in the future).
     * @returns Color string if single color is inherited or gradient if two.
     */
  }, {
    key: "getColor",
    value: function getColor(ctx, values2) {
      if (values2.inheritsColor !== false) {
        if (values2.inheritsColor === "both" && this.from.id !== this.to.id) {
          var grd = ctx.createLinearGradient(this.from.x, this.from.y, this.to.x, this.to.y);
          var fromColor = this.from.options.color.highlight.border;
          var toColor = this.to.options.color.highlight.border;
          if (this.from.selected === false && this.to.selected === false) {
            fromColor = overrideOpacity(this.from.options.color.border, values2.opacity);
            toColor = overrideOpacity(this.to.options.color.border, values2.opacity);
          } else if (this.from.selected === true && this.to.selected === false) {
            toColor = this.to.options.color.border;
          } else if (this.from.selected === false && this.to.selected === true) {
            fromColor = this.from.options.color.border;
          }
          grd.addColorStop(0, fromColor);
          grd.addColorStop(1, toColor);
          return grd;
        }
        if (values2.inheritsColor === "to") {
          return overrideOpacity(this.to.options.color.border, values2.opacity);
        } else {
          return overrideOpacity(this.from.options.color.border, values2.opacity);
        }
      } else {
        return overrideOpacity(values2.color, values2.opacity);
      }
    }
    /**
     * Draw a line from a node to itself, a circle.
     *
     * @param ctx - The context that will be used for rendering.
     * @param values - Formatting values like color, opacity or shadow.
     * @param x - Center of the circle on the x axis.
     * @param y - Center of the circle on the y axis.
     * @param radius - Radius of the circle.
     */
  }, {
    key: "_circle",
    value: function _circle(ctx, values2, x2, y2, radius) {
      this.enableShadow(ctx, values2);
      var angleFrom = 0;
      var angleTo = Math.PI * 2;
      if (!this.options.selfReference.renderBehindTheNode) {
        var low2 = this.options.selfReference.angle;
        var high = this.options.selfReference.angle + Math.PI;
        var pointTFrom = this._findBorderPositionCircle(this.from, ctx, {
          x: x2,
          y: y2,
          low: low2,
          high,
          direction: -1
        });
        var pointTTo = this._findBorderPositionCircle(this.from, ctx, {
          x: x2,
          y: y2,
          low: low2,
          high,
          direction: 1
        });
        angleFrom = Math.atan2(pointTFrom.y - y2, pointTFrom.x - x2);
        angleTo = Math.atan2(pointTTo.y - y2, pointTTo.x - x2);
      }
      ctx.beginPath();
      ctx.arc(x2, y2, radius, angleFrom, angleTo, false);
      ctx.stroke();
      this.disableShadow(ctx, values2);
    }
    /**
     * @inheritDoc
     * @remarks
     * http://stackoverflow.com/questions/849211/shortest-distancae-between-a-point-and-a-line-segment
     */
  }, {
    key: "getDistanceToEdge",
    value: function getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
      if (this.from != this.to) {
        return this._getDistanceToEdge(x1, y1, x2, y2, x3, y3);
      } else {
        var _this$_getCircleData7 = this._getCircleData(void 0), _this$_getCircleData8 = _slicedToArray(_this$_getCircleData7, 3), x4 = _this$_getCircleData8[0], y4 = _this$_getCircleData8[1], radius = _this$_getCircleData8[2];
        var dx = x4 - x3;
        var dy = y4 - y3;
        return Math.abs(Math.sqrt(dx * dx + dy * dy) - radius);
      }
    }
    /**
     * Calculate the distance between a point (x3, y3) and a line segment from (x1, y1) to (x2, y2).
     *
     * @param x1 - First end of the line segment on the x axis.
     * @param y1 - First end of the line segment on the y axis.
     * @param x2 - Second end of the line segment on the x axis.
     * @param y2 - Second end of the line segment on the y axis.
     * @param x3 - Position of the point on the x axis.
     * @param y3 - Position of the point on the y axis.
     * @returns The distance between the line segment and the point.
     */
  }, {
    key: "_getDistanceToLine",
    value: function _getDistanceToLine(x1, y1, x2, y2, x3, y3) {
      var px = x2 - x1;
      var py = y2 - y1;
      var something3 = px * px + py * py;
      var u2 = ((x3 - x1) * px + (y3 - y1) * py) / something3;
      if (u2 > 1) {
        u2 = 1;
      } else if (u2 < 0) {
        u2 = 0;
      }
      var x4 = x1 + u2 * px;
      var y4 = y1 + u2 * py;
      var dx = x4 - x3;
      var dy = y4 - y3;
      return Math.sqrt(dx * dx + dy * dy);
    }
    /** @inheritDoc */
  }, {
    key: "getArrowData",
    value: function getArrowData(ctx, position, viaNode, _selected, _hover, values2) {
      var angle;
      var arrowPoint;
      var node1;
      var node2;
      var reversed;
      var scaleFactor;
      var type;
      var lineWidth = values2.width;
      if (position === "from") {
        node1 = this.from;
        node2 = this.to;
        reversed = values2.fromArrowScale < 0;
        scaleFactor = Math.abs(values2.fromArrowScale);
        type = values2.fromArrowType;
      } else if (position === "to") {
        node1 = this.to;
        node2 = this.from;
        reversed = values2.toArrowScale < 0;
        scaleFactor = Math.abs(values2.toArrowScale);
        type = values2.toArrowType;
      } else {
        node1 = this.to;
        node2 = this.from;
        reversed = values2.middleArrowScale < 0;
        scaleFactor = Math.abs(values2.middleArrowScale);
        type = values2.middleArrowType;
      }
      var length2 = 15 * scaleFactor + 3 * lineWidth;
      if (node1 != node2) {
        var approximateEdgeLength = _Math$hypot(node1.x - node2.x, node1.y - node2.y);
        var relativeLength = length2 / approximateEdgeLength;
        if (position !== "middle") {
          if (this.options.smooth.enabled === true) {
            var pointT = this._findBorderPosition(node1, ctx, {
              via: viaNode
            });
            var guidePos = this.getPoint(pointT.t + relativeLength * (position === "from" ? 1 : -1), viaNode);
            angle = Math.atan2(pointT.y - guidePos.y, pointT.x - guidePos.x);
            arrowPoint = pointT;
          } else {
            angle = Math.atan2(node1.y - node2.y, node1.x - node2.x);
            arrowPoint = this._findBorderPosition(node1, ctx);
          }
        } else {
          var halfLength = (reversed ? -relativeLength : relativeLength) / 2;
          var guidePos1 = this.getPoint(0.5 + halfLength, viaNode);
          var guidePos2 = this.getPoint(0.5 - halfLength, viaNode);
          angle = Math.atan2(guidePos1.y - guidePos2.y, guidePos1.x - guidePos2.x);
          arrowPoint = this.getPoint(0.5, viaNode);
        }
      } else {
        var _this$_getCircleData9 = this._getCircleData(ctx), _this$_getCircleData10 = _slicedToArray(_this$_getCircleData9, 3), x2 = _this$_getCircleData10[0], y2 = _this$_getCircleData10[1], radius = _this$_getCircleData10[2];
        if (position === "from") {
          var low2 = this.options.selfReference.angle;
          var high = this.options.selfReference.angle + Math.PI;
          var _pointT = this._findBorderPositionCircle(this.from, ctx, {
            x: x2,
            y: y2,
            low: low2,
            high,
            direction: -1
          });
          angle = _pointT.t * -2 * Math.PI + 1.5 * Math.PI + 0.1 * Math.PI;
          arrowPoint = _pointT;
        } else if (position === "to") {
          var _low = this.options.selfReference.angle;
          var _high = this.options.selfReference.angle + Math.PI;
          var _pointT2 = this._findBorderPositionCircle(this.from, ctx, {
            x: x2,
            y: y2,
            low: _low,
            high: _high,
            direction: 1
          });
          angle = _pointT2.t * -2 * Math.PI + 1.5 * Math.PI - 1.1 * Math.PI;
          arrowPoint = _pointT2;
        } else {
          var pos = this.options.selfReference.angle / (2 * Math.PI);
          arrowPoint = this._pointOnCircle(x2, y2, radius, pos);
          angle = pos * -2 * Math.PI + 1.5 * Math.PI + 0.1 * Math.PI;
        }
      }
      var xi = arrowPoint.x - length2 * 0.9 * Math.cos(angle);
      var yi = arrowPoint.y - length2 * 0.9 * Math.sin(angle);
      var arrowCore = {
        x: xi,
        y: yi
      };
      return {
        point: arrowPoint,
        core: arrowCore,
        angle,
        length: length2,
        type
      };
    }
    /** @inheritDoc */
  }, {
    key: "drawArrowHead",
    value: function drawArrowHead(ctx, values2, _selected, _hover, arrowData) {
      ctx.strokeStyle = this.getColor(ctx, values2);
      ctx.fillStyle = ctx.strokeStyle;
      ctx.lineWidth = values2.width;
      var canFill = EndPoints.draw(ctx, arrowData);
      if (canFill) {
        this.enableShadow(ctx, values2);
        _fillInstanceProperty(ctx).call(ctx);
        this.disableShadow(ctx, values2);
      }
    }
    /**
     * Set the shadow formatting values in the context if enabled, do nothing otherwise.
     *
     * @param ctx - The context that will be used for rendering.
     * @param values - Formatting values for the shadow.
     */
  }, {
    key: "enableShadow",
    value: function enableShadow(ctx, values2) {
      if (values2.shadow === true) {
        ctx.shadowColor = values2.shadowColor;
        ctx.shadowBlur = values2.shadowSize;
        ctx.shadowOffsetX = values2.shadowX;
        ctx.shadowOffsetY = values2.shadowY;
      }
    }
    /**
     * Reset the shadow formatting values in the context if enabled, do nothing otherwise.
     *
     * @param ctx - The context that will be used for rendering.
     * @param values - Formatting values for the shadow.
     */
  }, {
    key: "disableShadow",
    value: function disableShadow(ctx, values2) {
      if (values2.shadow === true) {
        ctx.shadowColor = "rgba(0,0,0,0)";
        ctx.shadowBlur = 0;
        ctx.shadowOffsetX = 0;
        ctx.shadowOffsetY = 0;
      }
    }
    /**
     * Render the background according to the formatting values.
     *
     * @param ctx - The context that will be used for rendering.
     * @param values - Formatting values for the background.
     */
  }, {
    key: "drawBackground",
    value: function drawBackground(ctx, values2) {
      if (values2.background !== false) {
        var origCtxAttr = {
          strokeStyle: ctx.strokeStyle,
          lineWidth: ctx.lineWidth,
          dashes: ctx.dashes
        };
        ctx.strokeStyle = values2.backgroundColor;
        ctx.lineWidth = values2.backgroundSize;
        this.setStrokeDashed(ctx, values2.backgroundDashes);
        ctx.stroke();
        ctx.strokeStyle = origCtxAttr.strokeStyle;
        ctx.lineWidth = origCtxAttr.lineWidth;
        ctx.dashes = origCtxAttr.dashes;
        this.setStrokeDashed(ctx, values2.dashes);
      }
    }
    /**
     * Set the line dash pattern if supported. Logs a warning to the console if it isn't supported.
     *
     * @param ctx - The context that will be used for rendering.
     * @param dashes - The pattern [line, space, line…], true for default dashed line or false for normal line.
     */
  }, {
    key: "setStrokeDashed",
    value: function setStrokeDashed(ctx, dashes) {
      if (dashes !== false) {
        if (ctx.setLineDash !== void 0) {
          var pattern = _Array$isArray(dashes) ? dashes : [5, 5];
          ctx.setLineDash(pattern);
        } else {
          console.warn("setLineDash is not supported in this browser. The dashed stroke cannot be used.");
        }
      } else {
        if (ctx.setLineDash !== void 0) {
          ctx.setLineDash([]);
        } else {
          console.warn("setLineDash is not supported in this browser. The dashed stroke cannot be used.");
        }
      }
    }
  }]);
  return EdgeBase2;
}();
function ownKeys(e2, r2) {
  var t2 = _Object$keys(e2);
  if (_Object$getOwnPropertySymbols) {
    var o2 = _Object$getOwnPropertySymbols(e2);
    r2 && (o2 = _filterInstanceProperty(o2).call(o2, function(r3) {
      return _Object$getOwnPropertyDescriptor$1(e2, r3).enumerable;
    })), t2.push.apply(t2, o2);
  }
  return t2;
}
function _objectSpread(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var _context, _context2;
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? _forEachInstanceProperty(_context = ownKeys(Object(t2), true)).call(_context, function(r3) {
      _defineProperty(e2, r3, t2[r3]);
    }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e2, _Object$getOwnPropertyDescriptors(t2)) : _forEachInstanceProperty(_context2 = ownKeys(Object(t2))).call(_context2, function(r3) {
      _Object$defineProperty(e2, r3, _Object$getOwnPropertyDescriptor$1(t2, r3));
    });
  }
  return e2;
}
function _createSuper$9(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$9();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = _Reflect$construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$9() {
  if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
  if (_Reflect$construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var BezierEdgeBase = /* @__PURE__ */ function(_EdgeBase) {
  _inherits(BezierEdgeBase2, _EdgeBase);
  var _super = _createSuper$9(BezierEdgeBase2);
  function BezierEdgeBase2(options, body, labelModule) {
    _classCallCheck(this, BezierEdgeBase2);
    return _super.call(this, options, body, labelModule);
  }
  _createClass(BezierEdgeBase2, [{
    key: "_findBorderPositionBezier",
    value: function _findBorderPositionBezier(nearNode, ctx) {
      var viaNode = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this._getViaCoordinates();
      var maxIterations = 10;
      var threshold = 0.2;
      var from4 = false;
      var high = 1;
      var low2 = 0;
      var node2 = this.to;
      var pos;
      var middle;
      var endPointOffset = this.options.endPointOffset ? this.options.endPointOffset.to : 0;
      if (nearNode.id === this.from.id) {
        node2 = this.from;
        from4 = true;
        endPointOffset = this.options.endPointOffset ? this.options.endPointOffset.from : 0;
      }
      if (this.options.arrowStrikethrough === false) {
        endPointOffset = 0;
      }
      var iteration = 0;
      do {
        middle = (low2 + high) * 0.5;
        pos = this.getPoint(middle, viaNode);
        var angle = Math.atan2(node2.y - pos.y, node2.x - pos.x);
        var distanceToBorder = node2.distanceToBorder(ctx, angle) + endPointOffset;
        var distanceToPoint = Math.sqrt(Math.pow(pos.x - node2.x, 2) + Math.pow(pos.y - node2.y, 2));
        var difference = distanceToBorder - distanceToPoint;
        if (Math.abs(difference) < threshold) {
          break;
        } else if (difference < 0) {
          if (from4 === false) {
            low2 = middle;
          } else {
            high = middle;
          }
        } else {
          if (from4 === false) {
            high = middle;
          } else {
            low2 = middle;
          }
        }
        ++iteration;
      } while (low2 <= high && iteration < maxIterations);
      return _objectSpread(_objectSpread({}, pos), {}, {
        t: middle
      });
    }
    /**
     * Calculate the distance between a point (x3,y3) and a line segment from (x1,y1) to (x2,y2).
     *
     * @remarks
     * http://stackoverflow.com/questions/849211/shortest-distancae-between-a-point-and-a-line-segment
     * @param x1 - First end of the line segment on the x axis.
     * @param y1 - First end of the line segment on the y axis.
     * @param x2 - Second end of the line segment on the x axis.
     * @param y2 - Second end of the line segment on the y axis.
     * @param x3 - Position of the point on the x axis.
     * @param y3 - Position of the point on the y axis.
     * @param via - The control point for the edge.
     * @returns The distance between the line segment and the point.
     */
  }, {
    key: "_getDistanceToBezierEdge",
    value: function _getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, via) {
      var minDistance = 1e9;
      var distance;
      var i2, t2, x4, y4;
      var lastX = x1;
      var lastY = y1;
      for (i2 = 1; i2 < 10; i2++) {
        t2 = 0.1 * i2;
        x4 = Math.pow(1 - t2, 2) * x1 + 2 * t2 * (1 - t2) * via.x + Math.pow(t2, 2) * x2;
        y4 = Math.pow(1 - t2, 2) * y1 + 2 * t2 * (1 - t2) * via.y + Math.pow(t2, 2) * y2;
        if (i2 > 0) {
          distance = this._getDistanceToLine(lastX, lastY, x4, y4, x3, y3);
          minDistance = distance < minDistance ? distance : minDistance;
        }
        lastX = x4;
        lastY = y4;
      }
      return minDistance;
    }
    /**
     * Render a bezier curve between two nodes.
     *
     * @remarks
     * The method accepts zero, one or two control points.
     * Passing zero control points just draws a straight line.
     * @param ctx - The context that will be used for rendering.
     * @param values - Style options for edge drawing.
     * @param viaNode1 - First control point for curve drawing.
     * @param viaNode2 - Second control point for curve drawing.
     */
  }, {
    key: "_bezierCurve",
    value: function _bezierCurve(ctx, values2, viaNode1, viaNode2) {
      ctx.beginPath();
      ctx.moveTo(this.fromPoint.x, this.fromPoint.y);
      if (viaNode1 != null && viaNode1.x != null) {
        if (viaNode2 != null && viaNode2.x != null) {
          ctx.bezierCurveTo(viaNode1.x, viaNode1.y, viaNode2.x, viaNode2.y, this.toPoint.x, this.toPoint.y);
        } else {
          ctx.quadraticCurveTo(viaNode1.x, viaNode1.y, this.toPoint.x, this.toPoint.y);
        }
      } else {
        ctx.lineTo(this.toPoint.x, this.toPoint.y);
      }
      this.drawBackground(ctx, values2);
      this.enableShadow(ctx, values2);
      ctx.stroke();
      this.disableShadow(ctx, values2);
    }
    /** @inheritDoc */
  }, {
    key: "getViaNode",
    value: function getViaNode() {
      return this._getViaCoordinates();
    }
  }]);
  return BezierEdgeBase2;
}(EdgeBase);
function _createSuper$8(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$8();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = _Reflect$construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$8() {
  if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
  if (_Reflect$construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var BezierEdgeDynamic = /* @__PURE__ */ function(_BezierEdgeBase) {
  _inherits(BezierEdgeDynamic2, _BezierEdgeBase);
  var _super = _createSuper$8(BezierEdgeDynamic2);
  function BezierEdgeDynamic2(options, body, labelModule) {
    var _this;
    _classCallCheck(this, BezierEdgeDynamic2);
    _this = _super.call(this, options, body, labelModule);
    _this.via = _this.via;
    _this._boundFunction = function() {
      _this.positionBezierNode();
    };
    _this._body.emitter.on("_repositionBezierNodes", _this._boundFunction);
    return _this;
  }
  _createClass(BezierEdgeDynamic2, [{
    key: "setOptions",
    value: function setOptions(options) {
      _get(_getPrototypeOf(BezierEdgeDynamic2.prototype), "setOptions", this).call(this, options);
      var physicsChange = false;
      if (this.options.physics !== options.physics) {
        physicsChange = true;
      }
      this.options = options;
      this.id = this.options.id;
      this.from = this._body.nodes[this.options.from];
      this.to = this._body.nodes[this.options.to];
      this.setupSupportNode();
      this.connect();
      if (physicsChange === true) {
        this.via.setOptions({
          physics: this.options.physics
        });
        this.positionBezierNode();
      }
    }
    /** @inheritDoc */
  }, {
    key: "connect",
    value: function connect() {
      this.from = this._body.nodes[this.options.from];
      this.to = this._body.nodes[this.options.to];
      if (this.from === void 0 || this.to === void 0 || this.options.physics === false) {
        this.via.setOptions({
          physics: false
        });
      } else {
        if (this.from.id === this.to.id) {
          this.via.setOptions({
            physics: false
          });
        } else {
          this.via.setOptions({
            physics: true
          });
        }
      }
    }
    /** @inheritDoc */
  }, {
    key: "cleanup",
    value: function cleanup() {
      this._body.emitter.off("_repositionBezierNodes", this._boundFunction);
      if (this.via !== void 0) {
        delete this._body.nodes[this.via.id];
        this.via = void 0;
        return true;
      }
      return false;
    }
    /**
     * Create and add a support node if not already present.
     *
     * @remarks
     * Bezier curves require an anchor point to calculate the smooth flow.
     * These points are nodes.
     * These nodes are invisible but are used for the force calculation.
     *
     * The changed data is not called, if needed, it is returned by the main edge constructor.
     */
  }, {
    key: "setupSupportNode",
    value: function setupSupportNode() {
      if (this.via === void 0) {
        var nodeId = "edgeId:" + this.id;
        var node2 = this._body.functions.createNode({
          id: nodeId,
          shape: "circle",
          physics: true,
          hidden: true
        });
        this._body.nodes[nodeId] = node2;
        this.via = node2;
        this.via.parentEdgeId = this.id;
        this.positionBezierNode();
      }
    }
    /**
     * Position bezier node.
     */
  }, {
    key: "positionBezierNode",
    value: function positionBezierNode() {
      if (this.via !== void 0 && this.from !== void 0 && this.to !== void 0) {
        this.via.x = 0.5 * (this.from.x + this.to.x);
        this.via.y = 0.5 * (this.from.y + this.to.y);
      } else if (this.via !== void 0) {
        this.via.x = 0;
        this.via.y = 0;
      }
    }
    /** @inheritDoc */
  }, {
    key: "_line",
    value: function _line(ctx, values2, viaNode) {
      this._bezierCurve(ctx, values2, viaNode);
    }
    /** @inheritDoc */
  }, {
    key: "_getViaCoordinates",
    value: function _getViaCoordinates() {
      return this.via;
    }
    /** @inheritDoc */
  }, {
    key: "getViaNode",
    value: function getViaNode() {
      return this.via;
    }
    /** @inheritDoc */
  }, {
    key: "getPoint",
    value: function getPoint(position) {
      var viaNode = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.via;
      if (this.from === this.to) {
        var _this$_getCircleData = this._getCircleData(), _this$_getCircleData2 = _slicedToArray(_this$_getCircleData, 3), cx = _this$_getCircleData2[0], cy = _this$_getCircleData2[1], cr = _this$_getCircleData2[2];
        var a2 = 2 * Math.PI * (1 - position);
        return {
          x: cx + cr * Math.sin(a2),
          y: cy + cr - cr * (1 - Math.cos(a2))
        };
      } else {
        return {
          x: Math.pow(1 - position, 2) * this.fromPoint.x + 2 * position * (1 - position) * viaNode.x + Math.pow(position, 2) * this.toPoint.x,
          y: Math.pow(1 - position, 2) * this.fromPoint.y + 2 * position * (1 - position) * viaNode.y + Math.pow(position, 2) * this.toPoint.y
        };
      }
    }
    /** @inheritDoc */
  }, {
    key: "_findBorderPosition",
    value: function _findBorderPosition(nearNode, ctx) {
      return this._findBorderPositionBezier(nearNode, ctx, this.via);
    }
    /** @inheritDoc */
  }, {
    key: "_getDistanceToEdge",
    value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
      return this._getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, this.via);
    }
  }]);
  return BezierEdgeDynamic2;
}(BezierEdgeBase);
function _createSuper$7(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$7();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = _Reflect$construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$7() {
  if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
  if (_Reflect$construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var BezierEdgeStatic = /* @__PURE__ */ function(_BezierEdgeBase) {
  _inherits(BezierEdgeStatic2, _BezierEdgeBase);
  var _super = _createSuper$7(BezierEdgeStatic2);
  function BezierEdgeStatic2(options, body, labelModule) {
    _classCallCheck(this, BezierEdgeStatic2);
    return _super.call(this, options, body, labelModule);
  }
  _createClass(BezierEdgeStatic2, [{
    key: "_line",
    value: function _line(ctx, values2, viaNode) {
      this._bezierCurve(ctx, values2, viaNode);
    }
    /** @inheritDoc */
  }, {
    key: "getViaNode",
    value: function getViaNode() {
      return this._getViaCoordinates();
    }
    /**
     * Compute the coordinates of the via node.
     *
     * @remarks
     * We do not use the to and fromPoints here to make the via nodes the same as edges without arrows.
     * @returns Cartesian coordinates of the via node.
     */
  }, {
    key: "_getViaCoordinates",
    value: function _getViaCoordinates() {
      var factor = this.options.smooth.roundness;
      var type = this.options.smooth.type;
      var dx = Math.abs(this.from.x - this.to.x);
      var dy = Math.abs(this.from.y - this.to.y);
      if (type === "discrete" || type === "diagonalCross") {
        var stepX;
        var stepY;
        if (dx <= dy) {
          stepX = stepY = factor * dy;
        } else {
          stepX = stepY = factor * dx;
        }
        if (this.from.x > this.to.x) {
          stepX = -stepX;
        }
        if (this.from.y >= this.to.y) {
          stepY = -stepY;
        }
        var xVia = this.from.x + stepX;
        var yVia = this.from.y + stepY;
        if (type === "discrete") {
          if (dx <= dy) {
            xVia = dx < factor * dy ? this.from.x : xVia;
          } else {
            yVia = dy < factor * dx ? this.from.y : yVia;
          }
        }
        return {
          x: xVia,
          y: yVia
        };
      } else if (type === "straightCross") {
        var _stepX = (1 - factor) * dx;
        var _stepY = (1 - factor) * dy;
        if (dx <= dy) {
          _stepX = 0;
          if (this.from.y < this.to.y) {
            _stepY = -_stepY;
          }
        } else {
          if (this.from.x < this.to.x) {
            _stepX = -_stepX;
          }
          _stepY = 0;
        }
        return {
          x: this.to.x + _stepX,
          y: this.to.y + _stepY
        };
      } else if (type === "horizontal") {
        var _stepX2 = (1 - factor) * dx;
        if (this.from.x < this.to.x) {
          _stepX2 = -_stepX2;
        }
        return {
          x: this.to.x + _stepX2,
          y: this.from.y
        };
      } else if (type === "vertical") {
        var _stepY2 = (1 - factor) * dy;
        if (this.from.y < this.to.y) {
          _stepY2 = -_stepY2;
        }
        return {
          x: this.from.x,
          y: this.to.y + _stepY2
        };
      } else if (type === "curvedCW") {
        dx = this.to.x - this.from.x;
        dy = this.from.y - this.to.y;
        var radius = Math.sqrt(dx * dx + dy * dy);
        var pi = Math.PI;
        var originalAngle = Math.atan2(dy, dx);
        var myAngle = (originalAngle + (factor * 0.5 + 0.5) * pi) % (2 * pi);
        return {
          x: this.from.x + (factor * 0.5 + 0.5) * radius * Math.sin(myAngle),
          y: this.from.y + (factor * 0.5 + 0.5) * radius * Math.cos(myAngle)
        };
      } else if (type === "curvedCCW") {
        dx = this.to.x - this.from.x;
        dy = this.from.y - this.to.y;
        var _radius = Math.sqrt(dx * dx + dy * dy);
        var _pi = Math.PI;
        var _originalAngle = Math.atan2(dy, dx);
        var _myAngle = (_originalAngle + (-factor * 0.5 + 0.5) * _pi) % (2 * _pi);
        return {
          x: this.from.x + (factor * 0.5 + 0.5) * _radius * Math.sin(_myAngle),
          y: this.from.y + (factor * 0.5 + 0.5) * _radius * Math.cos(_myAngle)
        };
      } else {
        var _stepX3;
        var _stepY3;
        if (dx <= dy) {
          _stepX3 = _stepY3 = factor * dy;
        } else {
          _stepX3 = _stepY3 = factor * dx;
        }
        if (this.from.x > this.to.x) {
          _stepX3 = -_stepX3;
        }
        if (this.from.y >= this.to.y) {
          _stepY3 = -_stepY3;
        }
        var _xVia = this.from.x + _stepX3;
        var _yVia = this.from.y + _stepY3;
        if (dx <= dy) {
          if (this.from.x <= this.to.x) {
            _xVia = this.to.x < _xVia ? this.to.x : _xVia;
          } else {
            _xVia = this.to.x > _xVia ? this.to.x : _xVia;
          }
        } else {
          if (this.from.y >= this.to.y) {
            _yVia = this.to.y > _yVia ? this.to.y : _yVia;
          } else {
            _yVia = this.to.y < _yVia ? this.to.y : _yVia;
          }
        }
        return {
          x: _xVia,
          y: _yVia
        };
      }
    }
    /** @inheritDoc */
  }, {
    key: "_findBorderPosition",
    value: function _findBorderPosition(nearNode, ctx) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      return this._findBorderPositionBezier(nearNode, ctx, options.via);
    }
    /** @inheritDoc */
  }, {
    key: "_getDistanceToEdge",
    value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
      var viaNode = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : this._getViaCoordinates();
      return this._getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, viaNode);
    }
    /** @inheritDoc */
  }, {
    key: "getPoint",
    value: function getPoint(position) {
      var viaNode = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this._getViaCoordinates();
      var t2 = position;
      var x2 = Math.pow(1 - t2, 2) * this.fromPoint.x + 2 * t2 * (1 - t2) * viaNode.x + Math.pow(t2, 2) * this.toPoint.x;
      var y2 = Math.pow(1 - t2, 2) * this.fromPoint.y + 2 * t2 * (1 - t2) * viaNode.y + Math.pow(t2, 2) * this.toPoint.y;
      return {
        x: x2,
        y: y2
      };
    }
  }]);
  return BezierEdgeStatic2;
}(BezierEdgeBase);
function _createSuper$6(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$6();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = _Reflect$construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$6() {
  if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
  if (_Reflect$construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var CubicBezierEdgeBase = /* @__PURE__ */ function(_BezierEdgeBase) {
  _inherits(CubicBezierEdgeBase2, _BezierEdgeBase);
  var _super = _createSuper$6(CubicBezierEdgeBase2);
  function CubicBezierEdgeBase2(options, body, labelModule) {
    _classCallCheck(this, CubicBezierEdgeBase2);
    return _super.call(this, options, body, labelModule);
  }
  _createClass(CubicBezierEdgeBase2, [{
    key: "_getDistanceToBezierEdge2",
    value: function _getDistanceToBezierEdge2(x1, y1, x2, y2, x3, y3, via1, via2) {
      var minDistance = 1e9;
      var lastX = x1;
      var lastY = y1;
      var vec = [0, 0, 0, 0];
      for (var i2 = 1; i2 < 10; i2++) {
        var t2 = 0.1 * i2;
        vec[0] = Math.pow(1 - t2, 3);
        vec[1] = 3 * t2 * Math.pow(1 - t2, 2);
        vec[2] = 3 * Math.pow(t2, 2) * (1 - t2);
        vec[3] = Math.pow(t2, 3);
        var x4 = vec[0] * x1 + vec[1] * via1.x + vec[2] * via2.x + vec[3] * x2;
        var y4 = vec[0] * y1 + vec[1] * via1.y + vec[2] * via2.y + vec[3] * y2;
        if (i2 > 0) {
          var distance = this._getDistanceToLine(lastX, lastY, x4, y4, x3, y3);
          minDistance = distance < minDistance ? distance : minDistance;
        }
        lastX = x4;
        lastY = y4;
      }
      return minDistance;
    }
  }]);
  return CubicBezierEdgeBase2;
}(BezierEdgeBase);
function _createSuper$5(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$5();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = _Reflect$construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$5() {
  if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
  if (_Reflect$construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var CubicBezierEdge = /* @__PURE__ */ function(_CubicBezierEdgeBase) {
  _inherits(CubicBezierEdge2, _CubicBezierEdgeBase);
  var _super = _createSuper$5(CubicBezierEdge2);
  function CubicBezierEdge2(options, body, labelModule) {
    _classCallCheck(this, CubicBezierEdge2);
    return _super.call(this, options, body, labelModule);
  }
  _createClass(CubicBezierEdge2, [{
    key: "_line",
    value: function _line(ctx, values2, viaNodes) {
      var via1 = viaNodes[0];
      var via2 = viaNodes[1];
      this._bezierCurve(ctx, values2, via1, via2);
    }
    /**
     * Compute the additional points the edge passes through.
     *
     * @returns Cartesian coordinates of the points the edge passes through.
     */
  }, {
    key: "_getViaCoordinates",
    value: function _getViaCoordinates() {
      var dx = this.from.x - this.to.x;
      var dy = this.from.y - this.to.y;
      var x1;
      var y1;
      var x2;
      var y2;
      var roundness = this.options.smooth.roundness;
      if ((Math.abs(dx) > Math.abs(dy) || this.options.smooth.forceDirection === true || this.options.smooth.forceDirection === "horizontal") && this.options.smooth.forceDirection !== "vertical") {
        y1 = this.from.y;
        y2 = this.to.y;
        x1 = this.from.x - roundness * dx;
        x2 = this.to.x + roundness * dx;
      } else {
        y1 = this.from.y - roundness * dy;
        y2 = this.to.y + roundness * dy;
        x1 = this.from.x;
        x2 = this.to.x;
      }
      return [{
        x: x1,
        y: y1
      }, {
        x: x2,
        y: y2
      }];
    }
    /** @inheritDoc */
  }, {
    key: "getViaNode",
    value: function getViaNode() {
      return this._getViaCoordinates();
    }
    /** @inheritDoc */
  }, {
    key: "_findBorderPosition",
    value: function _findBorderPosition(nearNode, ctx) {
      return this._findBorderPositionBezier(nearNode, ctx);
    }
    /** @inheritDoc */
  }, {
    key: "_getDistanceToEdge",
    value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
      var _ref = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : this._getViaCoordinates(), _ref2 = _slicedToArray(_ref, 2), via1 = _ref2[0], via2 = _ref2[1];
      return this._getDistanceToBezierEdge2(x1, y1, x2, y2, x3, y3, via1, via2);
    }
    /** @inheritDoc */
  }, {
    key: "getPoint",
    value: function getPoint(position) {
      var _ref3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this._getViaCoordinates(), _ref4 = _slicedToArray(_ref3, 2), via1 = _ref4[0], via2 = _ref4[1];
      var t2 = position;
      var vec = [Math.pow(1 - t2, 3), 3 * t2 * Math.pow(1 - t2, 2), 3 * Math.pow(t2, 2) * (1 - t2), Math.pow(t2, 3)];
      var x2 = vec[0] * this.fromPoint.x + vec[1] * via1.x + vec[2] * via2.x + vec[3] * this.toPoint.x;
      var y2 = vec[0] * this.fromPoint.y + vec[1] * via1.y + vec[2] * via2.y + vec[3] * this.toPoint.y;
      return {
        x: x2,
        y: y2
      };
    }
  }]);
  return CubicBezierEdge2;
}(CubicBezierEdgeBase);
function _createSuper$4(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$4();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = _Reflect$construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$4() {
  if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
  if (_Reflect$construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var StraightEdge = /* @__PURE__ */ function(_EdgeBase) {
  _inherits(StraightEdge2, _EdgeBase);
  var _super = _createSuper$4(StraightEdge2);
  function StraightEdge2(options, body, labelModule) {
    _classCallCheck(this, StraightEdge2);
    return _super.call(this, options, body, labelModule);
  }
  _createClass(StraightEdge2, [{
    key: "_line",
    value: function _line(ctx, values2) {
      ctx.beginPath();
      ctx.moveTo(this.fromPoint.x, this.fromPoint.y);
      ctx.lineTo(this.toPoint.x, this.toPoint.y);
      this.enableShadow(ctx, values2);
      ctx.stroke();
      this.disableShadow(ctx, values2);
    }
    /** @inheritDoc */
  }, {
    key: "getViaNode",
    value: function getViaNode() {
      return void 0;
    }
    /** @inheritDoc */
  }, {
    key: "getPoint",
    value: function getPoint(position) {
      return {
        x: (1 - position) * this.fromPoint.x + position * this.toPoint.x,
        y: (1 - position) * this.fromPoint.y + position * this.toPoint.y
      };
    }
    /** @inheritDoc */
  }, {
    key: "_findBorderPosition",
    value: function _findBorderPosition(nearNode, ctx) {
      var node1 = this.to;
      var node2 = this.from;
      if (nearNode.id === this.from.id) {
        node1 = this.from;
        node2 = this.to;
      }
      var angle = Math.atan2(node1.y - node2.y, node1.x - node2.x);
      var dx = node1.x - node2.x;
      var dy = node1.y - node2.y;
      var edgeSegmentLength = Math.sqrt(dx * dx + dy * dy);
      var toBorderDist = nearNode.distanceToBorder(ctx, angle);
      var toBorderPoint = (edgeSegmentLength - toBorderDist) / edgeSegmentLength;
      return {
        x: (1 - toBorderPoint) * node2.x + toBorderPoint * node1.x,
        y: (1 - toBorderPoint) * node2.y + toBorderPoint * node1.y,
        t: 0
      };
    }
    /** @inheritDoc */
  }, {
    key: "_getDistanceToEdge",
    value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
      return this._getDistanceToLine(x1, y1, x2, y2, x3, y3);
    }
  }]);
  return StraightEdge2;
}(EdgeBase);
var Edge = /* @__PURE__ */ function() {
  function Edge2(options, body, imagelist, globalOptions, defaultOptions) {
    _classCallCheck(this, Edge2);
    if (body === void 0) {
      throw new Error("No body provided");
    }
    this.options = bridgeObject(globalOptions);
    this.globalOptions = globalOptions;
    this.defaultOptions = defaultOptions;
    this.body = body;
    this.imagelist = imagelist;
    this.id = void 0;
    this.fromId = void 0;
    this.toId = void 0;
    this.selected = false;
    this.hover = false;
    this.labelDirty = true;
    this.baseWidth = this.options.width;
    this.baseFontSize = this.options.font.size;
    this.from = void 0;
    this.to = void 0;
    this.edgeType = void 0;
    this.connected = false;
    this.labelModule = new Label(
      this.body,
      this.options,
      true
      /* It's an edge label */
    );
    this.setOptions(options);
  }
  _createClass(Edge2, [{
    key: "setOptions",
    value: function setOptions(options) {
      if (!options) {
        return;
      }
      var affectsLayout = typeof options.physics !== "undefined" && this.options.physics !== options.physics || typeof options.hidden !== "undefined" && (this.options.hidden || false) !== (options.hidden || false) || typeof options.from !== "undefined" && this.options.from !== options.from || typeof options.to !== "undefined" && this.options.to !== options.to;
      Edge2.parseOptions(this.options, options, true, this.globalOptions);
      if (options.id !== void 0) {
        this.id = options.id;
      }
      if (options.from !== void 0) {
        this.fromId = options.from;
      }
      if (options.to !== void 0) {
        this.toId = options.to;
      }
      if (options.title !== void 0) {
        this.title = options.title;
      }
      if (options.value !== void 0) {
        options.value = _parseFloat$1(options.value);
      }
      var pile = [options, this.options, this.defaultOptions];
      this.chooser = choosify("edge", pile);
      this.updateLabelModule(options);
      affectsLayout = this.updateEdgeType() || affectsLayout;
      this._setInteractionWidths();
      this.connect();
      return affectsLayout;
    }
    /**
     *
     * @param {object} parentOptions
     * @param {object} newOptions
     * @param {boolean} [allowDeletion=false]
     * @param {object} [globalOptions={}]
     * @param {boolean} [copyFromGlobals=false]
     */
  }, {
    key: "getFormattingValues",
    value: (
      /**
       *
       * @returns {ArrowOptions}
       */
      function getFormattingValues() {
        var toArrow = this.options.arrows.to === true || this.options.arrows.to.enabled === true;
        var fromArrow = this.options.arrows.from === true || this.options.arrows.from.enabled === true;
        var middleArrow = this.options.arrows.middle === true || this.options.arrows.middle.enabled === true;
        var inheritsColor = this.options.color.inherit;
        var values2 = {
          toArrow,
          toArrowScale: this.options.arrows.to.scaleFactor,
          toArrowType: this.options.arrows.to.type,
          toArrowSrc: this.options.arrows.to.src,
          toArrowImageWidth: this.options.arrows.to.imageWidth,
          toArrowImageHeight: this.options.arrows.to.imageHeight,
          middleArrow,
          middleArrowScale: this.options.arrows.middle.scaleFactor,
          middleArrowType: this.options.arrows.middle.type,
          middleArrowSrc: this.options.arrows.middle.src,
          middleArrowImageWidth: this.options.arrows.middle.imageWidth,
          middleArrowImageHeight: this.options.arrows.middle.imageHeight,
          fromArrow,
          fromArrowScale: this.options.arrows.from.scaleFactor,
          fromArrowType: this.options.arrows.from.type,
          fromArrowSrc: this.options.arrows.from.src,
          fromArrowImageWidth: this.options.arrows.from.imageWidth,
          fromArrowImageHeight: this.options.arrows.from.imageHeight,
          arrowStrikethrough: this.options.arrowStrikethrough,
          color: inheritsColor ? void 0 : this.options.color.color,
          inheritsColor,
          opacity: this.options.color.opacity,
          hidden: this.options.hidden,
          length: this.options.length,
          shadow: this.options.shadow.enabled,
          shadowColor: this.options.shadow.color,
          shadowSize: this.options.shadow.size,
          shadowX: this.options.shadow.x,
          shadowY: this.options.shadow.y,
          dashes: this.options.dashes,
          width: this.options.width,
          background: this.options.background.enabled,
          backgroundColor: this.options.background.color,
          backgroundSize: this.options.background.size,
          backgroundDashes: this.options.background.dashes
        };
        if (this.selected || this.hover) {
          if (this.chooser === true) {
            if (this.selected) {
              var selectedWidth = this.options.selectionWidth;
              if (typeof selectedWidth === "function") {
                values2.width = selectedWidth(values2.width);
              } else if (typeof selectedWidth === "number") {
                values2.width += selectedWidth;
              }
              values2.width = Math.max(values2.width, 0.3 / this.body.view.scale);
              values2.color = this.options.color.highlight;
              values2.shadow = this.options.shadow.enabled;
            } else if (this.hover) {
              var hoverWidth = this.options.hoverWidth;
              if (typeof hoverWidth === "function") {
                values2.width = hoverWidth(values2.width);
              } else if (typeof hoverWidth === "number") {
                values2.width += hoverWidth;
              }
              values2.width = Math.max(values2.width, 0.3 / this.body.view.scale);
              values2.color = this.options.color.hover;
              values2.shadow = this.options.shadow.enabled;
            }
          } else if (typeof this.chooser === "function") {
            this.chooser(values2, this.options.id, this.selected, this.hover);
            if (values2.color !== void 0) {
              values2.inheritsColor = false;
            }
            if (values2.shadow === false) {
              if (values2.shadowColor !== this.options.shadow.color || values2.shadowSize !== this.options.shadow.size || values2.shadowX !== this.options.shadow.x || values2.shadowY !== this.options.shadow.y) {
                values2.shadow = true;
              }
            }
          }
        } else {
          values2.shadow = this.options.shadow.enabled;
          values2.width = Math.max(values2.width, 0.3 / this.body.view.scale);
        }
        return values2;
      }
    )
    /**
     * update the options in the label module
     *
     * @param {object} options
     */
  }, {
    key: "updateLabelModule",
    value: function updateLabelModule(options) {
      var pile = [
        options,
        this.options,
        this.globalOptions,
        // Currently set global edge options
        this.defaultOptions
      ];
      this.labelModule.update(this.options, pile);
      if (this.labelModule.baseSize !== void 0) {
        this.baseFontSize = this.labelModule.baseSize;
      }
    }
    /**
     * update the edge type, set the options
     *
     * @returns {boolean}
     */
  }, {
    key: "updateEdgeType",
    value: function updateEdgeType() {
      var smooth = this.options.smooth;
      var dataChanged = false;
      var changeInType = true;
      if (this.edgeType !== void 0) {
        if (this.edgeType instanceof BezierEdgeDynamic && smooth.enabled === true && smooth.type === "dynamic" || this.edgeType instanceof CubicBezierEdge && smooth.enabled === true && smooth.type === "cubicBezier" || this.edgeType instanceof BezierEdgeStatic && smooth.enabled === true && smooth.type !== "dynamic" && smooth.type !== "cubicBezier" || this.edgeType instanceof StraightEdge && smooth.type.enabled === false) {
          changeInType = false;
        }
        if (changeInType === true) {
          dataChanged = this.cleanup();
        }
      }
      if (changeInType === true) {
        if (smooth.enabled === true) {
          if (smooth.type === "dynamic") {
            dataChanged = true;
            this.edgeType = new BezierEdgeDynamic(this.options, this.body, this.labelModule);
          } else if (smooth.type === "cubicBezier") {
            this.edgeType = new CubicBezierEdge(this.options, this.body, this.labelModule);
          } else {
            this.edgeType = new BezierEdgeStatic(this.options, this.body, this.labelModule);
          }
        } else {
          this.edgeType = new StraightEdge(this.options, this.body, this.labelModule);
        }
      } else {
        this.edgeType.setOptions(this.options);
      }
      return dataChanged;
    }
    /**
     * Connect an edge to its nodes
     */
  }, {
    key: "connect",
    value: function connect() {
      this.disconnect();
      this.from = this.body.nodes[this.fromId] || void 0;
      this.to = this.body.nodes[this.toId] || void 0;
      this.connected = this.from !== void 0 && this.to !== void 0;
      if (this.connected === true) {
        this.from.attachEdge(this);
        this.to.attachEdge(this);
      } else {
        if (this.from) {
          this.from.detachEdge(this);
        }
        if (this.to) {
          this.to.detachEdge(this);
        }
      }
      this.edgeType.connect();
    }
    /**
     * Disconnect an edge from its nodes
     */
  }, {
    key: "disconnect",
    value: function disconnect() {
      if (this.from) {
        this.from.detachEdge(this);
        this.from = void 0;
      }
      if (this.to) {
        this.to.detachEdge(this);
        this.to = void 0;
      }
      this.connected = false;
    }
    /**
     * get the title of this edge.
     *
     * @returns {string} title    The title of the edge, or undefined when no title
     *                           has been set.
     */
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.title;
    }
    /**
     * check if this node is selecte
     *
     * @returns {boolean} selected   True if node is selected, else false
     */
  }, {
    key: "isSelected",
    value: function isSelected() {
      return this.selected;
    }
    /**
     * Retrieve the value of the edge. Can be undefined
     *
     * @returns {number} value
     */
  }, {
    key: "getValue",
    value: function getValue2() {
      return this.options.value;
    }
    /**
     * Adjust the value range of the edge. The edge will adjust it's width
     * based on its value.
     *
     * @param {number} min
     * @param {number} max
     * @param {number} total
     */
  }, {
    key: "setValueRange",
    value: function setValueRange(min2, max2, total) {
      if (this.options.value !== void 0) {
        var scale = this.options.scaling.customScalingFunction(min2, max2, total, this.options.value);
        var widthDiff = this.options.scaling.max - this.options.scaling.min;
        if (this.options.scaling.label.enabled === true) {
          var fontDiff = this.options.scaling.label.max - this.options.scaling.label.min;
          this.options.font.size = this.options.scaling.label.min + scale * fontDiff;
        }
        this.options.width = this.options.scaling.min + scale * widthDiff;
      } else {
        this.options.width = this.baseWidth;
        this.options.font.size = this.baseFontSize;
      }
      this._setInteractionWidths();
      this.updateLabelModule();
    }
    /**
     *
     * @private
     */
  }, {
    key: "_setInteractionWidths",
    value: function _setInteractionWidths() {
      if (typeof this.options.hoverWidth === "function") {
        this.edgeType.hoverWidth = this.options.hoverWidth(this.options.width);
      } else {
        this.edgeType.hoverWidth = this.options.hoverWidth + this.options.width;
      }
      if (typeof this.options.selectionWidth === "function") {
        this.edgeType.selectionWidth = this.options.selectionWidth(this.options.width);
      } else {
        this.edgeType.selectionWidth = this.options.selectionWidth + this.options.width;
      }
    }
    /**
     * Redraw a edge
     * Draw this edge in the given canvas
     * The 2d context of a HTML canvas can be retrieved by canvas.getContext("2d");
     *
     * @param {CanvasRenderingContext2D}   ctx
     */
  }, {
    key: "draw",
    value: function draw(ctx) {
      var values2 = this.getFormattingValues();
      if (values2.hidden) {
        return;
      }
      var viaNode = this.edgeType.getViaNode();
      this.edgeType.drawLine(ctx, values2, this.selected, this.hover, viaNode);
      this.drawLabel(ctx, viaNode);
    }
    /**
     * Redraw arrows
     * Draw this arrows in the given canvas
     * The 2d context of a HTML canvas can be retrieved by canvas.getContext("2d");
     *
     * @param {CanvasRenderingContext2D}   ctx
     */
  }, {
    key: "drawArrows",
    value: function drawArrows(ctx) {
      var values2 = this.getFormattingValues();
      if (values2.hidden) {
        return;
      }
      var viaNode = this.edgeType.getViaNode();
      var arrowData = {};
      this.edgeType.fromPoint = this.edgeType.from;
      this.edgeType.toPoint = this.edgeType.to;
      if (values2.fromArrow) {
        arrowData.from = this.edgeType.getArrowData(ctx, "from", viaNode, this.selected, this.hover, values2);
        if (values2.arrowStrikethrough === false) this.edgeType.fromPoint = arrowData.from.core;
        if (values2.fromArrowSrc) {
          arrowData.from.image = this.imagelist.load(values2.fromArrowSrc);
        }
        if (values2.fromArrowImageWidth) {
          arrowData.from.imageWidth = values2.fromArrowImageWidth;
        }
        if (values2.fromArrowImageHeight) {
          arrowData.from.imageHeight = values2.fromArrowImageHeight;
        }
      }
      if (values2.toArrow) {
        arrowData.to = this.edgeType.getArrowData(ctx, "to", viaNode, this.selected, this.hover, values2);
        if (values2.arrowStrikethrough === false) this.edgeType.toPoint = arrowData.to.core;
        if (values2.toArrowSrc) {
          arrowData.to.image = this.imagelist.load(values2.toArrowSrc);
        }
        if (values2.toArrowImageWidth) {
          arrowData.to.imageWidth = values2.toArrowImageWidth;
        }
        if (values2.toArrowImageHeight) {
          arrowData.to.imageHeight = values2.toArrowImageHeight;
        }
      }
      if (values2.middleArrow) {
        arrowData.middle = this.edgeType.getArrowData(ctx, "middle", viaNode, this.selected, this.hover, values2);
        if (values2.middleArrowSrc) {
          arrowData.middle.image = this.imagelist.load(values2.middleArrowSrc);
        }
        if (values2.middleArrowImageWidth) {
          arrowData.middle.imageWidth = values2.middleArrowImageWidth;
        }
        if (values2.middleArrowImageHeight) {
          arrowData.middle.imageHeight = values2.middleArrowImageHeight;
        }
      }
      if (values2.fromArrow) {
        this.edgeType.drawArrowHead(ctx, values2, this.selected, this.hover, arrowData.from);
      }
      if (values2.middleArrow) {
        this.edgeType.drawArrowHead(ctx, values2, this.selected, this.hover, arrowData.middle);
      }
      if (values2.toArrow) {
        this.edgeType.drawArrowHead(ctx, values2, this.selected, this.hover, arrowData.to);
      }
    }
    /**
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {Node} viaNode
     */
  }, {
    key: "drawLabel",
    value: function drawLabel(ctx, viaNode) {
      if (this.options.label !== void 0) {
        var node1 = this.from;
        var node2 = this.to;
        if (this.labelModule.differentState(this.selected, this.hover)) {
          this.labelModule.getTextSize(ctx, this.selected, this.hover);
        }
        var point;
        if (node1.id != node2.id) {
          this.labelModule.pointToSelf = false;
          point = this.edgeType.getPoint(0.5, viaNode);
          ctx.save();
          var rotationPoint = this._getRotation(ctx);
          if (rotationPoint.angle != 0) {
            ctx.translate(rotationPoint.x, rotationPoint.y);
            ctx.rotate(rotationPoint.angle);
          }
          this.labelModule.draw(ctx, point.x, point.y, this.selected, this.hover);
          ctx.restore();
        } else {
          this.labelModule.pointToSelf = true;
          var coordinates = getSelfRefCoordinates(ctx, this.options.selfReference.angle, this.options.selfReference.size, node1);
          point = this._pointOnCircle(coordinates.x, coordinates.y, this.options.selfReference.size, this.options.selfReference.angle);
          this.labelModule.draw(ctx, point.x, point.y, this.selected, this.hover);
        }
      }
    }
    /**
     * Determine all visual elements of this edge instance, in which the given
     * point falls within the bounding shape.
     *
     * @param {point} point
     * @returns {Array.<edgeClickItem|edgeLabelClickItem>} list with the items which are on the point
     */
  }, {
    key: "getItemsOnPoint",
    value: function getItemsOnPoint(point) {
      var ret = [];
      if (this.labelModule.visible()) {
        var rotationPoint = this._getRotation();
        if (pointInRect(this.labelModule.getSize(), point, rotationPoint)) {
          ret.push({
            edgeId: this.id,
            labelId: 0
          });
        }
      }
      var obj = {
        left: point.x,
        top: point.y
      };
      if (this.isOverlappingWith(obj)) {
        ret.push({
          edgeId: this.id
        });
      }
      return ret;
    }
    /**
     * Check if this object is overlapping with the provided object
     *
     * @param {object} obj   an object with parameters left, top
     * @returns {boolean}     True if location is located on the edge
     */
  }, {
    key: "isOverlappingWith",
    value: function isOverlappingWith(obj) {
      if (this.connected) {
        var distMax = 10;
        var xFrom = this.from.x;
        var yFrom = this.from.y;
        var xTo = this.to.x;
        var yTo = this.to.y;
        var xObj = obj.left;
        var yObj = obj.top;
        var dist = this.edgeType.getDistanceToEdge(xFrom, yFrom, xTo, yTo, xObj, yObj);
        return dist < distMax;
      } else {
        return false;
      }
    }
    /**
     * Determine the rotation point, if any.
     *
     * @param {CanvasRenderingContext2D} [ctx] if passed, do a recalculation of the label size
     * @returns {rotationPoint} the point to rotate around and the angle in radians to rotate
     * @private
     */
  }, {
    key: "_getRotation",
    value: function _getRotation(ctx) {
      var viaNode = this.edgeType.getViaNode();
      var point = this.edgeType.getPoint(0.5, viaNode);
      if (ctx !== void 0) {
        this.labelModule.calculateLabelSize(ctx, this.selected, this.hover, point.x, point.y);
      }
      var ret = {
        x: point.x,
        y: this.labelModule.size.yLine,
        angle: 0
      };
      if (!this.labelModule.visible()) {
        return ret;
      }
      if (this.options.font.align === "horizontal") {
        return ret;
      }
      var dy = this.from.y - this.to.y;
      var dx = this.from.x - this.to.x;
      var angle = Math.atan2(dy, dx);
      if (angle < -1 && dx < 0 || angle > 0 && dx < 0) {
        angle += Math.PI;
      }
      ret.angle = angle;
      return ret;
    }
    /**
     * Get a point on a circle
     *
     * @param {number} x
     * @param {number} y
     * @param {number} radius
     * @param {number} angle
     * @returns {object} point
     * @private
     */
  }, {
    key: "_pointOnCircle",
    value: function _pointOnCircle(x2, y2, radius, angle) {
      return {
        x: x2 + radius * Math.cos(angle),
        y: y2 - radius * Math.sin(angle)
      };
    }
    /**
     * Sets selected state to true
     */
  }, {
    key: "select",
    value: function select() {
      this.selected = true;
    }
    /**
     * Sets selected state to false
     */
  }, {
    key: "unselect",
    value: function unselect() {
      this.selected = false;
    }
    /**
     * cleans all required things on delete
     *
     * @returns {*}
     */
  }, {
    key: "cleanup",
    value: function cleanup() {
      return this.edgeType.cleanup();
    }
    /**
     * Remove edge from the list and perform necessary cleanup.
     */
  }, {
    key: "remove",
    value: function remove2() {
      this.cleanup();
      this.disconnect();
      delete this.body.edges[this.id];
    }
    /**
     * Check if both connecting nodes exist
     *
     * @returns {boolean}
     */
  }, {
    key: "endPointsValid",
    value: function endPointsValid() {
      return this.body.nodes[this.fromId] !== void 0 && this.body.nodes[this.toId] !== void 0;
    }
  }], [{
    key: "parseOptions",
    value: function parseOptions(parentOptions, newOptions) {
      var allowDeletion = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var globalOptions = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
      var copyFromGlobals = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
      var fields = ["endPointOffset", "arrowStrikethrough", "id", "from", "hidden", "hoverWidth", "labelHighlightBold", "length", "line", "opacity", "physics", "scaling", "selectionWidth", "selfReferenceSize", "selfReference", "to", "title", "value", "width", "font", "chosen", "widthConstraint"];
      selectiveDeepExtend(fields, parentOptions, newOptions, allowDeletion);
      if (newOptions.endPointOffset !== void 0 && newOptions.endPointOffset.from !== void 0) {
        if (_Number$isFinite(newOptions.endPointOffset.from)) {
          parentOptions.endPointOffset.from = newOptions.endPointOffset.from;
        } else {
          parentOptions.endPointOffset.from = globalOptions.endPointOffset.from !== void 0 ? globalOptions.endPointOffset.from : 0;
          console.error("endPointOffset.from is not a valid number");
        }
      }
      if (newOptions.endPointOffset !== void 0 && newOptions.endPointOffset.to !== void 0) {
        if (_Number$isFinite(newOptions.endPointOffset.to)) {
          parentOptions.endPointOffset.to = newOptions.endPointOffset.to;
        } else {
          parentOptions.endPointOffset.to = globalOptions.endPointOffset.to !== void 0 ? globalOptions.endPointOffset.to : 0;
          console.error("endPointOffset.to is not a valid number");
        }
      }
      if (isValidLabel(newOptions.label)) {
        parentOptions.label = newOptions.label;
      } else if (!isValidLabel(parentOptions.label)) {
        parentOptions.label = void 0;
      }
      mergeOptions(parentOptions, newOptions, "smooth", globalOptions);
      mergeOptions(parentOptions, newOptions, "shadow", globalOptions);
      mergeOptions(parentOptions, newOptions, "background", globalOptions);
      if (newOptions.dashes !== void 0 && newOptions.dashes !== null) {
        parentOptions.dashes = newOptions.dashes;
      } else if (allowDeletion === true && newOptions.dashes === null) {
        parentOptions.dashes = _Object$create$1(globalOptions.dashes);
      }
      if (newOptions.scaling !== void 0 && newOptions.scaling !== null) {
        if (newOptions.scaling.min !== void 0) {
          parentOptions.scaling.min = newOptions.scaling.min;
        }
        if (newOptions.scaling.max !== void 0) {
          parentOptions.scaling.max = newOptions.scaling.max;
        }
        mergeOptions(parentOptions.scaling, newOptions.scaling, "label", globalOptions.scaling);
      } else if (allowDeletion === true && newOptions.scaling === null) {
        parentOptions.scaling = _Object$create$1(globalOptions.scaling);
      }
      if (newOptions.arrows !== void 0 && newOptions.arrows !== null) {
        if (typeof newOptions.arrows === "string") {
          var arrows = newOptions.arrows.toLowerCase();
          parentOptions.arrows.to.enabled = _indexOfInstanceProperty(arrows).call(arrows, "to") != -1;
          parentOptions.arrows.middle.enabled = _indexOfInstanceProperty(arrows).call(arrows, "middle") != -1;
          parentOptions.arrows.from.enabled = _indexOfInstanceProperty(arrows).call(arrows, "from") != -1;
        } else if (_typeof(newOptions.arrows) === "object") {
          mergeOptions(parentOptions.arrows, newOptions.arrows, "to", globalOptions.arrows);
          mergeOptions(parentOptions.arrows, newOptions.arrows, "middle", globalOptions.arrows);
          mergeOptions(parentOptions.arrows, newOptions.arrows, "from", globalOptions.arrows);
        } else {
          throw new Error("The arrow newOptions can only be an object or a string. Refer to the documentation. You used:" + _JSON$stringify(newOptions.arrows));
        }
      } else if (allowDeletion === true && newOptions.arrows === null) {
        parentOptions.arrows = _Object$create$1(globalOptions.arrows);
      }
      if (newOptions.color !== void 0 && newOptions.color !== null) {
        var fromColor = isString(newOptions.color) ? {
          color: newOptions.color,
          highlight: newOptions.color,
          hover: newOptions.color,
          inherit: false,
          opacity: 1
        } : newOptions.color;
        var toColor = parentOptions.color;
        if (copyFromGlobals) {
          deepExtend(toColor, globalOptions.color, false, allowDeletion);
        } else {
          for (var i2 in toColor) {
            if (Object.prototype.hasOwnProperty.call(toColor, i2)) {
              delete toColor[i2];
            }
          }
        }
        if (isString(toColor)) {
          toColor.color = toColor;
          toColor.highlight = toColor;
          toColor.hover = toColor;
          toColor.inherit = false;
          if (fromColor.opacity === void 0) {
            toColor.opacity = 1;
          }
        } else {
          var colorsDefined = false;
          if (fromColor.color !== void 0) {
            toColor.color = fromColor.color;
            colorsDefined = true;
          }
          if (fromColor.highlight !== void 0) {
            toColor.highlight = fromColor.highlight;
            colorsDefined = true;
          }
          if (fromColor.hover !== void 0) {
            toColor.hover = fromColor.hover;
            colorsDefined = true;
          }
          if (fromColor.inherit !== void 0) {
            toColor.inherit = fromColor.inherit;
          }
          if (fromColor.opacity !== void 0) {
            toColor.opacity = Math.min(1, Math.max(0, fromColor.opacity));
          }
          if (colorsDefined === true) {
            toColor.inherit = false;
          } else {
            if (toColor.inherit === void 0) {
              toColor.inherit = "from";
            }
          }
        }
      } else if (allowDeletion === true && newOptions.color === null) {
        parentOptions.color = bridgeObject(globalOptions.color);
      }
      if (allowDeletion === true && newOptions.font === null) {
        parentOptions.font = bridgeObject(globalOptions.font);
      }
      if (Object.prototype.hasOwnProperty.call(newOptions, "selfReferenceSize")) {
        console.warn("The selfReferenceSize property has been deprecated. Please use selfReference property instead. The selfReference can be set like thise selfReference:{size:30, angle:Math.PI / 4}");
        parentOptions.selfReference.size = newOptions.selfReferenceSize;
      }
    }
  }]);
  return Edge2;
}();
var EdgesHandler = /* @__PURE__ */ function() {
  function EdgesHandler2(body, images2, groups) {
    var _context, _this = this;
    _classCallCheck(this, EdgesHandler2);
    this.body = body;
    this.images = images2;
    this.groups = groups;
    this.body.functions.createEdge = _bindInstanceProperty$1(_context = this.create).call(_context, this);
    this.edgesListeners = {
      add: function add(event, params) {
        _this.add(params.items);
      },
      update: function update(event, params) {
        _this.update(params.items);
      },
      remove: function remove2(event, params) {
        _this.remove(params.items);
      }
    };
    this.options = {};
    this.defaultOptions = {
      arrows: {
        to: {
          enabled: false,
          scaleFactor: 1,
          type: "arrow"
        },
        // boolean / {arrowScaleFactor:1} / {enabled: false, arrowScaleFactor:1}
        middle: {
          enabled: false,
          scaleFactor: 1,
          type: "arrow"
        },
        from: {
          enabled: false,
          scaleFactor: 1,
          type: "arrow"
        }
      },
      endPointOffset: {
        from: 0,
        to: 0
      },
      arrowStrikethrough: true,
      color: {
        color: "#848484",
        highlight: "#848484",
        hover: "#848484",
        inherit: "from",
        opacity: 1
      },
      dashes: false,
      font: {
        color: "#343434",
        size: 14,
        // px
        face: "arial",
        background: "none",
        strokeWidth: 2,
        // px
        strokeColor: "#ffffff",
        align: "horizontal",
        multi: false,
        vadjust: 0,
        bold: {
          mod: "bold"
        },
        boldital: {
          mod: "bold italic"
        },
        ital: {
          mod: "italic"
        },
        mono: {
          mod: "",
          size: 15,
          // px
          face: "courier new",
          vadjust: 2
        }
      },
      hidden: false,
      hoverWidth: 1.5,
      label: void 0,
      labelHighlightBold: true,
      length: void 0,
      physics: true,
      scaling: {
        min: 1,
        max: 15,
        label: {
          enabled: true,
          min: 14,
          max: 30,
          maxVisible: 30,
          drawThreshold: 5
        },
        customScalingFunction: function customScalingFunction(min2, max2, total, value2) {
          if (max2 === min2) {
            return 0.5;
          } else {
            var scale = 1 / (max2 - min2);
            return Math.max(0, (value2 - min2) * scale);
          }
        }
      },
      selectionWidth: 1.5,
      selfReference: {
        size: 20,
        angle: Math.PI / 4,
        renderBehindTheNode: true
      },
      shadow: {
        enabled: false,
        color: "rgba(0,0,0,0.5)",
        size: 10,
        x: 5,
        y: 5
      },
      background: {
        enabled: false,
        color: "rgba(111,111,111,1)",
        size: 10,
        dashes: false
      },
      smooth: {
        enabled: true,
        type: "dynamic",
        forceDirection: "none",
        roundness: 0.5
      },
      title: void 0,
      width: 1,
      value: void 0
    };
    deepExtend(this.options, this.defaultOptions);
    this.bindEventListeners();
  }
  _createClass(EdgesHandler2, [{
    key: "bindEventListeners",
    value: function bindEventListeners() {
      var _this2 = this, _context2, _context3;
      this.body.emitter.on("_forceDisableDynamicCurves", function(type) {
        var emit2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
        if (type === "dynamic") {
          type = "continuous";
        }
        var dataChanged = false;
        for (var edgeId in _this2.body.edges) {
          if (Object.prototype.hasOwnProperty.call(_this2.body.edges, edgeId)) {
            var edge2 = _this2.body.edges[edgeId];
            var edgeData = _this2.body.data.edges.get(edgeId);
            if (edgeData != null) {
              var smoothOptions = edgeData.smooth;
              if (smoothOptions !== void 0) {
                if (smoothOptions.enabled === true && smoothOptions.type === "dynamic") {
                  if (type === void 0) {
                    edge2.setOptions({
                      smooth: false
                    });
                  } else {
                    edge2.setOptions({
                      smooth: {
                        type
                      }
                    });
                  }
                  dataChanged = true;
                }
              }
            }
          }
        }
        if (emit2 === true && dataChanged === true) {
          _this2.body.emitter.emit("_dataChanged");
        }
      });
      this.body.emitter.on("_dataUpdated", function() {
        _this2.reconnectEdges();
      });
      this.body.emitter.on("refreshEdges", _bindInstanceProperty$1(_context2 = this.refresh).call(_context2, this));
      this.body.emitter.on("refresh", _bindInstanceProperty$1(_context3 = this.refresh).call(_context3, this));
      this.body.emitter.on("destroy", function() {
        forEach$1(_this2.edgesListeners, function(callback, event) {
          if (_this2.body.data.edges) _this2.body.data.edges.off(event, callback);
        });
        delete _this2.body.functions.createEdge;
        delete _this2.edgesListeners.add;
        delete _this2.edgesListeners.update;
        delete _this2.edgesListeners.remove;
        delete _this2.edgesListeners;
      });
    }
    /**
     *
     * @param {object} options
     */
  }, {
    key: "setOptions",
    value: function setOptions(options) {
      if (options !== void 0) {
        Edge.parseOptions(this.options, options, true, this.defaultOptions, true);
        var dataChanged = false;
        if (options.smooth !== void 0) {
          for (var edgeId in this.body.edges) {
            if (Object.prototype.hasOwnProperty.call(this.body.edges, edgeId)) {
              dataChanged = this.body.edges[edgeId].updateEdgeType() || dataChanged;
            }
          }
        }
        if (options.font !== void 0) {
          for (var _edgeId in this.body.edges) {
            if (Object.prototype.hasOwnProperty.call(this.body.edges, _edgeId)) {
              this.body.edges[_edgeId].updateLabelModule();
            }
          }
        }
        if (options.hidden !== void 0 || options.physics !== void 0 || dataChanged === true) {
          this.body.emitter.emit("_dataChanged");
        }
      }
    }
    /**
     * Load edges by reading the data table
     *
     * @param {Array | DataSet | DataView} edges    The data containing the edges.
     * @param {boolean} [doNotEmit=false] - Suppress data changed event.
     * @private
     */
  }, {
    key: "setData",
    value: function setData(edges) {
      var _this3 = this;
      var doNotEmit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var oldEdgesData = this.body.data.edges;
      if (isDataViewLike("id", edges)) {
        this.body.data.edges = edges;
      } else if (_Array$isArray(edges)) {
        this.body.data.edges = new DataSet();
        this.body.data.edges.add(edges);
      } else if (!edges) {
        this.body.data.edges = new DataSet();
      } else {
        throw new TypeError("Array or DataSet expected");
      }
      if (oldEdgesData) {
        forEach$1(this.edgesListeners, function(callback, event) {
          oldEdgesData.off(event, callback);
        });
      }
      this.body.edges = {};
      if (this.body.data.edges) {
        forEach$1(this.edgesListeners, function(callback, event) {
          _this3.body.data.edges.on(event, callback);
        });
        var ids = this.body.data.edges.getIds();
        this.add(ids, true);
      }
      this.body.emitter.emit("_adjustEdgesForHierarchicalLayout");
      if (doNotEmit === false) {
        this.body.emitter.emit("_dataChanged");
      }
    }
    /**
     * Add edges
     *
     * @param {number[] | string[]} ids
     * @param {boolean} [doNotEmit=false]
     * @private
     */
  }, {
    key: "add",
    value: function add(ids) {
      var doNotEmit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var edges = this.body.edges;
      var edgesData = this.body.data.edges;
      for (var i2 = 0; i2 < ids.length; i2++) {
        var id2 = ids[i2];
        var oldEdge = edges[id2];
        if (oldEdge) {
          oldEdge.disconnect();
        }
        var data2 = edgesData.get(id2, {
          showInternalIds: true
        });
        edges[id2] = this.create(data2);
      }
      this.body.emitter.emit("_adjustEdgesForHierarchicalLayout");
      if (doNotEmit === false) {
        this.body.emitter.emit("_dataChanged");
      }
    }
    /**
     * Update existing edges, or create them when not yet existing
     *
     * @param {number[] | string[]} ids
     * @private
     */
  }, {
    key: "update",
    value: function update(ids) {
      var edges = this.body.edges;
      var edgesData = this.body.data.edges;
      var dataChanged = false;
      for (var i2 = 0; i2 < ids.length; i2++) {
        var id2 = ids[i2];
        var data2 = edgesData.get(id2);
        var edge2 = edges[id2];
        if (edge2 !== void 0) {
          edge2.disconnect();
          dataChanged = edge2.setOptions(data2) || dataChanged;
          edge2.connect();
        } else {
          this.body.edges[id2] = this.create(data2);
          dataChanged = true;
        }
      }
      if (dataChanged === true) {
        this.body.emitter.emit("_adjustEdgesForHierarchicalLayout");
        this.body.emitter.emit("_dataChanged");
      } else {
        this.body.emitter.emit("_dataUpdated");
      }
    }
    /**
     * Remove existing edges. Non existing ids will be ignored
     *
     * @param {number[] | string[]} ids
     * @param {boolean} [emit=true]
     * @private
     */
  }, {
    key: "remove",
    value: function remove2(ids) {
      var emit2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      if (ids.length === 0) return;
      var edges = this.body.edges;
      forEach$1(ids, function(id2) {
        var edge2 = edges[id2];
        if (edge2 !== void 0) {
          edge2.remove();
        }
      });
      if (emit2) {
        this.body.emitter.emit("_dataChanged");
      }
    }
    /**
     * Refreshes Edge Handler
     */
  }, {
    key: "refresh",
    value: function refresh() {
      var _this4 = this;
      forEach$1(this.body.edges, function(edge2, edgeId) {
        var data2 = _this4.body.data.edges.get(edgeId);
        if (data2 !== void 0) {
          edge2.setOptions(data2);
        }
      });
    }
    /**
     *
     * @param {object} properties
     * @returns {Edge}
     */
  }, {
    key: "create",
    value: function create8(properties) {
      return new Edge(properties, this.body, this.images, this.options, this.defaultOptions);
    }
    /**
     * Reconnect all edges
     *
     * @private
     */
  }, {
    key: "reconnectEdges",
    value: function reconnectEdges() {
      var id2;
      var nodes2 = this.body.nodes;
      var edges = this.body.edges;
      for (id2 in nodes2) {
        if (Object.prototype.hasOwnProperty.call(nodes2, id2)) {
          nodes2[id2].edges = [];
        }
      }
      for (id2 in edges) {
        if (Object.prototype.hasOwnProperty.call(edges, id2)) {
          var edge2 = edges[id2];
          edge2.from = null;
          edge2.to = null;
          edge2.connect();
        }
      }
    }
    /**
     *
     * @param {Edge.id} edgeId
     * @returns {Array}
     */
  }, {
    key: "getConnectedNodes",
    value: function getConnectedNodes(edgeId) {
      var nodeList = [];
      if (this.body.edges[edgeId] !== void 0) {
        var edge2 = this.body.edges[edgeId];
        if (edge2.fromId !== void 0) {
          nodeList.push(edge2.fromId);
        }
        if (edge2.toId !== void 0) {
          nodeList.push(edge2.toId);
        }
      }
      return nodeList;
    }
    /**
     * There is no direct relation between the nodes and the edges DataSet,
     * so the right place to do call this is in the handler for event `_dataUpdated`.
     */
  }, {
    key: "_updateState",
    value: function _updateState() {
      this._addMissingEdges();
      this._removeInvalidEdges();
    }
    /**
     * Scan for missing nodes and remove corresponding edges, if any.
     *
     * @private
     */
  }, {
    key: "_removeInvalidEdges",
    value: function _removeInvalidEdges() {
      var _this5 = this;
      var edgesToDelete = [];
      forEach$1(this.body.edges, function(edge2, id2) {
        var toNode = _this5.body.nodes[edge2.toId];
        var fromNode = _this5.body.nodes[edge2.fromId];
        if (toNode !== void 0 && toNode.isCluster === true || fromNode !== void 0 && fromNode.isCluster === true) {
          return;
        }
        if (toNode === void 0 || fromNode === void 0) {
          edgesToDelete.push(id2);
        }
      });
      this.remove(edgesToDelete, false);
    }
    /**
     * add all edges from dataset that are not in the cached state
     *
     * @private
     */
  }, {
    key: "_addMissingEdges",
    value: function _addMissingEdges() {
      var edgesData = this.body.data.edges;
      if (edgesData === void 0 || edgesData === null) {
        return;
      }
      var edges = this.body.edges;
      var addIds = [];
      _forEachInstanceProperty(edgesData).call(edgesData, function(edgeData, edgeId) {
        var edge2 = edges[edgeId];
        if (edge2 === void 0) {
          addIds.push(edgeId);
        }
      });
      this.add(addIds, true);
    }
  }]);
  return EdgesHandler2;
}();
var BarnesHutSolver = /* @__PURE__ */ function() {
  function BarnesHutSolver2(body, physicsBody, options) {
    _classCallCheck(this, BarnesHutSolver2);
    this.body = body;
    this.physicsBody = physicsBody;
    this.barnesHutTree;
    this.setOptions(options);
    this._rng = Alea("BARNES HUT SOLVER");
  }
  _createClass(BarnesHutSolver2, [{
    key: "setOptions",
    value: function setOptions(options) {
      this.options = options;
      this.thetaInversed = 1 / this.options.theta;
      this.overlapAvoidanceFactor = 1 - Math.max(0, Math.min(1, this.options.avoidOverlap));
    }
    /**
     * This function calculates the forces the nodes apply on each other based on a gravitational model.
     * The Barnes Hut method is used to speed up this N-body simulation.
     *
     * @private
     */
  }, {
    key: "solve",
    value: function solve() {
      if (this.options.gravitationalConstant !== 0 && this.physicsBody.physicsNodeIndices.length > 0) {
        var node2;
        var nodes2 = this.body.nodes;
        var nodeIndices = this.physicsBody.physicsNodeIndices;
        var nodeCount = nodeIndices.length;
        var barnesHutTree = this._formBarnesHutTree(nodes2, nodeIndices);
        this.barnesHutTree = barnesHutTree;
        for (var i2 = 0; i2 < nodeCount; i2++) {
          node2 = nodes2[nodeIndices[i2]];
          if (node2.options.mass > 0) {
            this._getForceContributions(barnesHutTree.root, node2);
          }
        }
      }
    }
    /**
     * @param {object} parentBranch
     * @param {Node} node
     * @private
     */
  }, {
    key: "_getForceContributions",
    value: function _getForceContributions(parentBranch, node2) {
      this._getForceContribution(parentBranch.children.NW, node2);
      this._getForceContribution(parentBranch.children.NE, node2);
      this._getForceContribution(parentBranch.children.SW, node2);
      this._getForceContribution(parentBranch.children.SE, node2);
    }
    /**
     * This function traverses the barnesHutTree. It checks when it can approximate distant nodes with their center of mass.
     * If a region contains a single node, we check if it is not itself, then we apply the force.
     *
     * @param {object} parentBranch
     * @param {Node} node
     * @private
     */
  }, {
    key: "_getForceContribution",
    value: function _getForceContribution(parentBranch, node2) {
      if (parentBranch.childrenCount > 0) {
        var dx = parentBranch.centerOfMass.x - node2.x;
        var dy = parentBranch.centerOfMass.y - node2.y;
        var distance = Math.sqrt(dx * dx + dy * dy);
        if (distance * parentBranch.calcSize > this.thetaInversed) {
          this._calculateForces(distance, dx, dy, node2, parentBranch);
        } else {
          if (parentBranch.childrenCount === 4) {
            this._getForceContributions(parentBranch, node2);
          } else {
            if (parentBranch.children.data.id != node2.id) {
              this._calculateForces(distance, dx, dy, node2, parentBranch);
            }
          }
        }
      }
    }
    /**
     * Calculate the forces based on the distance.
     *
     * @param {number} distance
     * @param {number} dx
     * @param {number} dy
     * @param {Node} node
     * @param {object} parentBranch
     * @private
     */
  }, {
    key: "_calculateForces",
    value: function _calculateForces(distance, dx, dy, node2, parentBranch) {
      if (distance === 0) {
        distance = 0.1;
        dx = distance;
      }
      if (this.overlapAvoidanceFactor < 1 && node2.shape.radius) {
        distance = Math.max(0.1 + this.overlapAvoidanceFactor * node2.shape.radius, distance - node2.shape.radius);
      }
      var gravityForce = this.options.gravitationalConstant * parentBranch.mass * node2.options.mass / Math.pow(distance, 3);
      var fx = dx * gravityForce;
      var fy = dy * gravityForce;
      this.physicsBody.forces[node2.id].x += fx;
      this.physicsBody.forces[node2.id].y += fy;
    }
    /**
     * This function constructs the barnesHut tree recursively. It creates the root, splits it and starts placing the nodes.
     *
     * @param {Array.<Node>} nodes
     * @param {Array.<number>} nodeIndices
     * @returns {{root: {centerOfMass: {x: number, y: number}, mass: number, range: {minX: number, maxX: number, minY: number, maxY: number}, size: number, calcSize: number, children: {data: null}, maxWidth: number, level: number, childrenCount: number}}} BarnesHutTree
     * @private
     */
  }, {
    key: "_formBarnesHutTree",
    value: function _formBarnesHutTree(nodes2, nodeIndices) {
      var node2;
      var nodeCount = nodeIndices.length;
      var minX = nodes2[nodeIndices[0]].x;
      var minY = nodes2[nodeIndices[0]].y;
      var maxX = nodes2[nodeIndices[0]].x;
      var maxY = nodes2[nodeIndices[0]].y;
      for (var i2 = 1; i2 < nodeCount; i2++) {
        var _node = nodes2[nodeIndices[i2]];
        var x2 = _node.x;
        var y2 = _node.y;
        if (_node.options.mass > 0) {
          if (x2 < minX) {
            minX = x2;
          }
          if (x2 > maxX) {
            maxX = x2;
          }
          if (y2 < minY) {
            minY = y2;
          }
          if (y2 > maxY) {
            maxY = y2;
          }
        }
      }
      var sizeDiff = Math.abs(maxX - minX) - Math.abs(maxY - minY);
      if (sizeDiff > 0) {
        minY -= 0.5 * sizeDiff;
        maxY += 0.5 * sizeDiff;
      } else {
        minX += 0.5 * sizeDiff;
        maxX -= 0.5 * sizeDiff;
      }
      var minimumTreeSize = 1e-5;
      var rootSize = Math.max(minimumTreeSize, Math.abs(maxX - minX));
      var halfRootSize = 0.5 * rootSize;
      var centerX = 0.5 * (minX + maxX), centerY = 0.5 * (minY + maxY);
      var barnesHutTree = {
        root: {
          centerOfMass: {
            x: 0,
            y: 0
          },
          mass: 0,
          range: {
            minX: centerX - halfRootSize,
            maxX: centerX + halfRootSize,
            minY: centerY - halfRootSize,
            maxY: centerY + halfRootSize
          },
          size: rootSize,
          calcSize: 1 / rootSize,
          children: {
            data: null
          },
          maxWidth: 0,
          level: 0,
          childrenCount: 4
        }
      };
      this._splitBranch(barnesHutTree.root);
      for (var _i = 0; _i < nodeCount; _i++) {
        node2 = nodes2[nodeIndices[_i]];
        if (node2.options.mass > 0) {
          this._placeInTree(barnesHutTree.root, node2);
        }
      }
      return barnesHutTree;
    }
    /**
     * this updates the mass of a branch. this is increased by adding a node.
     *
     * @param {object} parentBranch
     * @param {Node} node
     * @private
     */
  }, {
    key: "_updateBranchMass",
    value: function _updateBranchMass(parentBranch, node2) {
      var centerOfMass = parentBranch.centerOfMass;
      var totalMass = parentBranch.mass + node2.options.mass;
      var totalMassInv = 1 / totalMass;
      centerOfMass.x = centerOfMass.x * parentBranch.mass + node2.x * node2.options.mass;
      centerOfMass.x *= totalMassInv;
      centerOfMass.y = centerOfMass.y * parentBranch.mass + node2.y * node2.options.mass;
      centerOfMass.y *= totalMassInv;
      parentBranch.mass = totalMass;
      var biggestSize = Math.max(Math.max(node2.height, node2.radius), node2.width);
      parentBranch.maxWidth = parentBranch.maxWidth < biggestSize ? biggestSize : parentBranch.maxWidth;
    }
    /**
     * determine in which branch the node will be placed.
     *
     * @param {object} parentBranch
     * @param {Node} node
     * @param {boolean} skipMassUpdate
     * @private
     */
  }, {
    key: "_placeInTree",
    value: function _placeInTree(parentBranch, node2, skipMassUpdate) {
      if (skipMassUpdate != true || skipMassUpdate === void 0) {
        this._updateBranchMass(parentBranch, node2);
      }
      var range = parentBranch.children.NW.range;
      var region;
      if (range.maxX > node2.x) {
        if (range.maxY > node2.y) {
          region = "NW";
        } else {
          region = "SW";
        }
      } else {
        if (range.maxY > node2.y) {
          region = "NE";
        } else {
          region = "SE";
        }
      }
      this._placeInRegion(parentBranch, node2, region);
    }
    /**
     * actually place the node in a region (or branch)
     *
     * @param {object} parentBranch
     * @param {Node} node
     * @param {'NW'| 'NE' | 'SW' | 'SE'} region
     * @private
     */
  }, {
    key: "_placeInRegion",
    value: function _placeInRegion(parentBranch, node2, region) {
      var children2 = parentBranch.children[region];
      switch (children2.childrenCount) {
        case 0:
          children2.children.data = node2;
          children2.childrenCount = 1;
          this._updateBranchMass(children2, node2);
          break;
        case 1:
          if (children2.children.data.x === node2.x && children2.children.data.y === node2.y) {
            node2.x += this._rng();
            node2.y += this._rng();
          } else {
            this._splitBranch(children2);
            this._placeInTree(children2, node2);
          }
          break;
        case 4:
          this._placeInTree(children2, node2);
          break;
      }
    }
    /**
     * this function splits a branch into 4 sub branches. If the branch contained a node, we place it in the subbranch
     * after the split is complete.
     *
     * @param {object} parentBranch
     * @private
     */
  }, {
    key: "_splitBranch",
    value: function _splitBranch(parentBranch) {
      var containedNode = null;
      if (parentBranch.childrenCount === 1) {
        containedNode = parentBranch.children.data;
        parentBranch.mass = 0;
        parentBranch.centerOfMass.x = 0;
        parentBranch.centerOfMass.y = 0;
      }
      parentBranch.childrenCount = 4;
      parentBranch.children.data = null;
      this._insertRegion(parentBranch, "NW");
      this._insertRegion(parentBranch, "NE");
      this._insertRegion(parentBranch, "SW");
      this._insertRegion(parentBranch, "SE");
      if (containedNode != null) {
        this._placeInTree(parentBranch, containedNode);
      }
    }
    /**
     * This function subdivides the region into four new segments.
     * Specifically, this inserts a single new segment.
     * It fills the children section of the parentBranch
     *
     * @param {object} parentBranch
     * @param {'NW'| 'NE' | 'SW' | 'SE'} region
     * @private
     */
  }, {
    key: "_insertRegion",
    value: function _insertRegion(parentBranch, region) {
      var minX, maxX, minY, maxY;
      var childSize = 0.5 * parentBranch.size;
      switch (region) {
        case "NW":
          minX = parentBranch.range.minX;
          maxX = parentBranch.range.minX + childSize;
          minY = parentBranch.range.minY;
          maxY = parentBranch.range.minY + childSize;
          break;
        case "NE":
          minX = parentBranch.range.minX + childSize;
          maxX = parentBranch.range.maxX;
          minY = parentBranch.range.minY;
          maxY = parentBranch.range.minY + childSize;
          break;
        case "SW":
          minX = parentBranch.range.minX;
          maxX = parentBranch.range.minX + childSize;
          minY = parentBranch.range.minY + childSize;
          maxY = parentBranch.range.maxY;
          break;
        case "SE":
          minX = parentBranch.range.minX + childSize;
          maxX = parentBranch.range.maxX;
          minY = parentBranch.range.minY + childSize;
          maxY = parentBranch.range.maxY;
          break;
      }
      parentBranch.children[region] = {
        centerOfMass: {
          x: 0,
          y: 0
        },
        mass: 0,
        range: {
          minX,
          maxX,
          minY,
          maxY
        },
        size: 0.5 * parentBranch.size,
        calcSize: 2 * parentBranch.calcSize,
        children: {
          data: null
        },
        maxWidth: 0,
        level: parentBranch.level + 1,
        childrenCount: 0
      };
    }
    //---------------------------  DEBUGGING BELOW  ---------------------------//
    /**
     * This function is for debugging purposed, it draws the tree.
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {string} color
     * @private
     */
  }, {
    key: "_debug",
    value: function _debug(ctx, color) {
      if (this.barnesHutTree !== void 0) {
        ctx.lineWidth = 1;
        this._drawBranch(this.barnesHutTree.root, ctx, color);
      }
    }
    /**
     * This function is for debugging purposes. It draws the branches recursively.
     *
     * @param {object} branch
     * @param {CanvasRenderingContext2D} ctx
     * @param {string} color
     * @private
     */
  }, {
    key: "_drawBranch",
    value: function _drawBranch(branch, ctx, color) {
      if (color === void 0) {
        color = "#FF0000";
      }
      if (branch.childrenCount === 4) {
        this._drawBranch(branch.children.NW, ctx);
        this._drawBranch(branch.children.NE, ctx);
        this._drawBranch(branch.children.SE, ctx);
        this._drawBranch(branch.children.SW, ctx);
      }
      ctx.strokeStyle = color;
      ctx.beginPath();
      ctx.moveTo(branch.range.minX, branch.range.minY);
      ctx.lineTo(branch.range.maxX, branch.range.minY);
      ctx.stroke();
      ctx.beginPath();
      ctx.moveTo(branch.range.maxX, branch.range.minY);
      ctx.lineTo(branch.range.maxX, branch.range.maxY);
      ctx.stroke();
      ctx.beginPath();
      ctx.moveTo(branch.range.maxX, branch.range.maxY);
      ctx.lineTo(branch.range.minX, branch.range.maxY);
      ctx.stroke();
      ctx.beginPath();
      ctx.moveTo(branch.range.minX, branch.range.maxY);
      ctx.lineTo(branch.range.minX, branch.range.minY);
      ctx.stroke();
    }
  }]);
  return BarnesHutSolver2;
}();
var RepulsionSolver = /* @__PURE__ */ function() {
  function RepulsionSolver2(body, physicsBody, options) {
    _classCallCheck(this, RepulsionSolver2);
    this._rng = Alea("REPULSION SOLVER");
    this.body = body;
    this.physicsBody = physicsBody;
    this.setOptions(options);
  }
  _createClass(RepulsionSolver2, [{
    key: "setOptions",
    value: function setOptions(options) {
      this.options = options;
    }
    /**
     * Calculate the forces the nodes apply on each other based on a repulsion field.
     * This field is linearly approximated.
     *
     * @private
     */
  }, {
    key: "solve",
    value: function solve() {
      var dx, dy, distance, fx, fy, repulsingForce, node1, node2;
      var nodes2 = this.body.nodes;
      var nodeIndices = this.physicsBody.physicsNodeIndices;
      var forces = this.physicsBody.forces;
      var nodeDistance = this.options.nodeDistance;
      var a2 = -2 / 3 / nodeDistance;
      var b2 = 4 / 3;
      for (var i2 = 0; i2 < nodeIndices.length - 1; i2++) {
        node1 = nodes2[nodeIndices[i2]];
        for (var j2 = i2 + 1; j2 < nodeIndices.length; j2++) {
          node2 = nodes2[nodeIndices[j2]];
          dx = node2.x - node1.x;
          dy = node2.y - node1.y;
          distance = Math.sqrt(dx * dx + dy * dy);
          if (distance === 0) {
            distance = 0.1 * this._rng();
            dx = distance;
          }
          if (distance < 2 * nodeDistance) {
            if (distance < 0.5 * nodeDistance) {
              repulsingForce = 1;
            } else {
              repulsingForce = a2 * distance + b2;
            }
            repulsingForce = repulsingForce / distance;
            fx = dx * repulsingForce;
            fy = dy * repulsingForce;
            forces[node1.id].x -= fx;
            forces[node1.id].y -= fy;
            forces[node2.id].x += fx;
            forces[node2.id].y += fy;
          }
        }
      }
    }
  }]);
  return RepulsionSolver2;
}();
var HierarchicalRepulsionSolver = /* @__PURE__ */ function() {
  function HierarchicalRepulsionSolver2(body, physicsBody, options) {
    _classCallCheck(this, HierarchicalRepulsionSolver2);
    this.body = body;
    this.physicsBody = physicsBody;
    this.setOptions(options);
  }
  _createClass(HierarchicalRepulsionSolver2, [{
    key: "setOptions",
    value: function setOptions(options) {
      this.options = options;
      this.overlapAvoidanceFactor = Math.max(0, Math.min(1, this.options.avoidOverlap || 0));
    }
    /**
     * Calculate the forces the nodes apply on each other based on a repulsion field.
     * This field is linearly approximated.
     *
     * @private
     */
  }, {
    key: "solve",
    value: function solve() {
      var nodes2 = this.body.nodes;
      var nodeIndices = this.physicsBody.physicsNodeIndices;
      var forces = this.physicsBody.forces;
      var nodeDistance = this.options.nodeDistance;
      for (var i2 = 0; i2 < nodeIndices.length - 1; i2++) {
        var node1 = nodes2[nodeIndices[i2]];
        for (var j2 = i2 + 1; j2 < nodeIndices.length; j2++) {
          var node2 = nodes2[nodeIndices[j2]];
          if (node1.level === node2.level) {
            var theseNodesDistance = nodeDistance + this.overlapAvoidanceFactor * ((node1.shape.radius || 0) / 2 + (node2.shape.radius || 0) / 2);
            var dx = node2.x - node1.x;
            var dy = node2.y - node1.y;
            var distance = Math.sqrt(dx * dx + dy * dy);
            var steepness = 0.05;
            var repulsingForce = void 0;
            if (distance < theseNodesDistance) {
              repulsingForce = -Math.pow(steepness * distance, 2) + Math.pow(steepness * theseNodesDistance, 2);
            } else {
              repulsingForce = 0;
            }
            if (distance !== 0) {
              repulsingForce = repulsingForce / distance;
            }
            var fx = dx * repulsingForce;
            var fy = dy * repulsingForce;
            forces[node1.id].x -= fx;
            forces[node1.id].y -= fy;
            forces[node2.id].x += fx;
            forces[node2.id].y += fy;
          }
        }
      }
    }
  }]);
  return HierarchicalRepulsionSolver2;
}();
var SpringSolver = /* @__PURE__ */ function() {
  function SpringSolver2(body, physicsBody, options) {
    _classCallCheck(this, SpringSolver2);
    this.body = body;
    this.physicsBody = physicsBody;
    this.setOptions(options);
  }
  _createClass(SpringSolver2, [{
    key: "setOptions",
    value: function setOptions(options) {
      this.options = options;
    }
    /**
     * This function calculates the springforces on the nodes, accounting for the support nodes.
     *
     * @private
     */
  }, {
    key: "solve",
    value: function solve() {
      var edgeLength, edge2;
      var edgeIndices = this.physicsBody.physicsEdgeIndices;
      var edges = this.body.edges;
      var node1, node2, node3;
      for (var i2 = 0; i2 < edgeIndices.length; i2++) {
        edge2 = edges[edgeIndices[i2]];
        if (edge2.connected === true && edge2.toId !== edge2.fromId) {
          if (this.body.nodes[edge2.toId] !== void 0 && this.body.nodes[edge2.fromId] !== void 0) {
            if (edge2.edgeType.via !== void 0) {
              edgeLength = edge2.options.length === void 0 ? this.options.springLength : edge2.options.length;
              node1 = edge2.to;
              node2 = edge2.edgeType.via;
              node3 = edge2.from;
              this._calculateSpringForce(node1, node2, 0.5 * edgeLength);
              this._calculateSpringForce(node2, node3, 0.5 * edgeLength);
            } else {
              edgeLength = edge2.options.length === void 0 ? this.options.springLength * 1.5 : edge2.options.length;
              this._calculateSpringForce(edge2.from, edge2.to, edgeLength);
            }
          }
        }
      }
    }
    /**
     * This is the code actually performing the calculation for the function above.
     *
     * @param {Node} node1
     * @param {Node} node2
     * @param {number} edgeLength
     * @private
     */
  }, {
    key: "_calculateSpringForce",
    value: function _calculateSpringForce(node1, node2, edgeLength) {
      var dx = node1.x - node2.x;
      var dy = node1.y - node2.y;
      var distance = Math.max(Math.sqrt(dx * dx + dy * dy), 0.01);
      var springForce = this.options.springConstant * (edgeLength - distance) / distance;
      var fx = dx * springForce;
      var fy = dy * springForce;
      if (this.physicsBody.forces[node1.id] !== void 0) {
        this.physicsBody.forces[node1.id].x += fx;
        this.physicsBody.forces[node1.id].y += fy;
      }
      if (this.physicsBody.forces[node2.id] !== void 0) {
        this.physicsBody.forces[node2.id].x -= fx;
        this.physicsBody.forces[node2.id].y -= fy;
      }
    }
  }]);
  return SpringSolver2;
}();
var HierarchicalSpringSolver = /* @__PURE__ */ function() {
  function HierarchicalSpringSolver2(body, physicsBody, options) {
    _classCallCheck(this, HierarchicalSpringSolver2);
    this.body = body;
    this.physicsBody = physicsBody;
    this.setOptions(options);
  }
  _createClass(HierarchicalSpringSolver2, [{
    key: "setOptions",
    value: function setOptions(options) {
      this.options = options;
    }
    /**
     * This function calculates the springforces on the nodes, accounting for the support nodes.
     *
     * @private
     */
  }, {
    key: "solve",
    value: function solve() {
      var edgeLength, edge2;
      var dx, dy, fx, fy, springForce, distance;
      var edges = this.body.edges;
      var factor = 0.5;
      var edgeIndices = this.physicsBody.physicsEdgeIndices;
      var nodeIndices = this.physicsBody.physicsNodeIndices;
      var forces = this.physicsBody.forces;
      for (var i2 = 0; i2 < nodeIndices.length; i2++) {
        var nodeId = nodeIndices[i2];
        forces[nodeId].springFx = 0;
        forces[nodeId].springFy = 0;
      }
      for (var _i = 0; _i < edgeIndices.length; _i++) {
        edge2 = edges[edgeIndices[_i]];
        if (edge2.connected === true) {
          edgeLength = edge2.options.length === void 0 ? this.options.springLength : edge2.options.length;
          dx = edge2.from.x - edge2.to.x;
          dy = edge2.from.y - edge2.to.y;
          distance = Math.sqrt(dx * dx + dy * dy);
          distance = distance === 0 ? 0.01 : distance;
          springForce = this.options.springConstant * (edgeLength - distance) / distance;
          fx = dx * springForce;
          fy = dy * springForce;
          if (edge2.to.level != edge2.from.level) {
            if (forces[edge2.toId] !== void 0) {
              forces[edge2.toId].springFx -= fx;
              forces[edge2.toId].springFy -= fy;
            }
            if (forces[edge2.fromId] !== void 0) {
              forces[edge2.fromId].springFx += fx;
              forces[edge2.fromId].springFy += fy;
            }
          } else {
            if (forces[edge2.toId] !== void 0) {
              forces[edge2.toId].x -= factor * fx;
              forces[edge2.toId].y -= factor * fy;
            }
            if (forces[edge2.fromId] !== void 0) {
              forces[edge2.fromId].x += factor * fx;
              forces[edge2.fromId].y += factor * fy;
            }
          }
        }
      }
      springForce = 1;
      var springFx, springFy;
      for (var _i2 = 0; _i2 < nodeIndices.length; _i2++) {
        var _nodeId = nodeIndices[_i2];
        springFx = Math.min(springForce, Math.max(-springForce, forces[_nodeId].springFx));
        springFy = Math.min(springForce, Math.max(-springForce, forces[_nodeId].springFy));
        forces[_nodeId].x += springFx;
        forces[_nodeId].y += springFy;
      }
      var totalFx = 0;
      var totalFy = 0;
      for (var _i3 = 0; _i3 < nodeIndices.length; _i3++) {
        var _nodeId2 = nodeIndices[_i3];
        totalFx += forces[_nodeId2].x;
        totalFy += forces[_nodeId2].y;
      }
      var correctionFx = totalFx / nodeIndices.length;
      var correctionFy = totalFy / nodeIndices.length;
      for (var _i4 = 0; _i4 < nodeIndices.length; _i4++) {
        var _nodeId3 = nodeIndices[_i4];
        forces[_nodeId3].x -= correctionFx;
        forces[_nodeId3].y -= correctionFy;
      }
    }
  }]);
  return HierarchicalSpringSolver2;
}();
var CentralGravitySolver = /* @__PURE__ */ function() {
  function CentralGravitySolver2(body, physicsBody, options) {
    _classCallCheck(this, CentralGravitySolver2);
    this.body = body;
    this.physicsBody = physicsBody;
    this.setOptions(options);
  }
  _createClass(CentralGravitySolver2, [{
    key: "setOptions",
    value: function setOptions(options) {
      this.options = options;
    }
    /**
     * Calculates forces for each node
     */
  }, {
    key: "solve",
    value: function solve() {
      var dx, dy, distance, node2;
      var nodes2 = this.body.nodes;
      var nodeIndices = this.physicsBody.physicsNodeIndices;
      var forces = this.physicsBody.forces;
      for (var i2 = 0; i2 < nodeIndices.length; i2++) {
        var nodeId = nodeIndices[i2];
        node2 = nodes2[nodeId];
        dx = -node2.x;
        dy = -node2.y;
        distance = Math.sqrt(dx * dx + dy * dy);
        this._calculateForces(distance, dx, dy, forces, node2);
      }
    }
    /**
     * Calculate the forces based on the distance.
     *
     * @param {number} distance
     * @param {number} dx
     * @param {number} dy
     * @param {Object<Node.id, vis.Node>} forces
     * @param {Node} node
     * @private
     */
  }, {
    key: "_calculateForces",
    value: function _calculateForces(distance, dx, dy, forces, node2) {
      var gravityForce = distance === 0 ? 0 : this.options.centralGravity / distance;
      forces[node2.id].x = dx * gravityForce;
      forces[node2.id].y = dy * gravityForce;
    }
  }]);
  return CentralGravitySolver2;
}();
function _createSuper$3(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$3();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = _Reflect$construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$3() {
  if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
  if (_Reflect$construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var ForceAtlas2BasedRepulsionSolver = /* @__PURE__ */ function(_BarnesHutSolver) {
  _inherits(ForceAtlas2BasedRepulsionSolver2, _BarnesHutSolver);
  var _super = _createSuper$3(ForceAtlas2BasedRepulsionSolver2);
  function ForceAtlas2BasedRepulsionSolver2(body, physicsBody, options) {
    var _this;
    _classCallCheck(this, ForceAtlas2BasedRepulsionSolver2);
    _this = _super.call(this, body, physicsBody, options);
    _this._rng = Alea("FORCE ATLAS 2 BASED REPULSION SOLVER");
    return _this;
  }
  _createClass(ForceAtlas2BasedRepulsionSolver2, [{
    key: "_calculateForces",
    value: function _calculateForces(distance, dx, dy, node2, parentBranch) {
      if (distance === 0) {
        distance = 0.1 * this._rng();
        dx = distance;
      }
      if (this.overlapAvoidanceFactor < 1 && node2.shape.radius) {
        distance = Math.max(0.1 + this.overlapAvoidanceFactor * node2.shape.radius, distance - node2.shape.radius);
      }
      var degree = node2.edges.length + 1;
      var gravityForce = this.options.gravitationalConstant * parentBranch.mass * node2.options.mass * degree / Math.pow(distance, 2);
      var fx = dx * gravityForce;
      var fy = dy * gravityForce;
      this.physicsBody.forces[node2.id].x += fx;
      this.physicsBody.forces[node2.id].y += fy;
    }
  }]);
  return ForceAtlas2BasedRepulsionSolver2;
}(BarnesHutSolver);
function _createSuper$2(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = _Reflect$construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$2() {
  if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
  if (_Reflect$construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var ForceAtlas2BasedCentralGravitySolver = /* @__PURE__ */ function(_CentralGravitySolver) {
  _inherits(ForceAtlas2BasedCentralGravitySolver2, _CentralGravitySolver);
  var _super = _createSuper$2(ForceAtlas2BasedCentralGravitySolver2);
  function ForceAtlas2BasedCentralGravitySolver2(body, physicsBody, options) {
    _classCallCheck(this, ForceAtlas2BasedCentralGravitySolver2);
    return _super.call(this, body, physicsBody, options);
  }
  _createClass(ForceAtlas2BasedCentralGravitySolver2, [{
    key: "_calculateForces",
    value: function _calculateForces(distance, dx, dy, forces, node2) {
      if (distance > 0) {
        var degree = node2.edges.length + 1;
        var gravityForce = this.options.centralGravity * degree * node2.options.mass;
        forces[node2.id].x = dx * gravityForce;
        forces[node2.id].y = dy * gravityForce;
      }
    }
  }]);
  return ForceAtlas2BasedCentralGravitySolver2;
}(CentralGravitySolver);
var PhysicsEngine = /* @__PURE__ */ function() {
  function PhysicsEngine2(body) {
    _classCallCheck(this, PhysicsEngine2);
    this.body = body;
    this.physicsBody = {
      physicsNodeIndices: [],
      physicsEdgeIndices: [],
      forces: {},
      velocities: {}
    };
    this.physicsEnabled = true;
    this.simulationInterval = 1e3 / 60;
    this.requiresTimeout = true;
    this.previousStates = {};
    this.referenceState = {};
    this.freezeCache = {};
    this.renderTimer = void 0;
    this.adaptiveTimestep = false;
    this.adaptiveTimestepEnabled = false;
    this.adaptiveCounter = 0;
    this.adaptiveInterval = 3;
    this.stabilized = false;
    this.startedStabilization = false;
    this.stabilizationIterations = 0;
    this.ready = false;
    this.options = {};
    this.defaultOptions = {
      enabled: true,
      barnesHut: {
        theta: 0.5,
        gravitationalConstant: -2e3,
        centralGravity: 0.3,
        springLength: 95,
        springConstant: 0.04,
        damping: 0.09,
        avoidOverlap: 0
      },
      forceAtlas2Based: {
        theta: 0.5,
        gravitationalConstant: -50,
        centralGravity: 0.01,
        springConstant: 0.08,
        springLength: 100,
        damping: 0.4,
        avoidOverlap: 0
      },
      repulsion: {
        centralGravity: 0.2,
        springLength: 200,
        springConstant: 0.05,
        nodeDistance: 100,
        damping: 0.09,
        avoidOverlap: 0
      },
      hierarchicalRepulsion: {
        centralGravity: 0,
        springLength: 100,
        springConstant: 0.01,
        nodeDistance: 120,
        damping: 0.09
      },
      maxVelocity: 50,
      minVelocity: 0.75,
      // px/s
      solver: "barnesHut",
      stabilization: {
        enabled: true,
        iterations: 1e3,
        // maximum number of iteration to stabilize
        updateInterval: 50,
        onlyDynamicEdges: false,
        fit: true
      },
      timestep: 0.5,
      adaptiveTimestep: true,
      wind: {
        x: 0,
        y: 0
      }
    };
    _Object$assign(this.options, this.defaultOptions);
    this.timestep = 0.5;
    this.layoutFailed = false;
    this.bindEventListeners();
  }
  _createClass(PhysicsEngine2, [{
    key: "bindEventListeners",
    value: function bindEventListeners() {
      var _this = this;
      this.body.emitter.on("initPhysics", function() {
        _this.initPhysics();
      });
      this.body.emitter.on("_layoutFailed", function() {
        _this.layoutFailed = true;
      });
      this.body.emitter.on("resetPhysics", function() {
        _this.stopSimulation();
        _this.ready = false;
      });
      this.body.emitter.on("disablePhysics", function() {
        _this.physicsEnabled = false;
        _this.stopSimulation();
      });
      this.body.emitter.on("restorePhysics", function() {
        _this.setOptions(_this.options);
        if (_this.ready === true) {
          _this.startSimulation();
        }
      });
      this.body.emitter.on("startSimulation", function() {
        if (_this.ready === true) {
          _this.startSimulation();
        }
      });
      this.body.emitter.on("stopSimulation", function() {
        _this.stopSimulation();
      });
      this.body.emitter.on("destroy", function() {
        _this.stopSimulation(false);
        _this.body.emitter.off();
      });
      this.body.emitter.on("_dataChanged", function() {
        _this.updatePhysicsData();
      });
    }
    /**
     * set the physics options
     *
     * @param {object} options
     */
  }, {
    key: "setOptions",
    value: function setOptions(options) {
      if (options !== void 0) {
        if (options === false) {
          this.options.enabled = false;
          this.physicsEnabled = false;
          this.stopSimulation();
        } else if (options === true) {
          this.options.enabled = true;
          this.physicsEnabled = true;
          this.startSimulation();
        } else {
          this.physicsEnabled = true;
          selectiveNotDeepExtend(["stabilization"], this.options, options);
          mergeOptions(this.options, options, "stabilization");
          if (options.enabled === void 0) {
            this.options.enabled = true;
          }
          if (this.options.enabled === false) {
            this.physicsEnabled = false;
            this.stopSimulation();
          }
          var wind2 = this.options.wind;
          if (wind2) {
            if (typeof wind2.x !== "number" || _Number$isNaN(wind2.x)) {
              wind2.x = 0;
            }
            if (typeof wind2.y !== "number" || _Number$isNaN(wind2.y)) {
              wind2.y = 0;
            }
          }
          this.timestep = this.options.timestep;
        }
      }
      this.init();
    }
    /**
     * configure the engine.
     */
  }, {
    key: "init",
    value: function init() {
      var options;
      if (this.options.solver === "forceAtlas2Based") {
        options = this.options.forceAtlas2Based;
        this.nodesSolver = new ForceAtlas2BasedRepulsionSolver(this.body, this.physicsBody, options);
        this.edgesSolver = new SpringSolver(this.body, this.physicsBody, options);
        this.gravitySolver = new ForceAtlas2BasedCentralGravitySolver(this.body, this.physicsBody, options);
      } else if (this.options.solver === "repulsion") {
        options = this.options.repulsion;
        this.nodesSolver = new RepulsionSolver(this.body, this.physicsBody, options);
        this.edgesSolver = new SpringSolver(this.body, this.physicsBody, options);
        this.gravitySolver = new CentralGravitySolver(this.body, this.physicsBody, options);
      } else if (this.options.solver === "hierarchicalRepulsion") {
        options = this.options.hierarchicalRepulsion;
        this.nodesSolver = new HierarchicalRepulsionSolver(this.body, this.physicsBody, options);
        this.edgesSolver = new HierarchicalSpringSolver(this.body, this.physicsBody, options);
        this.gravitySolver = new CentralGravitySolver(this.body, this.physicsBody, options);
      } else {
        options = this.options.barnesHut;
        this.nodesSolver = new BarnesHutSolver(this.body, this.physicsBody, options);
        this.edgesSolver = new SpringSolver(this.body, this.physicsBody, options);
        this.gravitySolver = new CentralGravitySolver(this.body, this.physicsBody, options);
      }
      this.modelOptions = options;
    }
    /**
     * initialize the engine
     */
  }, {
    key: "initPhysics",
    value: function initPhysics() {
      if (this.physicsEnabled === true && this.options.enabled === true) {
        if (this.options.stabilization.enabled === true) {
          this.stabilize();
        } else {
          this.stabilized = false;
          this.ready = true;
          this.body.emitter.emit("fit", {}, this.layoutFailed);
          this.startSimulation();
        }
      } else {
        this.ready = true;
        this.body.emitter.emit("fit");
      }
    }
    /**
     * Start the simulation
     */
  }, {
    key: "startSimulation",
    value: function startSimulation() {
      if (this.physicsEnabled === true && this.options.enabled === true) {
        this.stabilized = false;
        this.adaptiveTimestep = false;
        this.body.emitter.emit("_resizeNodes");
        if (this.viewFunction === void 0) {
          var _context;
          this.viewFunction = _bindInstanceProperty$1(_context = this.simulationStep).call(_context, this);
          this.body.emitter.on("initRedraw", this.viewFunction);
          this.body.emitter.emit("_startRendering");
        }
      } else {
        this.body.emitter.emit("_redraw");
      }
    }
    /**
     * Stop the simulation, force stabilization.
     *
     * @param {boolean} [emit=true]
     */
  }, {
    key: "stopSimulation",
    value: function stopSimulation() {
      var emit2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
      this.stabilized = true;
      if (emit2 === true) {
        this._emitStabilized();
      }
      if (this.viewFunction !== void 0) {
        this.body.emitter.off("initRedraw", this.viewFunction);
        this.viewFunction = void 0;
        if (emit2 === true) {
          this.body.emitter.emit("_stopRendering");
        }
      }
    }
    /**
     * The viewFunction inserts this step into each render loop. It calls the physics tick and handles the cleanup at stabilized.
     *
     */
  }, {
    key: "simulationStep",
    value: function simulationStep() {
      var startTime = _Date$now();
      this.physicsTick();
      var physicsTime = _Date$now() - startTime;
      if ((physicsTime < 0.4 * this.simulationInterval || this.runDoubleSpeed === true) && this.stabilized === false) {
        this.physicsTick();
        this.runDoubleSpeed = true;
      }
      if (this.stabilized === true) {
        this.stopSimulation();
      }
    }
    /**
     * trigger the stabilized event.
     *
     * @param {number} [amountOfIterations=this.stabilizationIterations]
     * @private
     */
  }, {
    key: "_emitStabilized",
    value: function _emitStabilized() {
      var _this2 = this;
      var amountOfIterations = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.stabilizationIterations;
      if (this.stabilizationIterations > 1 || this.startedStabilization === true) {
        _setTimeout(function() {
          _this2.body.emitter.emit("stabilized", {
            iterations: amountOfIterations
          });
          _this2.startedStabilization = false;
          _this2.stabilizationIterations = 0;
        }, 0);
      }
    }
    /**
     * Calculate the forces for one physics iteration and move the nodes.
     *
     * @private
     */
  }, {
    key: "physicsStep",
    value: function physicsStep() {
      this.gravitySolver.solve();
      this.nodesSolver.solve();
      this.edgesSolver.solve();
      this.moveNodes();
    }
    /**
     * Make dynamic adjustments to the timestep, based on current state.
     *
     * Helper function for physicsTick().
     *
     * @private
     */
  }, {
    key: "adjustTimeStep",
    value: function adjustTimeStep() {
      var factor = 1.2;
      if (this._evaluateStepQuality() === true) {
        this.timestep = factor * this.timestep;
      } else {
        if (this.timestep / factor < this.options.timestep) {
          this.timestep = this.options.timestep;
        } else {
          this.adaptiveCounter = -1;
          this.timestep = Math.max(this.options.timestep, this.timestep / factor);
        }
      }
    }
    /**
     * A single simulation step (or 'tick') in the physics simulation
     *
     * @private
     */
  }, {
    key: "physicsTick",
    value: function physicsTick() {
      this._startStabilizing();
      if (this.stabilized === true) return;
      if (this.adaptiveTimestep === true && this.adaptiveTimestepEnabled === true) {
        var doAdaptive = this.adaptiveCounter % this.adaptiveInterval === 0;
        if (doAdaptive) {
          this.timestep = 2 * this.timestep;
          this.physicsStep();
          this.revert();
          this.timestep = 0.5 * this.timestep;
          this.physicsStep();
          this.physicsStep();
          this.adjustTimeStep();
        } else {
          this.physicsStep();
        }
        this.adaptiveCounter += 1;
      } else {
        this.timestep = this.options.timestep;
        this.physicsStep();
      }
      if (this.stabilized === true) this.revert();
      this.stabilizationIterations++;
    }
    /**
     * Nodes and edges can have the physics toggles on or off. A collection of indices is created here so we can skip the check all the time.
     *
     * @private
     */
  }, {
    key: "updatePhysicsData",
    value: function updatePhysicsData() {
      this.physicsBody.forces = {};
      this.physicsBody.physicsNodeIndices = [];
      this.physicsBody.physicsEdgeIndices = [];
      var nodes2 = this.body.nodes;
      var edges = this.body.edges;
      for (var nodeId in nodes2) {
        if (Object.prototype.hasOwnProperty.call(nodes2, nodeId)) {
          if (nodes2[nodeId].options.physics === true) {
            this.physicsBody.physicsNodeIndices.push(nodes2[nodeId].id);
          }
        }
      }
      for (var edgeId in edges) {
        if (Object.prototype.hasOwnProperty.call(edges, edgeId)) {
          if (edges[edgeId].options.physics === true) {
            this.physicsBody.physicsEdgeIndices.push(edges[edgeId].id);
          }
        }
      }
      for (var i2 = 0; i2 < this.physicsBody.physicsNodeIndices.length; i2++) {
        var _nodeId = this.physicsBody.physicsNodeIndices[i2];
        this.physicsBody.forces[_nodeId] = {
          x: 0,
          y: 0
        };
        if (this.physicsBody.velocities[_nodeId] === void 0) {
          this.physicsBody.velocities[_nodeId] = {
            x: 0,
            y: 0
          };
        }
      }
      for (var _nodeId2 in this.physicsBody.velocities) {
        if (nodes2[_nodeId2] === void 0) {
          delete this.physicsBody.velocities[_nodeId2];
        }
      }
    }
    /**
     * Revert the simulation one step. This is done so after stabilization, every new start of the simulation will also say stabilized.
     */
  }, {
    key: "revert",
    value: function revert() {
      var nodeIds = _Object$keys(this.previousStates);
      var nodes2 = this.body.nodes;
      var velocities = this.physicsBody.velocities;
      this.referenceState = {};
      for (var i2 = 0; i2 < nodeIds.length; i2++) {
        var nodeId = nodeIds[i2];
        if (nodes2[nodeId] !== void 0) {
          if (nodes2[nodeId].options.physics === true) {
            this.referenceState[nodeId] = {
              positions: {
                x: nodes2[nodeId].x,
                y: nodes2[nodeId].y
              }
            };
            velocities[nodeId].x = this.previousStates[nodeId].vx;
            velocities[nodeId].y = this.previousStates[nodeId].vy;
            nodes2[nodeId].x = this.previousStates[nodeId].x;
            nodes2[nodeId].y = this.previousStates[nodeId].y;
          }
        } else {
          delete this.previousStates[nodeId];
        }
      }
    }
    /**
     * This compares the reference state to the current state
     *
     * @returns {boolean}
     * @private
     */
  }, {
    key: "_evaluateStepQuality",
    value: function _evaluateStepQuality() {
      var dx, dy, dpos;
      var nodes2 = this.body.nodes;
      var reference2 = this.referenceState;
      var posThreshold = 0.3;
      for (var nodeId in this.referenceState) {
        if (Object.prototype.hasOwnProperty.call(this.referenceState, nodeId) && nodes2[nodeId] !== void 0) {
          dx = nodes2[nodeId].x - reference2[nodeId].positions.x;
          dy = nodes2[nodeId].y - reference2[nodeId].positions.y;
          dpos = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
          if (dpos > posThreshold) {
            return false;
          }
        }
      }
      return true;
    }
    /**
     * move the nodes one timestep and check if they are stabilized
     */
  }, {
    key: "moveNodes",
    value: function moveNodes() {
      var nodeIndices = this.physicsBody.physicsNodeIndices;
      var maxNodeVelocity = 0;
      var averageNodeVelocity = 0;
      var velocityAdaptiveThreshold = 5;
      for (var i2 = 0; i2 < nodeIndices.length; i2++) {
        var nodeId = nodeIndices[i2];
        var nodeVelocity = this._performStep(nodeId);
        maxNodeVelocity = Math.max(maxNodeVelocity, nodeVelocity);
        averageNodeVelocity += nodeVelocity;
      }
      this.adaptiveTimestepEnabled = averageNodeVelocity / nodeIndices.length < velocityAdaptiveThreshold;
      this.stabilized = maxNodeVelocity < this.options.minVelocity;
    }
    /**
     * Calculate new velocity for a coordinate direction
     *
     * @param {number} v  velocity for current coordinate
     * @param {number} f  regular force for current coordinate
     * @param {number} m  mass of current node
     * @returns {number} new velocity for current coordinate
     * @private
     */
  }, {
    key: "calculateComponentVelocity",
    value: function calculateComponentVelocity(v2, f2, m2) {
      var df = this.modelOptions.damping * v2;
      var a2 = (f2 - df) / m2;
      v2 += a2 * this.timestep;
      var maxV = this.options.maxVelocity || 1e9;
      if (Math.abs(v2) > maxV) {
        v2 = v2 > 0 ? maxV : -maxV;
      }
      return v2;
    }
    /**
     * Perform the actual step
     *
     * @param {Node.id} nodeId
     * @returns {number} the new velocity of given node
     * @private
     */
  }, {
    key: "_performStep",
    value: function _performStep(nodeId) {
      var node2 = this.body.nodes[nodeId];
      var force = this.physicsBody.forces[nodeId];
      if (this.options.wind) {
        force.x += this.options.wind.x;
        force.y += this.options.wind.y;
      }
      var velocity = this.physicsBody.velocities[nodeId];
      this.previousStates[nodeId] = {
        x: node2.x,
        y: node2.y,
        vx: velocity.x,
        vy: velocity.y
      };
      if (node2.options.fixed.x === false) {
        velocity.x = this.calculateComponentVelocity(velocity.x, force.x, node2.options.mass);
        node2.x += velocity.x * this.timestep;
      } else {
        force.x = 0;
        velocity.x = 0;
      }
      if (node2.options.fixed.y === false) {
        velocity.y = this.calculateComponentVelocity(velocity.y, force.y, node2.options.mass);
        node2.y += velocity.y * this.timestep;
      } else {
        force.y = 0;
        velocity.y = 0;
      }
      var totalVelocity = Math.sqrt(Math.pow(velocity.x, 2) + Math.pow(velocity.y, 2));
      return totalVelocity;
    }
    /**
     * When initializing and stabilizing, we can freeze nodes with a predefined position.
     * This greatly speeds up stabilization because only the supportnodes for the smoothCurves have to settle.
     *
     * @private
     */
  }, {
    key: "_freezeNodes",
    value: function _freezeNodes() {
      var nodes2 = this.body.nodes;
      for (var id2 in nodes2) {
        if (Object.prototype.hasOwnProperty.call(nodes2, id2)) {
          if (nodes2[id2].x && nodes2[id2].y) {
            var fixed = nodes2[id2].options.fixed;
            this.freezeCache[id2] = {
              x: fixed.x,
              y: fixed.y
            };
            fixed.x = true;
            fixed.y = true;
          }
        }
      }
    }
    /**
     * Unfreezes the nodes that have been frozen by _freezeDefinedNodes.
     *
     * @private
     */
  }, {
    key: "_restoreFrozenNodes",
    value: function _restoreFrozenNodes() {
      var nodes2 = this.body.nodes;
      for (var id2 in nodes2) {
        if (Object.prototype.hasOwnProperty.call(nodes2, id2)) {
          if (this.freezeCache[id2] !== void 0) {
            nodes2[id2].options.fixed.x = this.freezeCache[id2].x;
            nodes2[id2].options.fixed.y = this.freezeCache[id2].y;
          }
        }
      }
      this.freezeCache = {};
    }
    /**
     * Find a stable position for all nodes
     *
     * @param {number} [iterations=this.options.stabilization.iterations]
     */
  }, {
    key: "stabilize",
    value: function stabilize() {
      var _this3 = this;
      var iterations = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.options.stabilization.iterations;
      if (typeof iterations !== "number") {
        iterations = this.options.stabilization.iterations;
        console.error("The stabilize method needs a numeric amount of iterations. Switching to default: ", iterations);
      }
      if (this.physicsBody.physicsNodeIndices.length === 0) {
        this.ready = true;
        return;
      }
      this.adaptiveTimestep = this.options.adaptiveTimestep;
      this.body.emitter.emit("_resizeNodes");
      this.stopSimulation();
      this.stabilized = false;
      this.body.emitter.emit("_blockRedraw");
      this.targetIterations = iterations;
      if (this.options.stabilization.onlyDynamicEdges === true) {
        this._freezeNodes();
      }
      this.stabilizationIterations = 0;
      _setTimeout(function() {
        return _this3._stabilizationBatch();
      }, 0);
    }
    /**
     * If not already stabilizing, start it and emit a start event.
     *
     * @returns {boolean} true if stabilization started with this call
     * @private
     */
  }, {
    key: "_startStabilizing",
    value: function _startStabilizing() {
      if (this.startedStabilization === true) return false;
      this.body.emitter.emit("startStabilizing");
      this.startedStabilization = true;
      return true;
    }
    /**
     * One batch of stabilization
     *
     * @private
     */
  }, {
    key: "_stabilizationBatch",
    value: function _stabilizationBatch() {
      var _this4 = this;
      var running = function running2() {
        return _this4.stabilized === false && _this4.stabilizationIterations < _this4.targetIterations;
      };
      var sendProgress = function sendProgress2() {
        _this4.body.emitter.emit("stabilizationProgress", {
          iterations: _this4.stabilizationIterations,
          total: _this4.targetIterations
        });
      };
      if (this._startStabilizing()) {
        sendProgress();
      }
      var count = 0;
      while (running() && count < this.options.stabilization.updateInterval) {
        this.physicsTick();
        count++;
      }
      sendProgress();
      if (running()) {
        var _context2;
        _setTimeout(_bindInstanceProperty$1(_context2 = this._stabilizationBatch).call(_context2, this), 0);
      } else {
        this._finalizeStabilization();
      }
    }
    /**
     * Wrap up the stabilization, fit and emit the events.
     *
     * @private
     */
  }, {
    key: "_finalizeStabilization",
    value: function _finalizeStabilization() {
      this.body.emitter.emit("_allowRedraw");
      if (this.options.stabilization.fit === true) {
        this.body.emitter.emit("fit");
      }
      if (this.options.stabilization.onlyDynamicEdges === true) {
        this._restoreFrozenNodes();
      }
      this.body.emitter.emit("stabilizationIterationsDone");
      this.body.emitter.emit("_requestRedraw");
      if (this.stabilized === true) {
        this._emitStabilized();
      } else {
        this.startSimulation();
      }
      this.ready = true;
    }
    //---------------------------  DEBUGGING BELOW  ---------------------------//
    /**
     * Debug function that display arrows for the forces currently active in the network.
     *
     * Use this when debugging only.
     *
     * @param {CanvasRenderingContext2D} ctx
     * @private
     */
  }, {
    key: "_drawForces",
    value: function _drawForces(ctx) {
      for (var i2 = 0; i2 < this.physicsBody.physicsNodeIndices.length; i2++) {
        var index2 = this.physicsBody.physicsNodeIndices[i2];
        var node2 = this.body.nodes[index2];
        var force = this.physicsBody.forces[index2];
        var factor = 20;
        var colorFactor = 0.03;
        var forceSize = Math.sqrt(Math.pow(force.x, 2) + Math.pow(force.x, 2));
        var size = Math.min(Math.max(5, forceSize), 15);
        var arrowSize = 3 * size;
        var color = HSVToHex((180 - Math.min(1, Math.max(0, colorFactor * forceSize)) * 180) / 360, 1, 1);
        var point = {
          x: node2.x + factor * force.x,
          y: node2.y + factor * force.y
        };
        ctx.lineWidth = size;
        ctx.strokeStyle = color;
        ctx.beginPath();
        ctx.moveTo(node2.x, node2.y);
        ctx.lineTo(point.x, point.y);
        ctx.stroke();
        var angle = Math.atan2(force.y, force.x);
        ctx.fillStyle = color;
        EndPoints.draw(ctx, {
          type: "arrow",
          point,
          angle,
          length: arrowSize
        });
        _fillInstanceProperty(ctx).call(ctx);
      }
    }
  }]);
  return PhysicsEngine2;
}();
let getRandomValues;
const rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}
const byteToHex = [];
for (let i2 = 0; i2 < 256; ++i2) {
  byteToHex.push((i2 + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset2 = 0) {
  return byteToHex[arr[offset2 + 0]] + byteToHex[arr[offset2 + 1]] + byteToHex[arr[offset2 + 2]] + byteToHex[arr[offset2 + 3]] + "-" + byteToHex[arr[offset2 + 4]] + byteToHex[arr[offset2 + 5]] + "-" + byteToHex[arr[offset2 + 6]] + byteToHex[arr[offset2 + 7]] + "-" + byteToHex[arr[offset2 + 8]] + byteToHex[arr[offset2 + 9]] + "-" + byteToHex[arr[offset2 + 10]] + byteToHex[arr[offset2 + 11]] + byteToHex[arr[offset2 + 12]] + byteToHex[arr[offset2 + 13]] + byteToHex[arr[offset2 + 14]] + byteToHex[arr[offset2 + 15]];
}
const randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native = {
  randomUUID
};
function v4(options, buf, offset2) {
  if (native.randomUUID && !buf && !options) {
    return native.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  return unsafeStringify(rnds);
}
var NetworkUtil = /* @__PURE__ */ function() {
  function NetworkUtil2() {
    _classCallCheck(this, NetworkUtil2);
  }
  _createClass(NetworkUtil2, null, [{
    key: "getRange",
    value: function getRange(allNodes) {
      var specificNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
      var minY = 1e9, maxY = -1e9, minX = 1e9, maxX = -1e9, node2;
      if (specificNodes.length > 0) {
        for (var i2 = 0; i2 < specificNodes.length; i2++) {
          node2 = allNodes[specificNodes[i2]];
          if (minX > node2.shape.boundingBox.left) {
            minX = node2.shape.boundingBox.left;
          }
          if (maxX < node2.shape.boundingBox.right) {
            maxX = node2.shape.boundingBox.right;
          }
          if (minY > node2.shape.boundingBox.top) {
            minY = node2.shape.boundingBox.top;
          }
          if (maxY < node2.shape.boundingBox.bottom) {
            maxY = node2.shape.boundingBox.bottom;
          }
        }
      }
      if (minX === 1e9 && maxX === -1e9 && minY === 1e9 && maxY === -1e9) {
        minY = 0, maxY = 0, minX = 0, maxX = 0;
      }
      return {
        minX,
        maxX,
        minY,
        maxY
      };
    }
    /**
     * Find the center position of the network
     *
     * @param {Array.<Node>} allNodes
     * @param {Array.<Node>} [specificNodes=[]]
     * @returns {{minX: number, maxX: number, minY: number, maxY: number}}
     * @static
     */
  }, {
    key: "getRangeCore",
    value: function getRangeCore(allNodes) {
      var specificNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
      var minY = 1e9, maxY = -1e9, minX = 1e9, maxX = -1e9, node2;
      if (specificNodes.length > 0) {
        for (var i2 = 0; i2 < specificNodes.length; i2++) {
          node2 = allNodes[specificNodes[i2]];
          if (minX > node2.x) {
            minX = node2.x;
          }
          if (maxX < node2.x) {
            maxX = node2.x;
          }
          if (minY > node2.y) {
            minY = node2.y;
          }
          if (maxY < node2.y) {
            maxY = node2.y;
          }
        }
      }
      if (minX === 1e9 && maxX === -1e9 && minY === 1e9 && maxY === -1e9) {
        minY = 0, maxY = 0, minX = 0, maxX = 0;
      }
      return {
        minX,
        maxX,
        minY,
        maxY
      };
    }
    /**
     * @param {object} range = {minX: minX, maxX: maxX, minY: minY, maxY: maxY};
     * @returns {{x: number, y: number}}
     * @static
     */
  }, {
    key: "findCenter",
    value: function findCenter(range) {
      return {
        x: 0.5 * (range.maxX + range.minX),
        y: 0.5 * (range.maxY + range.minY)
      };
    }
    /**
     * This returns a clone of the options or options of the edge or node to be used for construction of new edges or check functions for new nodes.
     *
     * @param {vis.Item} item
     * @param {'node'|undefined} type
     * @returns {{}}
     * @static
     */
  }, {
    key: "cloneOptions",
    value: function cloneOptions(item, type) {
      var clonedOptions = {};
      if (type === void 0 || type === "node") {
        deepExtend(clonedOptions, item.options, true);
        clonedOptions.x = item.x;
        clonedOptions.y = item.y;
        clonedOptions.amountOfConnections = item.edges.length;
      } else {
        deepExtend(clonedOptions, item.options, true);
      }
      return clonedOptions;
    }
  }]);
  return NetworkUtil2;
}();
function _createSuper$1(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$1();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = _Reflect$construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$1() {
  if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
  if (_Reflect$construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var Cluster = /* @__PURE__ */ function(_Node) {
  _inherits(Cluster2, _Node);
  var _super = _createSuper$1(Cluster2);
  function Cluster2(options, body, imagelist, grouplist, globalOptions, defaultOptions) {
    var _this;
    _classCallCheck(this, Cluster2);
    _this = _super.call(this, options, body, imagelist, grouplist, globalOptions, defaultOptions);
    _this.isCluster = true;
    _this.containedNodes = {};
    _this.containedEdges = {};
    return _this;
  }
  _createClass(Cluster2, [{
    key: "_openChildCluster",
    value: function _openChildCluster(childClusterId) {
      var _this2 = this;
      var childCluster = this.body.nodes[childClusterId];
      if (this.containedNodes[childClusterId] === void 0) {
        throw new Error("node with id: " + childClusterId + " not in current cluster");
      }
      if (!childCluster.isCluster) {
        throw new Error("node with id: " + childClusterId + " is not a cluster");
      }
      delete this.containedNodes[childClusterId];
      forEach$1(childCluster.edges, function(edge2) {
        delete _this2.containedEdges[edge2.id];
      });
      forEach$1(childCluster.containedNodes, function(node2, nodeId) {
        _this2.containedNodes[nodeId] = node2;
      });
      childCluster.containedNodes = {};
      forEach$1(childCluster.containedEdges, function(edge2, edgeId) {
        _this2.containedEdges[edgeId] = edge2;
      });
      childCluster.containedEdges = {};
      forEach$1(childCluster.edges, function(clusterEdge) {
        forEach$1(_this2.edges, function(parentClusterEdge) {
          var _context, _context2;
          var index2 = _indexOfInstanceProperty(_context = parentClusterEdge.clusteringEdgeReplacingIds).call(_context, clusterEdge.id);
          if (index2 === -1) return;
          forEach$1(clusterEdge.clusteringEdgeReplacingIds, function(srcId) {
            parentClusterEdge.clusteringEdgeReplacingIds.push(srcId);
            _this2.body.edges[srcId].edgeReplacedById = parentClusterEdge.id;
          });
          _spliceInstanceProperty(_context2 = parentClusterEdge.clusteringEdgeReplacingIds).call(_context2, index2, 1);
        });
      });
      childCluster.edges = [];
    }
  }]);
  return Cluster2;
}(Node$1);
var ClusterEngine = /* @__PURE__ */ function() {
  function ClusterEngine2(body) {
    var _this = this;
    _classCallCheck(this, ClusterEngine2);
    this.body = body;
    this.clusteredNodes = {};
    this.clusteredEdges = {};
    this.options = {};
    this.defaultOptions = {};
    _Object$assign(this.options, this.defaultOptions);
    this.body.emitter.on("_resetData", function() {
      _this.clusteredNodes = {};
      _this.clusteredEdges = {};
    });
  }
  _createClass(ClusterEngine2, [{
    key: "clusterByHubsize",
    value: function clusterByHubsize(hubsize, options) {
      if (hubsize === void 0) {
        hubsize = this._getHubSize();
      } else if (_typeof(hubsize) === "object") {
        options = this._checkOptions(hubsize);
        hubsize = this._getHubSize();
      }
      var nodesToCluster = [];
      for (var i2 = 0; i2 < this.body.nodeIndices.length; i2++) {
        var node2 = this.body.nodes[this.body.nodeIndices[i2]];
        if (node2.edges.length >= hubsize) {
          nodesToCluster.push(node2.id);
        }
      }
      for (var _i = 0; _i < nodesToCluster.length; _i++) {
        this.clusterByConnection(nodesToCluster[_i], options, true);
      }
      this.body.emitter.emit("_dataChanged");
    }
    /**
     * loop over all nodes, check if they adhere to the condition and cluster if needed.
     *
     * @param {object} options
     * @param {boolean} [refreshData=true]
     */
  }, {
    key: "cluster",
    value: function cluster() {
      var _this2 = this;
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var refreshData = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      if (options.joinCondition === void 0) {
        throw new Error("Cannot call clusterByNodeData without a joinCondition function in the options.");
      }
      options = this._checkOptions(options);
      var childNodesObj = {};
      var childEdgesObj = {};
      forEach$1(this.body.nodes, function(node2, nodeId) {
        if (node2.options && options.joinCondition(node2.options) === true) {
          childNodesObj[nodeId] = node2;
          forEach$1(node2.edges, function(edge2) {
            if (_this2.clusteredEdges[edge2.id] === void 0) {
              childEdgesObj[edge2.id] = edge2;
            }
          });
        }
      });
      this._cluster(childNodesObj, childEdgesObj, options, refreshData);
    }
    /**
     * Cluster all nodes in the network that have only X edges
     *
     * @param {number} edgeCount
     * @param {object} options
     * @param {boolean} [refreshData=true]
     */
  }, {
    key: "clusterByEdgeCount",
    value: function clusterByEdgeCount(edgeCount, options) {
      var _this3 = this;
      var refreshData = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      options = this._checkOptions(options);
      var clusters = [];
      var usedNodes = {};
      var edge2, edges, relevantEdgeCount;
      var _loop = function _loop2() {
        var childNodesObj = {};
        var childEdgesObj = {};
        var nodeId = _this3.body.nodeIndices[i2];
        var node2 = _this3.body.nodes[nodeId];
        if (usedNodes[nodeId] === void 0) {
          relevantEdgeCount = 0;
          edges = [];
          for (var j2 = 0; j2 < node2.edges.length; j2++) {
            edge2 = node2.edges[j2];
            if (_this3.clusteredEdges[edge2.id] === void 0) {
              if (edge2.toId !== edge2.fromId) {
                relevantEdgeCount++;
              }
              edges.push(edge2);
            }
          }
          if (relevantEdgeCount === edgeCount) {
            var checkJoinCondition = function checkJoinCondition2(node3) {
              if (options.joinCondition === void 0 || options.joinCondition === null) {
                return true;
              }
              var clonedOptions = NetworkUtil.cloneOptions(node3);
              return options.joinCondition(clonedOptions);
            };
            var gatheringSuccessful = true;
            for (var _j = 0; _j < edges.length; _j++) {
              edge2 = edges[_j];
              var childNodeId = _this3._getConnectedId(edge2, nodeId);
              if (checkJoinCondition(node2)) {
                childEdgesObj[edge2.id] = edge2;
                childNodesObj[nodeId] = node2;
                childNodesObj[childNodeId] = _this3.body.nodes[childNodeId];
                usedNodes[nodeId] = true;
              } else {
                gatheringSuccessful = false;
                break;
              }
            }
            if (_Object$keys(childNodesObj).length > 0 && _Object$keys(childEdgesObj).length > 0 && gatheringSuccessful === true) {
              var findClusterData = function findClusterData2() {
                for (var n2 = 0; n2 < clusters.length; ++n2) {
                  for (var m3 in childNodesObj) {
                    if (clusters[n2].nodes[m3] !== void 0) {
                      return clusters[n2];
                    }
                  }
                }
                return void 0;
              };
              var foundCluster = findClusterData();
              if (foundCluster !== void 0) {
                for (var m2 in childNodesObj) {
                  if (foundCluster.nodes[m2] === void 0) {
                    foundCluster.nodes[m2] = childNodesObj[m2];
                  }
                }
                for (var _m in childEdgesObj) {
                  if (foundCluster.edges[_m] === void 0) {
                    foundCluster.edges[_m] = childEdgesObj[_m];
                  }
                }
              } else {
                clusters.push({
                  nodes: childNodesObj,
                  edges: childEdgesObj
                });
              }
            }
          }
        }
      };
      for (var i2 = 0; i2 < this.body.nodeIndices.length; i2++) {
        _loop();
      }
      for (var _i2 = 0; _i2 < clusters.length; _i2++) {
        this._cluster(clusters[_i2].nodes, clusters[_i2].edges, options, false);
      }
      if (refreshData === true) {
        this.body.emitter.emit("_dataChanged");
      }
    }
    /**
     * Cluster all nodes in the network that have only 1 edge
     *
     * @param {object} options
     * @param {boolean} [refreshData=true]
     */
  }, {
    key: "clusterOutliers",
    value: function clusterOutliers(options) {
      var refreshData = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      this.clusterByEdgeCount(1, options, refreshData);
    }
    /**
     * Cluster all nodes in the network that have only 2 edge
     *
     * @param {object} options
     * @param {boolean} [refreshData=true]
     */
  }, {
    key: "clusterBridges",
    value: function clusterBridges(options) {
      var refreshData = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      this.clusterByEdgeCount(2, options, refreshData);
    }
    /**
     * suck all connected nodes of a node into the node.
     *
     * @param {Node.id} nodeId
     * @param {object} options
     * @param {boolean} [refreshData=true]
     */
  }, {
    key: "clusterByConnection",
    value: function clusterByConnection(nodeId, options) {
      var _context;
      var refreshData = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      if (nodeId === void 0) {
        throw new Error("No nodeId supplied to clusterByConnection!");
      }
      if (this.body.nodes[nodeId] === void 0) {
        throw new Error("The nodeId given to clusterByConnection does not exist!");
      }
      var node2 = this.body.nodes[nodeId];
      options = this._checkOptions(options, node2);
      if (options.clusterNodeProperties.x === void 0) {
        options.clusterNodeProperties.x = node2.x;
      }
      if (options.clusterNodeProperties.y === void 0) {
        options.clusterNodeProperties.y = node2.y;
      }
      if (options.clusterNodeProperties.fixed === void 0) {
        options.clusterNodeProperties.fixed = {};
        options.clusterNodeProperties.fixed.x = node2.options.fixed.x;
        options.clusterNodeProperties.fixed.y = node2.options.fixed.y;
      }
      var childNodesObj = {};
      var childEdgesObj = {};
      var parentNodeId = node2.id;
      var parentClonedOptions = NetworkUtil.cloneOptions(node2);
      childNodesObj[parentNodeId] = node2;
      for (var i2 = 0; i2 < node2.edges.length; i2++) {
        var edge2 = node2.edges[i2];
        if (this.clusteredEdges[edge2.id] === void 0) {
          var childNodeId = this._getConnectedId(edge2, parentNodeId);
          if (this.clusteredNodes[childNodeId] === void 0) {
            if (childNodeId !== parentNodeId) {
              if (options.joinCondition === void 0) {
                childEdgesObj[edge2.id] = edge2;
                childNodesObj[childNodeId] = this.body.nodes[childNodeId];
              } else {
                var childClonedOptions = NetworkUtil.cloneOptions(this.body.nodes[childNodeId]);
                if (options.joinCondition(parentClonedOptions, childClonedOptions) === true) {
                  childEdgesObj[edge2.id] = edge2;
                  childNodesObj[childNodeId] = this.body.nodes[childNodeId];
                }
              }
            } else {
              childEdgesObj[edge2.id] = edge2;
            }
          }
        }
      }
      var childNodeIDs = _mapInstanceProperty(_context = _Object$keys(childNodesObj)).call(_context, function(childNode2) {
        return childNodesObj[childNode2].id;
      });
      for (var childNodeKey in childNodesObj) {
        if (!Object.prototype.hasOwnProperty.call(childNodesObj, childNodeKey)) continue;
        var childNode = childNodesObj[childNodeKey];
        for (var y2 = 0; y2 < childNode.edges.length; y2++) {
          var childEdge = childNode.edges[y2];
          if (_indexOfInstanceProperty(childNodeIDs).call(childNodeIDs, this._getConnectedId(childEdge, childNode.id)) > -1) {
            childEdgesObj[childEdge.id] = childEdge;
          }
        }
      }
      this._cluster(childNodesObj, childEdgesObj, options, refreshData);
    }
    /**
     * This function creates the edges that will be attached to the cluster
     * It looks for edges that are connected to the nodes from the "outside' of the cluster.
     *
     * @param {{Node.id: vis.Node}} childNodesObj
     * @param {{vis.Edge.id: vis.Edge}} childEdgesObj
     * @param {object} clusterNodeProperties
     * @param {object} clusterEdgeProperties
     * @private
     */
  }, {
    key: "_createClusterEdges",
    value: function _createClusterEdges(childNodesObj, childEdgesObj, clusterNodeProperties, clusterEdgeProperties) {
      var edge2, childNodeId, childNode, toId, fromId, otherNodeId;
      var childKeys = _Object$keys(childNodesObj);
      var createEdges = [];
      for (var i2 = 0; i2 < childKeys.length; i2++) {
        childNodeId = childKeys[i2];
        childNode = childNodesObj[childNodeId];
        for (var j2 = 0; j2 < childNode.edges.length; j2++) {
          edge2 = childNode.edges[j2];
          if (this.clusteredEdges[edge2.id] === void 0) {
            if (edge2.toId == edge2.fromId) {
              childEdgesObj[edge2.id] = edge2;
            } else {
              if (edge2.toId == childNodeId) {
                toId = clusterNodeProperties.id;
                fromId = edge2.fromId;
                otherNodeId = fromId;
              } else {
                toId = edge2.toId;
                fromId = clusterNodeProperties.id;
                otherNodeId = toId;
              }
            }
            if (childNodesObj[otherNodeId] === void 0) {
              createEdges.push({
                edge: edge2,
                fromId,
                toId
              });
            }
          }
        }
      }
      var newEdges = [];
      var getNewEdge = function getNewEdge2(createdEdge2) {
        for (var _j2 = 0; _j2 < newEdges.length; _j2++) {
          var newEdge2 = newEdges[_j2];
          var matchToDirection = createdEdge2.fromId === newEdge2.fromId && createdEdge2.toId === newEdge2.toId;
          var matchFromDirection = createdEdge2.fromId === newEdge2.toId && createdEdge2.toId === newEdge2.fromId;
          if (matchToDirection || matchFromDirection) {
            return newEdge2;
          }
        }
        return null;
      };
      for (var _j3 = 0; _j3 < createEdges.length; _j3++) {
        var createdEdge = createEdges[_j3];
        var _edge = createdEdge.edge;
        var newEdge = getNewEdge(createdEdge);
        if (newEdge === null) {
          newEdge = this._createClusteredEdge(createdEdge.fromId, createdEdge.toId, _edge, clusterEdgeProperties);
          newEdges.push(newEdge);
        } else {
          newEdge.clusteringEdgeReplacingIds.push(_edge.id);
        }
        this.body.edges[_edge.id].edgeReplacedById = newEdge.id;
        this._backupEdgeOptions(_edge);
        _edge.setOptions({
          physics: false
        });
      }
    }
    /**
     * This function checks the options that can be supplied to the different cluster functions
     * for certain fields and inserts defaults if needed
     *
     * @param {object} options
     * @returns {*}
     * @private
     */
  }, {
    key: "_checkOptions",
    value: function _checkOptions() {
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      if (options.clusterEdgeProperties === void 0) {
        options.clusterEdgeProperties = {};
      }
      if (options.clusterNodeProperties === void 0) {
        options.clusterNodeProperties = {};
      }
      return options;
    }
    /**
     *
     * @param {object}    childNodesObj         | object with node objects, id as keys, same as childNodes except it also contains a source node
     * @param {object}    childEdgesObj         | object with edge objects, id as keys
     * @param {Array}     options               | object with {clusterNodeProperties, clusterEdgeProperties, processProperties}
     * @param {boolean}   refreshData | when true, do not wrap up
     * @private
     */
  }, {
    key: "_cluster",
    value: function _cluster(childNodesObj, childEdgesObj, options) {
      var refreshData = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
      var tmpNodesToRemove = [];
      for (var nodeId in childNodesObj) {
        if (Object.prototype.hasOwnProperty.call(childNodesObj, nodeId)) {
          if (this.clusteredNodes[nodeId] !== void 0) {
            tmpNodesToRemove.push(nodeId);
          }
        }
      }
      for (var n2 = 0; n2 < tmpNodesToRemove.length; ++n2) {
        delete childNodesObj[tmpNodesToRemove[n2]];
      }
      if (_Object$keys(childNodesObj).length == 0) {
        return;
      }
      if (_Object$keys(childNodesObj).length == 1 && options.clusterNodeProperties.allowSingleNodeCluster != true) {
        return;
      }
      var clusterNodeProperties = deepExtend({}, options.clusterNodeProperties);
      if (options.processProperties !== void 0) {
        var childNodesOptions = [];
        for (var _nodeId in childNodesObj) {
          if (Object.prototype.hasOwnProperty.call(childNodesObj, _nodeId)) {
            var clonedOptions = NetworkUtil.cloneOptions(childNodesObj[_nodeId]);
            childNodesOptions.push(clonedOptions);
          }
        }
        var childEdgesOptions = [];
        for (var edgeId in childEdgesObj) {
          if (Object.prototype.hasOwnProperty.call(childEdgesObj, edgeId)) {
            if (edgeId.substr(0, 12) !== "clusterEdge:") {
              var _clonedOptions = NetworkUtil.cloneOptions(childEdgesObj[edgeId], "edge");
              childEdgesOptions.push(_clonedOptions);
            }
          }
        }
        clusterNodeProperties = options.processProperties(clusterNodeProperties, childNodesOptions, childEdgesOptions);
        if (!clusterNodeProperties) {
          throw new Error("The processProperties function does not return properties!");
        }
      }
      if (clusterNodeProperties.id === void 0) {
        clusterNodeProperties.id = "cluster:" + v4();
      }
      var clusterId = clusterNodeProperties.id;
      if (clusterNodeProperties.label === void 0) {
        clusterNodeProperties.label = "cluster";
      }
      var pos = void 0;
      if (clusterNodeProperties.x === void 0) {
        pos = this._getClusterPosition(childNodesObj);
        clusterNodeProperties.x = pos.x;
      }
      if (clusterNodeProperties.y === void 0) {
        if (pos === void 0) {
          pos = this._getClusterPosition(childNodesObj);
        }
        clusterNodeProperties.y = pos.y;
      }
      clusterNodeProperties.id = clusterId;
      var clusterNode = this.body.functions.createNode(clusterNodeProperties, Cluster);
      clusterNode.containedNodes = childNodesObj;
      clusterNode.containedEdges = childEdgesObj;
      clusterNode.clusterEdgeProperties = options.clusterEdgeProperties;
      this.body.nodes[clusterNodeProperties.id] = clusterNode;
      this._clusterEdges(childNodesObj, childEdgesObj, clusterNodeProperties, options.clusterEdgeProperties);
      clusterNodeProperties.id = void 0;
      if (refreshData === true) {
        this.body.emitter.emit("_dataChanged");
      }
    }
    /**
     *
     * @param {Edge} edge
     * @private
     */
  }, {
    key: "_backupEdgeOptions",
    value: function _backupEdgeOptions(edge2) {
      if (this.clusteredEdges[edge2.id] === void 0) {
        this.clusteredEdges[edge2.id] = {
          physics: edge2.options.physics
        };
      }
    }
    /**
     *
     * @param {Edge} edge
     * @private
     */
  }, {
    key: "_restoreEdge",
    value: function _restoreEdge(edge2) {
      var originalOptions = this.clusteredEdges[edge2.id];
      if (originalOptions !== void 0) {
        edge2.setOptions({
          physics: originalOptions.physics
        });
        delete this.clusteredEdges[edge2.id];
      }
    }
    /**
     * Check if a node is a cluster.
     *
     * @param {Node.id} nodeId
     * @returns {*}
     */
  }, {
    key: "isCluster",
    value: function isCluster(nodeId) {
      if (this.body.nodes[nodeId] !== void 0) {
        return this.body.nodes[nodeId].isCluster === true;
      } else {
        console.error("Node does not exist.");
        return false;
      }
    }
    /**
     * get the position of the cluster node based on what's inside
     *
     * @param {object} childNodesObj    | object with node objects, id as keys
     * @returns {{x: number, y: number}}
     * @private
     */
  }, {
    key: "_getClusterPosition",
    value: function _getClusterPosition(childNodesObj) {
      var childKeys = _Object$keys(childNodesObj);
      var minX = childNodesObj[childKeys[0]].x;
      var maxX = childNodesObj[childKeys[0]].x;
      var minY = childNodesObj[childKeys[0]].y;
      var maxY = childNodesObj[childKeys[0]].y;
      var node2;
      for (var i2 = 1; i2 < childKeys.length; i2++) {
        node2 = childNodesObj[childKeys[i2]];
        minX = node2.x < minX ? node2.x : minX;
        maxX = node2.x > maxX ? node2.x : maxX;
        minY = node2.y < minY ? node2.y : minY;
        maxY = node2.y > maxY ? node2.y : maxY;
      }
      return {
        x: 0.5 * (minX + maxX),
        y: 0.5 * (minY + maxY)
      };
    }
    /**
     * Open a cluster by calling this function.
     *
     * @param {vis.Edge.id}  clusterNodeId | the ID of the cluster node
     * @param {object} options
     * @param {boolean} refreshData | wrap up afterwards if not true
     */
  }, {
    key: "openCluster",
    value: function openCluster(clusterNodeId, options) {
      var refreshData = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      if (clusterNodeId === void 0) {
        throw new Error("No clusterNodeId supplied to openCluster.");
      }
      var clusterNode = this.body.nodes[clusterNodeId];
      if (clusterNode === void 0) {
        throw new Error("The clusterNodeId supplied to openCluster does not exist.");
      }
      if (clusterNode.isCluster !== true || clusterNode.containedNodes === void 0 || clusterNode.containedEdges === void 0) {
        throw new Error("The node:" + clusterNodeId + " is not a valid cluster.");
      }
      var stack2 = this.findNode(clusterNodeId);
      var parentIndex = _indexOfInstanceProperty(stack2).call(stack2, clusterNodeId) - 1;
      if (parentIndex >= 0) {
        var parentClusterNodeId = stack2[parentIndex];
        var parentClusterNode = this.body.nodes[parentClusterNodeId];
        parentClusterNode._openChildCluster(clusterNodeId);
        delete this.body.nodes[clusterNodeId];
        if (refreshData === true) {
          this.body.emitter.emit("_dataChanged");
        }
        return;
      }
      var containedNodes = clusterNode.containedNodes;
      var containedEdges = clusterNode.containedEdges;
      if (options !== void 0 && options.releaseFunction !== void 0 && typeof options.releaseFunction === "function") {
        var positions = {};
        var clusterPosition = {
          x: clusterNode.x,
          y: clusterNode.y
        };
        for (var nodeId in containedNodes) {
          if (Object.prototype.hasOwnProperty.call(containedNodes, nodeId)) {
            var containedNode = this.body.nodes[nodeId];
            positions[nodeId] = {
              x: containedNode.x,
              y: containedNode.y
            };
          }
        }
        var newPositions = options.releaseFunction(clusterPosition, positions);
        for (var _nodeId2 in containedNodes) {
          if (Object.prototype.hasOwnProperty.call(containedNodes, _nodeId2)) {
            var _containedNode = this.body.nodes[_nodeId2];
            if (newPositions[_nodeId2] !== void 0) {
              _containedNode.x = newPositions[_nodeId2].x === void 0 ? clusterNode.x : newPositions[_nodeId2].x;
              _containedNode.y = newPositions[_nodeId2].y === void 0 ? clusterNode.y : newPositions[_nodeId2].y;
            }
          }
        }
      } else {
        forEach$1(containedNodes, function(containedNode2) {
          if (containedNode2.options.fixed.x === false) {
            containedNode2.x = clusterNode.x;
          }
          if (containedNode2.options.fixed.y === false) {
            containedNode2.y = clusterNode.y;
          }
        });
      }
      for (var _nodeId3 in containedNodes) {
        if (Object.prototype.hasOwnProperty.call(containedNodes, _nodeId3)) {
          var _containedNode2 = this.body.nodes[_nodeId3];
          _containedNode2.vx = clusterNode.vx;
          _containedNode2.vy = clusterNode.vy;
          _containedNode2.setOptions({
            physics: true
          });
          delete this.clusteredNodes[_nodeId3];
        }
      }
      var edgesToBeDeleted = [];
      for (var i2 = 0; i2 < clusterNode.edges.length; i2++) {
        edgesToBeDeleted.push(clusterNode.edges[i2]);
      }
      for (var _i3 = 0; _i3 < edgesToBeDeleted.length; _i3++) {
        var edge2 = edgesToBeDeleted[_i3];
        var otherNodeId = this._getConnectedId(edge2, clusterNodeId);
        var otherNode = this.clusteredNodes[otherNodeId];
        for (var j2 = 0; j2 < edge2.clusteringEdgeReplacingIds.length; j2++) {
          var transferId = edge2.clusteringEdgeReplacingIds[j2];
          var transferEdge = this.body.edges[transferId];
          if (transferEdge === void 0) continue;
          if (otherNode !== void 0) {
            var otherCluster = this.body.nodes[otherNode.clusterId];
            otherCluster.containedEdges[transferEdge.id] = transferEdge;
            delete containedEdges[transferEdge.id];
            var fromId = transferEdge.fromId;
            var toId = transferEdge.toId;
            if (transferEdge.toId == otherNodeId) {
              toId = otherNode.clusterId;
            } else {
              fromId = otherNode.clusterId;
            }
            this._createClusteredEdge(fromId, toId, transferEdge, otherCluster.clusterEdgeProperties, {
              hidden: false,
              physics: true
            });
          } else {
            this._restoreEdge(transferEdge);
          }
        }
        edge2.remove();
      }
      for (var edgeId in containedEdges) {
        if (Object.prototype.hasOwnProperty.call(containedEdges, edgeId)) {
          this._restoreEdge(containedEdges[edgeId]);
        }
      }
      delete this.body.nodes[clusterNodeId];
      if (refreshData === true) {
        this.body.emitter.emit("_dataChanged");
      }
    }
    /**
     *
     * @param {Cluster.id} clusterId
     * @returns {Array.<Node.id>}
     */
  }, {
    key: "getNodesInCluster",
    value: function getNodesInCluster(clusterId) {
      var nodesArray = [];
      if (this.isCluster(clusterId) === true) {
        var containedNodes = this.body.nodes[clusterId].containedNodes;
        for (var nodeId in containedNodes) {
          if (Object.prototype.hasOwnProperty.call(containedNodes, nodeId)) {
            nodesArray.push(this.body.nodes[nodeId].id);
          }
        }
      }
      return nodesArray;
    }
    /**
     * Get the stack clusterId's that a certain node resides in. cluster A -> cluster B -> cluster C -> node
     *
     * If a node can't be found in the chain, return an empty array.
     *
     * @param {string|number} nodeId
     * @returns {Array}
     */
  }, {
    key: "findNode",
    value: function findNode(nodeId) {
      var stack2 = [];
      var max2 = 100;
      var counter2 = 0;
      var node2;
      while (this.clusteredNodes[nodeId] !== void 0 && counter2 < max2) {
        node2 = this.body.nodes[nodeId];
        if (node2 === void 0) return [];
        stack2.push(node2.id);
        nodeId = this.clusteredNodes[nodeId].clusterId;
        counter2++;
      }
      node2 = this.body.nodes[nodeId];
      if (node2 === void 0) return [];
      stack2.push(node2.id);
      _reverseInstanceProperty(stack2).call(stack2);
      return stack2;
    }
    /**
     * Using a clustered nodeId, update with the new options
     *
     * @param {Node.id} clusteredNodeId
     * @param {object} newOptions
     */
  }, {
    key: "updateClusteredNode",
    value: function updateClusteredNode(clusteredNodeId, newOptions) {
      if (clusteredNodeId === void 0) {
        throw new Error("No clusteredNodeId supplied to updateClusteredNode.");
      }
      if (newOptions === void 0) {
        throw new Error("No newOptions supplied to updateClusteredNode.");
      }
      if (this.body.nodes[clusteredNodeId] === void 0) {
        throw new Error("The clusteredNodeId supplied to updateClusteredNode does not exist.");
      }
      this.body.nodes[clusteredNodeId].setOptions(newOptions);
      this.body.emitter.emit("_dataChanged");
    }
    /**
     * Using a base edgeId, update all related clustered edges with the new options
     *
     * @param {vis.Edge.id} startEdgeId
     * @param {object} newOptions
     */
  }, {
    key: "updateEdge",
    value: function updateEdge(startEdgeId, newOptions) {
      if (startEdgeId === void 0) {
        throw new Error("No startEdgeId supplied to updateEdge.");
      }
      if (newOptions === void 0) {
        throw new Error("No newOptions supplied to updateEdge.");
      }
      if (this.body.edges[startEdgeId] === void 0) {
        throw new Error("The startEdgeId supplied to updateEdge does not exist.");
      }
      var allEdgeIds = this.getClusteredEdges(startEdgeId);
      for (var i2 = 0; i2 < allEdgeIds.length; i2++) {
        var edge2 = this.body.edges[allEdgeIds[i2]];
        edge2.setOptions(newOptions);
      }
      this.body.emitter.emit("_dataChanged");
    }
    /**
     * Get a stack of clusterEdgeId's (+base edgeid) that a base edge is the same as. cluster edge C -> cluster edge B -> cluster edge A -> base edge(edgeId)
     *
     * @param {vis.Edge.id} edgeId
     * @returns {Array.<vis.Edge.id>}
     */
  }, {
    key: "getClusteredEdges",
    value: function getClusteredEdges(edgeId) {
      var stack2 = [];
      var max2 = 100;
      var counter2 = 0;
      while (edgeId !== void 0 && this.body.edges[edgeId] !== void 0 && counter2 < max2) {
        stack2.push(this.body.edges[edgeId].id);
        edgeId = this.body.edges[edgeId].edgeReplacedById;
        counter2++;
      }
      _reverseInstanceProperty(stack2).call(stack2);
      return stack2;
    }
    /**
     * Get the base edge id of clusterEdgeId. cluster edge (clusteredEdgeId) -> cluster edge B -> cluster edge C -> base edge
     *
     * @param {vis.Edge.id} clusteredEdgeId
     * @returns {vis.Edge.id} baseEdgeId
     *
     * TODO: deprecate in 5.0.0. Method getBaseEdges() is the correct one to use.
     */
  }, {
    key: "getBaseEdge",
    value: function getBaseEdge(clusteredEdgeId) {
      return this.getBaseEdges(clusteredEdgeId)[0];
    }
    /**
     * Get all regular edges for this clustered edge id.
     *
     * @param {vis.Edge.id} clusteredEdgeId
     * @returns {Array.<vis.Edge.id>} all baseEdgeId's under this clustered edge
     */
  }, {
    key: "getBaseEdges",
    value: function getBaseEdges(clusteredEdgeId) {
      var IdsToHandle = [clusteredEdgeId];
      var doneIds = [];
      var foundIds = [];
      var max2 = 100;
      var counter2 = 0;
      while (IdsToHandle.length > 0 && counter2 < max2) {
        var nextId = IdsToHandle.pop();
        if (nextId === void 0) continue;
        var nextEdge = this.body.edges[nextId];
        if (nextEdge === void 0) continue;
        counter2++;
        var replacingIds = nextEdge.clusteringEdgeReplacingIds;
        if (replacingIds === void 0) {
          foundIds.push(nextId);
        } else {
          for (var i2 = 0; i2 < replacingIds.length; ++i2) {
            var replacingId = replacingIds[i2];
            if (_indexOfInstanceProperty(IdsToHandle).call(IdsToHandle, replacingIds) !== -1 || _indexOfInstanceProperty(doneIds).call(doneIds, replacingIds) !== -1) {
              continue;
            }
            IdsToHandle.push(replacingId);
          }
        }
        doneIds.push(nextId);
      }
      return foundIds;
    }
    /**
     * Get the Id the node is connected to
     *
     * @param {vis.Edge} edge
     * @param {Node.id} nodeId
     * @returns {*}
     * @private
     */
  }, {
    key: "_getConnectedId",
    value: function _getConnectedId(edge2, nodeId) {
      if (edge2.toId != nodeId) {
        return edge2.toId;
      } else if (edge2.fromId != nodeId) {
        return edge2.fromId;
      } else {
        return edge2.fromId;
      }
    }
    /**
     * We determine how many connections denote an important hub.
     * We take the mean + 2*std as the important hub size. (Assuming a normal distribution of data, ~2.2%)
     *
     * @returns {number}
     * @private
     */
  }, {
    key: "_getHubSize",
    value: function _getHubSize() {
      var average = 0;
      var averageSquared = 0;
      var hubCounter = 0;
      var largestHub = 0;
      for (var i2 = 0; i2 < this.body.nodeIndices.length; i2++) {
        var node2 = this.body.nodes[this.body.nodeIndices[i2]];
        if (node2.edges.length > largestHub) {
          largestHub = node2.edges.length;
        }
        average += node2.edges.length;
        averageSquared += Math.pow(node2.edges.length, 2);
        hubCounter += 1;
      }
      average = average / hubCounter;
      averageSquared = averageSquared / hubCounter;
      var variance = averageSquared - Math.pow(average, 2);
      var standardDeviation = Math.sqrt(variance);
      var hubThreshold = Math.floor(average + 2 * standardDeviation);
      if (hubThreshold > largestHub) {
        hubThreshold = largestHub;
      }
      return hubThreshold;
    }
    /**
     * Create an edge for the cluster representation.
     *
     * @param {Node.id} fromId
     * @param {Node.id} toId
     * @param {vis.Edge} baseEdge
     * @param {object} clusterEdgeProperties
     * @param {object} extraOptions
     * @returns {Edge} newly created clustered edge
     * @private
     */
  }, {
    key: "_createClusteredEdge",
    value: function _createClusteredEdge(fromId, toId, baseEdge, clusterEdgeProperties, extraOptions) {
      var clonedOptions = NetworkUtil.cloneOptions(baseEdge, "edge");
      deepExtend(clonedOptions, clusterEdgeProperties);
      clonedOptions.from = fromId;
      clonedOptions.to = toId;
      clonedOptions.id = "clusterEdge:" + v4();
      if (extraOptions !== void 0) {
        deepExtend(clonedOptions, extraOptions);
      }
      var newEdge = this.body.functions.createEdge(clonedOptions);
      newEdge.clusteringEdgeReplacingIds = [baseEdge.id];
      newEdge.connect();
      this.body.edges[newEdge.id] = newEdge;
      return newEdge;
    }
    /**
     * Add the passed child nodes and edges to the given cluster node.
     *
     * @param {object | Node} childNodes  hash of nodes or single node to add in cluster
     * @param {object | Edge} childEdges  hash of edges or single edge to take into account when clustering
     * @param {Node} clusterNode  cluster node to add nodes and edges to
     * @param {object} [clusterEdgeProperties]
     * @private
     */
  }, {
    key: "_clusterEdges",
    value: function _clusterEdges(childNodes, childEdges, clusterNode, clusterEdgeProperties) {
      if (childEdges instanceof Edge) {
        var edge2 = childEdges;
        var obj = {};
        obj[edge2.id] = edge2;
        childEdges = obj;
      }
      if (childNodes instanceof Node$1) {
        var node2 = childNodes;
        var _obj = {};
        _obj[node2.id] = node2;
        childNodes = _obj;
      }
      if (clusterNode === void 0 || clusterNode === null) {
        throw new Error("_clusterEdges: parameter clusterNode required");
      }
      if (clusterEdgeProperties === void 0) {
        clusterEdgeProperties = clusterNode.clusterEdgeProperties;
      }
      this._createClusterEdges(childNodes, childEdges, clusterNode, clusterEdgeProperties);
      for (var edgeId in childEdges) {
        if (Object.prototype.hasOwnProperty.call(childEdges, edgeId)) {
          if (this.body.edges[edgeId] !== void 0) {
            var _edge2 = this.body.edges[edgeId];
            this._backupEdgeOptions(_edge2);
            _edge2.setOptions({
              physics: false
            });
          }
        }
      }
      for (var nodeId in childNodes) {
        if (Object.prototype.hasOwnProperty.call(childNodes, nodeId)) {
          this.clusteredNodes[nodeId] = {
            clusterId: clusterNode.id,
            node: this.body.nodes[nodeId]
          };
          this.body.nodes[nodeId].setOptions({
            physics: false
          });
        }
      }
    }
    /**
     * Determine in which cluster given nodeId resides.
     *
     * If not in cluster, return undefined.
     *
     * NOTE: If you know a cleaner way to do this, please enlighten me (wimrijnders).
     *
     * @param {Node.id} nodeId
     * @returns {Node|undefined} Node instance for cluster, if present
     * @private
     */
  }, {
    key: "_getClusterNodeForNode",
    value: function _getClusterNodeForNode(nodeId) {
      if (nodeId === void 0) return void 0;
      var clusteredNode = this.clusteredNodes[nodeId];
      if (clusteredNode === void 0) return void 0;
      var clusterId = clusteredNode.clusterId;
      if (clusterId === void 0) return void 0;
      return this.body.nodes[clusterId];
    }
    /**
     * Internal helper function for conditionally removing items in array
     *
     * Done like this because Array.filter() is not fully supported by all IE's.
     *
     * @param {Array} arr
     * @param {Function} callback
     * @returns {Array}
     * @private
     */
  }, {
    key: "_filter",
    value: function _filter(arr, callback) {
      var ret = [];
      forEach$1(arr, function(item) {
        if (callback(item)) {
          ret.push(item);
        }
      });
      return ret;
    }
    /**
     * Scan all edges for changes in clustering and adjust this if necessary.
     *
     * Call this (internally) after there has been a change in node or edge data.
     *
     * Pre: States of this.body.nodes and this.body.edges consistent
     * Pre: this.clusteredNodes and this.clusteredEdge consistent with containedNodes and containedEdges
     *      of cluster nodes.
     */
  }, {
    key: "_updateState",
    value: function _updateState() {
      var _this4 = this;
      var nodeId;
      var deletedNodeIds = [];
      var deletedEdgeIds = {};
      var eachClusterNode = function eachClusterNode2(callback) {
        forEach$1(_this4.body.nodes, function(node3) {
          if (node3.isCluster === true) {
            callback(node3);
          }
        });
      };
      for (nodeId in this.clusteredNodes) {
        if (!Object.prototype.hasOwnProperty.call(this.clusteredNodes, nodeId)) continue;
        var node2 = this.body.nodes[nodeId];
        if (node2 === void 0) {
          deletedNodeIds.push(nodeId);
        }
      }
      eachClusterNode(function(clusterNode) {
        for (var n3 = 0; n3 < deletedNodeIds.length; n3++) {
          delete clusterNode.containedNodes[deletedNodeIds[n3]];
        }
      });
      for (var n2 = 0; n2 < deletedNodeIds.length; n2++) {
        delete this.clusteredNodes[deletedNodeIds[n2]];
      }
      forEach$1(this.clusteredEdges, function(edgeId) {
        var edge2 = _this4.body.edges[edgeId];
        if (edge2 === void 0 || !edge2.endPointsValid()) {
          deletedEdgeIds[edgeId] = edgeId;
        }
      });
      eachClusterNode(function(clusterNode) {
        forEach$1(clusterNode.containedEdges, function(edge2, edgeId) {
          if (!edge2.endPointsValid() && !deletedEdgeIds[edgeId]) {
            deletedEdgeIds[edgeId] = edgeId;
          }
        });
      });
      forEach$1(this.body.edges, function(edge2, edgeId) {
        var isValid = true;
        var replacedIds = edge2.clusteringEdgeReplacingIds;
        if (replacedIds !== void 0) {
          var numValid = 0;
          forEach$1(replacedIds, function(containedEdgeId) {
            var containedEdge = _this4.body.edges[containedEdgeId];
            if (containedEdge !== void 0 && containedEdge.endPointsValid()) {
              numValid += 1;
            }
          });
          isValid = numValid > 0;
        }
        if (!edge2.endPointsValid() || !isValid) {
          deletedEdgeIds[edgeId] = edgeId;
        }
      });
      eachClusterNode(function(clusterNode) {
        forEach$1(deletedEdgeIds, function(deletedEdgeId) {
          delete clusterNode.containedEdges[deletedEdgeId];
          forEach$1(clusterNode.edges, function(edge2, m2) {
            if (edge2.id === deletedEdgeId) {
              clusterNode.edges[m2] = null;
              return;
            }
            edge2.clusteringEdgeReplacingIds = _this4._filter(edge2.clusteringEdgeReplacingIds, function(id2) {
              return !deletedEdgeIds[id2];
            });
          });
          clusterNode.edges = _this4._filter(clusterNode.edges, function(item) {
            return item !== null;
          });
        });
      });
      forEach$1(deletedEdgeIds, function(edgeId) {
        delete _this4.clusteredEdges[edgeId];
      });
      forEach$1(deletedEdgeIds, function(edgeId) {
        delete _this4.body.edges[edgeId];
      });
      var ids = _Object$keys(this.body.edges);
      forEach$1(ids, function(edgeId) {
        var edge2 = _this4.body.edges[edgeId];
        var shouldBeClustered = _this4._isClusteredNode(edge2.fromId) || _this4._isClusteredNode(edge2.toId);
        if (shouldBeClustered === _this4._isClusteredEdge(edge2.id)) {
          return;
        }
        if (shouldBeClustered) {
          var clusterFrom = _this4._getClusterNodeForNode(edge2.fromId);
          if (clusterFrom !== void 0) {
            _this4._clusterEdges(_this4.body.nodes[edge2.fromId], edge2, clusterFrom);
          }
          var clusterTo = _this4._getClusterNodeForNode(edge2.toId);
          if (clusterTo !== void 0) {
            _this4._clusterEdges(_this4.body.nodes[edge2.toId], edge2, clusterTo);
          }
        } else {
          delete _this4._clusterEdges[edgeId];
          _this4._restoreEdge(edge2);
        }
      });
      var changed = false;
      var continueLoop = true;
      var _loop2 = function _loop22() {
        var clustersToOpen = [];
        eachClusterNode(function(clusterNode) {
          var numNodes = _Object$keys(clusterNode.containedNodes).length;
          var allowSingle = clusterNode.options.allowSingleNodeCluster === true;
          if (allowSingle && numNodes < 1 || !allowSingle && numNodes < 2) {
            clustersToOpen.push(clusterNode.id);
          }
        });
        for (var _n = 0; _n < clustersToOpen.length; ++_n) {
          _this4.openCluster(
            clustersToOpen[_n],
            {},
            false
            /* Don't refresh, we're in an refresh/update already */
          );
        }
        continueLoop = clustersToOpen.length > 0;
        changed = changed || continueLoop;
      };
      while (continueLoop) {
        _loop2();
      }
      if (changed) {
        this._updateState();
      }
    }
    /**
     * Determine if node with given id is part of a cluster.
     *
     * @param {Node.id} nodeId
     * @returns {boolean} true if part of a cluster.
     */
  }, {
    key: "_isClusteredNode",
    value: function _isClusteredNode(nodeId) {
      return this.clusteredNodes[nodeId] !== void 0;
    }
    /**
     * Determine if edge with given id is not visible due to clustering.
     *
     * An edge is considered clustered if:
     * - it is directly replaced by a clustering edge
     * - any of its connecting nodes is in a cluster
     *
     * @param {vis.Edge.id} edgeId
     * @returns {boolean} true if part of a cluster.
     */
  }, {
    key: "_isClusteredEdge",
    value: function _isClusteredEdge(edgeId) {
      return this.clusteredEdges[edgeId] !== void 0;
    }
  }]);
  return ClusterEngine2;
}();
function _initRequestAnimationFrame() {
  var func;
  if (window !== void 0) {
    func = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
  }
  if (func === void 0) {
    window.requestAnimationFrame = function(callback) {
      callback();
    };
  } else {
    window.requestAnimationFrame = func;
  }
}
var CanvasRenderer = /* @__PURE__ */ function() {
  function CanvasRenderer2(body, canvas) {
    _classCallCheck(this, CanvasRenderer2);
    _initRequestAnimationFrame();
    this.body = body;
    this.canvas = canvas;
    this.redrawRequested = false;
    this.renderTimer = void 0;
    this.requiresTimeout = true;
    this.renderingActive = false;
    this.renderRequests = 0;
    this.allowRedraw = true;
    this.dragging = false;
    this.zooming = false;
    this.options = {};
    this.defaultOptions = {
      hideEdgesOnDrag: false,
      hideEdgesOnZoom: false,
      hideNodesOnDrag: false
    };
    _Object$assign(this.options, this.defaultOptions);
    this._determineBrowserMethod();
    this.bindEventListeners();
  }
  _createClass(CanvasRenderer2, [{
    key: "bindEventListeners",
    value: function bindEventListeners() {
      var _this = this, _context2;
      this.body.emitter.on("dragStart", function() {
        _this.dragging = true;
      });
      this.body.emitter.on("dragEnd", function() {
        _this.dragging = false;
      });
      this.body.emitter.on("zoom", function() {
        _this.zooming = true;
        window.clearTimeout(_this.zoomTimeoutId);
        _this.zoomTimeoutId = _setTimeout(function() {
          var _context;
          _this.zooming = false;
          _bindInstanceProperty$1(_context = _this._requestRedraw).call(_context, _this)();
        }, 250);
      });
      this.body.emitter.on("_resizeNodes", function() {
        _this._resizeNodes();
      });
      this.body.emitter.on("_redraw", function() {
        if (_this.renderingActive === false) {
          _this._redraw();
        }
      });
      this.body.emitter.on("_blockRedraw", function() {
        _this.allowRedraw = false;
      });
      this.body.emitter.on("_allowRedraw", function() {
        _this.allowRedraw = true;
        _this.redrawRequested = false;
      });
      this.body.emitter.on("_requestRedraw", _bindInstanceProperty$1(_context2 = this._requestRedraw).call(_context2, this));
      this.body.emitter.on("_startRendering", function() {
        _this.renderRequests += 1;
        _this.renderingActive = true;
        _this._startRendering();
      });
      this.body.emitter.on("_stopRendering", function() {
        _this.renderRequests -= 1;
        _this.renderingActive = _this.renderRequests > 0;
        _this.renderTimer = void 0;
      });
      this.body.emitter.on("destroy", function() {
        _this.renderRequests = 0;
        _this.allowRedraw = false;
        _this.renderingActive = false;
        if (_this.requiresTimeout === true) {
          clearTimeout(_this.renderTimer);
        } else {
          window.cancelAnimationFrame(_this.renderTimer);
        }
        _this.body.emitter.off();
      });
    }
    /**
     *
     * @param {object} options
     */
  }, {
    key: "setOptions",
    value: function setOptions(options) {
      if (options !== void 0) {
        var fields = ["hideEdgesOnDrag", "hideEdgesOnZoom", "hideNodesOnDrag"];
        selectiveDeepExtend(fields, this.options, options);
      }
    }
    /**
     * Prepare the drawing of the next frame.
     *
     * Calls the callback when the next frame can or will be drawn.
     *
     * @param {Function} callback
     * @param {number} delay - timeout case only, wait this number of milliseconds
     * @returns {Function | undefined}
     * @private
     */
  }, {
    key: "_requestNextFrame",
    value: function _requestNextFrame(callback, delay) {
      if (typeof window === "undefined") return;
      var timer;
      var myWindow = window;
      if (this.requiresTimeout === true) {
        timer = _setTimeout(callback, delay);
      } else {
        if (myWindow.requestAnimationFrame) {
          timer = myWindow.requestAnimationFrame(callback);
        }
      }
      return timer;
    }
    /**
     *
     * @private
     */
  }, {
    key: "_startRendering",
    value: function _startRendering() {
      if (this.renderingActive === true) {
        if (this.renderTimer === void 0) {
          var _context3;
          this.renderTimer = this._requestNextFrame(_bindInstanceProperty$1(_context3 = this._renderStep).call(_context3, this), this.simulationInterval);
        }
      }
    }
    /**
     *
     * @private
     */
  }, {
    key: "_renderStep",
    value: function _renderStep() {
      if (this.renderingActive === true) {
        this.renderTimer = void 0;
        if (this.requiresTimeout === true) {
          this._startRendering();
        }
        this._redraw();
        if (this.requiresTimeout === false) {
          this._startRendering();
        }
      }
    }
    /**
     * Redraw the network with the current data
     * chart will be resized too.
     */
  }, {
    key: "redraw",
    value: function redraw() {
      this.body.emitter.emit("setSize");
      this._redraw();
    }
    /**
     * Redraw the network with the current data
     *
     * @private
     */
  }, {
    key: "_requestRedraw",
    value: function _requestRedraw() {
      var _this2 = this;
      if (this.redrawRequested !== true && this.renderingActive === false && this.allowRedraw === true) {
        this.redrawRequested = true;
        this._requestNextFrame(function() {
          _this2._redraw(false);
        }, 0);
      }
    }
    /**
     * Redraw the network with the current data
     *
     * @param {boolean} [hidden=false] | Used to get the first estimate of the node sizes.
     *                                   Only the nodes are drawn after which they are quickly drawn over.
     * @private
     */
  }, {
    key: "_redraw",
    value: function _redraw() {
      var hidden = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      if (this.allowRedraw === true) {
        this.body.emitter.emit("initRedraw");
        this.redrawRequested = false;
        var drawLater = {
          drawExternalLabels: null
        };
        if (this.canvas.frame.canvas.width === 0 || this.canvas.frame.canvas.height === 0) {
          this.canvas.setSize();
        }
        this.canvas.setTransform();
        var ctx = this.canvas.getContext();
        var w2 = this.canvas.frame.canvas.clientWidth;
        var h2 = this.canvas.frame.canvas.clientHeight;
        ctx.clearRect(0, 0, w2, h2);
        if (this.canvas.frame.clientWidth === 0) {
          return;
        }
        ctx.save();
        ctx.translate(this.body.view.translation.x, this.body.view.translation.y);
        ctx.scale(this.body.view.scale, this.body.view.scale);
        ctx.beginPath();
        this.body.emitter.emit("beforeDrawing", ctx);
        ctx.closePath();
        if (hidden === false) {
          if ((this.dragging === false || this.dragging === true && this.options.hideEdgesOnDrag === false) && (this.zooming === false || this.zooming === true && this.options.hideEdgesOnZoom === false)) {
            this._drawEdges(ctx);
          }
        }
        if (this.dragging === false || this.dragging === true && this.options.hideNodesOnDrag === false) {
          var _this$_drawNodes = this._drawNodes(ctx, hidden), drawExternalLabels = _this$_drawNodes.drawExternalLabels;
          drawLater.drawExternalLabels = drawExternalLabels;
        }
        if (hidden === false) {
          if ((this.dragging === false || this.dragging === true && this.options.hideEdgesOnDrag === false) && (this.zooming === false || this.zooming === true && this.options.hideEdgesOnZoom === false)) {
            this._drawArrows(ctx);
          }
        }
        if (drawLater.drawExternalLabels != null) {
          drawLater.drawExternalLabels();
        }
        if (hidden === false) {
          this._drawSelectionBox(ctx);
        }
        ctx.beginPath();
        this.body.emitter.emit("afterDrawing", ctx);
        ctx.closePath();
        ctx.restore();
        if (hidden === true) {
          ctx.clearRect(0, 0, w2, h2);
        }
      }
    }
    /**
     * Redraw all nodes
     *
     * @param {CanvasRenderingContext2D}   ctx
     * @param {boolean} [alwaysShow]
     * @private
     */
  }, {
    key: "_resizeNodes",
    value: function _resizeNodes() {
      this.canvas.setTransform();
      var ctx = this.canvas.getContext();
      ctx.save();
      ctx.translate(this.body.view.translation.x, this.body.view.translation.y);
      ctx.scale(this.body.view.scale, this.body.view.scale);
      var nodes2 = this.body.nodes;
      var node2;
      for (var nodeId in nodes2) {
        if (Object.prototype.hasOwnProperty.call(nodes2, nodeId)) {
          node2 = nodes2[nodeId];
          node2.resize(ctx);
          node2.updateBoundingBox(ctx, node2.selected);
        }
      }
      ctx.restore();
    }
    /**
     * Redraw all nodes
     *
     * @param {CanvasRenderingContext2D} ctx  2D context of a HTML canvas
     * @param {boolean} [alwaysShow]
     * @private
     * @returns {object} Callbacks to draw later on higher layers.
     */
  }, {
    key: "_drawNodes",
    value: function _drawNodes(ctx) {
      var alwaysShow = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var nodes2 = this.body.nodes;
      var nodeIndices = this.body.nodeIndices;
      var node2;
      var selected = [];
      var hovered = [];
      var margin = 20;
      var topLeft = this.canvas.DOMtoCanvas({
        x: -margin,
        y: -margin
      });
      var bottomRight = this.canvas.DOMtoCanvas({
        x: this.canvas.frame.canvas.clientWidth + margin,
        y: this.canvas.frame.canvas.clientHeight + margin
      });
      var viewableArea = {
        top: topLeft.y,
        left: topLeft.x,
        bottom: bottomRight.y,
        right: bottomRight.x
      };
      var _drawExternalLabels = [];
      for (var _i = 0; _i < nodeIndices.length; _i++) {
        node2 = nodes2[nodeIndices[_i]];
        if (node2.hover) {
          hovered.push(nodeIndices[_i]);
        } else if (node2.isSelected()) {
          selected.push(nodeIndices[_i]);
        } else {
          if (alwaysShow === true) {
            var drawLater = node2.draw(ctx);
            if (drawLater.drawExternalLabel != null) {
              _drawExternalLabels.push(drawLater.drawExternalLabel);
            }
          } else if (node2.isBoundingBoxOverlappingWith(viewableArea) === true) {
            var _drawLater = node2.draw(ctx);
            if (_drawLater.drawExternalLabel != null) {
              _drawExternalLabels.push(_drawLater.drawExternalLabel);
            }
          } else {
            node2.updateBoundingBox(ctx, node2.selected);
          }
        }
      }
      var i2;
      var selectedLength = selected.length;
      var hoveredLength = hovered.length;
      for (i2 = 0; i2 < selectedLength; i2++) {
        node2 = nodes2[selected[i2]];
        var _drawLater2 = node2.draw(ctx);
        if (_drawLater2.drawExternalLabel != null) {
          _drawExternalLabels.push(_drawLater2.drawExternalLabel);
        }
      }
      for (i2 = 0; i2 < hoveredLength; i2++) {
        node2 = nodes2[hovered[i2]];
        var _drawLater3 = node2.draw(ctx);
        if (_drawLater3.drawExternalLabel != null) {
          _drawExternalLabels.push(_drawLater3.drawExternalLabel);
        }
      }
      return {
        drawExternalLabels: function drawExternalLabels() {
          for (var _i2 = 0, _drawExternalLabels2 = _drawExternalLabels; _i2 < _drawExternalLabels2.length; _i2++) {
            var draw = _drawExternalLabels2[_i2];
            draw();
          }
        }
      };
    }
    /**
     * Redraw all edges
     *
     * @param {CanvasRenderingContext2D} ctx  2D context of a HTML canvas
     * @private
     */
  }, {
    key: "_drawEdges",
    value: function _drawEdges(ctx) {
      var edges = this.body.edges;
      var edgeIndices = this.body.edgeIndices;
      for (var i2 = 0; i2 < edgeIndices.length; i2++) {
        var edge2 = edges[edgeIndices[i2]];
        if (edge2.connected === true) {
          edge2.draw(ctx);
        }
      }
    }
    /**
     * Redraw all arrows
     *
     * @param {CanvasRenderingContext2D} ctx  2D context of a HTML canvas
     * @private
     */
  }, {
    key: "_drawArrows",
    value: function _drawArrows(ctx) {
      var edges = this.body.edges;
      var edgeIndices = this.body.edgeIndices;
      for (var i2 = 0; i2 < edgeIndices.length; i2++) {
        var edge2 = edges[edgeIndices[i2]];
        if (edge2.connected === true) {
          edge2.drawArrows(ctx);
        }
      }
    }
    /**
     * Determine if the browser requires a setTimeout or a requestAnimationFrame. This was required because
     * some implementations (safari and IE9) did not support requestAnimationFrame
     *
     * @private
     */
  }, {
    key: "_determineBrowserMethod",
    value: function _determineBrowserMethod() {
      if (typeof window !== "undefined") {
        var browserType = navigator.userAgent.toLowerCase();
        this.requiresTimeout = false;
        if (_indexOfInstanceProperty(browserType).call(browserType, "msie 9.0") != -1) {
          this.requiresTimeout = true;
        } else if (_indexOfInstanceProperty(browserType).call(browserType, "safari") != -1) {
          if (_indexOfInstanceProperty(browserType).call(browserType, "chrome") <= -1) {
            this.requiresTimeout = true;
          }
        }
      } else {
        this.requiresTimeout = true;
      }
    }
    /**
     * Redraw selection box
     *
     * @param {CanvasRenderingContext2D} ctx  2D context of a HTML canvas
     * @private
     */
  }, {
    key: "_drawSelectionBox",
    value: function _drawSelectionBox(ctx) {
      if (this.body.selectionBox.show) {
        ctx.beginPath();
        var width = this.body.selectionBox.position.end.x - this.body.selectionBox.position.start.x;
        var height = this.body.selectionBox.position.end.y - this.body.selectionBox.position.start.y;
        ctx.rect(this.body.selectionBox.position.start.x, this.body.selectionBox.position.start.y, width, height);
        ctx.fillStyle = "rgba(151, 194, 252, 0.2)";
        ctx.fillRect(this.body.selectionBox.position.start.x, this.body.selectionBox.position.start.y, width, height);
        ctx.strokeStyle = "rgba(151, 194, 252, 1)";
        ctx.stroke();
      } else {
        ctx.closePath();
      }
    }
  }]);
  return CanvasRenderer2;
}();
var path$2 = path$w;
var setInterval$1 = path$2.setInterval;
var setInterval$3 = setInterval$1;
var _setInterval = /* @__PURE__ */ getDefaultExportFromCjs(setInterval$3);
function onTouch(hammer2, callback) {
  callback.inputHandler = function(event) {
    if (event.isFirst) {
      callback(event);
    }
  };
  hammer2.on("hammer.input", callback.inputHandler);
}
function onRelease(hammer2, callback) {
  callback.inputHandler = function(event) {
    if (event.isFinal) {
      callback(event);
    }
  };
  return hammer2.on("hammer.input", callback.inputHandler);
}
var Canvas = /* @__PURE__ */ function() {
  function Canvas2(body) {
    _classCallCheck(this, Canvas2);
    this.body = body;
    this.pixelRatio = 1;
    this.cameraState = {};
    this.initialized = false;
    this.canvasViewCenter = {};
    this._cleanupCallbacks = [];
    this.options = {};
    this.defaultOptions = {
      autoResize: true,
      height: "100%",
      width: "100%"
    };
    _Object$assign(this.options, this.defaultOptions);
    this.bindEventListeners();
  }
  _createClass(Canvas2, [{
    key: "bindEventListeners",
    value: function bindEventListeners() {
      var _this = this, _context;
      this.body.emitter.once("resize", function(obj) {
        if (obj.width !== 0) {
          _this.body.view.translation.x = obj.width * 0.5;
        }
        if (obj.height !== 0) {
          _this.body.view.translation.y = obj.height * 0.5;
        }
      });
      this.body.emitter.on("setSize", _bindInstanceProperty$1(_context = this.setSize).call(_context, this));
      this.body.emitter.on("destroy", function() {
        _this.hammerFrame.destroy();
        _this.hammer.destroy();
        _this._cleanUp();
      });
    }
    /**
     * @param {object} options
     */
  }, {
    key: "setOptions",
    value: function setOptions(options) {
      var _this2 = this;
      if (options !== void 0) {
        var fields = ["width", "height", "autoResize"];
        selectiveDeepExtend(fields, this.options, options);
      }
      this._cleanUp();
      if (this.options.autoResize === true) {
        var _context2;
        if (window.ResizeObserver) {
          var observer = new ResizeObserver(function() {
            var changed = _this2.setSize();
            if (changed === true) {
              _this2.body.emitter.emit("_requestRedraw");
            }
          });
          var frame = this.frame;
          observer.observe(frame);
          this._cleanupCallbacks.push(function() {
            observer.unobserve(frame);
          });
        } else {
          var resizeTimer = _setInterval(function() {
            var changed = _this2.setSize();
            if (changed === true) {
              _this2.body.emitter.emit("_requestRedraw");
            }
          }, 1e3);
          this._cleanupCallbacks.push(function() {
            clearInterval(resizeTimer);
          });
        }
        var resizeFunction = _bindInstanceProperty$1(_context2 = this._onResize).call(_context2, this);
        window.addEventListener("resize", resizeFunction);
        this._cleanupCallbacks.push(function() {
          window.removeEventListener("resize", resizeFunction);
        });
      }
    }
    /**
     * @private
     */
  }, {
    key: "_cleanUp",
    value: function _cleanUp() {
      var _context3, _context4, _context5;
      _forEachInstanceProperty(_context3 = _reverseInstanceProperty(_context4 = _spliceInstanceProperty(_context5 = this._cleanupCallbacks).call(_context5, 0)).call(_context4)).call(_context3, function(callback) {
        try {
          callback();
        } catch (error) {
          console.error(error);
        }
      });
    }
    /**
     * @private
     */
  }, {
    key: "_onResize",
    value: function _onResize() {
      this.setSize();
      this.body.emitter.emit("_redraw");
    }
    /**
     * Get and store the cameraState
     *
     * @param {number} [pixelRatio=this.pixelRatio]
     * @private
     */
  }, {
    key: "_getCameraState",
    value: function _getCameraState() {
      var pixelRatio = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.pixelRatio;
      if (this.initialized === true) {
        this.cameraState.previousWidth = this.frame.canvas.width / pixelRatio;
        this.cameraState.previousHeight = this.frame.canvas.height / pixelRatio;
        this.cameraState.scale = this.body.view.scale;
        this.cameraState.position = this.DOMtoCanvas({
          x: 0.5 * this.frame.canvas.width / pixelRatio,
          y: 0.5 * this.frame.canvas.height / pixelRatio
        });
      }
    }
    /**
     * Set the cameraState
     *
     * @private
     */
  }, {
    key: "_setCameraState",
    value: function _setCameraState() {
      if (this.cameraState.scale !== void 0 && this.frame.canvas.clientWidth !== 0 && this.frame.canvas.clientHeight !== 0 && this.pixelRatio !== 0 && this.cameraState.previousWidth > 0 && this.cameraState.previousHeight > 0) {
        var widthRatio = this.frame.canvas.width / this.pixelRatio / this.cameraState.previousWidth;
        var heightRatio = this.frame.canvas.height / this.pixelRatio / this.cameraState.previousHeight;
        var newScale = this.cameraState.scale;
        if (widthRatio != 1 && heightRatio != 1) {
          newScale = this.cameraState.scale * 0.5 * (widthRatio + heightRatio);
        } else if (widthRatio != 1) {
          newScale = this.cameraState.scale * widthRatio;
        } else if (heightRatio != 1) {
          newScale = this.cameraState.scale * heightRatio;
        }
        this.body.view.scale = newScale;
        var currentViewCenter = this.DOMtoCanvas({
          x: 0.5 * this.frame.canvas.clientWidth,
          y: 0.5 * this.frame.canvas.clientHeight
        });
        var distanceFromCenter = {
          // offset from view, distance view has to change by these x and y to center the node
          x: currentViewCenter.x - this.cameraState.position.x,
          y: currentViewCenter.y - this.cameraState.position.y
        };
        this.body.view.translation.x += distanceFromCenter.x * this.body.view.scale;
        this.body.view.translation.y += distanceFromCenter.y * this.body.view.scale;
      }
    }
    /**
     *
     * @param {number|string} value
     * @returns {string}
     * @private
     */
  }, {
    key: "_prepareValue",
    value: function _prepareValue(value2) {
      if (typeof value2 === "number") {
        return value2 + "px";
      } else if (typeof value2 === "string") {
        if (_indexOfInstanceProperty(value2).call(value2, "%") !== -1 || _indexOfInstanceProperty(value2).call(value2, "px") !== -1) {
          return value2;
        } else if (_indexOfInstanceProperty(value2).call(value2, "%") === -1) {
          return value2 + "px";
        }
      }
      throw new Error("Could not use the value supplied for width or height:" + value2);
    }
    /**
     * Create the HTML
     */
  }, {
    key: "_create",
    value: function _create() {
      while (this.body.container.hasChildNodes()) {
        this.body.container.removeChild(this.body.container.firstChild);
      }
      this.frame = document.createElement("div");
      this.frame.className = "vis-network";
      this.frame.style.position = "relative";
      this.frame.style.overflow = "hidden";
      this.frame.tabIndex = 0;
      this.frame.canvas = document.createElement("canvas");
      this.frame.canvas.style.position = "relative";
      this.frame.appendChild(this.frame.canvas);
      if (!this.frame.canvas.getContext) {
        var noCanvas = document.createElement("DIV");
        noCanvas.style.color = "red";
        noCanvas.style.fontWeight = "bold";
        noCanvas.style.padding = "10px";
        noCanvas.innerText = "Error: your browser does not support HTML canvas";
        this.frame.canvas.appendChild(noCanvas);
      } else {
        this._setPixelRatio();
        this.setTransform();
      }
      this.body.container.appendChild(this.frame);
      this.body.view.scale = 1;
      this.body.view.translation = {
        x: 0.5 * this.frame.canvas.clientWidth,
        y: 0.5 * this.frame.canvas.clientHeight
      };
      this._bindHammer();
    }
    /**
     * This function binds hammer, it can be repeated over and over due to the uniqueness check.
     *
     * @private
     */
  }, {
    key: "_bindHammer",
    value: function _bindHammer() {
      var _this3 = this;
      if (this.hammer !== void 0) {
        this.hammer.destroy();
      }
      this.drag = {};
      this.pinch = {};
      this.hammer = new Hammer(this.frame.canvas);
      this.hammer.get("pinch").set({
        enable: true
      });
      this.hammer.get("pan").set({
        threshold: 5,
        direction: Hammer.DIRECTION_ALL
      });
      onTouch(this.hammer, function(event) {
        _this3.body.eventListeners.onTouch(event);
      });
      this.hammer.on("tap", function(event) {
        _this3.body.eventListeners.onTap(event);
      });
      this.hammer.on("doubletap", function(event) {
        _this3.body.eventListeners.onDoubleTap(event);
      });
      this.hammer.on("press", function(event) {
        _this3.body.eventListeners.onHold(event);
      });
      this.hammer.on("panstart", function(event) {
        _this3.body.eventListeners.onDragStart(event);
      });
      this.hammer.on("panmove", function(event) {
        _this3.body.eventListeners.onDrag(event);
      });
      this.hammer.on("panend", function(event) {
        _this3.body.eventListeners.onDragEnd(event);
      });
      this.hammer.on("pinch", function(event) {
        _this3.body.eventListeners.onPinch(event);
      });
      this.frame.canvas.addEventListener("wheel", function(event) {
        _this3.body.eventListeners.onMouseWheel(event);
      });
      this.frame.canvas.addEventListener("mousemove", function(event) {
        _this3.body.eventListeners.onMouseMove(event);
      });
      this.frame.canvas.addEventListener("contextmenu", function(event) {
        _this3.body.eventListeners.onContext(event);
      });
      this.hammerFrame = new Hammer(this.frame);
      onRelease(this.hammerFrame, function(event) {
        _this3.body.eventListeners.onRelease(event);
      });
    }
    /**
     * Set a new size for the network
     *
     * @param {string} width   Width in pixels or percentage (for example '800px'
     *                         or '50%')
     * @param {string} height  Height in pixels or percentage  (for example '400px'
     *                         or '30%')
     * @returns {boolean}
     */
  }, {
    key: "setSize",
    value: function setSize() {
      var width = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.options.width;
      var height = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.options.height;
      width = this._prepareValue(width);
      height = this._prepareValue(height);
      var emitEvent = false;
      var oldWidth = this.frame.canvas.width;
      var oldHeight = this.frame.canvas.height;
      var previousRatio = this.pixelRatio;
      this._setPixelRatio();
      if (width != this.options.width || height != this.options.height || this.frame.style.width != width || this.frame.style.height != height) {
        this._getCameraState(previousRatio);
        this.frame.style.width = width;
        this.frame.style.height = height;
        this.frame.canvas.style.width = "100%";
        this.frame.canvas.style.height = "100%";
        this.frame.canvas.width = Math.round(this.frame.canvas.clientWidth * this.pixelRatio);
        this.frame.canvas.height = Math.round(this.frame.canvas.clientHeight * this.pixelRatio);
        this.options.width = width;
        this.options.height = height;
        this.canvasViewCenter = {
          x: 0.5 * this.frame.clientWidth,
          y: 0.5 * this.frame.clientHeight
        };
        emitEvent = true;
      } else {
        var newWidth = Math.round(this.frame.canvas.clientWidth * this.pixelRatio);
        var newHeight = Math.round(this.frame.canvas.clientHeight * this.pixelRatio);
        if (this.frame.canvas.width !== newWidth || this.frame.canvas.height !== newHeight) {
          this._getCameraState(previousRatio);
        }
        if (this.frame.canvas.width !== newWidth) {
          this.frame.canvas.width = newWidth;
          emitEvent = true;
        }
        if (this.frame.canvas.height !== newHeight) {
          this.frame.canvas.height = newHeight;
          emitEvent = true;
        }
      }
      if (emitEvent === true) {
        this.body.emitter.emit("resize", {
          width: Math.round(this.frame.canvas.width / this.pixelRatio),
          height: Math.round(this.frame.canvas.height / this.pixelRatio),
          oldWidth: Math.round(oldWidth / this.pixelRatio),
          oldHeight: Math.round(oldHeight / this.pixelRatio)
        });
        this._setCameraState();
      }
      this.initialized = true;
      return emitEvent;
    }
    /**
     *
     * @returns {CanvasRenderingContext2D}
     */
  }, {
    key: "getContext",
    value: function getContext2() {
      return this.frame.canvas.getContext("2d");
    }
    /**
     * Determine the pixel ratio for various browsers.
     *
     * @returns {number}
     * @private
     */
  }, {
    key: "_determinePixelRatio",
    value: function _determinePixelRatio() {
      var ctx = this.getContext();
      if (ctx === void 0) {
        throw new Error("Could not get canvax context");
      }
      var numerator = 1;
      if (typeof window !== "undefined") {
        numerator = window.devicePixelRatio || 1;
      }
      var denominator = ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;
      return numerator / denominator;
    }
    /**
     * Lazy determination of pixel ratio.
     *
     * @private
     */
  }, {
    key: "_setPixelRatio",
    value: function _setPixelRatio() {
      this.pixelRatio = this._determinePixelRatio();
    }
    /**
     * Set the transform in the contained context, based on its pixelRatio
     */
  }, {
    key: "setTransform",
    value: function setTransform() {
      var ctx = this.getContext();
      if (ctx === void 0) {
        throw new Error("Could not get canvax context");
      }
      ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
    }
    /**
     * Convert the X coordinate in DOM-space (coordinate point in browser relative to the container div) to
     * the X coordinate in canvas-space (the simulation sandbox, which the camera looks upon)
     *
     * @param {number} x
     * @returns {number}
     * @private
     */
  }, {
    key: "_XconvertDOMtoCanvas",
    value: function _XconvertDOMtoCanvas(x2) {
      return (x2 - this.body.view.translation.x) / this.body.view.scale;
    }
    /**
     * Convert the X coordinate in canvas-space (the simulation sandbox, which the camera looks upon) to
     * the X coordinate in DOM-space (coordinate point in browser relative to the container div)
     *
     * @param {number} x
     * @returns {number}
     * @private
     */
  }, {
    key: "_XconvertCanvasToDOM",
    value: function _XconvertCanvasToDOM(x2) {
      return x2 * this.body.view.scale + this.body.view.translation.x;
    }
    /**
     * Convert the Y coordinate in DOM-space (coordinate point in browser relative to the container div) to
     * the Y coordinate in canvas-space (the simulation sandbox, which the camera looks upon)
     *
     * @param {number} y
     * @returns {number}
     * @private
     */
  }, {
    key: "_YconvertDOMtoCanvas",
    value: function _YconvertDOMtoCanvas(y2) {
      return (y2 - this.body.view.translation.y) / this.body.view.scale;
    }
    /**
     * Convert the Y coordinate in canvas-space (the simulation sandbox, which the camera looks upon) to
     * the Y coordinate in DOM-space (coordinate point in browser relative to the container div)
     *
     * @param {number} y
     * @returns {number}
     * @private
     */
  }, {
    key: "_YconvertCanvasToDOM",
    value: function _YconvertCanvasToDOM(y2) {
      return y2 * this.body.view.scale + this.body.view.translation.y;
    }
    /**
     * @param {point} pos
     * @returns {point}
     */
  }, {
    key: "canvasToDOM",
    value: function canvasToDOM(pos) {
      return {
        x: this._XconvertCanvasToDOM(pos.x),
        y: this._YconvertCanvasToDOM(pos.y)
      };
    }
    /**
     *
     * @param {point} pos
     * @returns {point}
     */
  }, {
    key: "DOMtoCanvas",
    value: function DOMtoCanvas(pos) {
      return {
        x: this._XconvertDOMtoCanvas(pos.x),
        y: this._YconvertDOMtoCanvas(pos.y)
      };
    }
  }]);
  return Canvas2;
}();
function normalizeFitOptions(rawOptions, allNodeIds) {
  var options = _Object$assign({
    nodes: allNodeIds,
    minZoomLevel: Number.MIN_VALUE,
    maxZoomLevel: 1
  }, rawOptions !== null && rawOptions !== void 0 ? rawOptions : {});
  if (!_Array$isArray(options.nodes)) {
    throw new TypeError("Nodes has to be an array of ids.");
  }
  if (options.nodes.length === 0) {
    options.nodes = allNodeIds;
  }
  if (!(typeof options.minZoomLevel === "number" && options.minZoomLevel > 0)) {
    throw new TypeError("Min zoom level has to be a number higher than zero.");
  }
  if (!(typeof options.maxZoomLevel === "number" && options.minZoomLevel <= options.maxZoomLevel)) {
    throw new TypeError("Max zoom level has to be a number higher than min zoom level.");
  }
  return options;
}
var View = /* @__PURE__ */ function() {
  function View2(body, canvas) {
    var _context, _this = this, _context2;
    _classCallCheck(this, View2);
    this.body = body;
    this.canvas = canvas;
    this.animationSpeed = 1 / this.renderRefreshRate;
    this.animationEasingFunction = "easeInOutQuint";
    this.easingTime = 0;
    this.sourceScale = 0;
    this.targetScale = 0;
    this.sourceTranslation = 0;
    this.targetTranslation = 0;
    this.lockedOnNodeId = void 0;
    this.lockedOnNodeOffset = void 0;
    this.touchTime = 0;
    this.viewFunction = void 0;
    this.body.emitter.on("fit", _bindInstanceProperty$1(_context = this.fit).call(_context, this));
    this.body.emitter.on("animationFinished", function() {
      _this.body.emitter.emit("_stopRendering");
    });
    this.body.emitter.on("unlockNode", _bindInstanceProperty$1(_context2 = this.releaseNode).call(_context2, this));
  }
  _createClass(View2, [{
    key: "setOptions",
    value: function setOptions() {
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      this.options = options;
    }
    /**
     * This function zooms out to fit all data on screen based on amount of nodes
     *
     * @param {object} [options={{nodes=Array}}]
     * @param options
     * @param {boolean} [initialZoom=false]  | zoom based on fitted formula or range, true = fitted, default = false;
     */
  }, {
    key: "fit",
    value: function fit(options) {
      var initialZoom = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      options = normalizeFitOptions(options, this.body.nodeIndices);
      var canvasWidth = this.canvas.frame.canvas.clientWidth;
      var canvasHeight = this.canvas.frame.canvas.clientHeight;
      var range;
      var zoomLevel;
      if (canvasWidth === 0 || canvasHeight === 0) {
        zoomLevel = 1;
        range = NetworkUtil.getRange(this.body.nodes, options.nodes);
      } else if (initialZoom === true) {
        var positionDefined = 0;
        for (var nodeId in this.body.nodes) {
          if (Object.prototype.hasOwnProperty.call(this.body.nodes, nodeId)) {
            var node2 = this.body.nodes[nodeId];
            if (node2.predefinedPosition === true) {
              positionDefined += 1;
            }
          }
        }
        if (positionDefined > 0.5 * this.body.nodeIndices.length) {
          this.fit(options, false);
          return;
        }
        range = NetworkUtil.getRange(this.body.nodes, options.nodes);
        var numberOfNodes = this.body.nodeIndices.length;
        zoomLevel = 12.662 / (numberOfNodes + 7.4147) + 0.0964822;
        var factor = Math.min(canvasWidth / 600, canvasHeight / 600);
        zoomLevel *= factor;
      } else {
        this.body.emitter.emit("_resizeNodes");
        range = NetworkUtil.getRange(this.body.nodes, options.nodes);
        var xDistance = Math.abs(range.maxX - range.minX) * 1.1;
        var yDistance = Math.abs(range.maxY - range.minY) * 1.1;
        var xZoomLevel = canvasWidth / xDistance;
        var yZoomLevel = canvasHeight / yDistance;
        zoomLevel = xZoomLevel <= yZoomLevel ? xZoomLevel : yZoomLevel;
      }
      if (zoomLevel > options.maxZoomLevel) {
        zoomLevel = options.maxZoomLevel;
      } else if (zoomLevel < options.minZoomLevel) {
        zoomLevel = options.minZoomLevel;
      }
      var center = NetworkUtil.findCenter(range);
      var animationOptions = {
        position: center,
        scale: zoomLevel,
        animation: options.animation
      };
      this.moveTo(animationOptions);
    }
    // animation
    /**
     * Center a node in view.
     *
     * @param {number} nodeId
     * @param {number} [options]
     */
  }, {
    key: "focus",
    value: function focus(nodeId) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (this.body.nodes[nodeId] !== void 0) {
        var nodePosition = {
          x: this.body.nodes[nodeId].x,
          y: this.body.nodes[nodeId].y
        };
        options.position = nodePosition;
        options.lockedOnNode = nodeId;
        this.moveTo(options);
      } else {
        console.error("Node: " + nodeId + " cannot be found.");
      }
    }
    /**
     *
     * @param {object} options  |  options.offset   = {x:number, y:number}   // offset from the center in DOM pixels
     *                          |  options.scale    = number                 // scale to move to
     *                          |  options.position = {x:number, y:number}   // position to move to
     *                          |  options.animation = {duration:number, easingFunction:String} || Boolean   // position to move to
     */
  }, {
    key: "moveTo",
    value: function moveTo(options) {
      if (options === void 0) {
        options = {};
        return;
      }
      if (options.offset != null) {
        if (options.offset.x != null) {
          options.offset.x = +options.offset.x;
          if (!_Number$isFinite(options.offset.x)) {
            throw new TypeError('The option "offset.x" has to be a finite number.');
          }
        } else {
          options.offset.x = 0;
        }
        if (options.offset.y != null) {
          options.offset.y = +options.offset.y;
          if (!_Number$isFinite(options.offset.y)) {
            throw new TypeError('The option "offset.y" has to be a finite number.');
          }
        } else {
          options.offset.x = 0;
        }
      } else {
        options.offset = {
          x: 0,
          y: 0
        };
      }
      if (options.position != null) {
        if (options.position.x != null) {
          options.position.x = +options.position.x;
          if (!_Number$isFinite(options.position.x)) {
            throw new TypeError('The option "position.x" has to be a finite number.');
          }
        } else {
          options.position.x = 0;
        }
        if (options.position.y != null) {
          options.position.y = +options.position.y;
          if (!_Number$isFinite(options.position.y)) {
            throw new TypeError('The option "position.y" has to be a finite number.');
          }
        } else {
          options.position.x = 0;
        }
      } else {
        options.position = this.getViewPosition();
      }
      if (options.scale != null) {
        options.scale = +options.scale;
        if (!(options.scale > 0)) {
          throw new TypeError('The option "scale" has to be a number greater than zero.');
        }
      } else {
        options.scale = this.body.view.scale;
      }
      if (options.animation === void 0) {
        options.animation = {
          duration: 0
        };
      }
      if (options.animation === false) {
        options.animation = {
          duration: 0
        };
      }
      if (options.animation === true) {
        options.animation = {};
      }
      if (options.animation.duration === void 0) {
        options.animation.duration = 1e3;
      }
      if (options.animation.easingFunction === void 0) {
        options.animation.easingFunction = "easeInOutQuad";
      }
      this.animateView(options);
    }
    /**
     *
     * @param {object} options  |  options.offset   = {x:number, y:number}   // offset from the center in DOM pixels
     *                          |  options.time     = number                 // animation time in milliseconds
     *                          |  options.scale    = number                 // scale to animate to
     *                          |  options.position = {x:number, y:number}   // position to animate to
     *                          |  options.easingFunction = String           // linear, easeInQuad, easeOutQuad, easeInOutQuad,
     *                                                                       // easeInCubic, easeOutCubic, easeInOutCubic,
     *                                                                       // easeInQuart, easeOutQuart, easeInOutQuart,
     *                                                                       // easeInQuint, easeOutQuint, easeInOutQuint
     */
  }, {
    key: "animateView",
    value: function animateView(options) {
      if (options === void 0) {
        return;
      }
      this.animationEasingFunction = options.animation.easingFunction;
      this.releaseNode();
      if (options.locked === true) {
        this.lockedOnNodeId = options.lockedOnNode;
        this.lockedOnNodeOffset = options.offset;
      }
      if (this.easingTime != 0) {
        this._transitionRedraw(true);
      }
      this.sourceScale = this.body.view.scale;
      this.sourceTranslation = this.body.view.translation;
      this.targetScale = options.scale;
      this.body.view.scale = this.targetScale;
      var viewCenter = this.canvas.DOMtoCanvas({
        x: 0.5 * this.canvas.frame.canvas.clientWidth,
        y: 0.5 * this.canvas.frame.canvas.clientHeight
      });
      var distanceFromCenter = {
        // offset from view, distance view has to change by these x and y to center the node
        x: viewCenter.x - options.position.x,
        y: viewCenter.y - options.position.y
      };
      this.targetTranslation = {
        x: this.sourceTranslation.x + distanceFromCenter.x * this.targetScale + options.offset.x,
        y: this.sourceTranslation.y + distanceFromCenter.y * this.targetScale + options.offset.y
      };
      if (options.animation.duration === 0) {
        if (this.lockedOnNodeId != void 0) {
          var _context3;
          this.viewFunction = _bindInstanceProperty$1(_context3 = this._lockedRedraw).call(_context3, this);
          this.body.emitter.on("initRedraw", this.viewFunction);
        } else {
          this.body.view.scale = this.targetScale;
          this.body.view.translation = this.targetTranslation;
          this.body.emitter.emit("_requestRedraw");
        }
      } else {
        var _context4;
        this.animationSpeed = 1 / (60 * options.animation.duration * 1e-3) || 1 / 60;
        this.animationEasingFunction = options.animation.easingFunction;
        this.viewFunction = _bindInstanceProperty$1(_context4 = this._transitionRedraw).call(_context4, this);
        this.body.emitter.on("initRedraw", this.viewFunction);
        this.body.emitter.emit("_startRendering");
      }
    }
    /**
     * used to animate smoothly by hijacking the redraw function.
     *
     * @private
     */
  }, {
    key: "_lockedRedraw",
    value: function _lockedRedraw() {
      var nodePosition = {
        x: this.body.nodes[this.lockedOnNodeId].x,
        y: this.body.nodes[this.lockedOnNodeId].y
      };
      var viewCenter = this.canvas.DOMtoCanvas({
        x: 0.5 * this.canvas.frame.canvas.clientWidth,
        y: 0.5 * this.canvas.frame.canvas.clientHeight
      });
      var distanceFromCenter = {
        // offset from view, distance view has to change by these x and y to center the node
        x: viewCenter.x - nodePosition.x,
        y: viewCenter.y - nodePosition.y
      };
      var sourceTranslation = this.body.view.translation;
      var targetTranslation = {
        x: sourceTranslation.x + distanceFromCenter.x * this.body.view.scale + this.lockedOnNodeOffset.x,
        y: sourceTranslation.y + distanceFromCenter.y * this.body.view.scale + this.lockedOnNodeOffset.y
      };
      this.body.view.translation = targetTranslation;
    }
    /**
     * Resets state of a locked on Node
     */
  }, {
    key: "releaseNode",
    value: function releaseNode() {
      if (this.lockedOnNodeId !== void 0 && this.viewFunction !== void 0) {
        this.body.emitter.off("initRedraw", this.viewFunction);
        this.lockedOnNodeId = void 0;
        this.lockedOnNodeOffset = void 0;
      }
    }
    /**
     * @param {boolean} [finished=false]
     * @private
     */
  }, {
    key: "_transitionRedraw",
    value: function _transitionRedraw() {
      var finished = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      this.easingTime += this.animationSpeed;
      this.easingTime = finished === true ? 1 : this.easingTime;
      var progress = easingFunctions[this.animationEasingFunction](this.easingTime);
      this.body.view.scale = this.sourceScale + (this.targetScale - this.sourceScale) * progress;
      this.body.view.translation = {
        x: this.sourceTranslation.x + (this.targetTranslation.x - this.sourceTranslation.x) * progress,
        y: this.sourceTranslation.y + (this.targetTranslation.y - this.sourceTranslation.y) * progress
      };
      if (this.easingTime >= 1) {
        this.body.emitter.off("initRedraw", this.viewFunction);
        this.easingTime = 0;
        if (this.lockedOnNodeId != void 0) {
          var _context5;
          this.viewFunction = _bindInstanceProperty$1(_context5 = this._lockedRedraw).call(_context5, this);
          this.body.emitter.on("initRedraw", this.viewFunction);
        }
        this.body.emitter.emit("animationFinished");
      }
    }
    /**
     *
     * @returns {number}
     */
  }, {
    key: "getScale",
    value: function getScale2() {
      return this.body.view.scale;
    }
    /**
     *
     * @returns {{x: number, y: number}}
     */
  }, {
    key: "getViewPosition",
    value: function getViewPosition() {
      return this.canvas.DOMtoCanvas({
        x: 0.5 * this.canvas.frame.canvas.clientWidth,
        y: 0.5 * this.canvas.frame.canvas.clientHeight
      });
    }
  }]);
  return View2;
}();
function keycharm(options) {
  var preventDefault = options && options.preventDefault || false;
  var container = options && options.container || window;
  var _exportFunctions = {};
  var _bound = { keydown: {}, keyup: {} };
  var _keys = {};
  var i2;
  for (i2 = 97; i2 <= 122; i2++) {
    _keys[String.fromCharCode(i2)] = { code: 65 + (i2 - 97), shift: false };
  }
  for (i2 = 65; i2 <= 90; i2++) {
    _keys[String.fromCharCode(i2)] = { code: i2, shift: true };
  }
  for (i2 = 0; i2 <= 9; i2++) {
    _keys["" + i2] = { code: 48 + i2, shift: false };
  }
  for (i2 = 1; i2 <= 12; i2++) {
    _keys["F" + i2] = { code: 111 + i2, shift: false };
  }
  for (i2 = 0; i2 <= 9; i2++) {
    _keys["num" + i2] = { code: 96 + i2, shift: false };
  }
  _keys["num*"] = { code: 106, shift: false };
  _keys["num+"] = { code: 107, shift: false };
  _keys["num-"] = { code: 109, shift: false };
  _keys["num/"] = { code: 111, shift: false };
  _keys["num."] = { code: 110, shift: false };
  _keys["left"] = { code: 37, shift: false };
  _keys["up"] = { code: 38, shift: false };
  _keys["right"] = { code: 39, shift: false };
  _keys["down"] = { code: 40, shift: false };
  _keys["space"] = { code: 32, shift: false };
  _keys["enter"] = { code: 13, shift: false };
  _keys["shift"] = { code: 16, shift: void 0 };
  _keys["esc"] = { code: 27, shift: false };
  _keys["backspace"] = { code: 8, shift: false };
  _keys["tab"] = { code: 9, shift: false };
  _keys["ctrl"] = { code: 17, shift: false };
  _keys["alt"] = { code: 18, shift: false };
  _keys["delete"] = { code: 46, shift: false };
  _keys["pageup"] = { code: 33, shift: false };
  _keys["pagedown"] = { code: 34, shift: false };
  _keys["="] = { code: 187, shift: false };
  _keys["-"] = { code: 189, shift: false };
  _keys["]"] = { code: 221, shift: false };
  _keys["["] = { code: 219, shift: false };
  var down = function(event) {
    handleEvent(event, "keydown");
  };
  var up = function(event) {
    handleEvent(event, "keyup");
  };
  var handleEvent = function(event, type) {
    if (_bound[type][event.keyCode] !== void 0) {
      var bound = _bound[type][event.keyCode];
      for (var i3 = 0; i3 < bound.length; i3++) {
        if (bound[i3].shift === void 0) {
          bound[i3].fn(event);
        } else if (bound[i3].shift == true && event.shiftKey == true) {
          bound[i3].fn(event);
        } else if (bound[i3].shift == false && event.shiftKey == false) {
          bound[i3].fn(event);
        }
      }
      if (preventDefault == true) {
        event.preventDefault();
      }
    }
  };
  _exportFunctions.bind = function(key2, callback, type) {
    if (type === void 0) {
      type = "keydown";
    }
    if (_keys[key2] === void 0) {
      throw new Error("unsupported key: " + key2);
    }
    if (_bound[type][_keys[key2].code] === void 0) {
      _bound[type][_keys[key2].code] = [];
    }
    _bound[type][_keys[key2].code].push({ fn: callback, shift: _keys[key2].shift });
  };
  _exportFunctions.bindAll = function(callback, type) {
    if (type === void 0) {
      type = "keydown";
    }
    for (var key2 in _keys) {
      if (_keys.hasOwnProperty(key2)) {
        _exportFunctions.bind(key2, callback, type);
      }
    }
  };
  _exportFunctions.getKey = function(event) {
    for (var key2 in _keys) {
      if (_keys.hasOwnProperty(key2)) {
        if (event.shiftKey == true && _keys[key2].shift == true && event.keyCode == _keys[key2].code) {
          return key2;
        } else if (event.shiftKey == false && _keys[key2].shift == false && event.keyCode == _keys[key2].code) {
          return key2;
        } else if (event.keyCode == _keys[key2].code && key2 == "shift") {
          return key2;
        }
      }
    }
    return "unknown key, currently not supported";
  };
  _exportFunctions.unbind = function(key2, callback, type) {
    if (type === void 0) {
      type = "keydown";
    }
    if (_keys[key2] === void 0) {
      throw new Error("unsupported key: " + key2);
    }
    if (callback !== void 0) {
      var newBindings = [];
      var bound = _bound[type][_keys[key2].code];
      if (bound !== void 0) {
        for (var i3 = 0; i3 < bound.length; i3++) {
          if (!(bound[i3].fn == callback && bound[i3].shift == _keys[key2].shift)) {
            newBindings.push(_bound[type][_keys[key2].code][i3]);
          }
        }
      }
      _bound[type][_keys[key2].code] = newBindings;
    } else {
      _bound[type][_keys[key2].code] = [];
    }
  };
  _exportFunctions.reset = function() {
    _bound = { keydown: {}, keyup: {} };
  };
  _exportFunctions.destroy = function() {
    _bound = { keydown: {}, keyup: {} };
    container.removeEventListener("keydown", down, true);
    container.removeEventListener("keyup", up, true);
  };
  container.addEventListener("keydown", down, true);
  container.addEventListener("keyup", up, true);
  return _exportFunctions;
}
var NavigationHandler = /* @__PURE__ */ function() {
  function NavigationHandler2(body, canvas) {
    var _this = this;
    _classCallCheck(this, NavigationHandler2);
    this.body = body;
    this.canvas = canvas;
    this.iconsCreated = false;
    this.navigationHammers = [];
    this.boundFunctions = {};
    this.touchTime = 0;
    this.activated = false;
    this.body.emitter.on("activate", function() {
      _this.activated = true;
      _this.configureKeyboardBindings();
    });
    this.body.emitter.on("deactivate", function() {
      _this.activated = false;
      _this.configureKeyboardBindings();
    });
    this.body.emitter.on("destroy", function() {
      if (_this.keycharm !== void 0) {
        _this.keycharm.destroy();
      }
    });
    this.options = {};
  }
  _createClass(NavigationHandler2, [{
    key: "setOptions",
    value: function setOptions(options) {
      if (options !== void 0) {
        this.options = options;
        this.create();
      }
    }
    /**
     * Creates or refreshes navigation and sets key bindings
     */
  }, {
    key: "create",
    value: function create8() {
      if (this.options.navigationButtons === true) {
        if (this.iconsCreated === false) {
          this.loadNavigationElements();
        }
      } else if (this.iconsCreated === true) {
        this.cleanNavigation();
      }
      this.configureKeyboardBindings();
    }
    /**
     * Cleans up previous navigation items
     */
  }, {
    key: "cleanNavigation",
    value: function cleanNavigation() {
      if (this.navigationHammers.length != 0) {
        for (var i2 = 0; i2 < this.navigationHammers.length; i2++) {
          this.navigationHammers[i2].destroy();
        }
        this.navigationHammers = [];
      }
      if (this.navigationDOM && this.navigationDOM["wrapper"] && this.navigationDOM["wrapper"].parentNode) {
        this.navigationDOM["wrapper"].parentNode.removeChild(this.navigationDOM["wrapper"]);
      }
      this.iconsCreated = false;
    }
    /**
     * Creation of the navigation controls nodes. They are drawn over the rest of the nodes and are not affected by scale and translation
     * they have a triggerFunction which is called on click. If the position of the navigation controls is dependent
     * on this.frame.canvas.clientWidth or this.frame.canvas.clientHeight, we flag horizontalAlignLeft and verticalAlignTop false.
     * This means that the location will be corrected by the _relocateNavigation function on a size change of the canvas.
     *
     * @private
     */
  }, {
    key: "loadNavigationElements",
    value: function loadNavigationElements() {
      var _this2 = this;
      this.cleanNavigation();
      this.navigationDOM = {};
      var navigationDivs = ["up", "down", "left", "right", "zoomIn", "zoomOut", "zoomExtends"];
      var navigationDivActions = ["_moveUp", "_moveDown", "_moveLeft", "_moveRight", "_zoomIn", "_zoomOut", "_fit"];
      this.navigationDOM["wrapper"] = document.createElement("div");
      this.navigationDOM["wrapper"].className = "vis-navigation";
      this.canvas.frame.appendChild(this.navigationDOM["wrapper"]);
      for (var i2 = 0; i2 < navigationDivs.length; i2++) {
        this.navigationDOM[navigationDivs[i2]] = document.createElement("div");
        this.navigationDOM[navigationDivs[i2]].className = "vis-button vis-" + navigationDivs[i2];
        this.navigationDOM["wrapper"].appendChild(this.navigationDOM[navigationDivs[i2]]);
        var hammer2 = new Hammer(this.navigationDOM[navigationDivs[i2]]);
        if (navigationDivActions[i2] === "_fit") {
          var _context;
          onTouch(hammer2, _bindInstanceProperty$1(_context = this._fit).call(_context, this));
        } else {
          var _context2;
          onTouch(hammer2, _bindInstanceProperty$1(_context2 = this.bindToRedraw).call(_context2, this, navigationDivActions[i2]));
        }
        this.navigationHammers.push(hammer2);
      }
      var hammerFrame = new Hammer(this.canvas.frame);
      onRelease(hammerFrame, function() {
        _this2._stopMovement();
      });
      this.navigationHammers.push(hammerFrame);
      this.iconsCreated = true;
    }
    /**
     *
     * @param {string} action
     */
  }, {
    key: "bindToRedraw",
    value: function bindToRedraw(action) {
      if (this.boundFunctions[action] === void 0) {
        var _context3;
        this.boundFunctions[action] = _bindInstanceProperty$1(_context3 = this[action]).call(_context3, this);
        this.body.emitter.on("initRedraw", this.boundFunctions[action]);
        this.body.emitter.emit("_startRendering");
      }
    }
    /**
     *
     * @param {string} action
     */
  }, {
    key: "unbindFromRedraw",
    value: function unbindFromRedraw(action) {
      if (this.boundFunctions[action] !== void 0) {
        this.body.emitter.off("initRedraw", this.boundFunctions[action]);
        this.body.emitter.emit("_stopRendering");
        delete this.boundFunctions[action];
      }
    }
    /**
     * this stops all movement induced by the navigation buttons
     *
     * @private
     */
  }, {
    key: "_fit",
    value: function _fit() {
      if ((/* @__PURE__ */ new Date()).valueOf() - this.touchTime > 700) {
        this.body.emitter.emit("fit", {
          duration: 700
        });
        this.touchTime = (/* @__PURE__ */ new Date()).valueOf();
      }
    }
    /**
     * this stops all movement induced by the navigation buttons
     *
     * @private
     */
  }, {
    key: "_stopMovement",
    value: function _stopMovement() {
      for (var boundAction in this.boundFunctions) {
        if (Object.prototype.hasOwnProperty.call(this.boundFunctions, boundAction)) {
          this.body.emitter.off("initRedraw", this.boundFunctions[boundAction]);
          this.body.emitter.emit("_stopRendering");
        }
      }
      this.boundFunctions = {};
    }
    /**
     *
     * @private
     */
  }, {
    key: "_moveUp",
    value: function _moveUp() {
      this.body.view.translation.y += this.options.keyboard.speed.y;
    }
    /**
     *
     * @private
     */
  }, {
    key: "_moveDown",
    value: function _moveDown() {
      this.body.view.translation.y -= this.options.keyboard.speed.y;
    }
    /**
     *
     * @private
     */
  }, {
    key: "_moveLeft",
    value: function _moveLeft() {
      this.body.view.translation.x += this.options.keyboard.speed.x;
    }
    /**
     *
     * @private
     */
  }, {
    key: "_moveRight",
    value: function _moveRight() {
      this.body.view.translation.x -= this.options.keyboard.speed.x;
    }
    /**
     *
     * @private
     */
  }, {
    key: "_zoomIn",
    value: function _zoomIn() {
      var scaleOld = this.body.view.scale;
      var scale = this.body.view.scale * (1 + this.options.keyboard.speed.zoom);
      var translation = this.body.view.translation;
      var scaleFrac = scale / scaleOld;
      var tx = (1 - scaleFrac) * this.canvas.canvasViewCenter.x + translation.x * scaleFrac;
      var ty = (1 - scaleFrac) * this.canvas.canvasViewCenter.y + translation.y * scaleFrac;
      this.body.view.scale = scale;
      this.body.view.translation = {
        x: tx,
        y: ty
      };
      this.body.emitter.emit("zoom", {
        direction: "+",
        scale: this.body.view.scale,
        pointer: null
      });
    }
    /**
     *
     * @private
     */
  }, {
    key: "_zoomOut",
    value: function _zoomOut() {
      var scaleOld = this.body.view.scale;
      var scale = this.body.view.scale / (1 + this.options.keyboard.speed.zoom);
      var translation = this.body.view.translation;
      var scaleFrac = scale / scaleOld;
      var tx = (1 - scaleFrac) * this.canvas.canvasViewCenter.x + translation.x * scaleFrac;
      var ty = (1 - scaleFrac) * this.canvas.canvasViewCenter.y + translation.y * scaleFrac;
      this.body.view.scale = scale;
      this.body.view.translation = {
        x: tx,
        y: ty
      };
      this.body.emitter.emit("zoom", {
        direction: "-",
        scale: this.body.view.scale,
        pointer: null
      });
    }
    /**
     * bind all keys using keycharm.
     */
  }, {
    key: "configureKeyboardBindings",
    value: function configureKeyboardBindings() {
      var _this3 = this;
      if (this.keycharm !== void 0) {
        this.keycharm.destroy();
      }
      if (this.options.keyboard.enabled === true) {
        if (this.options.keyboard.bindToWindow === true) {
          this.keycharm = keycharm({
            container: window,
            preventDefault: true
          });
        } else {
          this.keycharm = keycharm({
            container: this.canvas.frame,
            preventDefault: true
          });
        }
        this.keycharm.reset();
        if (this.activated === true) {
          var _context4, _context5, _context6, _context7, _context8, _context9, _context10, _context11, _context12, _context13, _context14, _context15, _context16, _context17, _context18, _context19, _context20, _context21, _context22, _context23, _context24, _context25, _context26, _context27;
          _bindInstanceProperty$1(_context4 = this.keycharm).call(_context4, "up", function() {
            _this3.bindToRedraw("_moveUp");
          }, "keydown");
          _bindInstanceProperty$1(_context5 = this.keycharm).call(_context5, "down", function() {
            _this3.bindToRedraw("_moveDown");
          }, "keydown");
          _bindInstanceProperty$1(_context6 = this.keycharm).call(_context6, "left", function() {
            _this3.bindToRedraw("_moveLeft");
          }, "keydown");
          _bindInstanceProperty$1(_context7 = this.keycharm).call(_context7, "right", function() {
            _this3.bindToRedraw("_moveRight");
          }, "keydown");
          _bindInstanceProperty$1(_context8 = this.keycharm).call(_context8, "=", function() {
            _this3.bindToRedraw("_zoomIn");
          }, "keydown");
          _bindInstanceProperty$1(_context9 = this.keycharm).call(_context9, "num+", function() {
            _this3.bindToRedraw("_zoomIn");
          }, "keydown");
          _bindInstanceProperty$1(_context10 = this.keycharm).call(_context10, "num-", function() {
            _this3.bindToRedraw("_zoomOut");
          }, "keydown");
          _bindInstanceProperty$1(_context11 = this.keycharm).call(_context11, "-", function() {
            _this3.bindToRedraw("_zoomOut");
          }, "keydown");
          _bindInstanceProperty$1(_context12 = this.keycharm).call(_context12, "[", function() {
            _this3.bindToRedraw("_zoomOut");
          }, "keydown");
          _bindInstanceProperty$1(_context13 = this.keycharm).call(_context13, "]", function() {
            _this3.bindToRedraw("_zoomIn");
          }, "keydown");
          _bindInstanceProperty$1(_context14 = this.keycharm).call(_context14, "pageup", function() {
            _this3.bindToRedraw("_zoomIn");
          }, "keydown");
          _bindInstanceProperty$1(_context15 = this.keycharm).call(_context15, "pagedown", function() {
            _this3.bindToRedraw("_zoomOut");
          }, "keydown");
          _bindInstanceProperty$1(_context16 = this.keycharm).call(_context16, "up", function() {
            _this3.unbindFromRedraw("_moveUp");
          }, "keyup");
          _bindInstanceProperty$1(_context17 = this.keycharm).call(_context17, "down", function() {
            _this3.unbindFromRedraw("_moveDown");
          }, "keyup");
          _bindInstanceProperty$1(_context18 = this.keycharm).call(_context18, "left", function() {
            _this3.unbindFromRedraw("_moveLeft");
          }, "keyup");
          _bindInstanceProperty$1(_context19 = this.keycharm).call(_context19, "right", function() {
            _this3.unbindFromRedraw("_moveRight");
          }, "keyup");
          _bindInstanceProperty$1(_context20 = this.keycharm).call(_context20, "=", function() {
            _this3.unbindFromRedraw("_zoomIn");
          }, "keyup");
          _bindInstanceProperty$1(_context21 = this.keycharm).call(_context21, "num+", function() {
            _this3.unbindFromRedraw("_zoomIn");
          }, "keyup");
          _bindInstanceProperty$1(_context22 = this.keycharm).call(_context22, "num-", function() {
            _this3.unbindFromRedraw("_zoomOut");
          }, "keyup");
          _bindInstanceProperty$1(_context23 = this.keycharm).call(_context23, "-", function() {
            _this3.unbindFromRedraw("_zoomOut");
          }, "keyup");
          _bindInstanceProperty$1(_context24 = this.keycharm).call(_context24, "[", function() {
            _this3.unbindFromRedraw("_zoomOut");
          }, "keyup");
          _bindInstanceProperty$1(_context25 = this.keycharm).call(_context25, "]", function() {
            _this3.unbindFromRedraw("_zoomIn");
          }, "keyup");
          _bindInstanceProperty$1(_context26 = this.keycharm).call(_context26, "pageup", function() {
            _this3.unbindFromRedraw("_zoomIn");
          }, "keyup");
          _bindInstanceProperty$1(_context27 = this.keycharm).call(_context27, "pagedown", function() {
            _this3.unbindFromRedraw("_zoomOut");
          }, "keyup");
        }
      }
    }
  }]);
  return NavigationHandler2;
}();
function _createForOfIteratorHelper$4(o2, allowArrayLike) {
  var it2 = typeof _Symbol !== "undefined" && _getIteratorMethod(o2) || o2["@@iterator"];
  if (!it2) {
    if (_Array$isArray(o2) || (it2 = _unsupportedIterableToArray$4(o2)) || allowArrayLike) {
      if (it2) o2 = it2;
      var i2 = 0;
      var F = function F2() {
      };
      return { s: F, n: function n2() {
        if (i2 >= o2.length) return { done: true };
        return { done: false, value: o2[i2++] };
      }, e: function e2(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s2() {
    it2 = it2.call(o2);
  }, n: function n2() {
    var step = it2.next();
    normalCompletion = step.done;
    return step;
  }, e: function e2(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f2() {
    try {
      if (!normalCompletion && it2.return != null) it2.return();
    } finally {
      if (didErr) throw err;
    }
  } };
}
function _unsupportedIterableToArray$4(o2, minLen) {
  var _context15;
  if (!o2) return;
  if (typeof o2 === "string") return _arrayLikeToArray$4(o2, minLen);
  var n2 = _sliceInstanceProperty(_context15 = Object.prototype.toString.call(o2)).call(_context15, 8, -1);
  if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set") return _Array$from$1(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$4(o2, minLen);
}
function _arrayLikeToArray$4(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
  return arr2;
}
var InteractionHandler = /* @__PURE__ */ function() {
  function InteractionHandler2(body, canvas, selectionHandler) {
    var _context, _context2, _context3, _context4, _context5, _context6, _context7, _context8, _context9, _context10, _context11, _context12, _context13;
    _classCallCheck(this, InteractionHandler2);
    this.body = body;
    this.canvas = canvas;
    this.selectionHandler = selectionHandler;
    this.navigationHandler = new NavigationHandler(body, canvas);
    this.body.eventListeners.onTap = _bindInstanceProperty$1(_context = this.onTap).call(_context, this);
    this.body.eventListeners.onTouch = _bindInstanceProperty$1(_context2 = this.onTouch).call(_context2, this);
    this.body.eventListeners.onDoubleTap = _bindInstanceProperty$1(_context3 = this.onDoubleTap).call(_context3, this);
    this.body.eventListeners.onHold = _bindInstanceProperty$1(_context4 = this.onHold).call(_context4, this);
    this.body.eventListeners.onDragStart = _bindInstanceProperty$1(_context5 = this.onDragStart).call(_context5, this);
    this.body.eventListeners.onDrag = _bindInstanceProperty$1(_context6 = this.onDrag).call(_context6, this);
    this.body.eventListeners.onDragEnd = _bindInstanceProperty$1(_context7 = this.onDragEnd).call(_context7, this);
    this.body.eventListeners.onMouseWheel = _bindInstanceProperty$1(_context8 = this.onMouseWheel).call(_context8, this);
    this.body.eventListeners.onPinch = _bindInstanceProperty$1(_context9 = this.onPinch).call(_context9, this);
    this.body.eventListeners.onMouseMove = _bindInstanceProperty$1(_context10 = this.onMouseMove).call(_context10, this);
    this.body.eventListeners.onRelease = _bindInstanceProperty$1(_context11 = this.onRelease).call(_context11, this);
    this.body.eventListeners.onContext = _bindInstanceProperty$1(_context12 = this.onContext).call(_context12, this);
    this.touchTime = 0;
    this.drag = {};
    this.pinch = {};
    this.popup = void 0;
    this.popupObj = void 0;
    this.popupTimer = void 0;
    this.body.functions.getPointer = _bindInstanceProperty$1(_context13 = this.getPointer).call(_context13, this);
    this.options = {};
    this.defaultOptions = {
      dragNodes: true,
      dragView: true,
      hover: false,
      keyboard: {
        enabled: false,
        speed: {
          x: 10,
          y: 10,
          zoom: 0.02
        },
        bindToWindow: true,
        autoFocus: true
      },
      navigationButtons: false,
      tooltipDelay: 300,
      zoomView: true,
      zoomSpeed: 1
    };
    _Object$assign(this.options, this.defaultOptions);
    this.bindEventListeners();
  }
  _createClass(InteractionHandler2, [{
    key: "bindEventListeners",
    value: function bindEventListeners() {
      var _this = this;
      this.body.emitter.on("destroy", function() {
        clearTimeout(_this.popupTimer);
        delete _this.body.functions.getPointer;
      });
    }
    /**
     *
     * @param {object} options
     */
  }, {
    key: "setOptions",
    value: function setOptions(options) {
      if (options !== void 0) {
        var fields = ["hideEdgesOnDrag", "hideEdgesOnZoom", "hideNodesOnDrag", "keyboard", "multiselect", "selectable", "selectConnectedEdges"];
        selectiveNotDeepExtend(fields, this.options, options);
        mergeOptions(this.options, options, "keyboard");
        if (options.tooltip) {
          _Object$assign(this.options.tooltip, options.tooltip);
          if (options.tooltip.color) {
            this.options.tooltip.color = parseColor(options.tooltip.color);
          }
        }
      }
      this.navigationHandler.setOptions(this.options);
    }
    /**
     * Get the pointer location from a touch location
     *
     * @param {{x: number, y: number}} touch
     * @returns {{x: number, y: number}} pointer
     * @private
     */
  }, {
    key: "getPointer",
    value: function getPointer(touch) {
      return {
        x: touch.x - getAbsoluteLeft(this.canvas.frame.canvas),
        y: touch.y - getAbsoluteTop(this.canvas.frame.canvas)
      };
    }
    /**
     * On start of a touch gesture, store the pointer
     *
     * @param {Event}  event   The event
     * @private
     */
  }, {
    key: "onTouch",
    value: function onTouch2(event) {
      if ((/* @__PURE__ */ new Date()).valueOf() - this.touchTime > 50) {
        this.drag.pointer = this.getPointer(event.center);
        this.drag.pinched = false;
        this.pinch.scale = this.body.view.scale;
        this.touchTime = (/* @__PURE__ */ new Date()).valueOf();
      }
    }
    /**
     * handle tap/click event: select/unselect a node
     *
     * @param {Event} event
     * @private
     */
  }, {
    key: "onTap",
    value: function onTap(event) {
      var pointer = this.getPointer(event.center);
      var multiselect = this.selectionHandler.options.multiselect && (event.changedPointers[0].ctrlKey || event.changedPointers[0].metaKey);
      this.checkSelectionChanges(pointer, multiselect);
      this.selectionHandler.commitAndEmit(pointer, event);
      this.selectionHandler.generateClickEvent("click", event, pointer);
    }
    /**
     * handle doubletap event
     *
     * @param {Event} event
     * @private
     */
  }, {
    key: "onDoubleTap",
    value: function onDoubleTap(event) {
      var pointer = this.getPointer(event.center);
      this.selectionHandler.generateClickEvent("doubleClick", event, pointer);
    }
    /**
     * handle long tap event: multi select nodes
     *
     * @param {Event} event
     * @private
     */
  }, {
    key: "onHold",
    value: function onHold(event) {
      var pointer = this.getPointer(event.center);
      var multiselect = this.selectionHandler.options.multiselect;
      this.checkSelectionChanges(pointer, multiselect);
      this.selectionHandler.commitAndEmit(pointer, event);
      this.selectionHandler.generateClickEvent("click", event, pointer);
      this.selectionHandler.generateClickEvent("hold", event, pointer);
    }
    /**
     * handle the release of the screen
     *
     * @param {Event} event
     * @private
     */
  }, {
    key: "onRelease",
    value: function onRelease2(event) {
      if ((/* @__PURE__ */ new Date()).valueOf() - this.touchTime > 10) {
        var pointer = this.getPointer(event.center);
        this.selectionHandler.generateClickEvent("release", event, pointer);
        this.touchTime = (/* @__PURE__ */ new Date()).valueOf();
      }
    }
    /**
     *
     * @param {Event} event
     */
  }, {
    key: "onContext",
    value: function onContext(event) {
      var pointer = this.getPointer({
        x: event.clientX,
        y: event.clientY
      });
      this.selectionHandler.generateClickEvent("oncontext", event, pointer);
    }
    /**
     * Select and deselect nodes depending current selection change.
     *
     * @param {{x: number, y: number}} pointer
     * @param {boolean} [add=false]
     */
  }, {
    key: "checkSelectionChanges",
    value: function checkSelectionChanges(pointer) {
      var add = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      if (add === true) {
        this.selectionHandler.selectAdditionalOnPoint(pointer);
      } else {
        this.selectionHandler.selectOnPoint(pointer);
      }
    }
    /**
     * Remove all node and edge id's from the first set that are present in the second one.
     *
     * @param {{nodes: Array.<Node>, edges: Array.<vis.Edge>}} firstSet
     * @param {{nodes: Array.<Node>, edges: Array.<vis.Edge>}} secondSet
     * @returns {{nodes: Array.<Node>, edges: Array.<vis.Edge>}}
     * @private
     */
  }, {
    key: "_determineDifference",
    value: function _determineDifference(firstSet, secondSet) {
      var arrayDiff = function arrayDiff2(firstArr, secondArr) {
        var result = [];
        for (var i2 = 0; i2 < firstArr.length; i2++) {
          var value2 = firstArr[i2];
          if (_indexOfInstanceProperty(secondArr).call(secondArr, value2) === -1) {
            result.push(value2);
          }
        }
        return result;
      };
      return {
        nodes: arrayDiff(firstSet.nodes, secondSet.nodes),
        edges: arrayDiff(firstSet.edges, secondSet.edges)
      };
    }
    /**
     * This function is called by onDragStart.
     * It is separated out because we can then overload it for the datamanipulation system.
     *
     * @param {Event} event
     * @private
     */
  }, {
    key: "onDragStart",
    value: function onDragStart(event) {
      if (this.drag.dragging) {
        return;
      }
      if (this.drag.pointer === void 0) {
        this.onTouch(event);
      }
      var node2 = this.selectionHandler.getNodeAt(this.drag.pointer);
      this.drag.dragging = true;
      this.drag.selection = [];
      this.drag.translation = _Object$assign({}, this.body.view.translation);
      this.drag.nodeId = void 0;
      if (event.srcEvent.shiftKey) {
        this.body.selectionBox.show = true;
        var pointer = this.getPointer(event.center);
        this.body.selectionBox.position.start = {
          x: this.canvas._XconvertDOMtoCanvas(pointer.x),
          y: this.canvas._YconvertDOMtoCanvas(pointer.y)
        };
        this.body.selectionBox.position.end = {
          x: this.canvas._XconvertDOMtoCanvas(pointer.x),
          y: this.canvas._YconvertDOMtoCanvas(pointer.y)
        };
      } else if (node2 !== void 0 && this.options.dragNodes === true) {
        this.drag.nodeId = node2.id;
        if (node2.isSelected() === false) {
          this.selectionHandler.setSelection({
            nodes: [node2.id]
          });
        }
        this.selectionHandler.generateClickEvent("dragStart", event, this.drag.pointer);
        var _iterator = _createForOfIteratorHelper$4(this.selectionHandler.getSelectedNodes()), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var _node = _step.value;
            var s2 = {
              id: _node.id,
              node: _node,
              // store original x, y, xFixed and yFixed, make the node temporarily Fixed
              x: _node.x,
              y: _node.y,
              xFixed: _node.options.fixed.x,
              yFixed: _node.options.fixed.y
            };
            _node.options.fixed.x = true;
            _node.options.fixed.y = true;
            this.drag.selection.push(s2);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      } else {
        this.selectionHandler.generateClickEvent("dragStart", event, this.drag.pointer, void 0, true);
      }
    }
    /**
     * handle drag event
     *
     * @param {Event} event
     * @private
     */
  }, {
    key: "onDrag",
    value: function onDrag(event) {
      var _this2 = this;
      if (this.drag.pinched === true) {
        return;
      }
      this.body.emitter.emit("unlockNode");
      var pointer = this.getPointer(event.center);
      var selection = this.drag.selection;
      if (selection && selection.length && this.options.dragNodes === true) {
        this.selectionHandler.generateClickEvent("dragging", event, pointer);
        var deltaX = pointer.x - this.drag.pointer.x;
        var deltaY = pointer.y - this.drag.pointer.y;
        _forEachInstanceProperty(selection).call(selection, function(selection2) {
          var node2 = selection2.node;
          if (selection2.xFixed === false) {
            node2.x = _this2.canvas._XconvertDOMtoCanvas(_this2.canvas._XconvertCanvasToDOM(selection2.x) + deltaX);
          }
          if (selection2.yFixed === false) {
            node2.y = _this2.canvas._YconvertDOMtoCanvas(_this2.canvas._YconvertCanvasToDOM(selection2.y) + deltaY);
          }
        });
        this.body.emitter.emit("startSimulation");
      } else {
        if (event.srcEvent.shiftKey) {
          this.selectionHandler.generateClickEvent("dragging", event, pointer, void 0, true);
          if (this.drag.pointer === void 0) {
            this.onDragStart(event);
            return;
          }
          this.body.selectionBox.position.end = {
            x: this.canvas._XconvertDOMtoCanvas(pointer.x),
            y: this.canvas._YconvertDOMtoCanvas(pointer.y)
          };
          this.body.emitter.emit("_requestRedraw");
        }
        if (this.options.dragView === true && !event.srcEvent.shiftKey) {
          this.selectionHandler.generateClickEvent("dragging", event, pointer, void 0, true);
          if (this.drag.pointer === void 0) {
            this.onDragStart(event);
            return;
          }
          var diffX = pointer.x - this.drag.pointer.x;
          var diffY = pointer.y - this.drag.pointer.y;
          this.body.view.translation = {
            x: this.drag.translation.x + diffX,
            y: this.drag.translation.y + diffY
          };
          this.body.emitter.emit("_requestRedraw");
        }
      }
    }
    /**
     * handle drag start event
     *
     * @param {Event} event
     * @private
     */
  }, {
    key: "onDragEnd",
    value: function onDragEnd(event) {
      var _this3 = this;
      this.drag.dragging = false;
      if (this.body.selectionBox.show) {
        var _context14;
        this.body.selectionBox.show = false;
        var selectionBoxPosition = this.body.selectionBox.position;
        var selectionBoxPositionMinMax = {
          minX: Math.min(selectionBoxPosition.start.x, selectionBoxPosition.end.x),
          minY: Math.min(selectionBoxPosition.start.y, selectionBoxPosition.end.y),
          maxX: Math.max(selectionBoxPosition.start.x, selectionBoxPosition.end.x),
          maxY: Math.max(selectionBoxPosition.start.y, selectionBoxPosition.end.y)
        };
        var toBeSelectedNodes = _filterInstanceProperty(_context14 = this.body.nodeIndices).call(_context14, function(nodeId) {
          var node2 = _this3.body.nodes[nodeId];
          return node2.x >= selectionBoxPositionMinMax.minX && node2.x <= selectionBoxPositionMinMax.maxX && node2.y >= selectionBoxPositionMinMax.minY && node2.y <= selectionBoxPositionMinMax.maxY;
        });
        _forEachInstanceProperty(toBeSelectedNodes).call(toBeSelectedNodes, function(nodeId) {
          return _this3.selectionHandler.selectObject(_this3.body.nodes[nodeId]);
        });
        var pointer = this.getPointer(event.center);
        this.selectionHandler.commitAndEmit(pointer, event);
        this.selectionHandler.generateClickEvent("dragEnd", event, this.getPointer(event.center), void 0, true);
        this.body.emitter.emit("_requestRedraw");
      } else {
        var selection = this.drag.selection;
        if (selection && selection.length) {
          _forEachInstanceProperty(selection).call(selection, function(s2) {
            s2.node.options.fixed.x = s2.xFixed;
            s2.node.options.fixed.y = s2.yFixed;
          });
          this.selectionHandler.generateClickEvent("dragEnd", event, this.getPointer(event.center));
          this.body.emitter.emit("startSimulation");
        } else {
          this.selectionHandler.generateClickEvent("dragEnd", event, this.getPointer(event.center), void 0, true);
          this.body.emitter.emit("_requestRedraw");
        }
      }
    }
    /**
     * Handle pinch event
     *
     * @param {Event}  event   The event
     * @private
     */
  }, {
    key: "onPinch",
    value: function onPinch(event) {
      var pointer = this.getPointer(event.center);
      this.drag.pinched = true;
      if (this.pinch["scale"] === void 0) {
        this.pinch.scale = 1;
      }
      var scale = this.pinch.scale * event.scale;
      this.zoom(scale, pointer);
    }
    /**
     * Zoom the network in or out
     *
     * @param {number} scale a number around 1, and between 0.01 and 10
     * @param {{x: number, y: number}} pointer    Position on screen
     * @private
     */
  }, {
    key: "zoom",
    value: function zoom(scale, pointer) {
      if (this.options.zoomView === true) {
        var scaleOld = this.body.view.scale;
        if (scale < 1e-5) {
          scale = 1e-5;
        }
        if (scale > 10) {
          scale = 10;
        }
        var preScaleDragPointer = void 0;
        if (this.drag !== void 0) {
          if (this.drag.dragging === true) {
            preScaleDragPointer = this.canvas.DOMtoCanvas(this.drag.pointer);
          }
        }
        var translation = this.body.view.translation;
        var scaleFrac = scale / scaleOld;
        var tx = (1 - scaleFrac) * pointer.x + translation.x * scaleFrac;
        var ty = (1 - scaleFrac) * pointer.y + translation.y * scaleFrac;
        this.body.view.scale = scale;
        this.body.view.translation = {
          x: tx,
          y: ty
        };
        if (preScaleDragPointer != void 0) {
          var postScaleDragPointer = this.canvas.canvasToDOM(preScaleDragPointer);
          this.drag.pointer.x = postScaleDragPointer.x;
          this.drag.pointer.y = postScaleDragPointer.y;
        }
        this.body.emitter.emit("_requestRedraw");
        if (scaleOld < scale) {
          this.body.emitter.emit("zoom", {
            direction: "+",
            scale: this.body.view.scale,
            pointer
          });
        } else {
          this.body.emitter.emit("zoom", {
            direction: "-",
            scale: this.body.view.scale,
            pointer
          });
        }
      }
    }
    /**
     * Event handler for mouse wheel event, used to zoom the timeline
     * See http://adomas.org/javascript-mouse-wheel/
     *     https://github.com/EightMedia/hammer.js/issues/256
     *
     * @param {MouseEvent}  event
     * @private
     */
  }, {
    key: "onMouseWheel",
    value: function onMouseWheel(event) {
      if (this.options.zoomView === true) {
        if (event.deltaY !== 0) {
          var scale = this.body.view.scale;
          scale *= 1 + (event.deltaY < 0 ? 1 : -1) * (this.options.zoomSpeed * 0.1);
          var pointer = this.getPointer({
            x: event.clientX,
            y: event.clientY
          });
          this.zoom(scale, pointer);
        }
        event.preventDefault();
      }
    }
    /**
     * Mouse move handler for checking whether the title moves over a node with a title.
     *
     * @param  {Event} event
     * @private
     */
  }, {
    key: "onMouseMove",
    value: function onMouseMove(event) {
      var _this4 = this;
      var pointer = this.getPointer({
        x: event.clientX,
        y: event.clientY
      });
      var popupVisible = false;
      if (this.popup !== void 0) {
        if (this.popup.hidden === false) {
          this._checkHidePopup(pointer);
        }
        if (this.popup.hidden === false) {
          popupVisible = true;
          this.popup.setPosition(pointer.x + 3, pointer.y - 5);
          this.popup.show();
        }
      }
      if (this.options.keyboard.autoFocus && this.options.keyboard.bindToWindow === false && this.options.keyboard.enabled === true) {
        this.canvas.frame.focus();
      }
      if (popupVisible === false) {
        if (this.popupTimer !== void 0) {
          clearInterval(this.popupTimer);
          this.popupTimer = void 0;
        }
        if (!this.drag.dragging) {
          this.popupTimer = _setTimeout(function() {
            return _this4._checkShowPopup(pointer);
          }, this.options.tooltipDelay);
        }
      }
      if (this.options.hover === true) {
        this.selectionHandler.hoverObject(event, pointer);
      }
    }
    /**
     * Check if there is an element on the given position in the network
     * (a node or edge). If so, and if this element has a title,
     * show a popup window with its title.
     *
     * @param {{x:number, y:number}} pointer
     * @private
     */
  }, {
    key: "_checkShowPopup",
    value: function _checkShowPopup(pointer) {
      var x2 = this.canvas._XconvertDOMtoCanvas(pointer.x);
      var y2 = this.canvas._YconvertDOMtoCanvas(pointer.y);
      var pointerObj = {
        left: x2,
        top: y2,
        right: x2,
        bottom: y2
      };
      var previousPopupObjId = this.popupObj === void 0 ? void 0 : this.popupObj.id;
      var nodeUnderCursor = false;
      var popupType = "node";
      if (this.popupObj === void 0) {
        var nodeIndices = this.body.nodeIndices;
        var nodes2 = this.body.nodes;
        var node2;
        var overlappingNodes = [];
        for (var i2 = 0; i2 < nodeIndices.length; i2++) {
          node2 = nodes2[nodeIndices[i2]];
          if (node2.isOverlappingWith(pointerObj) === true) {
            nodeUnderCursor = true;
            if (node2.getTitle() !== void 0) {
              overlappingNodes.push(nodeIndices[i2]);
            }
          }
        }
        if (overlappingNodes.length > 0) {
          this.popupObj = nodes2[overlappingNodes[overlappingNodes.length - 1]];
          nodeUnderCursor = true;
        }
      }
      if (this.popupObj === void 0 && nodeUnderCursor === false) {
        var edgeIndices = this.body.edgeIndices;
        var edges = this.body.edges;
        var edge2;
        var overlappingEdges = [];
        for (var _i = 0; _i < edgeIndices.length; _i++) {
          edge2 = edges[edgeIndices[_i]];
          if (edge2.isOverlappingWith(pointerObj) === true) {
            if (edge2.connected === true && edge2.getTitle() !== void 0) {
              overlappingEdges.push(edgeIndices[_i]);
            }
          }
        }
        if (overlappingEdges.length > 0) {
          this.popupObj = edges[overlappingEdges[overlappingEdges.length - 1]];
          popupType = "edge";
        }
      }
      if (this.popupObj !== void 0) {
        if (this.popupObj.id !== previousPopupObjId) {
          if (this.popup === void 0) {
            this.popup = new Popup(this.canvas.frame);
          }
          this.popup.popupTargetType = popupType;
          this.popup.popupTargetId = this.popupObj.id;
          this.popup.setPosition(pointer.x + 3, pointer.y - 5);
          this.popup.setText(this.popupObj.getTitle());
          this.popup.show();
          this.body.emitter.emit("showPopup", this.popupObj.id);
        }
      } else {
        if (this.popup !== void 0) {
          this.popup.hide();
          this.body.emitter.emit("hidePopup");
        }
      }
    }
    /**
     * Check if the popup must be hidden, which is the case when the mouse is no
     * longer hovering on the object
     *
     * @param {{x:number, y:number}} pointer
     * @private
     */
  }, {
    key: "_checkHidePopup",
    value: function _checkHidePopup(pointer) {
      var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);
      var stillOnObj = false;
      if (this.popup.popupTargetType === "node") {
        if (this.body.nodes[this.popup.popupTargetId] !== void 0) {
          stillOnObj = this.body.nodes[this.popup.popupTargetId].isOverlappingWith(pointerObj);
          if (stillOnObj === true) {
            var overNode = this.selectionHandler.getNodeAt(pointer);
            stillOnObj = overNode === void 0 ? false : overNode.id === this.popup.popupTargetId;
          }
        }
      } else {
        if (this.selectionHandler.getNodeAt(pointer) === void 0) {
          if (this.body.edges[this.popup.popupTargetId] !== void 0) {
            stillOnObj = this.body.edges[this.popup.popupTargetId].isOverlappingWith(pointerObj);
          }
        }
      }
      if (stillOnObj === false) {
        this.popupObj = void 0;
        this.popup.hide();
        this.body.emitter.emit("hidePopup");
      }
    }
  }]);
  return InteractionHandler2;
}();
var collection$1 = collection$3;
var collectionStrong = collectionStrong$2;
collection$1("Set", function(init) {
  return function Set2() {
    return init(this, arguments.length ? arguments[0] : void 0);
  };
}, collectionStrong);
var path$1 = path$w;
var set$2 = path$1.Set;
var parent$4 = set$2;
var set$1 = parent$4;
var set = set$1;
var _Set = /* @__PURE__ */ getDefaultExportFromCjs(set);
var uncurryThis$2 = functionUncurryThis;
var defineBuiltIns$1 = defineBuiltIns$3;
var getWeakData = internalMetadataExports.getWeakData;
var anInstance = anInstance$3;
var anObject = anObject$d;
var isNullOrUndefined = isNullOrUndefined$6;
var isObject$1 = isObject$j;
var iterate = iterate$3;
var ArrayIterationModule = arrayIteration;
var hasOwn = hasOwnProperty_1;
var InternalStateModule = internalState;
var setInternalState = InternalStateModule.set;
var internalStateGetterFor = InternalStateModule.getterFor;
var find = ArrayIterationModule.find;
var findIndex = ArrayIterationModule.findIndex;
var splice = uncurryThis$2([].splice);
var id = 0;
var uncaughtFrozenStore = function(state) {
  return state.frozen || (state.frozen = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function() {
  this.entries = [];
};
var findUncaughtFrozen = function(store2, key2) {
  return find(store2.entries, function(it2) {
    return it2[0] === key2;
  });
};
UncaughtFrozenStore.prototype = {
  get: function(key2) {
    var entry = findUncaughtFrozen(this, key2);
    if (entry) return entry[1];
  },
  has: function(key2) {
    return !!findUncaughtFrozen(this, key2);
  },
  set: function(key2, value2) {
    var entry = findUncaughtFrozen(this, key2);
    if (entry) entry[1] = value2;
    else this.entries.push([key2, value2]);
  },
  "delete": function(key2) {
    var index2 = findIndex(this.entries, function(it2) {
      return it2[0] === key2;
    });
    if (~index2) splice(this.entries, index2, 1);
    return !!~index2;
  }
};
var collectionWeak$1 = {
  getConstructor: function(wrapper2, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
    var Constructor = wrapper2(function(that, iterable) {
      anInstance(that, Prototype);
      setInternalState(that, {
        type: CONSTRUCTOR_NAME,
        id: id++,
        frozen: void 0
      });
      if (!isNullOrUndefined(iterable)) iterate(iterable, that[ADDER], { that, AS_ENTRIES: IS_MAP });
    });
    var Prototype = Constructor.prototype;
    var getInternalState2 = internalStateGetterFor(CONSTRUCTOR_NAME);
    var define = function(that, key2, value2) {
      var state = getInternalState2(that);
      var data2 = getWeakData(anObject(key2), true);
      if (data2 === true) uncaughtFrozenStore(state).set(key2, value2);
      else data2[state.id] = value2;
      return that;
    };
    defineBuiltIns$1(Prototype, {
      // `{ WeakMap, WeakSet }.prototype.delete(key)` methods
      // https://tc39.es/ecma262/#sec-weakmap.prototype.delete
      // https://tc39.es/ecma262/#sec-weakset.prototype.delete
      "delete": function(key2) {
        var state = getInternalState2(this);
        if (!isObject$1(key2)) return false;
        var data2 = getWeakData(key2);
        if (data2 === true) return uncaughtFrozenStore(state)["delete"](key2);
        return data2 && hasOwn(data2, state.id) && delete data2[state.id];
      },
      // `{ WeakMap, WeakSet }.prototype.has(key)` methods
      // https://tc39.es/ecma262/#sec-weakmap.prototype.has
      // https://tc39.es/ecma262/#sec-weakset.prototype.has
      has: function has2(key2) {
        var state = getInternalState2(this);
        if (!isObject$1(key2)) return false;
        var data2 = getWeakData(key2);
        if (data2 === true) return uncaughtFrozenStore(state).has(key2);
        return data2 && hasOwn(data2, state.id);
      }
    });
    defineBuiltIns$1(Prototype, IS_MAP ? {
      // `WeakMap.prototype.get(key)` method
      // https://tc39.es/ecma262/#sec-weakmap.prototype.get
      get: function get2(key2) {
        var state = getInternalState2(this);
        if (isObject$1(key2)) {
          var data2 = getWeakData(key2);
          if (data2 === true) return uncaughtFrozenStore(state).get(key2);
          return data2 ? data2[state.id] : void 0;
        }
      },
      // `WeakMap.prototype.set(key, value)` method
      // https://tc39.es/ecma262/#sec-weakmap.prototype.set
      set: function set2(key2, value2) {
        return define(this, key2, value2);
      }
    } : {
      // `WeakSet.prototype.add(value)` method
      // https://tc39.es/ecma262/#sec-weakset.prototype.add
      add: function add(value2) {
        return define(this, value2, true);
      }
    });
    return Constructor;
  }
};
var FREEZING = freezing;
var global$2 = global$n;
var uncurryThis$1 = functionUncurryThis;
var defineBuiltIns = defineBuiltIns$3;
var InternalMetadataModule = internalMetadataExports;
var collection = collection$3;
var collectionWeak = collectionWeak$1;
var isObject = isObject$j;
var enforceInternalState = internalState.enforce;
var fails$1 = fails$w;
var NATIVE_WEAK_MAP = weakMapBasicDetection;
var $Object = Object;
var isArray = Array.isArray;
var isExtensible = $Object.isExtensible;
var isFrozen = $Object.isFrozen;
var isSealed = $Object.isSealed;
var freeze = $Object.freeze;
var seal = $Object.seal;
var FROZEN = {};
var SEALED = {};
var IS_IE11 = !global$2.ActiveXObject && "ActiveXObject" in global$2;
var InternalWeakMap;
var wrapper = function(init) {
  return function WeakMap2() {
    return init(this, arguments.length ? arguments[0] : void 0);
  };
};
var $WeakMap = collection("WeakMap", wrapper, collectionWeak);
var WeakMapPrototype = $WeakMap.prototype;
var nativeSet = uncurryThis$1(WeakMapPrototype.set);
var hasMSEdgeFreezingBug = function() {
  return FREEZING && fails$1(function() {
    var frozenArray = freeze([]);
    nativeSet(new $WeakMap(), frozenArray, 1);
    return !isFrozen(frozenArray);
  });
};
if (NATIVE_WEAK_MAP) {
  if (IS_IE11) {
    InternalWeakMap = collectionWeak.getConstructor(wrapper, "WeakMap", true);
    InternalMetadataModule.enable();
    var nativeDelete = uncurryThis$1(WeakMapPrototype["delete"]);
    var nativeHas = uncurryThis$1(WeakMapPrototype.has);
    var nativeGet = uncurryThis$1(WeakMapPrototype.get);
    defineBuiltIns(WeakMapPrototype, {
      "delete": function(key2) {
        if (isObject(key2) && !isExtensible(key2)) {
          var state = enforceInternalState(this);
          if (!state.frozen) state.frozen = new InternalWeakMap();
          return nativeDelete(this, key2) || state.frozen["delete"](key2);
        }
        return nativeDelete(this, key2);
      },
      has: function has2(key2) {
        if (isObject(key2) && !isExtensible(key2)) {
          var state = enforceInternalState(this);
          if (!state.frozen) state.frozen = new InternalWeakMap();
          return nativeHas(this, key2) || state.frozen.has(key2);
        }
        return nativeHas(this, key2);
      },
      get: function get2(key2) {
        if (isObject(key2) && !isExtensible(key2)) {
          var state = enforceInternalState(this);
          if (!state.frozen) state.frozen = new InternalWeakMap();
          return nativeHas(this, key2) ? nativeGet(this, key2) : state.frozen.get(key2);
        }
        return nativeGet(this, key2);
      },
      set: function set2(key2, value2) {
        if (isObject(key2) && !isExtensible(key2)) {
          var state = enforceInternalState(this);
          if (!state.frozen) state.frozen = new InternalWeakMap();
          nativeHas(this, key2) ? nativeSet(this, key2, value2) : state.frozen.set(key2, value2);
        } else nativeSet(this, key2, value2);
        return this;
      }
    });
  } else if (hasMSEdgeFreezingBug()) {
    defineBuiltIns(WeakMapPrototype, {
      set: function set2(key2, value2) {
        var arrayIntegrityLevel;
        if (isArray(key2)) {
          if (isFrozen(key2)) arrayIntegrityLevel = FROZEN;
          else if (isSealed(key2)) arrayIntegrityLevel = SEALED;
        }
        nativeSet(this, key2, value2);
        if (arrayIntegrityLevel === FROZEN) freeze(key2);
        if (arrayIntegrityLevel === SEALED) seal(key2);
        return this;
      }
    });
  }
}
var path = path$w;
var weakMap$2 = path.WeakMap;
var parent$3 = weakMap$2;
var weakMap$1 = parent$3;
var weakMap = weakMap$1;
var _WeakMap = /* @__PURE__ */ getDefaultExportFromCjs(weakMap);
function __classPrivateFieldGet(receiver, state, kind, f2) {
  if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value2, kind, f2) {
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return state.set(receiver, value2), value2;
}
typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message2) {
  var e2 = new Error(message2);
  return e2.name = "SuppressedError", e2.error = error, e2.suppressed = suppressed, e2;
};
function _createForOfIteratorHelper$3(o2, allowArrayLike) {
  var it2 = typeof _Symbol !== "undefined" && _getIteratorMethod(o2) || o2["@@iterator"];
  if (!it2) {
    if (_Array$isArray(o2) || (it2 = _unsupportedIterableToArray$3(o2)) || allowArrayLike) {
      if (it2) o2 = it2;
      var i2 = 0;
      var F = function F2() {
      };
      return { s: F, n: function n2() {
        if (i2 >= o2.length) return { done: true };
        return { done: false, value: o2[i2++] };
      }, e: function e2(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s2() {
    it2 = it2.call(o2);
  }, n: function n2() {
    var step = it2.next();
    normalCompletion = step.done;
    return step;
  }, e: function e2(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f2() {
    try {
      if (!normalCompletion && it2.return != null) it2.return();
    } finally {
      if (didErr) throw err;
    }
  } };
}
function _unsupportedIterableToArray$3(o2, minLen) {
  var _context2;
  if (!o2) return;
  if (typeof o2 === "string") return _arrayLikeToArray$3(o2, minLen);
  var n2 = _sliceInstanceProperty(_context2 = Object.prototype.toString.call(o2)).call(_context2, 8, -1);
  if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set") return _Array$from$1(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$3(o2, minLen);
}
function _arrayLikeToArray$3(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
  return arr2;
}
var _SingleTypeSelectionAccumulator_previousSelection, _SingleTypeSelectionAccumulator_selection, _SelectionAccumulator_nodes, _SelectionAccumulator_edges, _SelectionAccumulator_commitHandler;
function diffSets(prev, next4) {
  var diff = new _Set();
  var _iterator = _createForOfIteratorHelper$3(next4), _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var item = _step.value;
      if (!prev.has(item)) {
        diff.add(item);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return diff;
}
var SingleTypeSelectionAccumulator = /* @__PURE__ */ function() {
  function SingleTypeSelectionAccumulator2() {
    _classCallCheck(this, SingleTypeSelectionAccumulator2);
    _SingleTypeSelectionAccumulator_previousSelection.set(this, new _Set());
    _SingleTypeSelectionAccumulator_selection.set(this, new _Set());
  }
  _createClass(SingleTypeSelectionAccumulator2, [{
    key: "size",
    get: function get2() {
      return __classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, "f").size;
    }
  }, {
    key: "add",
    value: function add() {
      for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {
        items[_key] = arguments[_key];
      }
      for (var _i = 0, _items = items; _i < _items.length; _i++) {
        var item = _items[_i];
        __classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, "f").add(item);
      }
    }
  }, {
    key: "delete",
    value: function _delete() {
      for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        items[_key2] = arguments[_key2];
      }
      for (var _i2 = 0, _items2 = items; _i2 < _items2.length; _i2++) {
        var item = _items2[_i2];
        __classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, "f").delete(item);
      }
    }
  }, {
    key: "clear",
    value: function clear2() {
      __classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, "f").clear();
    }
  }, {
    key: "getSelection",
    value: function getSelection() {
      return _toConsumableArray(__classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, "f"));
    }
  }, {
    key: "getChanges",
    value: function getChanges() {
      return {
        added: _toConsumableArray(diffSets(__classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_previousSelection, "f"), __classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, "f"))),
        deleted: _toConsumableArray(diffSets(__classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, "f"), __classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_previousSelection, "f"))),
        previous: _toConsumableArray(new _Set(__classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_previousSelection, "f"))),
        current: _toConsumableArray(new _Set(__classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, "f")))
      };
    }
  }, {
    key: "commit",
    value: function commit() {
      var changes = this.getChanges();
      __classPrivateFieldSet(this, _SingleTypeSelectionAccumulator_previousSelection, __classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, "f"));
      __classPrivateFieldSet(this, _SingleTypeSelectionAccumulator_selection, new _Set(__classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_previousSelection, "f")));
      var _iterator2 = _createForOfIteratorHelper$3(changes.added), _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
          var item = _step2.value;
          item.select();
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      var _iterator3 = _createForOfIteratorHelper$3(changes.deleted), _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
          var _item = _step3.value;
          _item.unselect();
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      return changes;
    }
  }]);
  return SingleTypeSelectionAccumulator2;
}();
_SingleTypeSelectionAccumulator_previousSelection = new _WeakMap(), _SingleTypeSelectionAccumulator_selection = new _WeakMap();
var SelectionAccumulator = /* @__PURE__ */ function() {
  function SelectionAccumulator2() {
    var commitHandler = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : function() {
    };
    _classCallCheck(this, SelectionAccumulator2);
    _SelectionAccumulator_nodes.set(this, new SingleTypeSelectionAccumulator());
    _SelectionAccumulator_edges.set(this, new SingleTypeSelectionAccumulator());
    _SelectionAccumulator_commitHandler.set(this, void 0);
    __classPrivateFieldSet(this, _SelectionAccumulator_commitHandler, commitHandler);
  }
  _createClass(SelectionAccumulator2, [{
    key: "sizeNodes",
    get: function get2() {
      return __classPrivateFieldGet(this, _SelectionAccumulator_nodes, "f").size;
    }
  }, {
    key: "sizeEdges",
    get: function get2() {
      return __classPrivateFieldGet(this, _SelectionAccumulator_edges, "f").size;
    }
  }, {
    key: "getNodes",
    value: function getNodes() {
      return __classPrivateFieldGet(this, _SelectionAccumulator_nodes, "f").getSelection();
    }
  }, {
    key: "getEdges",
    value: function getEdges() {
      return __classPrivateFieldGet(this, _SelectionAccumulator_edges, "f").getSelection();
    }
  }, {
    key: "addNodes",
    value: function addNodes() {
      var _classPrivateFieldGe;
      (_classPrivateFieldGe = __classPrivateFieldGet(this, _SelectionAccumulator_nodes, "f")).add.apply(_classPrivateFieldGe, arguments);
    }
  }, {
    key: "addEdges",
    value: function addEdges() {
      var _classPrivateFieldGe2;
      (_classPrivateFieldGe2 = __classPrivateFieldGet(this, _SelectionAccumulator_edges, "f")).add.apply(_classPrivateFieldGe2, arguments);
    }
  }, {
    key: "deleteNodes",
    value: function deleteNodes(node2) {
      __classPrivateFieldGet(this, _SelectionAccumulator_nodes, "f").delete(node2);
    }
  }, {
    key: "deleteEdges",
    value: function deleteEdges(edge2) {
      __classPrivateFieldGet(this, _SelectionAccumulator_edges, "f").delete(edge2);
    }
  }, {
    key: "clear",
    value: function clear2() {
      __classPrivateFieldGet(this, _SelectionAccumulator_nodes, "f").clear();
      __classPrivateFieldGet(this, _SelectionAccumulator_edges, "f").clear();
    }
  }, {
    key: "commit",
    value: function commit() {
      var _classPrivateFieldGe3, _context;
      var summary = {
        nodes: __classPrivateFieldGet(this, _SelectionAccumulator_nodes, "f").commit(),
        edges: __classPrivateFieldGet(this, _SelectionAccumulator_edges, "f").commit()
      };
      for (var _len3 = arguments.length, rest = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        rest[_key3] = arguments[_key3];
      }
      (_classPrivateFieldGe3 = __classPrivateFieldGet(this, _SelectionAccumulator_commitHandler, "f")).call.apply(_classPrivateFieldGe3, _concatInstanceProperty(_context = [this, summary]).call(_context, rest));
      return summary;
    }
  }]);
  return SelectionAccumulator2;
}();
_SelectionAccumulator_nodes = new _WeakMap(), _SelectionAccumulator_edges = new _WeakMap(), _SelectionAccumulator_commitHandler = new _WeakMap();
function _createForOfIteratorHelper$2(o2, allowArrayLike) {
  var it2 = typeof _Symbol !== "undefined" && _getIteratorMethod(o2) || o2["@@iterator"];
  if (!it2) {
    if (_Array$isArray(o2) || (it2 = _unsupportedIterableToArray$2(o2)) || allowArrayLike) {
      if (it2) o2 = it2;
      var i2 = 0;
      var F = function F2() {
      };
      return { s: F, n: function n2() {
        if (i2 >= o2.length) return { done: true };
        return { done: false, value: o2[i2++] };
      }, e: function e2(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s2() {
    it2 = it2.call(o2);
  }, n: function n2() {
    var step = it2.next();
    normalCompletion = step.done;
    return step;
  }, e: function e2(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f2() {
    try {
      if (!normalCompletion && it2.return != null) it2.return();
    } finally {
      if (didErr) throw err;
    }
  } };
}
function _unsupportedIterableToArray$2(o2, minLen) {
  var _context3;
  if (!o2) return;
  if (typeof o2 === "string") return _arrayLikeToArray$2(o2, minLen);
  var n2 = _sliceInstanceProperty(_context3 = Object.prototype.toString.call(o2)).call(_context3, 8, -1);
  if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set") return _Array$from$1(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$2(o2, minLen);
}
function _arrayLikeToArray$2(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
  return arr2;
}
var SelectionHandler = /* @__PURE__ */ function() {
  function SelectionHandler2(body, canvas) {
    var _this = this;
    _classCallCheck(this, SelectionHandler2);
    this.body = body;
    this.canvas = canvas;
    this._selectionAccumulator = new SelectionAccumulator();
    this.hoverObj = {
      nodes: {},
      edges: {}
    };
    this.options = {};
    this.defaultOptions = {
      multiselect: false,
      selectable: true,
      selectConnectedEdges: true,
      hoverConnectedEdges: true
    };
    _Object$assign(this.options, this.defaultOptions);
    this.body.emitter.on("_dataChanged", function() {
      _this.updateSelection();
    });
  }
  _createClass(SelectionHandler2, [{
    key: "setOptions",
    value: function setOptions(options) {
      if (options !== void 0) {
        var fields = ["multiselect", "hoverConnectedEdges", "selectable", "selectConnectedEdges"];
        selectiveDeepExtend(fields, this.options, options);
      }
    }
    /**
     * handles the selection part of the tap;
     *
     * @param {{x: number, y: number}} pointer
     * @returns {boolean}
     */
  }, {
    key: "selectOnPoint",
    value: function selectOnPoint(pointer) {
      var selected = false;
      if (this.options.selectable === true) {
        var obj = this.getNodeAt(pointer) || this.getEdgeAt(pointer);
        this.unselectAll();
        if (obj !== void 0) {
          selected = this.selectObject(obj);
        }
        this.body.emitter.emit("_requestRedraw");
      }
      return selected;
    }
    /**
     *
     * @param {{x: number, y: number}} pointer
     * @returns {boolean}
     */
  }, {
    key: "selectAdditionalOnPoint",
    value: function selectAdditionalOnPoint(pointer) {
      var selectionChanged = false;
      if (this.options.selectable === true) {
        var obj = this.getNodeAt(pointer) || this.getEdgeAt(pointer);
        if (obj !== void 0) {
          selectionChanged = true;
          if (obj.isSelected() === true) {
            this.deselectObject(obj);
          } else {
            this.selectObject(obj);
          }
          this.body.emitter.emit("_requestRedraw");
        }
      }
      return selectionChanged;
    }
    /**
     * Create an object containing the standard fields for an event.
     *
     * @param {Event} event
     * @param {{x: number, y: number}} pointer Object with the x and y screen coordinates of the mouse
     * @returns {{}}
     * @private
     */
  }, {
    key: "_initBaseEvent",
    value: function _initBaseEvent(event, pointer) {
      var properties = {};
      properties["pointer"] = {
        DOM: {
          x: pointer.x,
          y: pointer.y
        },
        canvas: this.canvas.DOMtoCanvas(pointer)
      };
      properties["event"] = event;
      return properties;
    }
    /**
     * Generate an event which the user can catch.
     *
     * This adds some extra data to the event with respect to cursor position and
     * selected nodes and edges.
     *
     * @param {string} eventType                          Name of event to send
     * @param {Event}  event
     * @param {{x: number, y: number}} pointer            Object with the x and y screen coordinates of the mouse
     * @param {object | undefined} oldSelection             If present, selection state before event occured
     * @param {boolean|undefined} [emptySelection=false]  Indicate if selection data should be passed
     */
  }, {
    key: "generateClickEvent",
    value: function generateClickEvent(eventType, event, pointer, oldSelection) {
      var emptySelection = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
      var properties = this._initBaseEvent(event, pointer);
      if (emptySelection === true) {
        properties.nodes = [];
        properties.edges = [];
      } else {
        var tmp = this.getSelection();
        properties.nodes = tmp.nodes;
        properties.edges = tmp.edges;
      }
      if (oldSelection !== void 0) {
        properties["previousSelection"] = oldSelection;
      }
      if (eventType == "click") {
        properties.items = this.getClickedItems(pointer);
      }
      if (event.controlEdge !== void 0) {
        properties.controlEdge = event.controlEdge;
      }
      this.body.emitter.emit(eventType, properties);
    }
    /**
     *
     * @param {object} obj
     * @param {boolean} [highlightEdges=this.options.selectConnectedEdges]
     * @returns {boolean}
     */
  }, {
    key: "selectObject",
    value: function selectObject(obj) {
      var highlightEdges = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.options.selectConnectedEdges;
      if (obj !== void 0) {
        if (obj instanceof Node$1) {
          if (highlightEdges === true) {
            var _this$_selectionAccum;
            (_this$_selectionAccum = this._selectionAccumulator).addEdges.apply(_this$_selectionAccum, _toConsumableArray(obj.edges));
          }
          this._selectionAccumulator.addNodes(obj);
        } else {
          this._selectionAccumulator.addEdges(obj);
        }
        return true;
      }
      return false;
    }
    /**
     *
     * @param {object} obj
     */
  }, {
    key: "deselectObject",
    value: function deselectObject(obj) {
      if (obj.isSelected() === true) {
        obj.selected = false;
        this._removeFromSelection(obj);
      }
    }
    /**
     * retrieve all nodes overlapping with given object
     *
     * @param {object} object  An object with parameters left, top, right, bottom
     * @returns {number[]}   An array with id's of the overlapping nodes
     * @private
     */
  }, {
    key: "_getAllNodesOverlappingWith",
    value: function _getAllNodesOverlappingWith(object2) {
      var overlappingNodes = [];
      var nodes2 = this.body.nodes;
      for (var i2 = 0; i2 < this.body.nodeIndices.length; i2++) {
        var nodeId = this.body.nodeIndices[i2];
        if (nodes2[nodeId].isOverlappingWith(object2)) {
          overlappingNodes.push(nodeId);
        }
      }
      return overlappingNodes;
    }
    /**
     * Return a position object in canvasspace from a single point in screenspace
     *
     * @param {{x: number, y: number}} pointer
     * @returns {{left: number, top: number, right: number, bottom: number}}
     * @private
     */
  }, {
    key: "_pointerToPositionObject",
    value: function _pointerToPositionObject(pointer) {
      var canvasPos = this.canvas.DOMtoCanvas(pointer);
      return {
        left: canvasPos.x - 1,
        top: canvasPos.y + 1,
        right: canvasPos.x + 1,
        bottom: canvasPos.y - 1
      };
    }
    /**
     * Get the top node at the passed point (like a click)
     *
     * @param {{x: number, y: number}} pointer
     * @param {boolean} [returnNode=true]
     * @returns {Node | undefined} node
     */
  }, {
    key: "getNodeAt",
    value: function getNodeAt(pointer) {
      var returnNode = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var positionObject = this._pointerToPositionObject(pointer);
      var overlappingNodes = this._getAllNodesOverlappingWith(positionObject);
      if (overlappingNodes.length > 0) {
        if (returnNode === true) {
          return this.body.nodes[overlappingNodes[overlappingNodes.length - 1]];
        } else {
          return overlappingNodes[overlappingNodes.length - 1];
        }
      } else {
        return void 0;
      }
    }
    /**
     * retrieve all edges overlapping with given object, selector is around center
     *
     * @param {object} object  An object with parameters left, top, right, bottom
     * @param {number[]} overlappingEdges An array with id's of the overlapping nodes
     * @private
     */
  }, {
    key: "_getEdgesOverlappingWith",
    value: function _getEdgesOverlappingWith(object2, overlappingEdges) {
      var edges = this.body.edges;
      for (var i2 = 0; i2 < this.body.edgeIndices.length; i2++) {
        var edgeId = this.body.edgeIndices[i2];
        if (edges[edgeId].isOverlappingWith(object2)) {
          overlappingEdges.push(edgeId);
        }
      }
    }
    /**
     * retrieve all nodes overlapping with given object
     *
     * @param {object} object  An object with parameters left, top, right, bottom
     * @returns {number[]}   An array with id's of the overlapping nodes
     * @private
     */
  }, {
    key: "_getAllEdgesOverlappingWith",
    value: function _getAllEdgesOverlappingWith(object2) {
      var overlappingEdges = [];
      this._getEdgesOverlappingWith(object2, overlappingEdges);
      return overlappingEdges;
    }
    /**
     * Get the edges nearest to the passed point (like a click)
     *
     * @param {{x: number, y: number}} pointer
     * @param {boolean} [returnEdge=true]
     * @returns {Edge | undefined} node
     */
  }, {
    key: "getEdgeAt",
    value: function getEdgeAt(pointer) {
      var returnEdge = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var canvasPos = this.canvas.DOMtoCanvas(pointer);
      var mindist = 10;
      var overlappingEdge = null;
      var edges = this.body.edges;
      for (var i2 = 0; i2 < this.body.edgeIndices.length; i2++) {
        var edgeId = this.body.edgeIndices[i2];
        var edge2 = edges[edgeId];
        if (edge2.connected) {
          var xFrom = edge2.from.x;
          var yFrom = edge2.from.y;
          var xTo = edge2.to.x;
          var yTo = edge2.to.y;
          var dist = edge2.edgeType.getDistanceToEdge(xFrom, yFrom, xTo, yTo, canvasPos.x, canvasPos.y);
          if (dist < mindist) {
            overlappingEdge = edgeId;
            mindist = dist;
          }
        }
      }
      if (overlappingEdge !== null) {
        if (returnEdge === true) {
          return this.body.edges[overlappingEdge];
        } else {
          return overlappingEdge;
        }
      } else {
        return void 0;
      }
    }
    /**
     * Add object to the selection array.
     *
     * @param {object} obj
     * @private
     */
  }, {
    key: "_addToHover",
    value: function _addToHover(obj) {
      if (obj instanceof Node$1) {
        this.hoverObj.nodes[obj.id] = obj;
      } else {
        this.hoverObj.edges[obj.id] = obj;
      }
    }
    /**
     * Remove a single option from selection.
     *
     * @param {object} obj
     * @private
     */
  }, {
    key: "_removeFromSelection",
    value: function _removeFromSelection(obj) {
      if (obj instanceof Node$1) {
        var _this$_selectionAccum2;
        this._selectionAccumulator.deleteNodes(obj);
        (_this$_selectionAccum2 = this._selectionAccumulator).deleteEdges.apply(_this$_selectionAccum2, _toConsumableArray(obj.edges));
      } else {
        this._selectionAccumulator.deleteEdges(obj);
      }
    }
    /**
     * Unselect all nodes and edges.
     */
  }, {
    key: "unselectAll",
    value: function unselectAll() {
      this._selectionAccumulator.clear();
    }
    /**
     * return the number of selected nodes
     *
     * @returns {number}
     */
  }, {
    key: "getSelectedNodeCount",
    value: function getSelectedNodeCount() {
      return this._selectionAccumulator.sizeNodes;
    }
    /**
     * return the number of selected edges
     *
     * @returns {number}
     */
  }, {
    key: "getSelectedEdgeCount",
    value: function getSelectedEdgeCount() {
      return this._selectionAccumulator.sizeEdges;
    }
    /**
     * select the edges connected to the node that is being selected
     *
     * @param {Node} node
     * @private
     */
  }, {
    key: "_hoverConnectedEdges",
    value: function _hoverConnectedEdges(node2) {
      for (var i2 = 0; i2 < node2.edges.length; i2++) {
        var edge2 = node2.edges[i2];
        edge2.hover = true;
        this._addToHover(edge2);
      }
    }
    /**
     * Remove the highlight from a node or edge, in response to mouse movement
     *
     * @param {Event}  event
     * @param {{x: number, y: number}} pointer object with the x and y screen coordinates of the mouse
     * @param {Node|vis.Edge} object
     * @private
     */
  }, {
    key: "emitBlurEvent",
    value: function emitBlurEvent(event, pointer, object2) {
      var properties = this._initBaseEvent(event, pointer);
      if (object2.hover === true) {
        object2.hover = false;
        if (object2 instanceof Node$1) {
          properties.node = object2.id;
          this.body.emitter.emit("blurNode", properties);
        } else {
          properties.edge = object2.id;
          this.body.emitter.emit("blurEdge", properties);
        }
      }
    }
    /**
     * Create the highlight for a node or edge, in response to mouse movement
     *
     * @param {Event}  event
     * @param {{x: number, y: number}} pointer object with the x and y screen coordinates of the mouse
     * @param {Node|vis.Edge} object
     * @returns {boolean} hoverChanged
     * @private
     */
  }, {
    key: "emitHoverEvent",
    value: function emitHoverEvent(event, pointer, object2) {
      var properties = this._initBaseEvent(event, pointer);
      var hoverChanged = false;
      if (object2.hover === false) {
        object2.hover = true;
        this._addToHover(object2);
        hoverChanged = true;
        if (object2 instanceof Node$1) {
          properties.node = object2.id;
          this.body.emitter.emit("hoverNode", properties);
        } else {
          properties.edge = object2.id;
          this.body.emitter.emit("hoverEdge", properties);
        }
      }
      return hoverChanged;
    }
    /**
     * Perform actions in response to a mouse movement.
     *
     * @param {Event}  event
     * @param {{x: number, y: number}} pointer | object with the x and y screen coordinates of the mouse
     */
  }, {
    key: "hoverObject",
    value: function hoverObject(event, pointer) {
      var object2 = this.getNodeAt(pointer);
      if (object2 === void 0) {
        object2 = this.getEdgeAt(pointer);
      }
      var hoverChanged = false;
      for (var nodeId in this.hoverObj.nodes) {
        if (Object.prototype.hasOwnProperty.call(this.hoverObj.nodes, nodeId)) {
          if (object2 === void 0 || object2 instanceof Node$1 && object2.id != nodeId || object2 instanceof Edge) {
            this.emitBlurEvent(event, pointer, this.hoverObj.nodes[nodeId]);
            delete this.hoverObj.nodes[nodeId];
            hoverChanged = true;
          }
        }
      }
      for (var edgeId in this.hoverObj.edges) {
        if (Object.prototype.hasOwnProperty.call(this.hoverObj.edges, edgeId)) {
          if (hoverChanged === true) {
            this.hoverObj.edges[edgeId].hover = false;
            delete this.hoverObj.edges[edgeId];
          } else if (object2 === void 0 || object2 instanceof Edge && object2.id != edgeId || object2 instanceof Node$1 && !object2.hover) {
            this.emitBlurEvent(event, pointer, this.hoverObj.edges[edgeId]);
            delete this.hoverObj.edges[edgeId];
            hoverChanged = true;
          }
        }
      }
      if (object2 !== void 0) {
        var hoveredEdgesCount = _Object$keys(this.hoverObj.edges).length;
        var hoveredNodesCount = _Object$keys(this.hoverObj.nodes).length;
        var newOnlyHoveredEdge = object2 instanceof Edge && hoveredEdgesCount === 0 && hoveredNodesCount === 0;
        var newOnlyHoveredNode = object2 instanceof Node$1 && hoveredEdgesCount === 0 && hoveredNodesCount === 0;
        if (hoverChanged || newOnlyHoveredEdge || newOnlyHoveredNode) {
          hoverChanged = this.emitHoverEvent(event, pointer, object2);
        }
        if (object2 instanceof Node$1 && this.options.hoverConnectedEdges === true) {
          this._hoverConnectedEdges(object2);
        }
      }
      if (hoverChanged === true) {
        this.body.emitter.emit("_requestRedraw");
      }
    }
    /**
     * Commit the selection changes but don't emit any events.
     */
  }, {
    key: "commitWithoutEmitting",
    value: function commitWithoutEmitting() {
      this._selectionAccumulator.commit();
    }
    /**
     * Select and deselect nodes depending current selection change.
     *
     * For changing nodes, select/deselect events are fired.
     *
     * NOTE: For a given edge, if one connecting node is deselected and with the
     * same click the other node is selected, no events for the edge will fire. It
     * was selected and it will remain selected.
     *
     * @param {{x: number, y: number}} pointer - The x and y coordinates of the
     * click, tap, dragend… that triggered this.
     * @param {UIEvent} event - The event that triggered this.
     */
  }, {
    key: "commitAndEmit",
    value: function commitAndEmit(pointer, event) {
      var selected = false;
      var selectionChanges = this._selectionAccumulator.commit();
      var previousSelection = {
        nodes: selectionChanges.nodes.previous,
        edges: selectionChanges.edges.previous
      };
      if (selectionChanges.edges.deleted.length > 0) {
        this.generateClickEvent("deselectEdge", event, pointer, previousSelection);
        selected = true;
      }
      if (selectionChanges.nodes.deleted.length > 0) {
        this.generateClickEvent("deselectNode", event, pointer, previousSelection);
        selected = true;
      }
      if (selectionChanges.nodes.added.length > 0) {
        this.generateClickEvent("selectNode", event, pointer);
        selected = true;
      }
      if (selectionChanges.edges.added.length > 0) {
        this.generateClickEvent("selectEdge", event, pointer);
        selected = true;
      }
      if (selected === true) {
        this.generateClickEvent("select", event, pointer);
      }
    }
    /**
     * Retrieve the currently selected node and edge ids.
     *
     * @returns {{nodes: Array.<string>, edges: Array.<string>}} Arrays with the
     * ids of the selected nodes and edges.
     */
  }, {
    key: "getSelection",
    value: function getSelection() {
      return {
        nodes: this.getSelectedNodeIds(),
        edges: this.getSelectedEdgeIds()
      };
    }
    /**
     * Retrieve the currently selected nodes.
     *
     * @returns {Array} An array with selected nodes.
     */
  }, {
    key: "getSelectedNodes",
    value: function getSelectedNodes() {
      return this._selectionAccumulator.getNodes();
    }
    /**
     * Retrieve the currently selected edges.
     *
     * @returns {Array} An array with selected edges.
     */
  }, {
    key: "getSelectedEdges",
    value: function getSelectedEdges() {
      return this._selectionAccumulator.getEdges();
    }
    /**
     * Retrieve the currently selected node ids.
     *
     * @returns {Array} An array with the ids of the selected nodes.
     */
  }, {
    key: "getSelectedNodeIds",
    value: function getSelectedNodeIds() {
      var _context;
      return _mapInstanceProperty(_context = this._selectionAccumulator.getNodes()).call(_context, function(node2) {
        return node2.id;
      });
    }
    /**
     * Retrieve the currently selected edge ids.
     *
     * @returns {Array} An array with the ids of the selected edges.
     */
  }, {
    key: "getSelectedEdgeIds",
    value: function getSelectedEdgeIds() {
      var _context2;
      return _mapInstanceProperty(_context2 = this._selectionAccumulator.getEdges()).call(_context2, function(edge2) {
        return edge2.id;
      });
    }
    /**
     * Updates the current selection
     *
     * @param {{nodes: Array.<string>, edges: Array.<string>}} selection
     * @param {object} options                                 Options
     */
  }, {
    key: "setSelection",
    value: function setSelection(selection) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (!selection || !selection.nodes && !selection.edges) {
        throw new TypeError("Selection must be an object with nodes and/or edges properties");
      }
      if (options.unselectAll || options.unselectAll === void 0) {
        this.unselectAll();
      }
      if (selection.nodes) {
        var _iterator = _createForOfIteratorHelper$2(selection.nodes), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var id2 = _step.value;
            var node2 = this.body.nodes[id2];
            if (!node2) {
              throw new RangeError('Node with id "' + id2 + '" not found');
            }
            this.selectObject(node2, options.highlightEdges);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      if (selection.edges) {
        var _iterator2 = _createForOfIteratorHelper$2(selection.edges), _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
            var _id = _step2.value;
            var edge2 = this.body.edges[_id];
            if (!edge2) {
              throw new RangeError('Edge with id "' + _id + '" not found');
            }
            this.selectObject(edge2);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
      this.body.emitter.emit("_requestRedraw");
      this._selectionAccumulator.commit();
    }
    /**
     * select zero or more nodes with the option to highlight edges
     *
     * @param {number[] | string[]} selection     An array with the ids of the
     *                                            selected nodes.
     * @param {boolean} [highlightEdges]
     */
  }, {
    key: "selectNodes",
    value: function selectNodes(selection) {
      var highlightEdges = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      if (!selection || selection.length === void 0) throw "Selection must be an array with ids";
      this.setSelection({
        nodes: selection
      }, {
        highlightEdges
      });
    }
    /**
     * select zero or more edges
     *
     * @param {number[] | string[]} selection     An array with the ids of the
     *                                            selected nodes.
     */
  }, {
    key: "selectEdges",
    value: function selectEdges(selection) {
      if (!selection || selection.length === void 0) throw "Selection must be an array with ids";
      this.setSelection({
        edges: selection
      });
    }
    /**
     * Validate the selection: remove ids of nodes which no longer exist
     *
     * @private
     */
  }, {
    key: "updateSelection",
    value: function updateSelection() {
      for (var node2 in this._selectionAccumulator.getNodes()) {
        if (!Object.prototype.hasOwnProperty.call(this.body.nodes, node2.id)) {
          this._selectionAccumulator.deleteNodes(node2);
        }
      }
      for (var edge2 in this._selectionAccumulator.getEdges()) {
        if (!Object.prototype.hasOwnProperty.call(this.body.edges, edge2.id)) {
          this._selectionAccumulator.deleteEdges(edge2);
        }
      }
    }
    /**
     * Determine all the visual elements clicked which are on the given point.
     *
     * All elements are returned; this includes nodes, edges and their labels.
     * The order returned is from highest to lowest, i.e. element 0 of the return
     * value is the topmost item clicked on.
     *
     * The return value consists of an array of the following possible elements:
     *
     * - `{nodeId:number}`             - node with given id clicked on
     * - `{nodeId:number, labelId:0}`  - label of node with given id clicked on
     * - `{edgeId:number}`             - edge with given id clicked on
     * - `{edge:number, labelId:0}`    - label of edge with given id clicked on
     *
     * ## NOTES
     *
     * - Currently, there is only one label associated with a node or an edge,
     *   but this is expected to change somewhere in the future.
     * - Since there is no z-indexing yet, it is not really possible to set the nodes and
     *   edges in the correct order. For the time being, nodes come first.
     *
     * @param {point} pointer  mouse position in screen coordinates
     * @returns {Array.<nodeClickItem|nodeLabelClickItem|edgeClickItem|edgeLabelClickItem>}
     * @private
     */
  }, {
    key: "getClickedItems",
    value: function getClickedItems(pointer) {
      var point = this.canvas.DOMtoCanvas(pointer);
      var items = [];
      var nodeIndices = this.body.nodeIndices;
      var nodes2 = this.body.nodes;
      for (var i2 = nodeIndices.length - 1; i2 >= 0; i2--) {
        var node2 = nodes2[nodeIndices[i2]];
        var ret = node2.getItemsOnPoint(point);
        items.push.apply(items, ret);
      }
      var edgeIndices = this.body.edgeIndices;
      var edges = this.body.edges;
      for (var _i = edgeIndices.length - 1; _i >= 0; _i--) {
        var edge2 = edges[edgeIndices[_i]];
        var _ret = edge2.getItemsOnPoint(point);
        items.push.apply(items, _ret);
      }
      return items;
    }
  }]);
  return SelectionHandler2;
}();
var arraySlice = arraySliceSimple;
var floor = Math.floor;
var mergeSort = function(array2, comparefn) {
  var length2 = array2.length;
  var middle = floor(length2 / 2);
  return length2 < 8 ? insertionSort(array2, comparefn) : merge(
    array2,
    mergeSort(arraySlice(array2, 0, middle), comparefn),
    mergeSort(arraySlice(array2, middle), comparefn),
    comparefn
  );
};
var insertionSort = function(array2, comparefn) {
  var length2 = array2.length;
  var i2 = 1;
  var element, j2;
  while (i2 < length2) {
    j2 = i2;
    element = array2[i2];
    while (j2 && comparefn(array2[j2 - 1], element) > 0) {
      array2[j2] = array2[--j2];
    }
    if (j2 !== i2++) array2[j2] = element;
  }
  return array2;
};
var merge = function(array2, left2, right2, comparefn) {
  var llength = left2.length;
  var rlength = right2.length;
  var lindex = 0;
  var rindex = 0;
  while (lindex < llength || rindex < rlength) {
    array2[lindex + rindex] = lindex < llength && rindex < rlength ? comparefn(left2[lindex], right2[rindex]) <= 0 ? left2[lindex++] : right2[rindex++] : lindex < llength ? left2[lindex++] : right2[rindex++];
  }
  return array2;
};
var arraySort = mergeSort;
var userAgent$1 = engineUserAgent;
var firefox$1 = userAgent$1.match(/firefox\/(\d+)/i);
var engineFfVersion = !!firefox$1 && +firefox$1[1];
var UA = engineUserAgent;
var engineIsIeOrEdge = /MSIE|Trident/.test(UA);
var userAgent = engineUserAgent;
var webkit = userAgent.match(/AppleWebKit\/(\d+)\./);
var engineWebkitVersion = !!webkit && +webkit[1];
var $$2 = _export;
var uncurryThis = functionUncurryThis;
var aCallable$1 = aCallable$7;
var toObject$1 = toObject$e;
var lengthOfArrayLike$1 = lengthOfArrayLike$c;
var deletePropertyOrThrow = deletePropertyOrThrow$2;
var toString = toString$a;
var fails = fails$w;
var internalSort = arraySort;
var arrayMethodIsStrict$2 = arrayMethodIsStrict$6;
var FF = engineFfVersion;
var IE_OR_EDGE = engineIsIeOrEdge;
var V8 = engineV8Version;
var WEBKIT = engineWebkitVersion;
var test = [];
var nativeSort = uncurryThis(test.sort);
var push = uncurryThis(test.push);
var FAILS_ON_UNDEFINED = fails(function() {
  test.sort(void 0);
});
var FAILS_ON_NULL = fails(function() {
  test.sort(null);
});
var STRICT_METHOD$1 = arrayMethodIsStrict$2("sort");
var STABLE_SORT = !fails(function() {
  if (V8) return V8 < 70;
  if (FF && FF > 3) return;
  if (IE_OR_EDGE) return true;
  if (WEBKIT) return WEBKIT < 603;
  var result = "";
  var code2, chr, value2, index2;
  for (code2 = 65; code2 < 76; code2++) {
    chr = String.fromCharCode(code2);
    switch (code2) {
      case 66:
      case 69:
      case 70:
      case 72:
        value2 = 3;
        break;
      case 68:
      case 71:
        value2 = 4;
        break;
      default:
        value2 = 2;
    }
    for (index2 = 0; index2 < 47; index2++) {
      test.push({ k: chr + index2, v: value2 });
    }
  }
  test.sort(function(a2, b2) {
    return b2.v - a2.v;
  });
  for (index2 = 0; index2 < test.length; index2++) {
    chr = test[index2].k.charAt(0);
    if (result.charAt(result.length - 1) !== chr) result += chr;
  }
  return result !== "DGBEFHACIJK";
});
var FORCED$1 = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD$1 || !STABLE_SORT;
var getSortCompare = function(comparefn) {
  return function(x2, y2) {
    if (y2 === void 0) return -1;
    if (x2 === void 0) return 1;
    if (comparefn !== void 0) return +comparefn(x2, y2) || 0;
    return toString(x2) > toString(y2) ? 1 : -1;
  };
};
$$2({ target: "Array", proto: true, forced: FORCED$1 }, {
  sort: function sort3(comparefn) {
    if (comparefn !== void 0) aCallable$1(comparefn);
    var array2 = toObject$1(this);
    if (STABLE_SORT) return comparefn === void 0 ? nativeSort(array2) : nativeSort(array2, comparefn);
    var items = [];
    var arrayLength = lengthOfArrayLike$1(array2);
    var itemsLength, index2;
    for (index2 = 0; index2 < arrayLength; index2++) {
      if (index2 in array2) push(items, array2[index2]);
    }
    internalSort(items, getSortCompare(comparefn));
    itemsLength = lengthOfArrayLike$1(items);
    index2 = 0;
    while (index2 < itemsLength) array2[index2] = items[index2++];
    while (index2 < arrayLength) deletePropertyOrThrow(array2, index2++);
    return array2;
  }
});
var entryVirtual$2 = entryVirtual$i;
var sort$3 = entryVirtual$2("Array").sort;
var isPrototypeOf$2 = objectIsPrototypeOf;
var method$2 = sort$3;
var ArrayPrototype$2 = Array.prototype;
var sort$2 = function(it2) {
  var own = it2.sort;
  return it2 === ArrayPrototype$2 || isPrototypeOf$2(ArrayPrototype$2, it2) && own === ArrayPrototype$2.sort ? method$2 : own;
};
var parent$2 = sort$2;
var sort$1 = parent$2;
var sort$4 = sort$1;
var _sortInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(sort$4);
var aCallable = aCallable$7;
var toObject = toObject$e;
var IndexedObject = indexedObject;
var lengthOfArrayLike = lengthOfArrayLike$c;
var $TypeError = TypeError;
var createMethod = function(IS_RIGHT) {
  return function(that, callbackfn, argumentsLength, memo) {
    aCallable(callbackfn);
    var O = toObject(that);
    var self2 = IndexedObject(O);
    var length2 = lengthOfArrayLike(O);
    var index2 = IS_RIGHT ? length2 - 1 : 0;
    var i2 = IS_RIGHT ? -1 : 1;
    if (argumentsLength < 2) while (true) {
      if (index2 in self2) {
        memo = self2[index2];
        index2 += i2;
        break;
      }
      index2 += i2;
      if (IS_RIGHT ? index2 < 0 : length2 <= index2) {
        throw new $TypeError("Reduce of empty array with no initial value");
      }
    }
    for (; IS_RIGHT ? index2 >= 0 : length2 > index2; index2 += i2) if (index2 in self2) {
      memo = callbackfn(memo, self2[index2], index2, O);
    }
    return memo;
  };
};
var arrayReduce = {
  // `Array.prototype.reduce` method
  // https://tc39.es/ecma262/#sec-array.prototype.reduce
  left: createMethod(false),
  // `Array.prototype.reduceRight` method
  // https://tc39.es/ecma262/#sec-array.prototype.reduceright
  right: createMethod(true)
};
var global$1 = global$n;
var classof = classofRaw$2;
var engineIsNode = classof(global$1.process) === "process";
var $$1 = _export;
var $reduce = arrayReduce.left;
var arrayMethodIsStrict$1 = arrayMethodIsStrict$6;
var CHROME_VERSION = engineV8Version;
var IS_NODE = engineIsNode;
var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;
var FORCED = CHROME_BUG || !arrayMethodIsStrict$1("reduce");
$$1({ target: "Array", proto: true, forced: FORCED }, {
  reduce: function reduce3(callbackfn) {
    var length2 = arguments.length;
    return $reduce(this, callbackfn, length2, length2 > 1 ? arguments[1] : void 0);
  }
});
var entryVirtual$1 = entryVirtual$i;
var reduce$3 = entryVirtual$1("Array").reduce;
var isPrototypeOf$1 = objectIsPrototypeOf;
var method$1 = reduce$3;
var ArrayPrototype$1 = Array.prototype;
var reduce$2 = function(it2) {
  var own = it2.reduce;
  return it2 === ArrayPrototype$1 || isPrototypeOf$1(ArrayPrototype$1, it2) && own === ArrayPrototype$1.reduce ? method$1 : own;
};
var parent$1 = reduce$2;
var reduce$1 = parent$1;
var reduce = reduce$1;
var _reduceInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(reduce);
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = _Reflect$construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
  if (_Reflect$construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var DirectionInterface = /* @__PURE__ */ function() {
  function DirectionInterface2() {
    _classCallCheck(this, DirectionInterface2);
  }
  _createClass(DirectionInterface2, [{
    key: "abstract",
    value: (
      /**
       * @ignore
       */
      function abstract() {
        throw new Error("Can't instantiate abstract class!");
      }
    )
    /**
     * This is a dummy call which is used to suppress the jsdoc errors of type:
     *
     *   "'param' is assigned a value but never used"
     *
     * @ignore
     */
  }, {
    key: "fake_use",
    value: function fake_use() {
    }
    /**
     * Type to use to translate dynamic curves to, in the case of hierarchical layout.
     * Dynamic curves do not work for these.
     *
     * The value should be perpendicular to the actual direction of the layout.
     *
     * @returns {string} Direction, either 'vertical' or 'horizontal'
     */
  }, {
    key: "curveType",
    value: function curveType() {
      return this.abstract();
    }
    /**
     * Return the value of the coordinate that is not fixed for this direction.
     *
     * @param {Node} node The node to read
     * @returns {number} Value of the unfixed coordinate
     */
  }, {
    key: "getPosition",
    value: function getPosition(node2) {
      this.fake_use(node2);
      return this.abstract();
    }
    /**
     * Set the value of the coordinate that is not fixed for this direction.
     *
     * @param {Node} node The node to adjust
     * @param {number} position
     * @param {number} [level] if specified, the hierarchy level that this node should be fixed to
     */
  }, {
    key: "setPosition",
    value: function setPosition(node2, position) {
      var level = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : void 0;
      this.fake_use(node2, position, level);
      this.abstract();
    }
    /**
     * Get the width of a tree.
     *
     * A `tree` here is a subset of nodes within the network which are not connected to other nodes,
     * only among themselves. In essence, it is a sub-network.
     *
     * @param {number} index The index number of a tree
     * @returns {number} the width of a tree in the view coordinates
     */
  }, {
    key: "getTreeSize",
    value: function getTreeSize(index2) {
      this.fake_use(index2);
      return this.abstract();
    }
    /**
     * Sort array of nodes on the unfixed coordinates.
     *
     * Note:** chrome has non-stable sorting implementation, which
     * has a tendency to change the order of the array items,
     * even if the custom sort function returns 0.
     *
     * For this reason, an external sort implementation is used,
     * which has the added benefit of being faster than the standard
     * platforms implementation. This has been verified on `node.js`,
     * `firefox` and `chrome` (all linux).
     *
     * @param {Array.<Node>} nodeArray array of nodes to sort
     */
  }, {
    key: "sort",
    value: function sort4(nodeArray) {
      this.fake_use(nodeArray);
      this.abstract();
    }
    /**
     * Assign the fixed coordinate of the node to the given level
     *
     * @param {Node} node The node to adjust
     * @param {number} level The level to fix to
     */
  }, {
    key: "fix",
    value: function fix(node2, level) {
      this.fake_use(node2, level);
      this.abstract();
    }
    /**
     * Add an offset to the unfixed coordinate of the given node.
     *
     * @param {NodeId} nodeId Id of the node to adjust
     * @param {number} diff Offset to add to the unfixed coordinate
     */
  }, {
    key: "shift",
    value: function shift(nodeId, diff) {
      this.fake_use(nodeId, diff);
      this.abstract();
    }
  }]);
  return DirectionInterface2;
}();
var VerticalStrategy = /* @__PURE__ */ function(_DirectionInterface) {
  _inherits(VerticalStrategy2, _DirectionInterface);
  var _super = _createSuper(VerticalStrategy2);
  function VerticalStrategy2(layout) {
    var _this;
    _classCallCheck(this, VerticalStrategy2);
    _this = _super.call(this);
    _this.layout = layout;
    return _this;
  }
  _createClass(VerticalStrategy2, [{
    key: "curveType",
    value: function curveType() {
      return "horizontal";
    }
    /** @inheritDoc */
  }, {
    key: "getPosition",
    value: function getPosition(node2) {
      return node2.x;
    }
    /** @inheritDoc */
  }, {
    key: "setPosition",
    value: function setPosition(node2, position) {
      var level = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : void 0;
      if (level !== void 0) {
        this.layout.hierarchical.addToOrdering(node2, level);
      }
      node2.x = position;
    }
    /** @inheritDoc */
  }, {
    key: "getTreeSize",
    value: function getTreeSize(index2) {
      var res = this.layout.hierarchical.getTreeSize(this.layout.body.nodes, index2);
      return {
        min: res.min_x,
        max: res.max_x
      };
    }
    /** @inheritDoc */
  }, {
    key: "sort",
    value: function sort4(nodeArray) {
      _sortInstanceProperty(nodeArray).call(nodeArray, function(a2, b2) {
        return a2.x - b2.x;
      });
    }
    /** @inheritDoc */
  }, {
    key: "fix",
    value: function fix(node2, level) {
      node2.y = this.layout.options.hierarchical.levelSeparation * level;
      node2.options.fixed.y = true;
    }
    /** @inheritDoc */
  }, {
    key: "shift",
    value: function shift(nodeId, diff) {
      this.layout.body.nodes[nodeId].x += diff;
    }
  }]);
  return VerticalStrategy2;
}(DirectionInterface);
var HorizontalStrategy = /* @__PURE__ */ function(_DirectionInterface2) {
  _inherits(HorizontalStrategy2, _DirectionInterface2);
  var _super2 = _createSuper(HorizontalStrategy2);
  function HorizontalStrategy2(layout) {
    var _this2;
    _classCallCheck(this, HorizontalStrategy2);
    _this2 = _super2.call(this);
    _this2.layout = layout;
    return _this2;
  }
  _createClass(HorizontalStrategy2, [{
    key: "curveType",
    value: function curveType() {
      return "vertical";
    }
    /** @inheritDoc */
  }, {
    key: "getPosition",
    value: function getPosition(node2) {
      return node2.y;
    }
    /** @inheritDoc */
  }, {
    key: "setPosition",
    value: function setPosition(node2, position) {
      var level = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : void 0;
      if (level !== void 0) {
        this.layout.hierarchical.addToOrdering(node2, level);
      }
      node2.y = position;
    }
    /** @inheritDoc */
  }, {
    key: "getTreeSize",
    value: function getTreeSize(index2) {
      var res = this.layout.hierarchical.getTreeSize(this.layout.body.nodes, index2);
      return {
        min: res.min_y,
        max: res.max_y
      };
    }
    /** @inheritDoc */
  }, {
    key: "sort",
    value: function sort4(nodeArray) {
      _sortInstanceProperty(nodeArray).call(nodeArray, function(a2, b2) {
        return a2.y - b2.y;
      });
    }
    /** @inheritDoc */
  }, {
    key: "fix",
    value: function fix(node2, level) {
      node2.x = this.layout.options.hierarchical.levelSeparation * level;
      node2.options.fixed.x = true;
    }
    /** @inheritDoc */
  }, {
    key: "shift",
    value: function shift(nodeId, diff) {
      this.layout.body.nodes[nodeId].y += diff;
    }
  }]);
  return HorizontalStrategy2;
}(DirectionInterface);
var $ = _export;
var $every = arrayIteration.every;
var arrayMethodIsStrict = arrayMethodIsStrict$6;
var STRICT_METHOD = arrayMethodIsStrict("every");
$({ target: "Array", proto: true, forced: !STRICT_METHOD }, {
  every: function every2(callbackfn) {
    return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
  }
});
var entryVirtual = entryVirtual$i;
var every$3 = entryVirtual("Array").every;
var isPrototypeOf = objectIsPrototypeOf;
var method = every$3;
var ArrayPrototype = Array.prototype;
var every$2 = function(it2) {
  var own = it2.every;
  return it2 === ArrayPrototype || isPrototypeOf(ArrayPrototype, it2) && own === ArrayPrototype.every ? method : own;
};
var parent = every$2;
var every$1 = parent;
var every = every$1;
var _everyInstanceProperty = /* @__PURE__ */ getDefaultExportFromCjs(every);
function _createForOfIteratorHelper$1(o2, allowArrayLike) {
  var it2 = typeof _Symbol !== "undefined" && _getIteratorMethod(o2) || o2["@@iterator"];
  if (!it2) {
    if (_Array$isArray(o2) || (it2 = _unsupportedIterableToArray$1(o2)) || allowArrayLike) {
      if (it2) o2 = it2;
      var i2 = 0;
      var F = function F2() {
      };
      return { s: F, n: function n2() {
        if (i2 >= o2.length) return { done: true };
        return { done: false, value: o2[i2++] };
      }, e: function e2(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s2() {
    it2 = it2.call(o2);
  }, n: function n2() {
    var step = it2.next();
    normalCompletion = step.done;
    return step;
  }, e: function e2(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f2() {
    try {
      if (!normalCompletion && it2.return != null) it2.return();
    } finally {
      if (didErr) throw err;
    }
  } };
}
function _unsupportedIterableToArray$1(o2, minLen) {
  var _context9;
  if (!o2) return;
  if (typeof o2 === "string") return _arrayLikeToArray$1(o2, minLen);
  var n2 = _sliceInstanceProperty(_context9 = Object.prototype.toString.call(o2)).call(_context9, 8, -1);
  if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set") return _Array$from$1(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$1(o2, minLen);
}
function _arrayLikeToArray$1(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
  return arr2;
}
function fillLevelsByDirectionCyclic(nodes2, levels) {
  var edges = new _Set();
  _forEachInstanceProperty(nodes2).call(nodes2, function(node2) {
    var _context;
    _forEachInstanceProperty(_context = node2.edges).call(_context, function(edge2) {
      if (edge2.connected) {
        edges.add(edge2);
      }
    });
  });
  _forEachInstanceProperty(edges).call(edges, function(edge2) {
    var fromId = edge2.from.id;
    var toId = edge2.to.id;
    if (levels[fromId] == null) {
      levels[fromId] = 0;
    }
    if (levels[toId] == null || levels[fromId] >= levels[toId]) {
      levels[toId] = levels[fromId] + 1;
    }
  });
  return levels;
}
function fillLevelsByDirectionLeaves(nodes2) {
  return fillLevelsByDirection(
    // Pick only leaves (nodes without children).
    function(node2) {
      var _context2, _context3;
      return _everyInstanceProperty(
        _context2 = _filterInstanceProperty(
          _context3 = node2.edges
          // Take only visible nodes into account.
        ).call(_context3, function(edge2) {
          return nodes2.has(edge2.toId);
        })
        // Check that all edges lead to this node (leaf).
      ).call(_context2, function(edge2) {
        return edge2.to === node2;
      });
    },
    // Use the lowest level.
    function(newLevel, oldLevel) {
      return oldLevel > newLevel;
    },
    // Go against the direction of the edges.
    "from",
    nodes2
  );
}
function fillLevelsByDirectionRoots(nodes2) {
  return fillLevelsByDirection(
    // Pick only roots (nodes without parents).
    function(node2) {
      var _context4, _context5;
      return _everyInstanceProperty(
        _context4 = _filterInstanceProperty(
          _context5 = node2.edges
          // Take only visible nodes into account.
        ).call(_context5, function(edge2) {
          return nodes2.has(edge2.toId);
        })
        // Check that all edges lead from this node (root).
      ).call(_context4, function(edge2) {
        return edge2.from === node2;
      });
    },
    // Use the highest level.
    function(newLevel, oldLevel) {
      return oldLevel < newLevel;
    },
    // Go in the direction of the edges.
    "to",
    nodes2
  );
}
function fillLevelsByDirection(isEntryNode, shouldLevelBeReplaced, direction, nodes2) {
  var _context6;
  var levels = _Object$create$1(null);
  var limit = _reduceInstanceProperty(_context6 = _toConsumableArray(_valuesInstanceProperty(nodes2).call(nodes2))).call(_context6, function(acc, node2) {
    return acc + 1 + node2.edges.length;
  }, 0);
  var edgeIdProp = direction + "Id";
  var newLevelDiff = direction === "to" ? 1 : -1;
  var _iterator = _createForOfIteratorHelper$1(nodes2), _step;
  try {
    var _loop = function _loop2() {
      var _step$value = _slicedToArray(_step.value, 2), entryNodeId = _step$value[0], entryNode = _step$value[1];
      if (
        // Skip if the node is not visible.
        !nodes2.has(entryNodeId) || // Skip if the node is not an entry node.
        !isEntryNode(entryNode)
      ) {
        return 0;
      }
      levels[entryNodeId] = 0;
      var stack2 = [entryNode];
      var done = 0;
      var node2;
      var _loop22 = function _loop23() {
        var _context7, _context8;
        if (!nodes2.has(entryNodeId)) {
          return 0;
        }
        var newLevel = levels[node2.id] + newLevelDiff;
        _forEachInstanceProperty(_context7 = _filterInstanceProperty(_context8 = node2.edges).call(_context8, function(edge2) {
          return (
            // Ignore disconnected edges.
            edge2.connected && // Ignore circular edges.
            edge2.to !== edge2.from && // Ignore edges leading to the node that's currently being processed.
            edge2[direction] !== node2 && // Ignore edges connecting to an invisible node.
            nodes2.has(edge2.toId) && // Ignore edges connecting from an invisible node.
            nodes2.has(edge2.fromId)
          );
        })).call(_context7, function(edge2) {
          var targetNodeId = edge2[edgeIdProp];
          var oldLevel = levels[targetNodeId];
          if (oldLevel == null || shouldLevelBeReplaced(newLevel, oldLevel)) {
            levels[targetNodeId] = newLevel;
            stack2.push(edge2[direction]);
          }
        });
        if (done > limit) {
          return {
            v: {
              v: fillLevelsByDirectionCyclic(nodes2, levels)
            }
          };
        } else {
          ++done;
        }
      }, _ret2;
      while (node2 = stack2.pop()) {
        _ret2 = _loop22();
        if (_ret2 === 0) continue;
        if (_ret2) return _ret2.v;
      }
    }, _ret;
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      _ret = _loop();
      if (_ret === 0) continue;
      if (_ret) return _ret.v;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return levels;
}
var HierarchicalStatus = /* @__PURE__ */ function() {
  function HierarchicalStatus2() {
    _classCallCheck(this, HierarchicalStatus2);
    this.childrenReference = {};
    this.parentReference = {};
    this.trees = {};
    this.distributionOrdering = {};
    this.levels = {};
    this.distributionIndex = {};
    this.isTree = false;
    this.treeIndex = -1;
  }
  _createClass(HierarchicalStatus2, [{
    key: "addRelation",
    value: function addRelation(parentNodeId, childNodeId) {
      if (this.childrenReference[parentNodeId] === void 0) {
        this.childrenReference[parentNodeId] = [];
      }
      this.childrenReference[parentNodeId].push(childNodeId);
      if (this.parentReference[childNodeId] === void 0) {
        this.parentReference[childNodeId] = [];
      }
      this.parentReference[childNodeId].push(parentNodeId);
    }
    /**
     * Check if the current state is for a formal tree or formal forest.
     *
     * This is the case if every node has at most one parent.
     *
     * Pre: parentReference init'ed properly for current network
     */
  }, {
    key: "checkIfTree",
    value: function checkIfTree() {
      for (var i2 in this.parentReference) {
        if (this.parentReference[i2].length > 1) {
          this.isTree = false;
          return;
        }
      }
      this.isTree = true;
    }
    /**
     * Return the number of separate trees in the current network.
     *
     * @returns {number}
     */
  }, {
    key: "numTrees",
    value: function numTrees() {
      return this.treeIndex + 1;
    }
    /**
     * Assign a tree id to a node
     *
     * @param {Node} node
     * @param {string|number} treeId
     */
  }, {
    key: "setTreeIndex",
    value: function setTreeIndex(node2, treeId) {
      if (treeId === void 0) return;
      if (this.trees[node2.id] === void 0) {
        this.trees[node2.id] = treeId;
        this.treeIndex = Math.max(treeId, this.treeIndex);
      }
    }
    /**
     * Ensure level for given id is defined.
     *
     * Sets level to zero for given node id if not already present
     *
     * @param {Node.id} nodeId
     */
  }, {
    key: "ensureLevel",
    value: function ensureLevel(nodeId) {
      if (this.levels[nodeId] === void 0) {
        this.levels[nodeId] = 0;
      }
    }
    /**
     * get the maximum level of a branch.
     *
     * TODO: Never entered; find a test case to test this!
     *
     * @param {Node.id} nodeId
     * @returns {number}
     */
  }, {
    key: "getMaxLevel",
    value: function getMaxLevel(nodeId) {
      var _this = this;
      var accumulator = {};
      var _getMaxLevel = function _getMaxLevel2(nodeId2) {
        if (accumulator[nodeId2] !== void 0) {
          return accumulator[nodeId2];
        }
        var level = _this.levels[nodeId2];
        if (_this.childrenReference[nodeId2]) {
          var children2 = _this.childrenReference[nodeId2];
          if (children2.length > 0) {
            for (var i2 = 0; i2 < children2.length; i2++) {
              level = Math.max(level, _getMaxLevel2(children2[i2]));
            }
          }
        }
        accumulator[nodeId2] = level;
        return level;
      };
      return _getMaxLevel(nodeId);
    }
    /**
     *
     * @param {Node} nodeA
     * @param {Node} nodeB
     */
  }, {
    key: "levelDownstream",
    value: function levelDownstream(nodeA, nodeB) {
      if (this.levels[nodeB.id] === void 0) {
        if (this.levels[nodeA.id] === void 0) {
          this.levels[nodeA.id] = 0;
        }
        this.levels[nodeB.id] = this.levels[nodeA.id] + 1;
      }
    }
    /**
     * Small util method to set the minimum levels of the nodes to zero.
     *
     * @param {Array.<Node>} nodes
     */
  }, {
    key: "setMinLevelToZero",
    value: function setMinLevelToZero(nodes2) {
      var minLevel = 1e9;
      for (var nodeId in nodes2) {
        if (Object.prototype.hasOwnProperty.call(nodes2, nodeId)) {
          if (this.levels[nodeId] !== void 0) {
            minLevel = Math.min(this.levels[nodeId], minLevel);
          }
        }
      }
      for (var _nodeId in nodes2) {
        if (Object.prototype.hasOwnProperty.call(nodes2, _nodeId)) {
          if (this.levels[_nodeId] !== void 0) {
            this.levels[_nodeId] -= minLevel;
          }
        }
      }
    }
    /**
     * Get the min and max xy-coordinates of a given tree
     *
     * @param {Array.<Node>} nodes
     * @param {number} index
     * @returns {{min_x: number, max_x: number, min_y: number, max_y: number}}
     */
  }, {
    key: "getTreeSize",
    value: function getTreeSize(nodes2, index2) {
      var min_x = 1e9;
      var max_x = -1e9;
      var min_y = 1e9;
      var max_y = -1e9;
      for (var nodeId in this.trees) {
        if (Object.prototype.hasOwnProperty.call(this.trees, nodeId)) {
          if (this.trees[nodeId] === index2) {
            var node2 = nodes2[nodeId];
            min_x = Math.min(node2.x, min_x);
            max_x = Math.max(node2.x, max_x);
            min_y = Math.min(node2.y, min_y);
            max_y = Math.max(node2.y, max_y);
          }
        }
      }
      return {
        min_x,
        max_x,
        min_y,
        max_y
      };
    }
    /**
     * Check if two nodes have the same parent(s)
     *
     * @param {Node} node1
     * @param {Node} node2
     * @returns {boolean} true if the two nodes have a same ancestor node, false otherwise
     */
  }, {
    key: "hasSameParent",
    value: function hasSameParent(node1, node2) {
      var parents1 = this.parentReference[node1.id];
      var parents2 = this.parentReference[node2.id];
      if (parents1 === void 0 || parents2 === void 0) {
        return false;
      }
      for (var i2 = 0; i2 < parents1.length; i2++) {
        for (var j2 = 0; j2 < parents2.length; j2++) {
          if (parents1[i2] == parents2[j2]) {
            return true;
          }
        }
      }
      return false;
    }
    /**
     * Check if two nodes are in the same tree.
     *
     * @param {Node} node1
     * @param {Node} node2
     * @returns {boolean} true if this is so, false otherwise
     */
  }, {
    key: "inSameSubNetwork",
    value: function inSameSubNetwork(node1, node2) {
      return this.trees[node1.id] === this.trees[node2.id];
    }
    /**
     * Get a list of the distinct levels in the current network
     *
     * @returns {Array}
     */
  }, {
    key: "getLevels",
    value: function getLevels() {
      return _Object$keys(this.distributionOrdering);
    }
    /**
     * Add a node to the ordering per level
     *
     * @param {Node} node
     * @param {number} level
     */
  }, {
    key: "addToOrdering",
    value: function addToOrdering(node2, level) {
      if (this.distributionOrdering[level] === void 0) {
        this.distributionOrdering[level] = [];
      }
      var isPresent = false;
      var curLevel = this.distributionOrdering[level];
      for (var n2 in curLevel) {
        if (curLevel[n2] === node2) {
          isPresent = true;
          break;
        }
      }
      if (!isPresent) {
        this.distributionOrdering[level].push(node2);
        this.distributionIndex[node2.id] = this.distributionOrdering[level].length - 1;
      }
    }
  }]);
  return HierarchicalStatus2;
}();
var LayoutEngine = /* @__PURE__ */ function() {
  function LayoutEngine2(body) {
    _classCallCheck(this, LayoutEngine2);
    this.body = body;
    this._resetRNG(Math.random() + ":" + _Date$now());
    this.setPhysics = false;
    this.options = {};
    this.optionsBackup = {
      physics: {}
    };
    this.defaultOptions = {
      randomSeed: void 0,
      improvedLayout: true,
      clusterThreshold: 150,
      hierarchical: {
        enabled: false,
        levelSeparation: 150,
        nodeSpacing: 100,
        treeSpacing: 200,
        blockShifting: true,
        edgeMinimization: true,
        parentCentralization: true,
        direction: "UD",
        // UD, DU, LR, RL
        sortMethod: "hubsize"
        // hubsize, directed
      }
    };
    _Object$assign(this.options, this.defaultOptions);
    this.bindEventListeners();
  }
  _createClass(LayoutEngine2, [{
    key: "bindEventListeners",
    value: function bindEventListeners() {
      var _this2 = this;
      this.body.emitter.on("_dataChanged", function() {
        _this2.setupHierarchicalLayout();
      });
      this.body.emitter.on("_dataLoaded", function() {
        _this2.layoutNetwork();
      });
      this.body.emitter.on("_resetHierarchicalLayout", function() {
        _this2.setupHierarchicalLayout();
      });
      this.body.emitter.on("_adjustEdgesForHierarchicalLayout", function() {
        if (_this2.options.hierarchical.enabled !== true) {
          return;
        }
        var type = _this2.direction.curveType();
        _this2.body.emitter.emit("_forceDisableDynamicCurves", type, false);
      });
    }
    /**
     *
     * @param {object} options
     * @param {object} allOptions
     * @returns {object}
     */
  }, {
    key: "setOptions",
    value: function setOptions(options, allOptions2) {
      if (options !== void 0) {
        var hierarchical = this.options.hierarchical;
        var prevHierarchicalState = hierarchical.enabled;
        selectiveDeepExtend(["randomSeed", "improvedLayout", "clusterThreshold"], this.options, options);
        mergeOptions(this.options, options, "hierarchical");
        if (options.randomSeed !== void 0) {
          this._resetRNG(options.randomSeed);
        }
        if (hierarchical.enabled === true) {
          if (prevHierarchicalState === true) {
            this.body.emitter.emit("refresh", true);
          }
          if (hierarchical.direction === "RL" || hierarchical.direction === "DU") {
            if (hierarchical.levelSeparation > 0) {
              hierarchical.levelSeparation *= -1;
            }
          } else {
            if (hierarchical.levelSeparation < 0) {
              hierarchical.levelSeparation *= -1;
            }
          }
          this.setDirectionStrategy();
          this.body.emitter.emit("_resetHierarchicalLayout");
          return this.adaptAllOptionsForHierarchicalLayout(allOptions2);
        } else {
          if (prevHierarchicalState === true) {
            this.body.emitter.emit("refresh");
            return deepExtend(allOptions2, this.optionsBackup);
          }
        }
      }
      return allOptions2;
    }
    /**
     * Reset the random number generator with given seed.
     *
     * @param {any} seed - The seed that will be forwarded the the RNG.
     */
  }, {
    key: "_resetRNG",
    value: function _resetRNG(seed) {
      this.initialRandomSeed = seed;
      this._rng = Alea(this.initialRandomSeed);
    }
    /**
     *
     * @param {object} allOptions
     * @returns {object}
     */
  }, {
    key: "adaptAllOptionsForHierarchicalLayout",
    value: function adaptAllOptionsForHierarchicalLayout(allOptions2) {
      if (this.options.hierarchical.enabled === true) {
        var backupPhysics = this.optionsBackup.physics;
        if (allOptions2.physics === void 0 || allOptions2.physics === true) {
          allOptions2.physics = {
            enabled: backupPhysics.enabled === void 0 ? true : backupPhysics.enabled,
            solver: "hierarchicalRepulsion"
          };
          backupPhysics.enabled = backupPhysics.enabled === void 0 ? true : backupPhysics.enabled;
          backupPhysics.solver = backupPhysics.solver || "barnesHut";
        } else if (_typeof(allOptions2.physics) === "object") {
          backupPhysics.enabled = allOptions2.physics.enabled === void 0 ? true : allOptions2.physics.enabled;
          backupPhysics.solver = allOptions2.physics.solver || "barnesHut";
          allOptions2.physics.solver = "hierarchicalRepulsion";
        } else if (allOptions2.physics !== false) {
          backupPhysics.solver = "barnesHut";
          allOptions2.physics = {
            solver: "hierarchicalRepulsion"
          };
        }
        var type = this.direction.curveType();
        if (allOptions2.edges === void 0) {
          this.optionsBackup.edges = {
            smooth: {
              enabled: true,
              type: "dynamic"
            }
          };
          allOptions2.edges = {
            smooth: false
          };
        } else if (allOptions2.edges.smooth === void 0) {
          this.optionsBackup.edges = {
            smooth: {
              enabled: true,
              type: "dynamic"
            }
          };
          allOptions2.edges.smooth = false;
        } else {
          if (typeof allOptions2.edges.smooth === "boolean") {
            this.optionsBackup.edges = {
              smooth: allOptions2.edges.smooth
            };
            allOptions2.edges.smooth = {
              enabled: allOptions2.edges.smooth,
              type
            };
          } else {
            var smooth = allOptions2.edges.smooth;
            if (smooth.type !== void 0 && smooth.type !== "dynamic") {
              type = smooth.type;
            }
            this.optionsBackup.edges = {
              smooth: {
                enabled: smooth.enabled === void 0 ? true : smooth.enabled,
                type: smooth.type === void 0 ? "dynamic" : smooth.type,
                roundness: smooth.roundness === void 0 ? 0.5 : smooth.roundness,
                forceDirection: smooth.forceDirection === void 0 ? false : smooth.forceDirection
              }
            };
            allOptions2.edges.smooth = {
              enabled: smooth.enabled === void 0 ? true : smooth.enabled,
              type,
              roundness: smooth.roundness === void 0 ? 0.5 : smooth.roundness,
              forceDirection: smooth.forceDirection === void 0 ? false : smooth.forceDirection
            };
          }
        }
        this.body.emitter.emit("_forceDisableDynamicCurves", type);
      }
      return allOptions2;
    }
    /**
     *
     * @param {Array.<Node>} nodesArray
     */
  }, {
    key: "positionInitially",
    value: function positionInitially(nodesArray) {
      if (this.options.hierarchical.enabled !== true) {
        this._resetRNG(this.initialRandomSeed);
        var radius = nodesArray.length + 50;
        for (var i2 = 0; i2 < nodesArray.length; i2++) {
          var node2 = nodesArray[i2];
          var angle = 2 * Math.PI * this._rng();
          if (node2.x === void 0) {
            node2.x = radius * Math.cos(angle);
          }
          if (node2.y === void 0) {
            node2.y = radius * Math.sin(angle);
          }
        }
      }
    }
    /**
     * Use Kamada Kawai to position nodes. This is quite a heavy algorithm so if there are a lot of nodes we
     * cluster them first to reduce the amount.
     */
  }, {
    key: "layoutNetwork",
    value: function layoutNetwork() {
      if (this.options.hierarchical.enabled !== true && this.options.improvedLayout === true) {
        var indices = this.body.nodeIndices;
        var positionDefined = 0;
        for (var i2 = 0; i2 < indices.length; i2++) {
          var node2 = this.body.nodes[indices[i2]];
          if (node2.predefinedPosition === true) {
            positionDefined += 1;
          }
        }
        if (positionDefined < 0.5 * indices.length) {
          var MAX_LEVELS = 10;
          var level = 0;
          var clusterThreshold = this.options.clusterThreshold;
          var clusterOptions = {
            clusterNodeProperties: {
              shape: "ellipse",
              // Bugfix: avoid type 'image', no images supplied
              label: "",
              // avoid label handling
              group: "",
              // avoid group handling
              font: {
                multi: false
              }
              // avoid font propagation
            },
            clusterEdgeProperties: {
              label: "",
              // avoid label handling
              font: {
                multi: false
              },
              // avoid font propagation
              smooth: {
                enabled: false
                // avoid drawing penalty for complex edges
              }
            }
          };
          if (indices.length > clusterThreshold) {
            var startLength = indices.length;
            while (indices.length > clusterThreshold && level <= MAX_LEVELS) {
              level += 1;
              var before = indices.length;
              if (level % 3 === 0) {
                this.body.modules.clustering.clusterBridges(clusterOptions);
              } else {
                this.body.modules.clustering.clusterOutliers(clusterOptions);
              }
              var after = indices.length;
              if (before == after && level % 3 !== 0) {
                this._declusterAll();
                this.body.emitter.emit("_layoutFailed");
                console.info("This network could not be positioned by this version of the improved layout algorithm. Please disable improvedLayout for better performance.");
                return;
              }
            }
            this.body.modules.kamadaKawai.setOptions({
              springLength: Math.max(150, 2 * startLength)
            });
          }
          if (level > MAX_LEVELS) {
            console.info("The clustering didn't succeed within the amount of interations allowed, progressing with partial result.");
          }
          this.body.modules.kamadaKawai.solve(indices, this.body.edgeIndices, true);
          this._shiftToCenter();
          var offset2 = 70;
          for (var _i = 0; _i < indices.length; _i++) {
            var _node = this.body.nodes[indices[_i]];
            if (_node.predefinedPosition === false) {
              _node.x += (0.5 - this._rng()) * offset2;
              _node.y += (0.5 - this._rng()) * offset2;
            }
          }
          this._declusterAll();
          this.body.emitter.emit("_repositionBezierNodes");
        }
      }
    }
    /**
     * Move all the nodes towards to the center so gravitational pull wil not move the nodes away from view
     *
     * @private
     */
  }, {
    key: "_shiftToCenter",
    value: function _shiftToCenter() {
      var range = NetworkUtil.getRangeCore(this.body.nodes, this.body.nodeIndices);
      var center = NetworkUtil.findCenter(range);
      for (var i2 = 0; i2 < this.body.nodeIndices.length; i2++) {
        var node2 = this.body.nodes[this.body.nodeIndices[i2]];
        node2.x -= center.x;
        node2.y -= center.y;
      }
    }
    /**
     * Expands all clusters
     *
     * @private
     */
  }, {
    key: "_declusterAll",
    value: function _declusterAll() {
      var clustersPresent = true;
      while (clustersPresent === true) {
        clustersPresent = false;
        for (var i2 = 0; i2 < this.body.nodeIndices.length; i2++) {
          if (this.body.nodes[this.body.nodeIndices[i2]].isCluster === true) {
            clustersPresent = true;
            this.body.modules.clustering.openCluster(this.body.nodeIndices[i2], {}, false);
          }
        }
        if (clustersPresent === true) {
          this.body.emitter.emit("_dataChanged");
        }
      }
    }
    /**
     *
     * @returns {number|*}
     */
  }, {
    key: "getSeed",
    value: function getSeed() {
      return this.initialRandomSeed;
    }
    /**
     * This is the main function to layout the nodes in a hierarchical way.
     * It checks if the node details are supplied correctly
     *
     * @private
     */
  }, {
    key: "setupHierarchicalLayout",
    value: function setupHierarchicalLayout() {
      if (this.options.hierarchical.enabled === true && this.body.nodeIndices.length > 0) {
        var node2, nodeId;
        var definedLevel = false;
        var undefinedLevel = false;
        this.lastNodeOnLevel = {};
        this.hierarchical = new HierarchicalStatus();
        for (nodeId in this.body.nodes) {
          if (Object.prototype.hasOwnProperty.call(this.body.nodes, nodeId)) {
            node2 = this.body.nodes[nodeId];
            if (node2.options.level !== void 0) {
              definedLevel = true;
              this.hierarchical.levels[nodeId] = node2.options.level;
            } else {
              undefinedLevel = true;
            }
          }
        }
        if (undefinedLevel === true && definedLevel === true) {
          throw new Error("To use the hierarchical layout, nodes require either no predefined levels or levels have to be defined for all nodes.");
        } else {
          if (undefinedLevel === true) {
            var sortMethod = this.options.hierarchical.sortMethod;
            if (sortMethod === "hubsize") {
              this._determineLevelsByHubsize();
            } else if (sortMethod === "directed") {
              this._determineLevelsDirected();
            } else if (sortMethod === "custom") {
              this._determineLevelsCustomCallback();
            }
          }
          for (var _nodeId2 in this.body.nodes) {
            if (Object.prototype.hasOwnProperty.call(this.body.nodes, _nodeId2)) {
              this.hierarchical.ensureLevel(_nodeId2);
            }
          }
          var distribution = this._getDistribution();
          this._generateMap();
          this._placeNodesByHierarchy(distribution);
          this._condenseHierarchy();
          this._shiftToCenter();
        }
      }
    }
    /**
     * @private
     */
  }, {
    key: "_condenseHierarchy",
    value: function _condenseHierarchy() {
      var _this3 = this;
      var stillShifting = false;
      var branches = {};
      var shiftTrees = function shiftTrees2() {
        var treeSizes = getTreeSizes();
        var shiftBy = 0;
        for (var i2 = 0; i2 < treeSizes.length - 1; i2++) {
          var diff = treeSizes[i2].max - treeSizes[i2 + 1].min;
          shiftBy += diff + _this3.options.hierarchical.treeSpacing;
          shiftTree(i2 + 1, shiftBy);
        }
      };
      var shiftTree = function shiftTree2(index2, offset2) {
        var trees = _this3.hierarchical.trees;
        for (var nodeId in trees) {
          if (Object.prototype.hasOwnProperty.call(trees, nodeId)) {
            if (trees[nodeId] === index2) {
              _this3.direction.shift(nodeId, offset2);
            }
          }
        }
      };
      var getTreeSizes = function getTreeSizes2() {
        var treeWidths = [];
        for (var i2 = 0; i2 < _this3.hierarchical.numTrees(); i2++) {
          treeWidths.push(_this3.direction.getTreeSize(i2));
        }
        return treeWidths;
      };
      var getBranchNodes = function getBranchNodes2(source, map4) {
        if (map4[source.id]) {
          return;
        }
        map4[source.id] = true;
        if (_this3.hierarchical.childrenReference[source.id]) {
          var children2 = _this3.hierarchical.childrenReference[source.id];
          if (children2.length > 0) {
            for (var i2 = 0; i2 < children2.length; i2++) {
              getBranchNodes2(_this3.body.nodes[children2[i2]], map4);
            }
          }
        }
      };
      var getBranchBoundary = function getBranchBoundary2(branchMap) {
        var maxLevel = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1e9;
        var minSpace = 1e9;
        var maxSpace = 1e9;
        var min2 = 1e9;
        var max2 = -1e9;
        for (var branchNode in branchMap) {
          if (Object.prototype.hasOwnProperty.call(branchMap, branchNode)) {
            var node2 = _this3.body.nodes[branchNode];
            var level = _this3.hierarchical.levels[node2.id];
            var position = _this3.direction.getPosition(node2);
            var _this3$_getSpaceAroun = _this3._getSpaceAroundNode(node2, branchMap), _this3$_getSpaceAroun2 = _slicedToArray(_this3$_getSpaceAroun, 2), minSpaceNode = _this3$_getSpaceAroun2[0], maxSpaceNode = _this3$_getSpaceAroun2[1];
            minSpace = Math.min(minSpaceNode, minSpace);
            maxSpace = Math.min(maxSpaceNode, maxSpace);
            if (level <= maxLevel) {
              min2 = Math.min(position, min2);
              max2 = Math.max(position, max2);
            }
          }
        }
        return [min2, max2, minSpace, maxSpace];
      };
      var getCollisionLevel = function getCollisionLevel2(node1, node2) {
        var maxLevel1 = _this3.hierarchical.getMaxLevel(node1.id);
        var maxLevel2 = _this3.hierarchical.getMaxLevel(node2.id);
        return Math.min(maxLevel1, maxLevel2);
      };
      var shiftElementsCloser = function shiftElementsCloser2(callback, levels, centerParents) {
        var hier = _this3.hierarchical;
        for (var i2 = 0; i2 < levels.length; i2++) {
          var level = levels[i2];
          var levelNodes = hier.distributionOrdering[level];
          if (levelNodes.length > 1) {
            for (var j2 = 0; j2 < levelNodes.length - 1; j2++) {
              var node1 = levelNodes[j2];
              var node2 = levelNodes[j2 + 1];
              if (hier.hasSameParent(node1, node2) && hier.inSameSubNetwork(node1, node2)) {
                callback(node1, node2, centerParents);
              }
            }
          }
        }
      };
      var branchShiftCallback = function branchShiftCallback2(node1, node2) {
        var centerParent = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
        var pos1 = _this3.direction.getPosition(node1);
        var pos2 = _this3.direction.getPosition(node2);
        var diffAbs = Math.abs(pos2 - pos1);
        var nodeSpacing = _this3.options.hierarchical.nodeSpacing;
        if (diffAbs > nodeSpacing) {
          var branchNodes1 = {};
          var branchNodes2 = {};
          getBranchNodes(node1, branchNodes1);
          getBranchNodes(node2, branchNodes2);
          var maxLevel = getCollisionLevel(node1, node2);
          var branchNodeBoundary1 = getBranchBoundary(branchNodes1, maxLevel);
          var branchNodeBoundary2 = getBranchBoundary(branchNodes2, maxLevel);
          var max1 = branchNodeBoundary1[1];
          var min2 = branchNodeBoundary2[0];
          var minSpace2 = branchNodeBoundary2[2];
          var diffBranch = Math.abs(max1 - min2);
          if (diffBranch > nodeSpacing) {
            var offset2 = max1 - min2 + nodeSpacing;
            if (offset2 < -minSpace2 + nodeSpacing) {
              offset2 = -minSpace2 + nodeSpacing;
            }
            if (offset2 < 0) {
              _this3._shiftBlock(node2.id, offset2);
              stillShifting = true;
              if (centerParent === true) _this3._centerParent(node2);
            }
          }
        }
      };
      var minimizeEdgeLength = function minimizeEdgeLength2(iterations, node2) {
        var nodeId = node2.id;
        var allEdges = node2.edges;
        var nodeLevel = _this3.hierarchical.levels[node2.id];
        var C2 = _this3.options.hierarchical.levelSeparation * _this3.options.hierarchical.levelSeparation;
        var referenceNodes = {};
        var aboveEdges = [];
        for (var i2 = 0; i2 < allEdges.length; i2++) {
          var edge2 = allEdges[i2];
          if (edge2.toId != edge2.fromId) {
            var otherNode = edge2.toId == nodeId ? edge2.from : edge2.to;
            referenceNodes[allEdges[i2].id] = otherNode;
            if (_this3.hierarchical.levels[otherNode.id] < nodeLevel) {
              aboveEdges.push(edge2);
            }
          }
        }
        var getFx = function getFx2(point, edges) {
          var sum = 0;
          for (var _i2 = 0; _i2 < edges.length; _i2++) {
            if (referenceNodes[edges[_i2].id] !== void 0) {
              var a2 = _this3.direction.getPosition(referenceNodes[edges[_i2].id]) - point;
              sum += a2 / Math.sqrt(a2 * a2 + C2);
            }
          }
          return sum;
        };
        var getDFx = function getDFx2(point, edges) {
          var sum = 0;
          for (var _i3 = 0; _i3 < edges.length; _i3++) {
            if (referenceNodes[edges[_i3].id] !== void 0) {
              var a2 = _this3.direction.getPosition(referenceNodes[edges[_i3].id]) - point;
              sum -= C2 * Math.pow(a2 * a2 + C2, -1.5);
            }
          }
          return sum;
        };
        var getGuess = function getGuess2(iterations2, edges) {
          var guess2 = _this3.direction.getPosition(node2);
          var guessMap = {};
          for (var _i4 = 0; _i4 < iterations2; _i4++) {
            var fx = getFx(guess2, edges);
            var dfx = getDFx(guess2, edges);
            var limit = 40;
            var ratio = Math.max(-limit, Math.min(limit, Math.round(fx / dfx)));
            guess2 = guess2 - ratio;
            if (guessMap[guess2] !== void 0) {
              break;
            }
            guessMap[guess2] = _i4;
          }
          return guess2;
        };
        var moveBranch = function moveBranch2(guess2) {
          var nodePosition = _this3.direction.getPosition(node2);
          if (branches[node2.id] === void 0) {
            var branchNodes = {};
            getBranchNodes(node2, branchNodes);
            branches[node2.id] = branchNodes;
          }
          var branchBoundary = getBranchBoundary(branches[node2.id]);
          var minSpaceBranch = branchBoundary[2];
          var maxSpaceBranch = branchBoundary[3];
          var diff = guess2 - nodePosition;
          var branchOffset = 0;
          if (diff > 0) {
            branchOffset = Math.min(diff, maxSpaceBranch - _this3.options.hierarchical.nodeSpacing);
          } else if (diff < 0) {
            branchOffset = -Math.min(-diff, minSpaceBranch - _this3.options.hierarchical.nodeSpacing);
          }
          if (branchOffset != 0) {
            _this3._shiftBlock(node2.id, branchOffset);
            stillShifting = true;
          }
        };
        var moveNode = function moveNode2(guess2) {
          var nodePosition = _this3.direction.getPosition(node2);
          var _this3$_getSpaceAroun3 = _this3._getSpaceAroundNode(node2), _this3$_getSpaceAroun4 = _slicedToArray(_this3$_getSpaceAroun3, 2), minSpace = _this3$_getSpaceAroun4[0], maxSpace = _this3$_getSpaceAroun4[1];
          var diff = guess2 - nodePosition;
          var newPosition = nodePosition;
          if (diff > 0) {
            newPosition = Math.min(nodePosition + (maxSpace - _this3.options.hierarchical.nodeSpacing), guess2);
          } else if (diff < 0) {
            newPosition = Math.max(nodePosition - (minSpace - _this3.options.hierarchical.nodeSpacing), guess2);
          }
          if (newPosition !== nodePosition) {
            _this3.direction.setPosition(node2, newPosition);
            stillShifting = true;
          }
        };
        var guess = getGuess(iterations, aboveEdges);
        moveBranch(guess);
        guess = getGuess(iterations, allEdges);
        moveNode(guess);
      };
      var minimizeEdgeLengthBottomUp = function minimizeEdgeLengthBottomUp2(iterations) {
        var levels = _this3.hierarchical.getLevels();
        levels = _reverseInstanceProperty(levels).call(levels);
        for (var i2 = 0; i2 < iterations; i2++) {
          stillShifting = false;
          for (var j2 = 0; j2 < levels.length; j2++) {
            var level = levels[j2];
            var levelNodes = _this3.hierarchical.distributionOrdering[level];
            for (var k2 = 0; k2 < levelNodes.length; k2++) {
              minimizeEdgeLength(1e3, levelNodes[k2]);
            }
          }
          if (stillShifting !== true) {
            break;
          }
        }
      };
      var shiftBranchesCloserBottomUp = function shiftBranchesCloserBottomUp2(iterations) {
        var levels = _this3.hierarchical.getLevels();
        levels = _reverseInstanceProperty(levels).call(levels);
        for (var i2 = 0; i2 < iterations; i2++) {
          stillShifting = false;
          shiftElementsCloser(branchShiftCallback, levels, true);
          if (stillShifting !== true) {
            break;
          }
        }
      };
      var centerAllParents = function centerAllParents2() {
        for (var nodeId in _this3.body.nodes) {
          if (Object.prototype.hasOwnProperty.call(_this3.body.nodes, nodeId)) _this3._centerParent(_this3.body.nodes[nodeId]);
        }
      };
      var centerAllParentsBottomUp = function centerAllParentsBottomUp2() {
        var levels = _this3.hierarchical.getLevels();
        levels = _reverseInstanceProperty(levels).call(levels);
        for (var i2 = 0; i2 < levels.length; i2++) {
          var level = levels[i2];
          var levelNodes = _this3.hierarchical.distributionOrdering[level];
          for (var j2 = 0; j2 < levelNodes.length; j2++) {
            _this3._centerParent(levelNodes[j2]);
          }
        }
      };
      if (this.options.hierarchical.blockShifting === true) {
        shiftBranchesCloserBottomUp(5);
        centerAllParents();
      }
      if (this.options.hierarchical.edgeMinimization === true) {
        minimizeEdgeLengthBottomUp(20);
      }
      if (this.options.hierarchical.parentCentralization === true) {
        centerAllParentsBottomUp();
      }
      shiftTrees();
    }
    /**
     * This gives the space around the node. IF a map is supplied, it will only check against nodes NOT in the map.
     * This is used to only get the distances to nodes outside of a branch.
     *
     * @param {Node} node
     * @param {{Node.id: vis.Node}} map
     * @returns {number[]}
     * @private
     */
  }, {
    key: "_getSpaceAroundNode",
    value: function _getSpaceAroundNode(node2, map4) {
      var useMap = true;
      if (map4 === void 0) {
        useMap = false;
      }
      var level = this.hierarchical.levels[node2.id];
      if (level !== void 0) {
        var index2 = this.hierarchical.distributionIndex[node2.id];
        var position = this.direction.getPosition(node2);
        var ordering = this.hierarchical.distributionOrdering[level];
        var minSpace = 1e9;
        var maxSpace = 1e9;
        if (index2 !== 0) {
          var prevNode = ordering[index2 - 1];
          if (useMap === true && map4[prevNode.id] === void 0 || useMap === false) {
            var prevPos = this.direction.getPosition(prevNode);
            minSpace = position - prevPos;
          }
        }
        if (index2 != ordering.length - 1) {
          var nextNode = ordering[index2 + 1];
          if (useMap === true && map4[nextNode.id] === void 0 || useMap === false) {
            var nextPos = this.direction.getPosition(nextNode);
            maxSpace = Math.min(maxSpace, nextPos - position);
          }
        }
        return [minSpace, maxSpace];
      } else {
        return [0, 0];
      }
    }
    /**
     * We use this method to center a parent node and check if it does not cross other nodes when it does.
     *
     * @param {Node} node
     * @private
     */
  }, {
    key: "_centerParent",
    value: function _centerParent(node2) {
      if (this.hierarchical.parentReference[node2.id]) {
        var parents = this.hierarchical.parentReference[node2.id];
        for (var i2 = 0; i2 < parents.length; i2++) {
          var parentId = parents[i2];
          var parentNode = this.body.nodes[parentId];
          var children2 = this.hierarchical.childrenReference[parentId];
          if (children2 !== void 0) {
            var newPosition = this._getCenterPosition(children2);
            var position = this.direction.getPosition(parentNode);
            var _this$_getSpaceAround = this._getSpaceAroundNode(parentNode), _this$_getSpaceAround2 = _slicedToArray(_this$_getSpaceAround, 2), minSpace = _this$_getSpaceAround2[0], maxSpace = _this$_getSpaceAround2[1];
            var diff = position - newPosition;
            if (diff < 0 && Math.abs(diff) < maxSpace - this.options.hierarchical.nodeSpacing || diff > 0 && Math.abs(diff) < minSpace - this.options.hierarchical.nodeSpacing) {
              this.direction.setPosition(parentNode, newPosition);
            }
          }
        }
      }
    }
    /**
     * This function places the nodes on the canvas based on the hierarchial distribution.
     *
     * @param {object} distribution | obtained by the function this._getDistribution()
     * @private
     */
  }, {
    key: "_placeNodesByHierarchy",
    value: function _placeNodesByHierarchy(distribution) {
      this.positionedNodes = {};
      for (var level in distribution) {
        if (Object.prototype.hasOwnProperty.call(distribution, level)) {
          var _context;
          var nodeArray = _Object$keys(distribution[level]);
          nodeArray = this._indexArrayToNodes(nodeArray);
          _sortInstanceProperty(_context = this.direction).call(_context, nodeArray);
          var handledNodeCount = 0;
          for (var i2 = 0; i2 < nodeArray.length; i2++) {
            var node2 = nodeArray[i2];
            if (this.positionedNodes[node2.id] === void 0) {
              var spacing = this.options.hierarchical.nodeSpacing;
              var pos = spacing * handledNodeCount;
              if (handledNodeCount > 0) {
                pos = this.direction.getPosition(nodeArray[i2 - 1]) + spacing;
              }
              this.direction.setPosition(node2, pos, level);
              this._validatePositionAndContinue(node2, level, pos);
              handledNodeCount++;
            }
          }
        }
      }
    }
    /**
     * This is a recursively called function to enumerate the branches from the largest hubs and place the nodes
     * on a X position that ensures there will be no overlap.
     *
     * @param {Node.id} parentId
     * @param {number} parentLevel
     * @private
     */
  }, {
    key: "_placeBranchNodes",
    value: function _placeBranchNodes(parentId, parentLevel) {
      var _context2;
      var childRef = this.hierarchical.childrenReference[parentId];
      if (childRef === void 0) {
        return;
      }
      var childNodes = [];
      for (var i2 = 0; i2 < childRef.length; i2++) {
        childNodes.push(this.body.nodes[childRef[i2]]);
      }
      _sortInstanceProperty(_context2 = this.direction).call(_context2, childNodes);
      for (var _i5 = 0; _i5 < childNodes.length; _i5++) {
        var childNode = childNodes[_i5];
        var childNodeLevel = this.hierarchical.levels[childNode.id];
        if (childNodeLevel > parentLevel && this.positionedNodes[childNode.id] === void 0) {
          var spacing = this.options.hierarchical.nodeSpacing;
          var pos = void 0;
          if (_i5 === 0) {
            pos = this.direction.getPosition(this.body.nodes[parentId]);
          } else {
            pos = this.direction.getPosition(childNodes[_i5 - 1]) + spacing;
          }
          this.direction.setPosition(childNode, pos, childNodeLevel);
          this._validatePositionAndContinue(childNode, childNodeLevel, pos);
        } else {
          return;
        }
      }
      var center = this._getCenterPosition(childNodes);
      this.direction.setPosition(this.body.nodes[parentId], center, parentLevel);
    }
    /**
     * This method checks for overlap and if required shifts the branch. It also keeps records of positioned nodes.
     * Finally it will call _placeBranchNodes to place the branch nodes.
     *
     * @param {Node} node
     * @param {number} level
     * @param {number} pos
     * @private
     */
  }, {
    key: "_validatePositionAndContinue",
    value: function _validatePositionAndContinue(node2, level, pos) {
      if (!this.hierarchical.isTree) return;
      if (this.lastNodeOnLevel[level] !== void 0) {
        var previousPos = this.direction.getPosition(this.body.nodes[this.lastNodeOnLevel[level]]);
        if (pos - previousPos < this.options.hierarchical.nodeSpacing) {
          var diff = previousPos + this.options.hierarchical.nodeSpacing - pos;
          var sharedParent = this._findCommonParent(this.lastNodeOnLevel[level], node2.id);
          this._shiftBlock(sharedParent.withChild, diff);
        }
      }
      this.lastNodeOnLevel[level] = node2.id;
      this.positionedNodes[node2.id] = true;
      this._placeBranchNodes(node2.id, level);
    }
    /**
     * Receives an array with node indices and returns an array with the actual node references.
     * Used for sorting based on node properties.
     *
     * @param {Array.<Node.id>} idArray
     * @returns {Array.<Node>}
     */
  }, {
    key: "_indexArrayToNodes",
    value: function _indexArrayToNodes(idArray) {
      var array2 = [];
      for (var i2 = 0; i2 < idArray.length; i2++) {
        array2.push(this.body.nodes[idArray[i2]]);
      }
      return array2;
    }
    /**
     * This function get the distribution of levels based on hubsize
     *
     * @returns {object}
     * @private
     */
  }, {
    key: "_getDistribution",
    value: function _getDistribution() {
      var distribution = {};
      var nodeId, node2;
      for (nodeId in this.body.nodes) {
        if (Object.prototype.hasOwnProperty.call(this.body.nodes, nodeId)) {
          node2 = this.body.nodes[nodeId];
          var level = this.hierarchical.levels[nodeId] === void 0 ? 0 : this.hierarchical.levels[nodeId];
          this.direction.fix(node2, level);
          if (distribution[level] === void 0) {
            distribution[level] = {};
          }
          distribution[level][nodeId] = node2;
        }
      }
      return distribution;
    }
    /**
     * Return the active (i.e. visible) edges for this node
     *
     * @param {Node} node
     * @returns {Array.<vis.Edge>} Array of edge instances
     * @private
     */
  }, {
    key: "_getActiveEdges",
    value: function _getActiveEdges(node2) {
      var _this4 = this;
      var result = [];
      forEach$1(node2.edges, function(edge2) {
        var _context3;
        if (_indexOfInstanceProperty(_context3 = _this4.body.edgeIndices).call(_context3, edge2.id) !== -1) {
          result.push(edge2);
        }
      });
      return result;
    }
    /**
     * Get the hubsizes for all active nodes.
     *
     * @returns {number}
     * @private
     */
  }, {
    key: "_getHubSizes",
    value: function _getHubSizes() {
      var _this5 = this;
      var hubSizes = {};
      var nodeIds = this.body.nodeIndices;
      forEach$1(nodeIds, function(nodeId) {
        var node2 = _this5.body.nodes[nodeId];
        var hubSize = _this5._getActiveEdges(node2).length;
        hubSizes[hubSize] = true;
      });
      var result = [];
      forEach$1(hubSizes, function(size) {
        result.push(Number(size));
      });
      _sortInstanceProperty(result).call(result, function(a2, b2) {
        return b2 - a2;
      });
      return result;
    }
    /**
     * this function allocates nodes in levels based on the recursive branching from the largest hubs.
     *
     * @private
     */
  }, {
    key: "_determineLevelsByHubsize",
    value: function _determineLevelsByHubsize() {
      var _this6 = this;
      var levelDownstream = function levelDownstream2(nodeA, nodeB) {
        _this6.hierarchical.levelDownstream(nodeA, nodeB);
      };
      var hubSizes = this._getHubSizes();
      var _loop = function _loop2() {
        var hubSize = hubSizes[i2];
        if (hubSize === 0) return 1;
        forEach$1(_this6.body.nodeIndices, function(nodeId) {
          var node2 = _this6.body.nodes[nodeId];
          if (hubSize === _this6._getActiveEdges(node2).length) {
            _this6._crawlNetwork(levelDownstream, nodeId);
          }
        });
      };
      for (var i2 = 0; i2 < hubSizes.length; ++i2) {
        if (_loop()) break;
      }
    }
    /**
     * TODO: release feature
     * TODO: Determine if this feature is needed at all
     *
     * @private
     */
  }, {
    key: "_determineLevelsCustomCallback",
    value: function _determineLevelsCustomCallback() {
      var _this7 = this;
      var minLevel = 1e5;
      var customCallback = function customCallback2(nodeA, nodeB, edge2) {
      };
      var levelByDirection = function levelByDirection2(nodeA, nodeB, edge2) {
        var levelA = _this7.hierarchical.levels[nodeA.id];
        if (levelA === void 0) {
          levelA = _this7.hierarchical.levels[nodeA.id] = minLevel;
        }
        var diff = customCallback(NetworkUtil.cloneOptions(nodeA, "node"), NetworkUtil.cloneOptions(nodeB, "node"), NetworkUtil.cloneOptions(edge2, "edge"));
        _this7.hierarchical.levels[nodeB.id] = levelA + diff;
      };
      this._crawlNetwork(levelByDirection);
      this.hierarchical.setMinLevelToZero(this.body.nodes);
    }
    /**
     * Allocate nodes in levels based on the direction of the edges.
     *
     * @private
     */
  }, {
    key: "_determineLevelsDirected",
    value: function _determineLevelsDirected() {
      var _context4, _this8 = this;
      var nodes2 = _reduceInstanceProperty(_context4 = this.body.nodeIndices).call(_context4, function(acc, id2) {
        acc.set(id2, _this8.body.nodes[id2]);
        return acc;
      }, new _Map());
      if (this.options.hierarchical.shakeTowards === "roots") {
        this.hierarchical.levels = fillLevelsByDirectionRoots(nodes2);
      } else {
        this.hierarchical.levels = fillLevelsByDirectionLeaves(nodes2);
      }
      this.hierarchical.setMinLevelToZero(this.body.nodes);
    }
    /**
     * Update the bookkeeping of parent and child.
     *
     * @private
     */
  }, {
    key: "_generateMap",
    value: function _generateMap() {
      var _this9 = this;
      var fillInRelations = function fillInRelations2(parentNode, childNode) {
        if (_this9.hierarchical.levels[childNode.id] > _this9.hierarchical.levels[parentNode.id]) {
          _this9.hierarchical.addRelation(parentNode.id, childNode.id);
        }
      };
      this._crawlNetwork(fillInRelations);
      this.hierarchical.checkIfTree();
    }
    /**
     * Crawl over the entire network and use a callback on each node couple that is connected to each other.
     *
     * @param {Function} [callback=function(){}]          | will receive nodeA, nodeB and the connecting edge. A and B are distinct.
     * @param {Node.id} startingNodeId
     * @private
     */
  }, {
    key: "_crawlNetwork",
    value: function _crawlNetwork() {
      var _this10 = this;
      var callback = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : function() {
      };
      var startingNodeId = arguments.length > 1 ? arguments[1] : void 0;
      var progress = {};
      var crawler = function crawler2(node3, tree2) {
        if (progress[node3.id] === void 0) {
          _this10.hierarchical.setTreeIndex(node3, tree2);
          progress[node3.id] = true;
          var childNode;
          var edges = _this10._getActiveEdges(node3);
          for (var i3 = 0; i3 < edges.length; i3++) {
            var edge2 = edges[i3];
            if (edge2.connected === true) {
              if (edge2.toId == node3.id) {
                childNode = edge2.from;
              } else {
                childNode = edge2.to;
              }
              if (node3.id != childNode.id) {
                callback(node3, childNode, edge2);
                crawler2(childNode, tree2);
              }
            }
          }
        }
      };
      if (startingNodeId === void 0) {
        var treeIndex = 0;
        for (var i2 = 0; i2 < this.body.nodeIndices.length; i2++) {
          var nodeId = this.body.nodeIndices[i2];
          if (progress[nodeId] === void 0) {
            var node2 = this.body.nodes[nodeId];
            crawler(node2, treeIndex);
            treeIndex += 1;
          }
        }
      } else {
        var _node2 = this.body.nodes[startingNodeId];
        if (_node2 === void 0) {
          console.error("Node not found:", startingNodeId);
          return;
        }
        crawler(_node2);
      }
    }
    /**
     * Shift a branch a certain distance
     *
     * @param {Node.id} parentId
     * @param {number} diff
     * @private
     */
  }, {
    key: "_shiftBlock",
    value: function _shiftBlock(parentId, diff) {
      var _this11 = this;
      var progress = {};
      var shifter = function shifter2(parentId2) {
        if (progress[parentId2]) {
          return;
        }
        progress[parentId2] = true;
        _this11.direction.shift(parentId2, diff);
        var childRef = _this11.hierarchical.childrenReference[parentId2];
        if (childRef !== void 0) {
          for (var i2 = 0; i2 < childRef.length; i2++) {
            shifter2(childRef[i2]);
          }
        }
      };
      shifter(parentId);
    }
    /**
     * Find a common parent between branches.
     *
     * @param {Node.id} childA
     * @param {Node.id} childB
     * @returns {{foundParent, withChild}}
     * @private
     */
  }, {
    key: "_findCommonParent",
    value: function _findCommonParent(childA, childB) {
      var _this12 = this;
      var parents = {};
      var iterateParents = function iterateParents2(parents2, child2) {
        var parentRef = _this12.hierarchical.parentReference[child2];
        if (parentRef !== void 0) {
          for (var i2 = 0; i2 < parentRef.length; i2++) {
            var parent2 = parentRef[i2];
            parents2[parent2] = true;
            iterateParents2(parents2, parent2);
          }
        }
      };
      var findParent = function findParent2(parents2, child2) {
        var parentRef = _this12.hierarchical.parentReference[child2];
        if (parentRef !== void 0) {
          for (var i2 = 0; i2 < parentRef.length; i2++) {
            var parent2 = parentRef[i2];
            if (parents2[parent2] !== void 0) {
              return {
                foundParent: parent2,
                withChild: child2
              };
            }
            var branch = findParent2(parents2, parent2);
            if (branch.foundParent !== null) {
              return branch;
            }
          }
        }
        return {
          foundParent: null,
          withChild: child2
        };
      };
      iterateParents(parents, childA);
      return findParent(parents, childB);
    }
    /**
     * Set the strategy pattern for handling the coordinates given the current direction.
     *
     * The individual instances contain all the operations and data specific to a layout direction.
     *
     * @param {Node} node
     * @param {{x: number, y: number}} position
     * @param {number} level
     * @param {boolean} [doNotUpdate=false]
     * @private
     */
  }, {
    key: "setDirectionStrategy",
    value: function setDirectionStrategy() {
      var isVertical = this.options.hierarchical.direction === "UD" || this.options.hierarchical.direction === "DU";
      if (isVertical) {
        this.direction = new VerticalStrategy(this);
      } else {
        this.direction = new HorizontalStrategy(this);
      }
    }
    /**
     * Determine the center position of a branch from the passed list of child nodes
     *
     * This takes into account the positions of all the child nodes.
     *
     * @param {Array.<Node|vis.Node.id>} childNodes  Array of either child nodes or node id's
     * @returns {number}
     * @private
     */
  }, {
    key: "_getCenterPosition",
    value: function _getCenterPosition(childNodes) {
      var minPos = 1e9;
      var maxPos = -1e9;
      for (var i2 = 0; i2 < childNodes.length; i2++) {
        var childNode = void 0;
        if (childNodes[i2].id !== void 0) {
          childNode = childNodes[i2];
        } else {
          var childNodeId = childNodes[i2];
          childNode = this.body.nodes[childNodeId];
        }
        var position = this.direction.getPosition(childNode);
        minPos = Math.min(minPos, position);
        maxPos = Math.max(maxPos, position);
      }
      return 0.5 * (minPos + maxPos);
    }
  }]);
  return LayoutEngine2;
}();
function _createForOfIteratorHelper(o2, allowArrayLike) {
  var it2 = typeof _Symbol !== "undefined" && _getIteratorMethod(o2) || o2["@@iterator"];
  if (!it2) {
    if (_Array$isArray(o2) || (it2 = _unsupportedIterableToArray(o2)) || allowArrayLike) {
      if (it2) o2 = it2;
      var i2 = 0;
      var F = function F2() {
      };
      return { s: F, n: function n2() {
        if (i2 >= o2.length) return { done: true };
        return { done: false, value: o2[i2++] };
      }, e: function e2(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s2() {
    it2 = it2.call(o2);
  }, n: function n2() {
    var step = it2.next();
    normalCompletion = step.done;
    return step;
  }, e: function e2(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f2() {
    try {
      if (!normalCompletion && it2.return != null) it2.return();
    } finally {
      if (didErr) throw err;
    }
  } };
}
function _unsupportedIterableToArray(o2, minLen) {
  var _context32;
  if (!o2) return;
  if (typeof o2 === "string") return _arrayLikeToArray(o2, minLen);
  var n2 = _sliceInstanceProperty(_context32 = Object.prototype.toString.call(o2)).call(_context32, 8, -1);
  if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set") return _Array$from$1(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray(o2, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
  return arr2;
}
var ManipulationSystem = /* @__PURE__ */ function() {
  function ManipulationSystem2(body, canvas, selectionHandler, interactionHandler) {
    var _this = this, _context, _context2;
    _classCallCheck(this, ManipulationSystem2);
    this.body = body;
    this.canvas = canvas;
    this.selectionHandler = selectionHandler;
    this.interactionHandler = interactionHandler;
    this.editMode = false;
    this.manipulationDiv = void 0;
    this.editModeDiv = void 0;
    this.closeDiv = void 0;
    this._domEventListenerCleanupQueue = [];
    this.temporaryUIFunctions = {};
    this.temporaryEventFunctions = [];
    this.touchTime = 0;
    this.temporaryIds = {
      nodes: [],
      edges: []
    };
    this.guiEnabled = false;
    this.inMode = false;
    this.selectedControlNode = void 0;
    this.options = {};
    this.defaultOptions = {
      enabled: false,
      initiallyActive: false,
      addNode: true,
      addEdge: true,
      editNode: void 0,
      editEdge: true,
      deleteNode: true,
      deleteEdge: true,
      controlNodeStyle: {
        shape: "dot",
        size: 6,
        color: {
          background: "#ff0000",
          border: "#3c3c3c",
          highlight: {
            background: "#07f968",
            border: "#3c3c3c"
          }
        },
        borderWidth: 2,
        borderWidthSelected: 2
      }
    };
    _Object$assign(this.options, this.defaultOptions);
    this.body.emitter.on("destroy", function() {
      _this._clean();
    });
    this.body.emitter.on("_dataChanged", _bindInstanceProperty$1(_context = this._restore).call(_context, this));
    this.body.emitter.on("_resetData", _bindInstanceProperty$1(_context2 = this._restore).call(_context2, this));
  }
  _createClass(ManipulationSystem2, [{
    key: "_restore",
    value: function _restore() {
      if (this.inMode !== false) {
        if (this.options.initiallyActive === true) {
          this.enableEditMode();
        } else {
          this.disableEditMode();
        }
      }
    }
    /**
     * Set the Options
     *
     * @param {object} options
     * @param {object} allOptions
     * @param {object} globalOptions
     */
  }, {
    key: "setOptions",
    value: function setOptions(options, allOptions2, globalOptions) {
      if (allOptions2 !== void 0) {
        if (allOptions2.locale !== void 0) {
          this.options.locale = allOptions2.locale;
        } else {
          this.options.locale = globalOptions.locale;
        }
        if (allOptions2.locales !== void 0) {
          this.options.locales = allOptions2.locales;
        } else {
          this.options.locales = globalOptions.locales;
        }
      }
      if (options !== void 0) {
        if (typeof options === "boolean") {
          this.options.enabled = options;
        } else {
          this.options.enabled = true;
          deepExtend(this.options, options);
        }
        if (this.options.initiallyActive === true) {
          this.editMode = true;
        }
        this._setup();
      }
    }
    /**
     * Enable or disable edit-mode. Draws the DOM required and cleans up after itself.
     *
     * @private
     */
  }, {
    key: "toggleEditMode",
    value: function toggleEditMode() {
      if (this.editMode === true) {
        this.disableEditMode();
      } else {
        this.enableEditMode();
      }
    }
    /**
     * Enables Edit Mode
     */
  }, {
    key: "enableEditMode",
    value: function enableEditMode() {
      this.editMode = true;
      this._clean();
      if (this.guiEnabled === true) {
        this.manipulationDiv.style.display = "block";
        this.closeDiv.style.display = "block";
        this.editModeDiv.style.display = "none";
        this.showManipulatorToolbar();
      }
    }
    /**
     * Disables Edit Mode
     */
  }, {
    key: "disableEditMode",
    value: function disableEditMode() {
      this.editMode = false;
      this._clean();
      if (this.guiEnabled === true) {
        this.manipulationDiv.style.display = "none";
        this.closeDiv.style.display = "none";
        this.editModeDiv.style.display = "block";
        this._createEditButton();
      }
    }
    /**
     * Creates the main toolbar. Removes functions bound to the select event. Binds all the buttons of the toolbar.
     *
     * @private
     */
  }, {
    key: "showManipulatorToolbar",
    value: function showManipulatorToolbar() {
      this._clean();
      this.manipulationDOM = {};
      if (this.guiEnabled === true) {
        var _context3, _context4;
        this.editMode = true;
        this.manipulationDiv.style.display = "block";
        this.closeDiv.style.display = "block";
        var selectedNodeCount = this.selectionHandler.getSelectedNodeCount();
        var selectedEdgeCount = this.selectionHandler.getSelectedEdgeCount();
        var selectedTotalCount = selectedNodeCount + selectedEdgeCount;
        var locale = this.options.locales[this.options.locale];
        var needSeperator = false;
        if (this.options.addNode !== false) {
          this._createAddNodeButton(locale);
          needSeperator = true;
        }
        if (this.options.addEdge !== false) {
          if (needSeperator === true) {
            this._createSeperator(1);
          } else {
            needSeperator = true;
          }
          this._createAddEdgeButton(locale);
        }
        if (selectedNodeCount === 1 && typeof this.options.editNode === "function") {
          if (needSeperator === true) {
            this._createSeperator(2);
          } else {
            needSeperator = true;
          }
          this._createEditNodeButton(locale);
        } else if (selectedEdgeCount === 1 && selectedNodeCount === 0 && this.options.editEdge !== false) {
          if (needSeperator === true) {
            this._createSeperator(3);
          } else {
            needSeperator = true;
          }
          this._createEditEdgeButton(locale);
        }
        if (selectedTotalCount !== 0) {
          if (selectedNodeCount > 0 && this.options.deleteNode !== false) {
            if (needSeperator === true) {
              this._createSeperator(4);
            }
            this._createDeleteButton(locale);
          } else if (selectedNodeCount === 0 && this.options.deleteEdge !== false) {
            if (needSeperator === true) {
              this._createSeperator(4);
            }
            this._createDeleteButton(locale);
          }
        }
        this._bindElementEvents(this.closeDiv, _bindInstanceProperty$1(_context3 = this.toggleEditMode).call(_context3, this));
        this._temporaryBindEvent("select", _bindInstanceProperty$1(_context4 = this.showManipulatorToolbar).call(_context4, this));
      }
      this.body.emitter.emit("_redraw");
    }
    /**
     * Create the toolbar for adding Nodes
     */
  }, {
    key: "addNodeMode",
    value: function addNodeMode() {
      var _context6;
      if (this.editMode !== true) {
        this.enableEditMode();
      }
      this._clean();
      this.inMode = "addNode";
      if (this.guiEnabled === true) {
        var _context5;
        var locale = this.options.locales[this.options.locale];
        this.manipulationDOM = {};
        this._createBackButton(locale);
        this._createSeperator();
        this._createDescription(locale["addDescription"] || this.options.locales["en"]["addDescription"]);
        this._bindElementEvents(this.closeDiv, _bindInstanceProperty$1(_context5 = this.toggleEditMode).call(_context5, this));
      }
      this._temporaryBindEvent("click", _bindInstanceProperty$1(_context6 = this._performAddNode).call(_context6, this));
    }
    /**
     * call the bound function to handle the editing of the node. The node has to be selected.
     */
  }, {
    key: "editNode",
    value: function editNode() {
      var _this2 = this;
      if (this.editMode !== true) {
        this.enableEditMode();
      }
      this._clean();
      var node2 = this.selectionHandler.getSelectedNodes()[0];
      if (node2 !== void 0) {
        this.inMode = "editNode";
        if (typeof this.options.editNode === "function") {
          if (node2.isCluster !== true) {
            var data2 = deepExtend({}, node2.options, false);
            data2.x = node2.x;
            data2.y = node2.y;
            if (this.options.editNode.length === 2) {
              this.options.editNode(data2, function(finalizedData) {
                if (finalizedData !== null && finalizedData !== void 0 && _this2.inMode === "editNode") {
                  _this2.body.data.nodes.getDataSet().update(finalizedData);
                }
                _this2.showManipulatorToolbar();
              });
            } else {
              throw new Error("The function for edit does not support two arguments (data, callback)");
            }
          } else {
            alert(this.options.locales[this.options.locale]["editClusterError"] || this.options.locales["en"]["editClusterError"]);
          }
        } else {
          throw new Error("No function has been configured to handle the editing of nodes.");
        }
      } else {
        this.showManipulatorToolbar();
      }
    }
    /**
     * create the toolbar to connect nodes
     */
  }, {
    key: "addEdgeMode",
    value: function addEdgeMode() {
      var _context8, _context9, _context10, _context11, _context12;
      if (this.editMode !== true) {
        this.enableEditMode();
      }
      this._clean();
      this.inMode = "addEdge";
      if (this.guiEnabled === true) {
        var _context7;
        var locale = this.options.locales[this.options.locale];
        this.manipulationDOM = {};
        this._createBackButton(locale);
        this._createSeperator();
        this._createDescription(locale["edgeDescription"] || this.options.locales["en"]["edgeDescription"]);
        this._bindElementEvents(this.closeDiv, _bindInstanceProperty$1(_context7 = this.toggleEditMode).call(_context7, this));
      }
      this._temporaryBindUI("onTouch", _bindInstanceProperty$1(_context8 = this._handleConnect).call(_context8, this));
      this._temporaryBindUI("onDragEnd", _bindInstanceProperty$1(_context9 = this._finishConnect).call(_context9, this));
      this._temporaryBindUI("onDrag", _bindInstanceProperty$1(_context10 = this._dragControlNode).call(_context10, this));
      this._temporaryBindUI("onRelease", _bindInstanceProperty$1(_context11 = this._finishConnect).call(_context11, this));
      this._temporaryBindUI("onDragStart", _bindInstanceProperty$1(_context12 = this._dragStartEdge).call(_context12, this));
      this._temporaryBindUI("onHold", function() {
      });
    }
    /**
     * create the toolbar to edit edges
     */
  }, {
    key: "editEdgeMode",
    value: function editEdgeMode() {
      if (this.editMode !== true) {
        this.enableEditMode();
      }
      this._clean();
      this.inMode = "editEdge";
      if (_typeof(this.options.editEdge) === "object" && typeof this.options.editEdge.editWithoutDrag === "function") {
        this.edgeBeingEditedId = this.selectionHandler.getSelectedEdgeIds()[0];
        if (this.edgeBeingEditedId !== void 0) {
          var edge2 = this.body.edges[this.edgeBeingEditedId];
          this._performEditEdge(edge2.from.id, edge2.to.id);
          return;
        }
      }
      if (this.guiEnabled === true) {
        var _context13;
        var locale = this.options.locales[this.options.locale];
        this.manipulationDOM = {};
        this._createBackButton(locale);
        this._createSeperator();
        this._createDescription(locale["editEdgeDescription"] || this.options.locales["en"]["editEdgeDescription"]);
        this._bindElementEvents(this.closeDiv, _bindInstanceProperty$1(_context13 = this.toggleEditMode).call(_context13, this));
      }
      this.edgeBeingEditedId = this.selectionHandler.getSelectedEdgeIds()[0];
      if (this.edgeBeingEditedId !== void 0) {
        var _context14, _context15, _context16, _context17;
        var _edge = this.body.edges[this.edgeBeingEditedId];
        var controlNodeFrom = this._getNewTargetNode(_edge.from.x, _edge.from.y);
        var controlNodeTo = this._getNewTargetNode(_edge.to.x, _edge.to.y);
        this.temporaryIds.nodes.push(controlNodeFrom.id);
        this.temporaryIds.nodes.push(controlNodeTo.id);
        this.body.nodes[controlNodeFrom.id] = controlNodeFrom;
        this.body.nodeIndices.push(controlNodeFrom.id);
        this.body.nodes[controlNodeTo.id] = controlNodeTo;
        this.body.nodeIndices.push(controlNodeTo.id);
        this._temporaryBindUI("onTouch", _bindInstanceProperty$1(_context14 = this._controlNodeTouch).call(_context14, this));
        this._temporaryBindUI("onTap", function() {
        });
        this._temporaryBindUI("onHold", function() {
        });
        this._temporaryBindUI("onDragStart", _bindInstanceProperty$1(_context15 = this._controlNodeDragStart).call(_context15, this));
        this._temporaryBindUI("onDrag", _bindInstanceProperty$1(_context16 = this._controlNodeDrag).call(_context16, this));
        this._temporaryBindUI("onDragEnd", _bindInstanceProperty$1(_context17 = this._controlNodeDragEnd).call(_context17, this));
        this._temporaryBindUI("onMouseMove", function() {
        });
        this._temporaryBindEvent("beforeDrawing", function(ctx) {
          var positions = _edge.edgeType.findBorderPositions(ctx);
          if (controlNodeFrom.selected === false) {
            controlNodeFrom.x = positions.from.x;
            controlNodeFrom.y = positions.from.y;
          }
          if (controlNodeTo.selected === false) {
            controlNodeTo.x = positions.to.x;
            controlNodeTo.y = positions.to.y;
          }
        });
        this.body.emitter.emit("_redraw");
      } else {
        this.showManipulatorToolbar();
      }
    }
    /**
     * delete everything in the selection
     */
  }, {
    key: "deleteSelected",
    value: function deleteSelected() {
      var _this3 = this;
      if (this.editMode !== true) {
        this.enableEditMode();
      }
      this._clean();
      this.inMode = "delete";
      var selectedNodes = this.selectionHandler.getSelectedNodeIds();
      var selectedEdges = this.selectionHandler.getSelectedEdgeIds();
      var deleteFunction = void 0;
      if (selectedNodes.length > 0) {
        for (var i2 = 0; i2 < selectedNodes.length; i2++) {
          if (this.body.nodes[selectedNodes[i2]].isCluster === true) {
            alert(this.options.locales[this.options.locale]["deleteClusterError"] || this.options.locales["en"]["deleteClusterError"]);
            return;
          }
        }
        if (typeof this.options.deleteNode === "function") {
          deleteFunction = this.options.deleteNode;
        }
      } else if (selectedEdges.length > 0) {
        if (typeof this.options.deleteEdge === "function") {
          deleteFunction = this.options.deleteEdge;
        }
      }
      if (typeof deleteFunction === "function") {
        var data2 = {
          nodes: selectedNodes,
          edges: selectedEdges
        };
        if (deleteFunction.length === 2) {
          deleteFunction(data2, function(finalizedData) {
            if (finalizedData !== null && finalizedData !== void 0 && _this3.inMode === "delete") {
              _this3.body.data.edges.getDataSet().remove(finalizedData.edges);
              _this3.body.data.nodes.getDataSet().remove(finalizedData.nodes);
              _this3.body.emitter.emit("startSimulation");
              _this3.showManipulatorToolbar();
            } else {
              _this3.body.emitter.emit("startSimulation");
              _this3.showManipulatorToolbar();
            }
          });
        } else {
          throw new Error("The function for delete does not support two arguments (data, callback)");
        }
      } else {
        this.body.data.edges.getDataSet().remove(selectedEdges);
        this.body.data.nodes.getDataSet().remove(selectedNodes);
        this.body.emitter.emit("startSimulation");
        this.showManipulatorToolbar();
      }
    }
    //********************************************** PRIVATE ***************************************//
    /**
     * draw or remove the DOM
     *
     * @private
     */
  }, {
    key: "_setup",
    value: function _setup() {
      if (this.options.enabled === true) {
        this.guiEnabled = true;
        this._createWrappers();
        if (this.editMode === false) {
          this._createEditButton();
        } else {
          this.showManipulatorToolbar();
        }
      } else {
        this._removeManipulationDOM();
        this.guiEnabled = false;
      }
    }
    /**
     * create the div overlays that contain the DOM
     *
     * @private
     */
  }, {
    key: "_createWrappers",
    value: function _createWrappers() {
      if (this.manipulationDiv === void 0) {
        this.manipulationDiv = document.createElement("div");
        this.manipulationDiv.className = "vis-manipulation";
        if (this.editMode === true) {
          this.manipulationDiv.style.display = "block";
        } else {
          this.manipulationDiv.style.display = "none";
        }
        this.canvas.frame.appendChild(this.manipulationDiv);
      }
      if (this.editModeDiv === void 0) {
        this.editModeDiv = document.createElement("div");
        this.editModeDiv.className = "vis-edit-mode";
        if (this.editMode === true) {
          this.editModeDiv.style.display = "none";
        } else {
          this.editModeDiv.style.display = "block";
        }
        this.canvas.frame.appendChild(this.editModeDiv);
      }
      if (this.closeDiv === void 0) {
        var _this$options$locales, _this$options$locales2;
        this.closeDiv = document.createElement("button");
        this.closeDiv.className = "vis-close";
        this.closeDiv.setAttribute("aria-label", (_this$options$locales = (_this$options$locales2 = this.options.locales[this.options.locale]) === null || _this$options$locales2 === void 0 ? void 0 : _this$options$locales2["close"]) !== null && _this$options$locales !== void 0 ? _this$options$locales : this.options.locales["en"]["close"]);
        this.closeDiv.style.display = this.manipulationDiv.style.display;
        this.canvas.frame.appendChild(this.closeDiv);
      }
    }
    /**
     * generate a new target node. Used for creating new edges and editing edges
     *
     * @param {number} x
     * @param {number} y
     * @returns {Node}
     * @private
     */
  }, {
    key: "_getNewTargetNode",
    value: function _getNewTargetNode(x2, y2) {
      var controlNodeStyle = deepExtend({}, this.options.controlNodeStyle);
      controlNodeStyle.id = "targetNode" + v4();
      controlNodeStyle.hidden = false;
      controlNodeStyle.physics = false;
      controlNodeStyle.x = x2;
      controlNodeStyle.y = y2;
      var node2 = this.body.functions.createNode(controlNodeStyle);
      node2.shape.boundingBox = {
        left: x2,
        right: x2,
        top: y2,
        bottom: y2
      };
      return node2;
    }
    /**
     * Create the edit button
     */
  }, {
    key: "_createEditButton",
    value: function _createEditButton() {
      var _context18;
      this._clean();
      this.manipulationDOM = {};
      recursiveDOMDelete(this.editModeDiv);
      var locale = this.options.locales[this.options.locale];
      var button = this._createButton("editMode", "vis-edit vis-edit-mode", locale["edit"] || this.options.locales["en"]["edit"]);
      this.editModeDiv.appendChild(button);
      this._bindElementEvents(button, _bindInstanceProperty$1(_context18 = this.toggleEditMode).call(_context18, this));
    }
    /**
     * this function cleans up after everything this module does. Temporary elements, functions and events are removed, physics restored, hammers removed.
     *
     * @private
     */
  }, {
    key: "_clean",
    value: function _clean() {
      this.inMode = false;
      if (this.guiEnabled === true) {
        recursiveDOMDelete(this.editModeDiv);
        recursiveDOMDelete(this.manipulationDiv);
        this._cleanupDOMEventListeners();
      }
      this._cleanupTemporaryNodesAndEdges();
      this._unbindTemporaryUIs();
      this._unbindTemporaryEvents();
      this.body.emitter.emit("restorePhysics");
    }
    /**
     * Each dom element has it's own hammer. They are stored in this.manipulationHammers. This cleans them up.
     *
     * @private
     */
  }, {
    key: "_cleanupDOMEventListeners",
    value: function _cleanupDOMEventListeners() {
      var _context19;
      var _iterator = _createForOfIteratorHelper(_spliceInstanceProperty(_context19 = this._domEventListenerCleanupQueue).call(_context19, 0)), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var callback = _step.value;
          callback();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    /**
     * Remove all DOM elements created by this module.
     *
     * @private
     */
  }, {
    key: "_removeManipulationDOM",
    value: function _removeManipulationDOM() {
      this._clean();
      recursiveDOMDelete(this.manipulationDiv);
      recursiveDOMDelete(this.editModeDiv);
      recursiveDOMDelete(this.closeDiv);
      if (this.manipulationDiv) {
        this.canvas.frame.removeChild(this.manipulationDiv);
      }
      if (this.editModeDiv) {
        this.canvas.frame.removeChild(this.editModeDiv);
      }
      if (this.closeDiv) {
        this.canvas.frame.removeChild(this.closeDiv);
      }
      this.manipulationDiv = void 0;
      this.editModeDiv = void 0;
      this.closeDiv = void 0;
    }
    /**
     * create a seperator line. the index is to differentiate in the manipulation dom
     *
     * @param {number} [index=1]
     * @private
     */
  }, {
    key: "_createSeperator",
    value: function _createSeperator() {
      var index2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;
      this.manipulationDOM["seperatorLineDiv" + index2] = document.createElement("div");
      this.manipulationDOM["seperatorLineDiv" + index2].className = "vis-separator-line";
      this.manipulationDiv.appendChild(this.manipulationDOM["seperatorLineDiv" + index2]);
    }
    // ----------------------    DOM functions for buttons    --------------------------//
    /**
     *
     * @param {Locale} locale
     * @private
     */
  }, {
    key: "_createAddNodeButton",
    value: function _createAddNodeButton(locale) {
      var _context20;
      var button = this._createButton("addNode", "vis-add", locale["addNode"] || this.options.locales["en"]["addNode"]);
      this.manipulationDiv.appendChild(button);
      this._bindElementEvents(button, _bindInstanceProperty$1(_context20 = this.addNodeMode).call(_context20, this));
    }
    /**
     *
     * @param {Locale} locale
     * @private
     */
  }, {
    key: "_createAddEdgeButton",
    value: function _createAddEdgeButton(locale) {
      var _context21;
      var button = this._createButton("addEdge", "vis-connect", locale["addEdge"] || this.options.locales["en"]["addEdge"]);
      this.manipulationDiv.appendChild(button);
      this._bindElementEvents(button, _bindInstanceProperty$1(_context21 = this.addEdgeMode).call(_context21, this));
    }
    /**
     *
     * @param {Locale} locale
     * @private
     */
  }, {
    key: "_createEditNodeButton",
    value: function _createEditNodeButton(locale) {
      var _context22;
      var button = this._createButton("editNode", "vis-edit", locale["editNode"] || this.options.locales["en"]["editNode"]);
      this.manipulationDiv.appendChild(button);
      this._bindElementEvents(button, _bindInstanceProperty$1(_context22 = this.editNode).call(_context22, this));
    }
    /**
     *
     * @param {Locale} locale
     * @private
     */
  }, {
    key: "_createEditEdgeButton",
    value: function _createEditEdgeButton(locale) {
      var _context23;
      var button = this._createButton("editEdge", "vis-edit", locale["editEdge"] || this.options.locales["en"]["editEdge"]);
      this.manipulationDiv.appendChild(button);
      this._bindElementEvents(button, _bindInstanceProperty$1(_context23 = this.editEdgeMode).call(_context23, this));
    }
    /**
     *
     * @param {Locale} locale
     * @private
     */
  }, {
    key: "_createDeleteButton",
    value: function _createDeleteButton(locale) {
      var _context24;
      var deleteBtnClass;
      if (this.options.rtl) {
        deleteBtnClass = "vis-delete-rtl";
      } else {
        deleteBtnClass = "vis-delete";
      }
      var button = this._createButton("delete", deleteBtnClass, locale["del"] || this.options.locales["en"]["del"]);
      this.manipulationDiv.appendChild(button);
      this._bindElementEvents(button, _bindInstanceProperty$1(_context24 = this.deleteSelected).call(_context24, this));
    }
    /**
     *
     * @param {Locale} locale
     * @private
     */
  }, {
    key: "_createBackButton",
    value: function _createBackButton(locale) {
      var _context25;
      var button = this._createButton("back", "vis-back", locale["back"] || this.options.locales["en"]["back"]);
      this.manipulationDiv.appendChild(button);
      this._bindElementEvents(button, _bindInstanceProperty$1(_context25 = this.showManipulatorToolbar).call(_context25, this));
    }
    /**
     *
     * @param {number|string} id
     * @param {string} className
     * @param {label} label
     * @param {string} labelClassName
     * @returns {HTMLElement}
     * @private
     */
  }, {
    key: "_createButton",
    value: function _createButton(id2, className, label) {
      var labelClassName = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "vis-label";
      this.manipulationDOM[id2 + "Div"] = document.createElement("button");
      this.manipulationDOM[id2 + "Div"].className = "vis-button " + className;
      this.manipulationDOM[id2 + "Label"] = document.createElement("div");
      this.manipulationDOM[id2 + "Label"].className = labelClassName;
      this.manipulationDOM[id2 + "Label"].innerText = label;
      this.manipulationDOM[id2 + "Div"].appendChild(this.manipulationDOM[id2 + "Label"]);
      return this.manipulationDOM[id2 + "Div"];
    }
    /**
     *
     * @param {Label} label
     * @private
     */
  }, {
    key: "_createDescription",
    value: function _createDescription(label) {
      this.manipulationDOM["descriptionLabel"] = document.createElement("div");
      this.manipulationDOM["descriptionLabel"].className = "vis-none";
      this.manipulationDOM["descriptionLabel"].innerText = label;
      this.manipulationDiv.appendChild(this.manipulationDOM["descriptionLabel"]);
    }
    // -------------------------- End of DOM functions for buttons ------------------------------//
    /**
     * this binds an event until cleanup by the clean functions.
     *
     * @param {Event}  event   The event
     * @param {Function} newFunction
     * @private
     */
  }, {
    key: "_temporaryBindEvent",
    value: function _temporaryBindEvent(event, newFunction) {
      this.temporaryEventFunctions.push({
        event,
        boundFunction: newFunction
      });
      this.body.emitter.on(event, newFunction);
    }
    /**
     * this overrides an UI function until cleanup by the clean function
     *
     * @param {string} UIfunctionName
     * @param {Function} newFunction
     * @private
     */
  }, {
    key: "_temporaryBindUI",
    value: function _temporaryBindUI(UIfunctionName, newFunction) {
      if (this.body.eventListeners[UIfunctionName] !== void 0) {
        this.temporaryUIFunctions[UIfunctionName] = this.body.eventListeners[UIfunctionName];
        this.body.eventListeners[UIfunctionName] = newFunction;
      } else {
        throw new Error("This UI function does not exist. Typo? You tried: " + UIfunctionName + " possible are: " + _JSON$stringify(_Object$keys(this.body.eventListeners)));
      }
    }
    /**
     * Restore the overridden UI functions to their original state.
     *
     * @private
     */
  }, {
    key: "_unbindTemporaryUIs",
    value: function _unbindTemporaryUIs() {
      for (var functionName2 in this.temporaryUIFunctions) {
        if (Object.prototype.hasOwnProperty.call(this.temporaryUIFunctions, functionName2)) {
          this.body.eventListeners[functionName2] = this.temporaryUIFunctions[functionName2];
          delete this.temporaryUIFunctions[functionName2];
        }
      }
      this.temporaryUIFunctions = {};
    }
    /**
     * Unbind the events created by _temporaryBindEvent
     *
     * @private
     */
  }, {
    key: "_unbindTemporaryEvents",
    value: function _unbindTemporaryEvents() {
      for (var i2 = 0; i2 < this.temporaryEventFunctions.length; i2++) {
        var eventName = this.temporaryEventFunctions[i2].event;
        var boundFunction = this.temporaryEventFunctions[i2].boundFunction;
        this.body.emitter.off(eventName, boundFunction);
      }
      this.temporaryEventFunctions = [];
    }
    /**
     * Bind an hammer instance to a DOM element.
     *
     * @param {Element} domElement
     * @param {Function} boundFunction
     */
  }, {
    key: "_bindElementEvents",
    value: function _bindElementEvents(domElement, boundFunction) {
      var hammer2 = new Hammer(domElement, {});
      onTouch(hammer2, boundFunction);
      this._domEventListenerCleanupQueue.push(function() {
        hammer2.destroy();
      });
      var keyupListener = function keyupListener2(_ref) {
        var keyCode = _ref.keyCode, key2 = _ref.key;
        if (key2 === "Enter" || key2 === " " || keyCode === 13 || keyCode === 32) {
          boundFunction();
        }
      };
      domElement.addEventListener("keyup", keyupListener, false);
      this._domEventListenerCleanupQueue.push(function() {
        domElement.removeEventListener("keyup", keyupListener, false);
      });
    }
    /**
     * Neatly clean up temporary edges and nodes
     *
     * @private
     */
  }, {
    key: "_cleanupTemporaryNodesAndEdges",
    value: function _cleanupTemporaryNodesAndEdges() {
      for (var i2 = 0; i2 < this.temporaryIds.edges.length; i2++) {
        var _context26;
        this.body.edges[this.temporaryIds.edges[i2]].disconnect();
        delete this.body.edges[this.temporaryIds.edges[i2]];
        var indexTempEdge = _indexOfInstanceProperty(_context26 = this.body.edgeIndices).call(_context26, this.temporaryIds.edges[i2]);
        if (indexTempEdge !== -1) {
          var _context27;
          _spliceInstanceProperty(_context27 = this.body.edgeIndices).call(_context27, indexTempEdge, 1);
        }
      }
      for (var _i = 0; _i < this.temporaryIds.nodes.length; _i++) {
        var _context28;
        delete this.body.nodes[this.temporaryIds.nodes[_i]];
        var indexTempNode = _indexOfInstanceProperty(_context28 = this.body.nodeIndices).call(_context28, this.temporaryIds.nodes[_i]);
        if (indexTempNode !== -1) {
          var _context29;
          _spliceInstanceProperty(_context29 = this.body.nodeIndices).call(_context29, indexTempNode, 1);
        }
      }
      this.temporaryIds = {
        nodes: [],
        edges: []
      };
    }
    // ------------------------------------------ EDIT EDGE FUNCTIONS -----------------------------------------//
    /**
     * the touch is used to get the position of the initial click
     *
     * @param {Event}  event   The event
     * @private
     */
  }, {
    key: "_controlNodeTouch",
    value: function _controlNodeTouch(event) {
      this.selectionHandler.unselectAll();
      this.lastTouch = this.body.functions.getPointer(event.center);
      this.lastTouch.translation = _Object$assign({}, this.body.view.translation);
    }
    /**
     * the drag start is used to mark one of the control nodes as selected.
     *
     * @private
     */
  }, {
    key: "_controlNodeDragStart",
    value: function _controlNodeDragStart() {
      var pointer = this.lastTouch;
      var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);
      var from4 = this.body.nodes[this.temporaryIds.nodes[0]];
      var to = this.body.nodes[this.temporaryIds.nodes[1]];
      var edge2 = this.body.edges[this.edgeBeingEditedId];
      this.selectedControlNode = void 0;
      var fromSelect = from4.isOverlappingWith(pointerObj);
      var toSelect = to.isOverlappingWith(pointerObj);
      if (fromSelect === true) {
        this.selectedControlNode = from4;
        edge2.edgeType.from = from4;
      } else if (toSelect === true) {
        this.selectedControlNode = to;
        edge2.edgeType.to = to;
      }
      if (this.selectedControlNode !== void 0) {
        this.selectionHandler.selectObject(this.selectedControlNode);
      }
      this.body.emitter.emit("_redraw");
    }
    /**
     * dragging the control nodes or the canvas
     *
     * @param {Event}  event   The event
     * @private
     */
  }, {
    key: "_controlNodeDrag",
    value: function _controlNodeDrag(event) {
      this.body.emitter.emit("disablePhysics");
      var pointer = this.body.functions.getPointer(event.center);
      var pos = this.canvas.DOMtoCanvas(pointer);
      if (this.selectedControlNode !== void 0) {
        this.selectedControlNode.x = pos.x;
        this.selectedControlNode.y = pos.y;
      } else {
        this.interactionHandler.onDrag(event);
      }
      this.body.emitter.emit("_redraw");
    }
    /**
     * connecting or restoring the control nodes.
     *
     * @param {Event}  event   The event
     * @private
     */
  }, {
    key: "_controlNodeDragEnd",
    value: function _controlNodeDragEnd(event) {
      var pointer = this.body.functions.getPointer(event.center);
      var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);
      var edge2 = this.body.edges[this.edgeBeingEditedId];
      if (this.selectedControlNode === void 0) {
        return;
      }
      this.selectionHandler.unselectAll();
      var overlappingNodeIds = this.selectionHandler._getAllNodesOverlappingWith(pointerObj);
      var node2 = void 0;
      for (var i2 = overlappingNodeIds.length - 1; i2 >= 0; i2--) {
        if (overlappingNodeIds[i2] !== this.selectedControlNode.id) {
          node2 = this.body.nodes[overlappingNodeIds[i2]];
          break;
        }
      }
      if (node2 !== void 0 && this.selectedControlNode !== void 0) {
        if (node2.isCluster === true) {
          alert(this.options.locales[this.options.locale]["createEdgeError"] || this.options.locales["en"]["createEdgeError"]);
        } else {
          var from4 = this.body.nodes[this.temporaryIds.nodes[0]];
          if (this.selectedControlNode.id === from4.id) {
            this._performEditEdge(node2.id, edge2.to.id);
          } else {
            this._performEditEdge(edge2.from.id, node2.id);
          }
        }
      } else {
        edge2.updateEdgeType();
        this.body.emitter.emit("restorePhysics");
      }
      this.body.emitter.emit("_redraw");
    }
    // ------------------------------------ END OF EDIT EDGE FUNCTIONS -----------------------------------------//
    // ------------------------------------------- ADD EDGE FUNCTIONS -----------------------------------------//
    /**
     * the function bound to the selection event. It checks if you want to connect a cluster and changes the description
     * to walk the user through the process.
     *
     * @param {Event} event
     * @private
     */
  }, {
    key: "_handleConnect",
    value: function _handleConnect(event) {
      if ((/* @__PURE__ */ new Date()).valueOf() - this.touchTime > 100) {
        this.lastTouch = this.body.functions.getPointer(event.center);
        this.lastTouch.translation = _Object$assign({}, this.body.view.translation);
        this.interactionHandler.drag.pointer = this.lastTouch;
        this.interactionHandler.drag.translation = this.lastTouch.translation;
        var pointer = this.lastTouch;
        var node2 = this.selectionHandler.getNodeAt(pointer);
        if (node2 !== void 0) {
          if (node2.isCluster === true) {
            alert(this.options.locales[this.options.locale]["createEdgeError"] || this.options.locales["en"]["createEdgeError"]);
          } else {
            var targetNode = this._getNewTargetNode(node2.x, node2.y);
            this.body.nodes[targetNode.id] = targetNode;
            this.body.nodeIndices.push(targetNode.id);
            var connectionEdge = this.body.functions.createEdge({
              id: "connectionEdge" + v4(),
              from: node2.id,
              to: targetNode.id,
              physics: false,
              smooth: {
                enabled: true,
                type: "continuous",
                roundness: 0.5
              }
            });
            this.body.edges[connectionEdge.id] = connectionEdge;
            this.body.edgeIndices.push(connectionEdge.id);
            this.temporaryIds.nodes.push(targetNode.id);
            this.temporaryIds.edges.push(connectionEdge.id);
          }
        }
        this.touchTime = (/* @__PURE__ */ new Date()).valueOf();
      }
    }
    /**
     *
     * @param {Event} event
     * @private
     */
  }, {
    key: "_dragControlNode",
    value: function _dragControlNode(event) {
      var pointer = this.body.functions.getPointer(event.center);
      var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);
      var connectFromId = void 0;
      if (this.temporaryIds.edges[0] !== void 0) {
        connectFromId = this.body.edges[this.temporaryIds.edges[0]].fromId;
      }
      var overlappingNodeIds = this.selectionHandler._getAllNodesOverlappingWith(pointerObj);
      var node2 = void 0;
      for (var i2 = overlappingNodeIds.length - 1; i2 >= 0; i2--) {
        var _context30;
        if (_indexOfInstanceProperty(_context30 = this.temporaryIds.nodes).call(_context30, overlappingNodeIds[i2]) === -1) {
          node2 = this.body.nodes[overlappingNodeIds[i2]];
          break;
        }
      }
      event.controlEdge = {
        from: connectFromId,
        to: node2 ? node2.id : void 0
      };
      this.selectionHandler.generateClickEvent("controlNodeDragging", event, pointer);
      if (this.temporaryIds.nodes[0] !== void 0) {
        var targetNode = this.body.nodes[this.temporaryIds.nodes[0]];
        targetNode.x = this.canvas._XconvertDOMtoCanvas(pointer.x);
        targetNode.y = this.canvas._YconvertDOMtoCanvas(pointer.y);
        this.body.emitter.emit("_redraw");
      } else {
        this.interactionHandler.onDrag(event);
      }
    }
    /**
     * Connect the new edge to the target if one exists, otherwise remove temp line
     *
     * @param {Event}  event   The event
     * @private
     */
  }, {
    key: "_finishConnect",
    value: function _finishConnect(event) {
      var pointer = this.body.functions.getPointer(event.center);
      var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);
      var connectFromId = void 0;
      if (this.temporaryIds.edges[0] !== void 0) {
        connectFromId = this.body.edges[this.temporaryIds.edges[0]].fromId;
      }
      var overlappingNodeIds = this.selectionHandler._getAllNodesOverlappingWith(pointerObj);
      var node2 = void 0;
      for (var i2 = overlappingNodeIds.length - 1; i2 >= 0; i2--) {
        var _context31;
        if (_indexOfInstanceProperty(_context31 = this.temporaryIds.nodes).call(_context31, overlappingNodeIds[i2]) === -1) {
          node2 = this.body.nodes[overlappingNodeIds[i2]];
          break;
        }
      }
      this._cleanupTemporaryNodesAndEdges();
      if (node2 !== void 0) {
        if (node2.isCluster === true) {
          alert(this.options.locales[this.options.locale]["createEdgeError"] || this.options.locales["en"]["createEdgeError"]);
        } else {
          if (this.body.nodes[connectFromId] !== void 0 && this.body.nodes[node2.id] !== void 0) {
            this._performAddEdge(connectFromId, node2.id);
          }
        }
      }
      event.controlEdge = {
        from: connectFromId,
        to: node2 ? node2.id : void 0
      };
      this.selectionHandler.generateClickEvent("controlNodeDragEnd", event, pointer);
      this.body.emitter.emit("_redraw");
    }
    /**
     *
     * @param {Event} event
     * @private
     */
  }, {
    key: "_dragStartEdge",
    value: function _dragStartEdge(event) {
      var pointer = this.lastTouch;
      this.selectionHandler.generateClickEvent("dragStart", event, pointer, void 0, true);
    }
    // --------------------------------------- END OF ADD EDGE FUNCTIONS -------------------------------------//
    // ------------------------------ Performing all the actual data manipulation ------------------------//
    /**
     * Adds a node on the specified location
     *
     * @param {object} clickData
     * @private
     */
  }, {
    key: "_performAddNode",
    value: function _performAddNode(clickData) {
      var _this4 = this;
      var defaultData = {
        id: v4(),
        x: clickData.pointer.canvas.x,
        y: clickData.pointer.canvas.y,
        label: "new"
      };
      if (typeof this.options.addNode === "function") {
        if (this.options.addNode.length === 2) {
          this.options.addNode(defaultData, function(finalizedData) {
            if (finalizedData !== null && finalizedData !== void 0 && _this4.inMode === "addNode") {
              _this4.body.data.nodes.getDataSet().add(finalizedData);
            }
            _this4.showManipulatorToolbar();
          });
        } else {
          this.showManipulatorToolbar();
          throw new Error("The function for add does not support two arguments (data,callback)");
        }
      } else {
        this.body.data.nodes.getDataSet().add(defaultData);
        this.showManipulatorToolbar();
      }
    }
    /**
     * connect two nodes with a new edge.
     *
     * @param {Node.id} sourceNodeId
     * @param {Node.id} targetNodeId
     * @private
     */
  }, {
    key: "_performAddEdge",
    value: function _performAddEdge(sourceNodeId, targetNodeId) {
      var _this5 = this;
      var defaultData = {
        from: sourceNodeId,
        to: targetNodeId
      };
      if (typeof this.options.addEdge === "function") {
        if (this.options.addEdge.length === 2) {
          this.options.addEdge(defaultData, function(finalizedData) {
            if (finalizedData !== null && finalizedData !== void 0 && _this5.inMode === "addEdge") {
              _this5.body.data.edges.getDataSet().add(finalizedData);
              _this5.selectionHandler.unselectAll();
              _this5.showManipulatorToolbar();
            }
          });
        } else {
          throw new Error("The function for connect does not support two arguments (data,callback)");
        }
      } else {
        this.body.data.edges.getDataSet().add(defaultData);
        this.selectionHandler.unselectAll();
        this.showManipulatorToolbar();
      }
    }
    /**
     * connect two nodes with a new edge.
     *
     * @param {Node.id} sourceNodeId
     * @param {Node.id} targetNodeId
     * @private
     */
  }, {
    key: "_performEditEdge",
    value: function _performEditEdge(sourceNodeId, targetNodeId) {
      var _this6 = this;
      var defaultData = {
        id: this.edgeBeingEditedId,
        from: sourceNodeId,
        to: targetNodeId,
        label: this.body.data.edges.get(this.edgeBeingEditedId).label
      };
      var eeFunct = this.options.editEdge;
      if (_typeof(eeFunct) === "object") {
        eeFunct = eeFunct.editWithoutDrag;
      }
      if (typeof eeFunct === "function") {
        if (eeFunct.length === 2) {
          eeFunct(defaultData, function(finalizedData) {
            if (finalizedData === null || finalizedData === void 0 || _this6.inMode !== "editEdge") {
              _this6.body.edges[defaultData.id].updateEdgeType();
              _this6.body.emitter.emit("_redraw");
              _this6.showManipulatorToolbar();
            } else {
              _this6.body.data.edges.getDataSet().update(finalizedData);
              _this6.selectionHandler.unselectAll();
              _this6.showManipulatorToolbar();
            }
          });
        } else {
          throw new Error("The function for edit does not support two arguments (data, callback)");
        }
      } else {
        this.body.data.edges.getDataSet().update(defaultData);
        this.selectionHandler.unselectAll();
        this.showManipulatorToolbar();
      }
    }
  }]);
  return ManipulationSystem2;
}();
var string = "string";
var bool = "boolean";
var number = "number";
var array = "array";
var object = "object";
var dom = "dom";
var any = "any";
var endPoints = ["arrow", "bar", "box", "circle", "crow", "curve", "diamond", "image", "inv_curve", "inv_triangle", "triangle", "vee"];
var nodeOptions = {
  borderWidth: {
    number
  },
  borderWidthSelected: {
    number,
    undefined: "undefined"
  },
  brokenImage: {
    string,
    undefined: "undefined"
  },
  chosen: {
    label: {
      boolean: bool,
      function: "function"
    },
    node: {
      boolean: bool,
      function: "function"
    },
    __type__: {
      object,
      boolean: bool
    }
  },
  color: {
    border: {
      string
    },
    background: {
      string
    },
    highlight: {
      border: {
        string
      },
      background: {
        string
      },
      __type__: {
        object,
        string
      }
    },
    hover: {
      border: {
        string
      },
      background: {
        string
      },
      __type__: {
        object,
        string
      }
    },
    __type__: {
      object,
      string
    }
  },
  opacity: {
    number,
    undefined: "undefined"
  },
  fixed: {
    x: {
      boolean: bool
    },
    y: {
      boolean: bool
    },
    __type__: {
      object,
      boolean: bool
    }
  },
  font: {
    align: {
      string
    },
    color: {
      string
    },
    size: {
      number
    },
    face: {
      string
    },
    background: {
      string
    },
    strokeWidth: {
      number
    },
    strokeColor: {
      string
    },
    vadjust: {
      number
    },
    multi: {
      boolean: bool,
      string
    },
    bold: {
      color: {
        string
      },
      size: {
        number
      },
      face: {
        string
      },
      mod: {
        string
      },
      vadjust: {
        number
      },
      __type__: {
        object,
        string
      }
    },
    boldital: {
      color: {
        string
      },
      size: {
        number
      },
      face: {
        string
      },
      mod: {
        string
      },
      vadjust: {
        number
      },
      __type__: {
        object,
        string
      }
    },
    ital: {
      color: {
        string
      },
      size: {
        number
      },
      face: {
        string
      },
      mod: {
        string
      },
      vadjust: {
        number
      },
      __type__: {
        object,
        string
      }
    },
    mono: {
      color: {
        string
      },
      size: {
        number
      },
      face: {
        string
      },
      mod: {
        string
      },
      vadjust: {
        number
      },
      __type__: {
        object,
        string
      }
    },
    __type__: {
      object,
      string
    }
  },
  group: {
    string,
    number,
    undefined: "undefined"
  },
  heightConstraint: {
    minimum: {
      number
    },
    valign: {
      string
    },
    __type__: {
      object,
      boolean: bool,
      number
    }
  },
  hidden: {
    boolean: bool
  },
  icon: {
    face: {
      string
    },
    code: {
      string
    },
    size: {
      number
    },
    color: {
      string
    },
    weight: {
      string,
      number
    },
    __type__: {
      object
    }
  },
  id: {
    string,
    number
  },
  image: {
    selected: {
      string,
      undefined: "undefined"
    },
    unselected: {
      string,
      undefined: "undefined"
    },
    __type__: {
      object,
      string
    }
  },
  imagePadding: {
    top: {
      number
    },
    right: {
      number
    },
    bottom: {
      number
    },
    left: {
      number
    },
    __type__: {
      object,
      number
    }
  },
  label: {
    string,
    undefined: "undefined"
  },
  labelHighlightBold: {
    boolean: bool
  },
  level: {
    number,
    undefined: "undefined"
  },
  margin: {
    top: {
      number
    },
    right: {
      number
    },
    bottom: {
      number
    },
    left: {
      number
    },
    __type__: {
      object,
      number
    }
  },
  mass: {
    number
  },
  physics: {
    boolean: bool
  },
  scaling: {
    min: {
      number
    },
    max: {
      number
    },
    label: {
      enabled: {
        boolean: bool
      },
      min: {
        number
      },
      max: {
        number
      },
      maxVisible: {
        number
      },
      drawThreshold: {
        number
      },
      __type__: {
        object,
        boolean: bool
      }
    },
    customScalingFunction: {
      function: "function"
    },
    __type__: {
      object
    }
  },
  shadow: {
    enabled: {
      boolean: bool
    },
    color: {
      string
    },
    size: {
      number
    },
    x: {
      number
    },
    y: {
      number
    },
    __type__: {
      object,
      boolean: bool
    }
  },
  shape: {
    string: ["custom", "ellipse", "circle", "database", "box", "text", "image", "circularImage", "diamond", "dot", "star", "triangle", "triangleDown", "square", "icon", "hexagon"]
  },
  ctxRenderer: {
    function: "function"
  },
  shapeProperties: {
    borderDashes: {
      boolean: bool,
      array
    },
    borderRadius: {
      number
    },
    interpolation: {
      boolean: bool
    },
    useImageSize: {
      boolean: bool
    },
    useBorderWithImage: {
      boolean: bool
    },
    coordinateOrigin: {
      string: ["center", "top-left"]
    },
    __type__: {
      object
    }
  },
  size: {
    number
  },
  title: {
    string,
    dom,
    undefined: "undefined"
  },
  value: {
    number,
    undefined: "undefined"
  },
  widthConstraint: {
    minimum: {
      number
    },
    maximum: {
      number
    },
    __type__: {
      object,
      boolean: bool,
      number
    }
  },
  x: {
    number
  },
  y: {
    number
  },
  __type__: {
    object
  }
};
var allOptions = {
  configure: {
    enabled: {
      boolean: bool
    },
    filter: {
      boolean: bool,
      string,
      array,
      function: "function"
    },
    container: {
      dom
    },
    showButton: {
      boolean: bool
    },
    __type__: {
      object,
      boolean: bool,
      string,
      array,
      function: "function"
    }
  },
  edges: {
    arrows: {
      to: {
        enabled: {
          boolean: bool
        },
        scaleFactor: {
          number
        },
        type: {
          string: endPoints
        },
        imageHeight: {
          number
        },
        imageWidth: {
          number
        },
        src: {
          string
        },
        __type__: {
          object,
          boolean: bool
        }
      },
      middle: {
        enabled: {
          boolean: bool
        },
        scaleFactor: {
          number
        },
        type: {
          string: endPoints
        },
        imageWidth: {
          number
        },
        imageHeight: {
          number
        },
        src: {
          string
        },
        __type__: {
          object,
          boolean: bool
        }
      },
      from: {
        enabled: {
          boolean: bool
        },
        scaleFactor: {
          number
        },
        type: {
          string: endPoints
        },
        imageWidth: {
          number
        },
        imageHeight: {
          number
        },
        src: {
          string
        },
        __type__: {
          object,
          boolean: bool
        }
      },
      __type__: {
        string: ["from", "to", "middle"],
        object
      }
    },
    endPointOffset: {
      from: {
        number
      },
      to: {
        number
      },
      __type__: {
        object,
        number
      }
    },
    arrowStrikethrough: {
      boolean: bool
    },
    background: {
      enabled: {
        boolean: bool
      },
      color: {
        string
      },
      size: {
        number
      },
      dashes: {
        boolean: bool,
        array
      },
      __type__: {
        object,
        boolean: bool
      }
    },
    chosen: {
      label: {
        boolean: bool,
        function: "function"
      },
      edge: {
        boolean: bool,
        function: "function"
      },
      __type__: {
        object,
        boolean: bool
      }
    },
    color: {
      color: {
        string
      },
      highlight: {
        string
      },
      hover: {
        string
      },
      inherit: {
        string: ["from", "to", "both"],
        boolean: bool
      },
      opacity: {
        number
      },
      __type__: {
        object,
        string
      }
    },
    dashes: {
      boolean: bool,
      array
    },
    font: {
      color: {
        string
      },
      size: {
        number
      },
      face: {
        string
      },
      background: {
        string
      },
      strokeWidth: {
        number
      },
      strokeColor: {
        string
      },
      align: {
        string: ["horizontal", "top", "middle", "bottom"]
      },
      vadjust: {
        number
      },
      multi: {
        boolean: bool,
        string
      },
      bold: {
        color: {
          string
        },
        size: {
          number
        },
        face: {
          string
        },
        mod: {
          string
        },
        vadjust: {
          number
        },
        __type__: {
          object,
          string
        }
      },
      boldital: {
        color: {
          string
        },
        size: {
          number
        },
        face: {
          string
        },
        mod: {
          string
        },
        vadjust: {
          number
        },
        __type__: {
          object,
          string
        }
      },
      ital: {
        color: {
          string
        },
        size: {
          number
        },
        face: {
          string
        },
        mod: {
          string
        },
        vadjust: {
          number
        },
        __type__: {
          object,
          string
        }
      },
      mono: {
        color: {
          string
        },
        size: {
          number
        },
        face: {
          string
        },
        mod: {
          string
        },
        vadjust: {
          number
        },
        __type__: {
          object,
          string
        }
      },
      __type__: {
        object,
        string
      }
    },
    hidden: {
      boolean: bool
    },
    hoverWidth: {
      function: "function",
      number
    },
    label: {
      string,
      undefined: "undefined"
    },
    labelHighlightBold: {
      boolean: bool
    },
    length: {
      number,
      undefined: "undefined"
    },
    physics: {
      boolean: bool
    },
    scaling: {
      min: {
        number
      },
      max: {
        number
      },
      label: {
        enabled: {
          boolean: bool
        },
        min: {
          number
        },
        max: {
          number
        },
        maxVisible: {
          number
        },
        drawThreshold: {
          number
        },
        __type__: {
          object,
          boolean: bool
        }
      },
      customScalingFunction: {
        function: "function"
      },
      __type__: {
        object
      }
    },
    selectionWidth: {
      function: "function",
      number
    },
    selfReferenceSize: {
      number
    },
    selfReference: {
      size: {
        number
      },
      angle: {
        number
      },
      renderBehindTheNode: {
        boolean: bool
      },
      __type__: {
        object
      }
    },
    shadow: {
      enabled: {
        boolean: bool
      },
      color: {
        string
      },
      size: {
        number
      },
      x: {
        number
      },
      y: {
        number
      },
      __type__: {
        object,
        boolean: bool
      }
    },
    smooth: {
      enabled: {
        boolean: bool
      },
      type: {
        string: ["dynamic", "continuous", "discrete", "diagonalCross", "straightCross", "horizontal", "vertical", "curvedCW", "curvedCCW", "cubicBezier"]
      },
      roundness: {
        number
      },
      forceDirection: {
        string: ["horizontal", "vertical", "none"],
        boolean: bool
      },
      __type__: {
        object,
        boolean: bool
      }
    },
    title: {
      string,
      undefined: "undefined"
    },
    width: {
      number
    },
    widthConstraint: {
      maximum: {
        number
      },
      __type__: {
        object,
        boolean: bool,
        number
      }
    },
    value: {
      number,
      undefined: "undefined"
    },
    __type__: {
      object
    }
  },
  groups: {
    useDefaultGroups: {
      boolean: bool
    },
    __any__: nodeOptions,
    __type__: {
      object
    }
  },
  interaction: {
    dragNodes: {
      boolean: bool
    },
    dragView: {
      boolean: bool
    },
    hideEdgesOnDrag: {
      boolean: bool
    },
    hideEdgesOnZoom: {
      boolean: bool
    },
    hideNodesOnDrag: {
      boolean: bool
    },
    hover: {
      boolean: bool
    },
    keyboard: {
      enabled: {
        boolean: bool
      },
      speed: {
        x: {
          number
        },
        y: {
          number
        },
        zoom: {
          number
        },
        __type__: {
          object
        }
      },
      bindToWindow: {
        boolean: bool
      },
      autoFocus: {
        boolean: bool
      },
      __type__: {
        object,
        boolean: bool
      }
    },
    multiselect: {
      boolean: bool
    },
    navigationButtons: {
      boolean: bool
    },
    selectable: {
      boolean: bool
    },
    selectConnectedEdges: {
      boolean: bool
    },
    hoverConnectedEdges: {
      boolean: bool
    },
    tooltipDelay: {
      number
    },
    zoomView: {
      boolean: bool
    },
    zoomSpeed: {
      number
    },
    __type__: {
      object
    }
  },
  layout: {
    randomSeed: {
      undefined: "undefined",
      number,
      string
    },
    improvedLayout: {
      boolean: bool
    },
    clusterThreshold: {
      number
    },
    hierarchical: {
      enabled: {
        boolean: bool
      },
      levelSeparation: {
        number
      },
      nodeSpacing: {
        number
      },
      treeSpacing: {
        number
      },
      blockShifting: {
        boolean: bool
      },
      edgeMinimization: {
        boolean: bool
      },
      parentCentralization: {
        boolean: bool
      },
      direction: {
        string: ["UD", "DU", "LR", "RL"]
      },
      sortMethod: {
        string: ["hubsize", "directed"]
      },
      shakeTowards: {
        string: ["leaves", "roots"]
      },
      __type__: {
        object,
        boolean: bool
      }
    },
    __type__: {
      object
    }
  },
  manipulation: {
    enabled: {
      boolean: bool
    },
    initiallyActive: {
      boolean: bool
    },
    addNode: {
      boolean: bool,
      function: "function"
    },
    addEdge: {
      boolean: bool,
      function: "function"
    },
    editNode: {
      function: "function"
    },
    editEdge: {
      editWithoutDrag: {
        function: "function"
      },
      __type__: {
        object,
        boolean: bool,
        function: "function"
      }
    },
    deleteNode: {
      boolean: bool,
      function: "function"
    },
    deleteEdge: {
      boolean: bool,
      function: "function"
    },
    controlNodeStyle: nodeOptions,
    __type__: {
      object,
      boolean: bool
    }
  },
  nodes: nodeOptions,
  physics: {
    enabled: {
      boolean: bool
    },
    barnesHut: {
      theta: {
        number
      },
      gravitationalConstant: {
        number
      },
      centralGravity: {
        number
      },
      springLength: {
        number
      },
      springConstant: {
        number
      },
      damping: {
        number
      },
      avoidOverlap: {
        number
      },
      __type__: {
        object
      }
    },
    forceAtlas2Based: {
      theta: {
        number
      },
      gravitationalConstant: {
        number
      },
      centralGravity: {
        number
      },
      springLength: {
        number
      },
      springConstant: {
        number
      },
      damping: {
        number
      },
      avoidOverlap: {
        number
      },
      __type__: {
        object
      }
    },
    repulsion: {
      centralGravity: {
        number
      },
      springLength: {
        number
      },
      springConstant: {
        number
      },
      nodeDistance: {
        number
      },
      damping: {
        number
      },
      __type__: {
        object
      }
    },
    hierarchicalRepulsion: {
      centralGravity: {
        number
      },
      springLength: {
        number
      },
      springConstant: {
        number
      },
      nodeDistance: {
        number
      },
      damping: {
        number
      },
      avoidOverlap: {
        number
      },
      __type__: {
        object
      }
    },
    maxVelocity: {
      number
    },
    minVelocity: {
      number
    },
    solver: {
      string: ["barnesHut", "repulsion", "hierarchicalRepulsion", "forceAtlas2Based"]
    },
    stabilization: {
      enabled: {
        boolean: bool
      },
      iterations: {
        number
      },
      updateInterval: {
        number
      },
      onlyDynamicEdges: {
        boolean: bool
      },
      fit: {
        boolean: bool
      },
      __type__: {
        object,
        boolean: bool
      }
    },
    timestep: {
      number
    },
    adaptiveTimestep: {
      boolean: bool
    },
    wind: {
      x: {
        number
      },
      y: {
        number
      },
      __type__: {
        object
      }
    },
    __type__: {
      object,
      boolean: bool
    }
  },
  //globals :
  autoResize: {
    boolean: bool
  },
  clickToUse: {
    boolean: bool
  },
  locale: {
    string
  },
  locales: {
    __any__: {
      any
    },
    __type__: {
      object
    }
  },
  height: {
    string
  },
  width: {
    string
  },
  __type__: {
    object
  }
};
var configureOptions = {
  nodes: {
    borderWidth: [1, 0, 10, 1],
    borderWidthSelected: [2, 0, 10, 1],
    color: {
      border: ["color", "#2B7CE9"],
      background: ["color", "#97C2FC"],
      highlight: {
        border: ["color", "#2B7CE9"],
        background: ["color", "#D2E5FF"]
      },
      hover: {
        border: ["color", "#2B7CE9"],
        background: ["color", "#D2E5FF"]
      }
    },
    opacity: [0, 0, 1, 0.1],
    fixed: {
      x: false,
      y: false
    },
    font: {
      color: ["color", "#343434"],
      size: [14, 0, 100, 1],
      face: ["arial", "verdana", "tahoma"],
      background: ["color", "none"],
      strokeWidth: [0, 0, 50, 1],
      strokeColor: ["color", "#ffffff"]
    },
    //group: 'string',
    hidden: false,
    labelHighlightBold: true,
    //icon: {
    //  face: 'string',  //'FontAwesome',
    //  code: 'string',  //'\uf007',
    //  size: [50, 0, 200, 1],  //50,
    //  color: ['color','#2B7CE9']   //'#aa00ff'
    //},
    //image: 'string', // --> URL
    physics: true,
    scaling: {
      min: [10, 0, 200, 1],
      max: [30, 0, 200, 1],
      label: {
        enabled: false,
        min: [14, 0, 200, 1],
        max: [30, 0, 200, 1],
        maxVisible: [30, 0, 200, 1],
        drawThreshold: [5, 0, 20, 1]
      }
    },
    shadow: {
      enabled: false,
      color: "rgba(0,0,0,0.5)",
      size: [10, 0, 20, 1],
      x: [5, -30, 30, 1],
      y: [5, -30, 30, 1]
    },
    shape: ["ellipse", "box", "circle", "database", "diamond", "dot", "square", "star", "text", "triangle", "triangleDown", "hexagon"],
    shapeProperties: {
      borderDashes: false,
      borderRadius: [6, 0, 20, 1],
      interpolation: true,
      useImageSize: false
    },
    size: [25, 0, 200, 1]
  },
  edges: {
    arrows: {
      to: {
        enabled: false,
        scaleFactor: [1, 0, 3, 0.05],
        type: "arrow"
      },
      middle: {
        enabled: false,
        scaleFactor: [1, 0, 3, 0.05],
        type: "arrow"
      },
      from: {
        enabled: false,
        scaleFactor: [1, 0, 3, 0.05],
        type: "arrow"
      }
    },
    endPointOffset: {
      from: [0, -10, 10, 1],
      to: [0, -10, 10, 1]
    },
    arrowStrikethrough: true,
    color: {
      color: ["color", "#848484"],
      highlight: ["color", "#848484"],
      hover: ["color", "#848484"],
      inherit: ["from", "to", "both", true, false],
      opacity: [1, 0, 1, 0.05]
    },
    dashes: false,
    font: {
      color: ["color", "#343434"],
      size: [14, 0, 100, 1],
      face: ["arial", "verdana", "tahoma"],
      background: ["color", "none"],
      strokeWidth: [2, 0, 50, 1],
      strokeColor: ["color", "#ffffff"],
      align: ["horizontal", "top", "middle", "bottom"]
    },
    hidden: false,
    hoverWidth: [1.5, 0, 5, 0.1],
    labelHighlightBold: true,
    physics: true,
    scaling: {
      min: [1, 0, 100, 1],
      max: [15, 0, 100, 1],
      label: {
        enabled: true,
        min: [14, 0, 200, 1],
        max: [30, 0, 200, 1],
        maxVisible: [30, 0, 200, 1],
        drawThreshold: [5, 0, 20, 1]
      }
    },
    selectionWidth: [1.5, 0, 5, 0.1],
    selfReferenceSize: [20, 0, 200, 1],
    selfReference: {
      size: [20, 0, 200, 1],
      angle: [Math.PI / 2, -6 * Math.PI, 6 * Math.PI, Math.PI / 8],
      renderBehindTheNode: true
    },
    shadow: {
      enabled: false,
      color: "rgba(0,0,0,0.5)",
      size: [10, 0, 20, 1],
      x: [5, -30, 30, 1],
      y: [5, -30, 30, 1]
    },
    smooth: {
      enabled: true,
      type: ["dynamic", "continuous", "discrete", "diagonalCross", "straightCross", "horizontal", "vertical", "curvedCW", "curvedCCW", "cubicBezier"],
      forceDirection: ["horizontal", "vertical", "none"],
      roundness: [0.5, 0, 1, 0.05]
    },
    width: [1, 0, 30, 1]
  },
  layout: {
    //randomSeed: [0, 0, 500, 1],
    //improvedLayout: true,
    hierarchical: {
      enabled: false,
      levelSeparation: [150, 20, 500, 5],
      nodeSpacing: [100, 20, 500, 5],
      treeSpacing: [200, 20, 500, 5],
      blockShifting: true,
      edgeMinimization: true,
      parentCentralization: true,
      direction: ["UD", "DU", "LR", "RL"],
      sortMethod: ["hubsize", "directed"],
      shakeTowards: ["leaves", "roots"]
      // leaves, roots
    }
  },
  interaction: {
    dragNodes: true,
    dragView: true,
    hideEdgesOnDrag: false,
    hideEdgesOnZoom: false,
    hideNodesOnDrag: false,
    hover: false,
    keyboard: {
      enabled: false,
      speed: {
        x: [10, 0, 40, 1],
        y: [10, 0, 40, 1],
        zoom: [0.02, 0, 0.1, 5e-3]
      },
      bindToWindow: true,
      autoFocus: true
    },
    multiselect: false,
    navigationButtons: false,
    selectable: true,
    selectConnectedEdges: true,
    hoverConnectedEdges: true,
    tooltipDelay: [300, 0, 1e3, 25],
    zoomView: true,
    zoomSpeed: [1, 0.1, 2, 0.1]
  },
  manipulation: {
    enabled: false,
    initiallyActive: false
  },
  physics: {
    enabled: true,
    barnesHut: {
      theta: [0.5, 0.1, 1, 0.05],
      gravitationalConstant: [-2e3, -3e4, 0, 50],
      centralGravity: [0.3, 0, 10, 0.05],
      springLength: [95, 0, 500, 5],
      springConstant: [0.04, 0, 1.2, 5e-3],
      damping: [0.09, 0, 1, 0.01],
      avoidOverlap: [0, 0, 1, 0.01]
    },
    forceAtlas2Based: {
      theta: [0.5, 0.1, 1, 0.05],
      gravitationalConstant: [-50, -500, 0, 1],
      centralGravity: [0.01, 0, 1, 5e-3],
      springLength: [95, 0, 500, 5],
      springConstant: [0.08, 0, 1.2, 5e-3],
      damping: [0.4, 0, 1, 0.01],
      avoidOverlap: [0, 0, 1, 0.01]
    },
    repulsion: {
      centralGravity: [0.2, 0, 10, 0.05],
      springLength: [200, 0, 500, 5],
      springConstant: [0.05, 0, 1.2, 5e-3],
      nodeDistance: [100, 0, 500, 5],
      damping: [0.09, 0, 1, 0.01]
    },
    hierarchicalRepulsion: {
      centralGravity: [0.2, 0, 10, 0.05],
      springLength: [100, 0, 500, 5],
      springConstant: [0.01, 0, 1.2, 5e-3],
      nodeDistance: [120, 0, 500, 5],
      damping: [0.09, 0, 1, 0.01],
      avoidOverlap: [0, 0, 1, 0.01]
    },
    maxVelocity: [50, 0, 150, 1],
    minVelocity: [0.1, 0.01, 0.5, 0.01],
    solver: ["barnesHut", "forceAtlas2Based", "repulsion", "hierarchicalRepulsion"],
    timestep: [0.5, 0.01, 1, 0.01],
    wind: {
      x: [0, -10, 10, 0.1],
      y: [0, -10, 10, 0.1]
    }
    //adaptiveTimestep: true
  }
};
var configuratorHideOption = function configuratorHideOption2(parentPath, optionName, options) {
  var _context;
  if (_includesInstanceProperty(parentPath).call(parentPath, "physics") && _includesInstanceProperty(_context = configureOptions.physics.solver).call(_context, optionName) && options.physics.solver !== optionName && optionName !== "wind") {
    return true;
  }
  return false;
};
var FloydWarshall = /* @__PURE__ */ function() {
  function FloydWarshall2() {
    _classCallCheck(this, FloydWarshall2);
  }
  _createClass(FloydWarshall2, [{
    key: "getDistances",
    value: function getDistances(body, nodesArray, edgesArray) {
      var D_matrix = {};
      var edges = body.edges;
      for (var i2 = 0; i2 < nodesArray.length; i2++) {
        var node2 = nodesArray[i2];
        var cell = {};
        D_matrix[node2] = cell;
        for (var j2 = 0; j2 < nodesArray.length; j2++) {
          cell[nodesArray[j2]] = i2 == j2 ? 0 : 1e9;
        }
      }
      for (var _i = 0; _i < edgesArray.length; _i++) {
        var edge2 = edges[edgesArray[_i]];
        if (edge2.connected === true && D_matrix[edge2.fromId] !== void 0 && D_matrix[edge2.toId] !== void 0) {
          D_matrix[edge2.fromId][edge2.toId] = 1;
          D_matrix[edge2.toId][edge2.fromId] = 1;
        }
      }
      var nodeCount = nodesArray.length;
      for (var k2 = 0; k2 < nodeCount; k2++) {
        var knode = nodesArray[k2];
        var kcolm = D_matrix[knode];
        for (var _i2 = 0; _i2 < nodeCount - 1; _i2++) {
          var inode = nodesArray[_i2];
          var icolm = D_matrix[inode];
          for (var _j = _i2 + 1; _j < nodeCount; _j++) {
            var jnode = nodesArray[_j];
            var jcolm = D_matrix[jnode];
            var val = Math.min(icolm[jnode], icolm[knode] + kcolm[jnode]);
            icolm[jnode] = val;
            jcolm[inode] = val;
          }
        }
      }
      return D_matrix;
    }
  }]);
  return FloydWarshall2;
}();
var KamadaKawai = /* @__PURE__ */ function() {
  function KamadaKawai2(body, edgeLength, edgeStrength) {
    _classCallCheck(this, KamadaKawai2);
    this.body = body;
    this.springLength = edgeLength;
    this.springConstant = edgeStrength;
    this.distanceSolver = new FloydWarshall();
  }
  _createClass(KamadaKawai2, [{
    key: "setOptions",
    value: function setOptions(options) {
      if (options) {
        if (options.springLength) {
          this.springLength = options.springLength;
        }
        if (options.springConstant) {
          this.springConstant = options.springConstant;
        }
      }
    }
    /**
     * Position the system
     *
     * @param {Array.<Node>} nodesArray
     * @param {Array.<vis.Edge>} edgesArray
     * @param {boolean} [ignoreClusters=false]
     */
  }, {
    key: "solve",
    value: function solve(nodesArray, edgesArray) {
      var ignoreClusters = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var D_matrix = this.distanceSolver.getDistances(this.body, nodesArray, edgesArray);
      this._createL_matrix(D_matrix);
      this._createK_matrix(D_matrix);
      this._createE_matrix();
      var threshold = 0.01;
      var innerThreshold = 1;
      var iterations = 0;
      var maxIterations = Math.max(1e3, Math.min(10 * this.body.nodeIndices.length, 6e3));
      var maxInnerIterations = 5;
      var maxEnergy = 1e9;
      var highE_nodeId = 0, dE_dx = 0, dE_dy = 0, delta_m = 0, subIterations = 0;
      while (maxEnergy > threshold && iterations < maxIterations) {
        iterations += 1;
        var _this$_getHighestEner = this._getHighestEnergyNode(ignoreClusters);
        var _this$_getHighestEner2 = _slicedToArray(_this$_getHighestEner, 4);
        highE_nodeId = _this$_getHighestEner2[0];
        maxEnergy = _this$_getHighestEner2[1];
        dE_dx = _this$_getHighestEner2[2];
        dE_dy = _this$_getHighestEner2[3];
        delta_m = maxEnergy;
        subIterations = 0;
        while (delta_m > innerThreshold && subIterations < maxInnerIterations) {
          subIterations += 1;
          this._moveNode(highE_nodeId, dE_dx, dE_dy);
          var _this$_getEnergy = this._getEnergy(highE_nodeId);
          var _this$_getEnergy2 = _slicedToArray(_this$_getEnergy, 3);
          delta_m = _this$_getEnergy2[0];
          dE_dx = _this$_getEnergy2[1];
          dE_dy = _this$_getEnergy2[2];
        }
      }
    }
    /**
     * get the node with the highest energy
     *
     * @param {boolean} ignoreClusters
     * @returns {number[]}
     * @private
     */
  }, {
    key: "_getHighestEnergyNode",
    value: function _getHighestEnergyNode(ignoreClusters) {
      var nodesArray = this.body.nodeIndices;
      var nodes2 = this.body.nodes;
      var maxEnergy = 0;
      var maxEnergyNodeId = nodesArray[0];
      var dE_dx_max = 0, dE_dy_max = 0;
      for (var nodeIdx = 0; nodeIdx < nodesArray.length; nodeIdx++) {
        var m2 = nodesArray[nodeIdx];
        if (nodes2[m2].predefinedPosition !== true || nodes2[m2].isCluster === true && ignoreClusters === true || nodes2[m2].options.fixed.x !== true || nodes2[m2].options.fixed.y !== true) {
          var _this$_getEnergy3 = this._getEnergy(m2), _this$_getEnergy4 = _slicedToArray(_this$_getEnergy3, 3), delta_m = _this$_getEnergy4[0], dE_dx = _this$_getEnergy4[1], dE_dy = _this$_getEnergy4[2];
          if (maxEnergy < delta_m) {
            maxEnergy = delta_m;
            maxEnergyNodeId = m2;
            dE_dx_max = dE_dx;
            dE_dy_max = dE_dy;
          }
        }
      }
      return [maxEnergyNodeId, maxEnergy, dE_dx_max, dE_dy_max];
    }
    /**
     * calculate the energy of a single node
     *
     * @param {Node.id} m
     * @returns {number[]}
     * @private
     */
  }, {
    key: "_getEnergy",
    value: function _getEnergy(m2) {
      var _this$E_sums$m = _slicedToArray(this.E_sums[m2], 2), dE_dx = _this$E_sums$m[0], dE_dy = _this$E_sums$m[1];
      var delta_m = Math.sqrt(Math.pow(dE_dx, 2) + Math.pow(dE_dy, 2));
      return [delta_m, dE_dx, dE_dy];
    }
    /**
     * move the node based on it's energy
     * the dx and dy are calculated from the linear system proposed by Kamada and Kawai
     *
     * @param {number} m
     * @param {number} dE_dx
     * @param {number} dE_dy
     * @private
     */
  }, {
    key: "_moveNode",
    value: function _moveNode(m2, dE_dx, dE_dy) {
      var nodesArray = this.body.nodeIndices;
      var nodes2 = this.body.nodes;
      var d2E_dx2 = 0;
      var d2E_dxdy = 0;
      var d2E_dy2 = 0;
      var x_m = nodes2[m2].x;
      var y_m = nodes2[m2].y;
      var km = this.K_matrix[m2];
      var lm = this.L_matrix[m2];
      for (var iIdx = 0; iIdx < nodesArray.length; iIdx++) {
        var i2 = nodesArray[iIdx];
        if (i2 !== m2) {
          var x_i = nodes2[i2].x;
          var y_i = nodes2[i2].y;
          var kmat = km[i2];
          var lmat = lm[i2];
          var denominator = 1 / Math.pow(Math.pow(x_m - x_i, 2) + Math.pow(y_m - y_i, 2), 1.5);
          d2E_dx2 += kmat * (1 - lmat * Math.pow(y_m - y_i, 2) * denominator);
          d2E_dxdy += kmat * (lmat * (x_m - x_i) * (y_m - y_i) * denominator);
          d2E_dy2 += kmat * (1 - lmat * Math.pow(x_m - x_i, 2) * denominator);
        }
      }
      var A = d2E_dx2, B = d2E_dxdy, C = dE_dx, D = d2E_dy2, E = dE_dy;
      var dy = (C / A + E / B) / (B / A - D / B);
      var dx = -(B * dy + C) / A;
      nodes2[m2].x += dx;
      nodes2[m2].y += dy;
      this._updateE_matrix(m2);
    }
    /**
     * Create the L matrix: edge length times shortest path
     *
     * @param {object} D_matrix
     * @private
     */
  }, {
    key: "_createL_matrix",
    value: function _createL_matrix(D_matrix) {
      var nodesArray = this.body.nodeIndices;
      var edgeLength = this.springLength;
      this.L_matrix = [];
      for (var i2 = 0; i2 < nodesArray.length; i2++) {
        this.L_matrix[nodesArray[i2]] = {};
        for (var j2 = 0; j2 < nodesArray.length; j2++) {
          this.L_matrix[nodesArray[i2]][nodesArray[j2]] = edgeLength * D_matrix[nodesArray[i2]][nodesArray[j2]];
        }
      }
    }
    /**
     * Create the K matrix: spring constants times shortest path
     *
     * @param {object} D_matrix
     * @private
     */
  }, {
    key: "_createK_matrix",
    value: function _createK_matrix(D_matrix) {
      var nodesArray = this.body.nodeIndices;
      var edgeStrength = this.springConstant;
      this.K_matrix = [];
      for (var i2 = 0; i2 < nodesArray.length; i2++) {
        this.K_matrix[nodesArray[i2]] = {};
        for (var j2 = 0; j2 < nodesArray.length; j2++) {
          this.K_matrix[nodesArray[i2]][nodesArray[j2]] = edgeStrength * Math.pow(D_matrix[nodesArray[i2]][nodesArray[j2]], -2);
        }
      }
    }
    /**
     *  Create matrix with all energies between nodes
     *
     *  @private
     */
  }, {
    key: "_createE_matrix",
    value: function _createE_matrix() {
      var nodesArray = this.body.nodeIndices;
      var nodes2 = this.body.nodes;
      this.E_matrix = {};
      this.E_sums = {};
      for (var mIdx = 0; mIdx < nodesArray.length; mIdx++) {
        this.E_matrix[nodesArray[mIdx]] = [];
      }
      for (var _mIdx = 0; _mIdx < nodesArray.length; _mIdx++) {
        var m2 = nodesArray[_mIdx];
        var x_m = nodes2[m2].x;
        var y_m = nodes2[m2].y;
        var dE_dx = 0;
        var dE_dy = 0;
        for (var iIdx = _mIdx; iIdx < nodesArray.length; iIdx++) {
          var i2 = nodesArray[iIdx];
          if (i2 !== m2) {
            var x_i = nodes2[i2].x;
            var y_i = nodes2[i2].y;
            var denominator = 1 / Math.sqrt(Math.pow(x_m - x_i, 2) + Math.pow(y_m - y_i, 2));
            this.E_matrix[m2][iIdx] = [this.K_matrix[m2][i2] * (x_m - x_i - this.L_matrix[m2][i2] * (x_m - x_i) * denominator), this.K_matrix[m2][i2] * (y_m - y_i - this.L_matrix[m2][i2] * (y_m - y_i) * denominator)];
            this.E_matrix[i2][_mIdx] = this.E_matrix[m2][iIdx];
            dE_dx += this.E_matrix[m2][iIdx][0];
            dE_dy += this.E_matrix[m2][iIdx][1];
          }
        }
        this.E_sums[m2] = [dE_dx, dE_dy];
      }
    }
    /**
     * Update method, just doing single column (rows are auto-updated) (update all sums)
     *
     * @param {number} m
     * @private
     */
  }, {
    key: "_updateE_matrix",
    value: function _updateE_matrix(m2) {
      var nodesArray = this.body.nodeIndices;
      var nodes2 = this.body.nodes;
      var colm = this.E_matrix[m2];
      var kcolm = this.K_matrix[m2];
      var lcolm = this.L_matrix[m2];
      var x_m = nodes2[m2].x;
      var y_m = nodes2[m2].y;
      var dE_dx = 0;
      var dE_dy = 0;
      for (var iIdx = 0; iIdx < nodesArray.length; iIdx++) {
        var i2 = nodesArray[iIdx];
        if (i2 !== m2) {
          var cell = colm[iIdx];
          var oldDx = cell[0];
          var oldDy = cell[1];
          var x_i = nodes2[i2].x;
          var y_i = nodes2[i2].y;
          var denominator = 1 / Math.sqrt(Math.pow(x_m - x_i, 2) + Math.pow(y_m - y_i, 2));
          var dx = kcolm[i2] * (x_m - x_i - lcolm[i2] * (x_m - x_i) * denominator);
          var dy = kcolm[i2] * (y_m - y_i - lcolm[i2] * (y_m - y_i) * denominator);
          colm[iIdx] = [dx, dy];
          dE_dx += dx;
          dE_dy += dy;
          var sum = this.E_sums[i2];
          sum[0] += dx - oldDx;
          sum[1] += dy - oldDy;
        }
      }
      this.E_sums[m2] = [dE_dx, dE_dy];
    }
  }]);
  return KamadaKawai2;
}();
function Network(container, data2, options) {
  var _context, _context2, _context3, _context4, _this = this;
  if (!(this instanceof Network)) {
    throw new SyntaxError("Constructor must be called with the new operator");
  }
  this.options = {};
  this.defaultOptions = {
    locale: "en",
    locales,
    clickToUse: false
  };
  _Object$assign(this.options, this.defaultOptions);
  this.body = {
    container,
    // See comment above for following fields
    nodes: {},
    nodeIndices: [],
    edges: {},
    edgeIndices: [],
    emitter: {
      on: _bindInstanceProperty$1(_context = this.on).call(_context, this),
      off: _bindInstanceProperty$1(_context2 = this.off).call(_context2, this),
      emit: _bindInstanceProperty$1(_context3 = this.emit).call(_context3, this),
      once: _bindInstanceProperty$1(_context4 = this.once).call(_context4, this)
    },
    eventListeners: {
      onTap: function onTap() {
      },
      onTouch: function onTouch2() {
      },
      onDoubleTap: function onDoubleTap() {
      },
      onHold: function onHold() {
      },
      onDragStart: function onDragStart() {
      },
      onDrag: function onDrag() {
      },
      onDragEnd: function onDragEnd() {
      },
      onMouseWheel: function onMouseWheel() {
      },
      onPinch: function onPinch() {
      },
      onMouseMove: function onMouseMove() {
      },
      onRelease: function onRelease2() {
      },
      onContext: function onContext() {
      }
    },
    data: {
      nodes: null,
      // A DataSet or DataView
      edges: null
      // A DataSet or DataView
    },
    functions: {
      createNode: function createNode() {
      },
      createEdge: function createEdge2() {
      },
      getPointer: function getPointer() {
      }
    },
    modules: {},
    view: {
      scale: 1,
      translation: {
        x: 0,
        y: 0
      }
    },
    selectionBox: {
      show: false,
      position: {
        start: {
          x: 0,
          y: 0
        },
        end: {
          x: 0,
          y: 0
        }
      }
    }
  };
  this.bindEventListeners();
  this.images = new Images(function() {
    return _this.body.emitter.emit("_requestRedraw");
  });
  this.groups = new Groups();
  this.canvas = new Canvas(this.body);
  this.selectionHandler = new SelectionHandler(this.body, this.canvas);
  this.interactionHandler = new InteractionHandler(this.body, this.canvas, this.selectionHandler);
  this.view = new View(this.body, this.canvas);
  this.renderer = new CanvasRenderer(this.body, this.canvas);
  this.physics = new PhysicsEngine(this.body);
  this.layoutEngine = new LayoutEngine(this.body);
  this.clustering = new ClusterEngine(this.body);
  this.manipulation = new ManipulationSystem(this.body, this.canvas, this.selectionHandler, this.interactionHandler);
  this.nodesHandler = new NodesHandler(this.body, this.images, this.groups, this.layoutEngine);
  this.edgesHandler = new EdgesHandler(this.body, this.images, this.groups);
  this.body.modules["kamadaKawai"] = new KamadaKawai(this.body, 150, 0.05);
  this.body.modules["clustering"] = this.clustering;
  this.canvas._create();
  this.setOptions(options);
  this.setData(data2);
}
Emitter(Network.prototype);
Network.prototype.setOptions = function(options) {
  var _this2 = this;
  if (options === null) {
    options = void 0;
  }
  if (options !== void 0) {
    var errorFound2 = Validator.validate(options, allOptions);
    if (errorFound2 === true) {
      console.error("%cErrors have been found in the supplied options object.", VALIDATOR_PRINT_STYLE);
    }
    var fields = ["locale", "locales", "clickToUse"];
    selectiveDeepExtend(fields, this.options, options);
    if (options.locale !== void 0) {
      options.locale = normalizeLanguageCode(options.locales || this.options.locales, options.locale);
    }
    options = this.layoutEngine.setOptions(options.layout, options);
    this.canvas.setOptions(options);
    this.groups.setOptions(options.groups);
    this.nodesHandler.setOptions(options.nodes);
    this.edgesHandler.setOptions(options.edges);
    this.physics.setOptions(options.physics);
    this.manipulation.setOptions(options.manipulation, options, this.options);
    this.interactionHandler.setOptions(options.interaction);
    this.renderer.setOptions(options.interaction);
    this.selectionHandler.setOptions(options.interaction);
    if (options.groups !== void 0) {
      this.body.emitter.emit("refreshNodes");
    }
    if ("configure" in options) {
      if (!this.configurator) {
        this.configurator = new Configurator(this, this.body.container, configureOptions, this.canvas.pixelRatio, configuratorHideOption);
      }
      this.configurator.setOptions(options.configure);
    }
    if (this.configurator && this.configurator.options.enabled === true) {
      var networkOptions = {
        nodes: {},
        edges: {},
        layout: {},
        interaction: {},
        manipulation: {},
        physics: {},
        global: {}
      };
      deepExtend(networkOptions.nodes, this.nodesHandler.options);
      deepExtend(networkOptions.edges, this.edgesHandler.options);
      deepExtend(networkOptions.layout, this.layoutEngine.options);
      deepExtend(networkOptions.interaction, this.selectionHandler.options);
      deepExtend(networkOptions.interaction, this.renderer.options);
      deepExtend(networkOptions.interaction, this.interactionHandler.options);
      deepExtend(networkOptions.manipulation, this.manipulation.options);
      deepExtend(networkOptions.physics, this.physics.options);
      deepExtend(networkOptions.global, this.canvas.options);
      deepExtend(networkOptions.global, this.options);
      this.configurator.setModuleOptions(networkOptions);
    }
    if (options.clickToUse !== void 0) {
      if (options.clickToUse === true) {
        if (this.activator === void 0) {
          this.activator = new Activator(this.canvas.frame);
          this.activator.on("change", function() {
            _this2.body.emitter.emit("activate");
          });
        }
      } else {
        if (this.activator !== void 0) {
          this.activator.destroy();
          delete this.activator;
        }
        this.body.emitter.emit("activate");
      }
    } else {
      this.body.emitter.emit("activate");
    }
    this.canvas.setSize();
    this.body.emitter.emit("startSimulation");
  }
};
Network.prototype._updateVisibleIndices = function() {
  var nodes2 = this.body.nodes;
  var edges = this.body.edges;
  this.body.nodeIndices = [];
  this.body.edgeIndices = [];
  for (var nodeId in nodes2) {
    if (Object.prototype.hasOwnProperty.call(nodes2, nodeId)) {
      if (!this.clustering._isClusteredNode(nodeId) && nodes2[nodeId].options.hidden === false) {
        this.body.nodeIndices.push(nodes2[nodeId].id);
      }
    }
  }
  for (var edgeId in edges) {
    if (Object.prototype.hasOwnProperty.call(edges, edgeId)) {
      var edge2 = edges[edgeId];
      var fromNode = nodes2[edge2.fromId];
      var toNode = nodes2[edge2.toId];
      var edgeNodesPresent = fromNode !== void 0 && toNode !== void 0;
      var isVisible2 = !this.clustering._isClusteredEdge(edgeId) && edge2.options.hidden === false && edgeNodesPresent && fromNode.options.hidden === false && // Also hidden if any of its connecting nodes are hidden
      toNode.options.hidden === false;
      if (isVisible2) {
        this.body.edgeIndices.push(edge2.id);
      }
    }
  }
};
Network.prototype.bindEventListeners = function() {
  var _this3 = this;
  this.body.emitter.on("_dataChanged", function() {
    _this3.edgesHandler._updateState();
    _this3.body.emitter.emit("_dataUpdated");
  });
  this.body.emitter.on("_dataUpdated", function() {
    _this3.clustering._updateState();
    _this3._updateVisibleIndices();
    _this3._updateValueRange(_this3.body.nodes);
    _this3._updateValueRange(_this3.body.edges);
    _this3.body.emitter.emit("startSimulation");
    _this3.body.emitter.emit("_requestRedraw");
  });
};
Network.prototype.setData = function(data2) {
  this.body.emitter.emit("resetPhysics");
  this.body.emitter.emit("_resetData");
  this.selectionHandler.unselectAll();
  if (data2 && data2.dot && (data2.nodes || data2.edges)) {
    throw new SyntaxError('Data must contain either parameter "dot" or  parameter pair "nodes" and "edges", but not both.');
  }
  this.setOptions(data2 && data2.options);
  if (data2 && data2.dot) {
    console.warn("The dot property has been deprecated. Please use the static convertDot method to convert DOT into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertDot(dotString);");
    var dotData = DOTToGraph(data2.dot);
    this.setData(dotData);
    return;
  } else if (data2 && data2.gephi) {
    console.warn("The gephi property has been deprecated. Please use the static convertGephi method to convert gephi into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertGephi(gephiJson);");
    var gephiData = parseGephi(data2.gephi);
    this.setData(gephiData);
    return;
  } else {
    this.nodesHandler.setData(data2 && data2.nodes, true);
    this.edgesHandler.setData(data2 && data2.edges, true);
  }
  this.body.emitter.emit("_dataChanged");
  this.body.emitter.emit("_dataLoaded");
  this.body.emitter.emit("initPhysics");
};
Network.prototype.destroy = function() {
  this.body.emitter.emit("destroy");
  this.body.emitter.off();
  this.off();
  delete this.groups;
  delete this.canvas;
  delete this.selectionHandler;
  delete this.interactionHandler;
  delete this.view;
  delete this.renderer;
  delete this.physics;
  delete this.layoutEngine;
  delete this.clustering;
  delete this.manipulation;
  delete this.nodesHandler;
  delete this.edgesHandler;
  delete this.configurator;
  delete this.images;
  for (var nodeId in this.body.nodes) {
    if (!Object.prototype.hasOwnProperty.call(this.body.nodes, nodeId)) continue;
    delete this.body.nodes[nodeId];
  }
  for (var edgeId in this.body.edges) {
    if (!Object.prototype.hasOwnProperty.call(this.body.edges, edgeId)) continue;
    delete this.body.edges[edgeId];
  }
  recursiveDOMDelete(this.body.container);
};
Network.prototype._updateValueRange = function(obj) {
  var id2;
  var valueMin = void 0;
  var valueMax = void 0;
  var valueTotal = 0;
  for (id2 in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, id2)) {
      var value2 = obj[id2].getValue();
      if (value2 !== void 0) {
        valueMin = valueMin === void 0 ? value2 : Math.min(value2, valueMin);
        valueMax = valueMax === void 0 ? value2 : Math.max(value2, valueMax);
        valueTotal += value2;
      }
    }
  }
  if (valueMin !== void 0 && valueMax !== void 0) {
    for (id2 in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, id2)) {
        obj[id2].setValueRange(valueMin, valueMax, valueTotal);
      }
    }
  }
};
Network.prototype.isActive = function() {
  return !this.activator || this.activator.active;
};
Network.prototype.setSize = function() {
  return this.canvas.setSize.apply(this.canvas, arguments);
};
Network.prototype.canvasToDOM = function() {
  return this.canvas.canvasToDOM.apply(this.canvas, arguments);
};
Network.prototype.DOMtoCanvas = function() {
  return this.canvas.DOMtoCanvas.apply(this.canvas, arguments);
};
Network.prototype.findNode = function() {
  return this.clustering.findNode.apply(this.clustering, arguments);
};
Network.prototype.isCluster = function() {
  return this.clustering.isCluster.apply(this.clustering, arguments);
};
Network.prototype.openCluster = function() {
  return this.clustering.openCluster.apply(this.clustering, arguments);
};
Network.prototype.cluster = function() {
  return this.clustering.cluster.apply(this.clustering, arguments);
};
Network.prototype.getNodesInCluster = function() {
  return this.clustering.getNodesInCluster.apply(this.clustering, arguments);
};
Network.prototype.clusterByConnection = function() {
  return this.clustering.clusterByConnection.apply(this.clustering, arguments);
};
Network.prototype.clusterByHubsize = function() {
  return this.clustering.clusterByHubsize.apply(this.clustering, arguments);
};
Network.prototype.updateClusteredNode = function() {
  return this.clustering.updateClusteredNode.apply(this.clustering, arguments);
};
Network.prototype.getClusteredEdges = function() {
  return this.clustering.getClusteredEdges.apply(this.clustering, arguments);
};
Network.prototype.getBaseEdge = function() {
  return this.clustering.getBaseEdge.apply(this.clustering, arguments);
};
Network.prototype.getBaseEdges = function() {
  return this.clustering.getBaseEdges.apply(this.clustering, arguments);
};
Network.prototype.updateEdge = function() {
  return this.clustering.updateEdge.apply(this.clustering, arguments);
};
Network.prototype.clusterOutliers = function() {
  return this.clustering.clusterOutliers.apply(this.clustering, arguments);
};
Network.prototype.getSeed = function() {
  return this.layoutEngine.getSeed.apply(this.layoutEngine, arguments);
};
Network.prototype.enableEditMode = function() {
  return this.manipulation.enableEditMode.apply(this.manipulation, arguments);
};
Network.prototype.disableEditMode = function() {
  return this.manipulation.disableEditMode.apply(this.manipulation, arguments);
};
Network.prototype.addNodeMode = function() {
  return this.manipulation.addNodeMode.apply(this.manipulation, arguments);
};
Network.prototype.editNode = function() {
  return this.manipulation.editNode.apply(this.manipulation, arguments);
};
Network.prototype.editNodeMode = function() {
  console.warn("Deprecated: Please use editNode instead of editNodeMode.");
  return this.manipulation.editNode.apply(this.manipulation, arguments);
};
Network.prototype.addEdgeMode = function() {
  return this.manipulation.addEdgeMode.apply(this.manipulation, arguments);
};
Network.prototype.editEdgeMode = function() {
  return this.manipulation.editEdgeMode.apply(this.manipulation, arguments);
};
Network.prototype.deleteSelected = function() {
  return this.manipulation.deleteSelected.apply(this.manipulation, arguments);
};
Network.prototype.getPositions = function() {
  return this.nodesHandler.getPositions.apply(this.nodesHandler, arguments);
};
Network.prototype.getPosition = function() {
  return this.nodesHandler.getPosition.apply(this.nodesHandler, arguments);
};
Network.prototype.storePositions = function() {
  return this.nodesHandler.storePositions.apply(this.nodesHandler, arguments);
};
Network.prototype.moveNode = function() {
  return this.nodesHandler.moveNode.apply(this.nodesHandler, arguments);
};
Network.prototype.getBoundingBox = function() {
  return this.nodesHandler.getBoundingBox.apply(this.nodesHandler, arguments);
};
Network.prototype.getConnectedNodes = function(objectId) {
  if (this.body.nodes[objectId] !== void 0) {
    return this.nodesHandler.getConnectedNodes.apply(this.nodesHandler, arguments);
  } else {
    return this.edgesHandler.getConnectedNodes.apply(this.edgesHandler, arguments);
  }
};
Network.prototype.getConnectedEdges = function() {
  return this.nodesHandler.getConnectedEdges.apply(this.nodesHandler, arguments);
};
Network.prototype.startSimulation = function() {
  return this.physics.startSimulation.apply(this.physics, arguments);
};
Network.prototype.stopSimulation = function() {
  return this.physics.stopSimulation.apply(this.physics, arguments);
};
Network.prototype.stabilize = function() {
  return this.physics.stabilize.apply(this.physics, arguments);
};
Network.prototype.getSelection = function() {
  return this.selectionHandler.getSelection.apply(this.selectionHandler, arguments);
};
Network.prototype.setSelection = function() {
  return this.selectionHandler.setSelection.apply(this.selectionHandler, arguments);
};
Network.prototype.getSelectedNodes = function() {
  return this.selectionHandler.getSelectedNodeIds.apply(this.selectionHandler, arguments);
};
Network.prototype.getSelectedEdges = function() {
  return this.selectionHandler.getSelectedEdgeIds.apply(this.selectionHandler, arguments);
};
Network.prototype.getNodeAt = function() {
  var node2 = this.selectionHandler.getNodeAt.apply(this.selectionHandler, arguments);
  if (node2 !== void 0 && node2.id !== void 0) {
    return node2.id;
  }
  return node2;
};
Network.prototype.getEdgeAt = function() {
  var edge2 = this.selectionHandler.getEdgeAt.apply(this.selectionHandler, arguments);
  if (edge2 !== void 0 && edge2.id !== void 0) {
    return edge2.id;
  }
  return edge2;
};
Network.prototype.selectNodes = function() {
  return this.selectionHandler.selectNodes.apply(this.selectionHandler, arguments);
};
Network.prototype.selectEdges = function() {
  return this.selectionHandler.selectEdges.apply(this.selectionHandler, arguments);
};
Network.prototype.unselectAll = function() {
  this.selectionHandler.unselectAll.apply(this.selectionHandler, arguments);
  this.selectionHandler.commitWithoutEmitting.apply(this.selectionHandler);
  this.redraw();
};
Network.prototype.redraw = function() {
  return this.renderer.redraw.apply(this.renderer, arguments);
};
Network.prototype.getScale = function() {
  return this.view.getScale.apply(this.view, arguments);
};
Network.prototype.getViewPosition = function() {
  return this.view.getViewPosition.apply(this.view, arguments);
};
Network.prototype.fit = function() {
  return this.view.fit.apply(this.view, arguments);
};
Network.prototype.moveTo = function() {
  return this.view.moveTo.apply(this.view, arguments);
};
Network.prototype.focus = function() {
  return this.view.focus.apply(this.view, arguments);
};
Network.prototype.releaseNode = function() {
  return this.view.releaseNode.apply(this.view, arguments);
};
Network.prototype.getOptionsFromConfigurator = function() {
  var options = {};
  if (this.configurator) {
    options = this.configurator.getOptions.apply(this.configurator);
  }
  return options;
};
const _imports_0 = "/paad-grafos-v2/assets/paad_logo-BN_zJcEn.png";
const _export_sfc = (sfc, props) => {
  const target = sfc.__vccOpts || sfc;
  for (const [key2, val] of props) {
    target[key2] = val;
  }
  return target;
};
const _sfc_main$t = {
  name: "Top Navbar",
  mounted() {
    console.log("Top Navbar Component mounted.");
  },
  methods: {
    toggleOffCanvas() {
      this.$emit("toggle-off-canvas");
    },
    offcanvasForVisConfigure() {
      this.$emit("offcanvas-for-vis-configure");
    },
    offcanvasForVisNodes() {
      this.$emit("offcanvas-for-vis-nodes");
    },
    offcanvasForVisPhysics() {
      this.$emit("offcanvas-for-vis-physics");
    }
  },
  emits: [
    "offcanvas-for-vis-configure",
    "toggle-off-canvas",
    "offcanvas-for-vis-physics",
    "offcanvas-for-vis-nodes"
  ]
};
const _hoisted_1$n = {
  id: "topNavbar",
  class: "navbar fixed-top navbar-expand-md navbar-light bg-light top-navbar-style"
};
const _hoisted_2$g = { class: "container-fluid d-flex justify-content-between" };
const _hoisted_3$d = { class: "dropdown p-1" };
const _hoisted_4$a = {
  class: "dropdown-menu dropdown-menu-end",
  "aria-labelledby": "dropdownCog"
};
const _hoisted_5$9 = {
  "data-toggle": "tooltip",
  title: "Vis.Js Native Configure HTML DOM."
};
const _hoisted_6$7 = {
  "data-toggle": "tooltip",
  title: "Vis.Js Nodes"
};
const _hoisted_7$6 = {
  "data-toggle": "tooltip",
  title: "Vis.Js Physics"
};
function _sfc_render$t(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("nav", _hoisted_1$n, [
    createBaseVNode("div", _hoisted_2$g, [
      _cache[7] || (_cache[7] = createBaseVNode("a", {
        class: "navbar-brand p-0",
        href: "#"
      }, [
        createBaseVNode("img", {
          src: _imports_0,
          alt: "",
          width: "50",
          height: "50"
        })
      ], -1)),
      createBaseVNode("div", null, [
        createBaseVNode("div", _hoisted_3$d, [
          _cache[6] || (_cache[6] = createBaseVNode("button", {
            class: "btn btn-light dropdown-toggle",
            type: "button",
            id: "dropdownCog",
            "data-bs-toggle": "dropdown",
            "aria-expanded": "false"
          }, [
            createBaseVNode("i", { class: "fa-solid fa-gear" })
          ], -1)),
          createBaseVNode("ul", _hoisted_4$a, [
            createBaseVNode("li", _hoisted_5$9, [
              createBaseVNode("a", {
                class: "dropdown-item",
                href: "#",
                id: "offcanvasConfigureButton",
                onClick: _cache[0] || (_cache[0] = withModifiers(($event) => {
                  $options.offcanvasForVisConfigure();
                  $options.toggleOffCanvas();
                }, ["prevent"]))
              }, _cache[3] || (_cache[3] = [
                createBaseVNode("i", { class: "fa-solid fa-screwdriver-wrench" }, null, -1),
                createTextVNode(" Vis.JS Configure")
              ]))
            ]),
            createBaseVNode("li", _hoisted_6$7, [
              createBaseVNode("a", {
                class: "dropdown-item",
                href: "#",
                id: "offcanvasConfigureButton",
                onClick: _cache[1] || (_cache[1] = withModifiers(($event) => {
                  $options.offcanvasForVisNodes();
                  $options.toggleOffCanvas();
                }, ["prevent"]))
              }, _cache[4] || (_cache[4] = [
                createBaseVNode("i", { class: "fa-solid fa-circle" }, null, -1),
                createTextVNode(" Vis.JS Vértices")
              ]))
            ]),
            createBaseVNode("li", _hoisted_7$6, [
              createBaseVNode("a", {
                class: "dropdown-item",
                href: "#",
                id: "offcanvasPhysicsButton",
                onClick: _cache[2] || (_cache[2] = withModifiers(($event) => {
                  $options.offcanvasForVisPhysics();
                  $options.toggleOffCanvas();
                }, ["prevent"]))
              }, _cache[5] || (_cache[5] = [
                createBaseVNode("i", { class: "fa-solid fa-earth-americas" }, null, -1),
                createTextVNode(" Vis.JS Física ")
              ]))
            ])
          ])
        ])
      ])
    ])
  ]);
}
const TopNavbar = /* @__PURE__ */ _export_sfc(_sfc_main$t, [["render", _sfc_render$t]]);
const _sfc_main$s = {
  name: "Bottom Navbar",
  mounted() {
    console.log("Bottom Navbar Component mounted.");
  }
};
const _hoisted_1$m = {
  id: "bottomNavbar",
  class: "navbar fixed-bottom navbar-light bg-light bottom-navbar-style"
};
function _sfc_render$s(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("nav", _hoisted_1$m, _cache[0] || (_cache[0] = [
    createBaseVNode("div", { class: "container-fluid" }, [
      createBaseVNode("p")
    ], -1)
  ]));
}
const BottomNavbar = /* @__PURE__ */ _export_sfc(_sfc_main$s, [["render", _sfc_render$s]]);
const _sfc_main$r = {
  name: "Solver Parameters",
  props: [
    "solverEnabled",
    "options",
    "localNetwork",
    "ariaControls",
    "ariaLabelledBy",
    "solver"
  ],
  data() {
    return {
      encapsulateOptions: null,
      encapsulateLocalNetwork: null,
      theta: 0,
      centralGravity: 0,
      gravitationalConstant: 0,
      springLength: 0,
      springConstant: 0,
      damping: 0,
      avoidOverlap: 0,
      nodeDistance: 0
    };
  },
  computed: {},
  watch: {
    "solverEnabled": function(newEnabled, oldEnabled) {
      if (newEnabled) {
        this.encapsulateOptions = this.options;
        this.encapsulateLocalNetwork = this.localNetwork;
        if (this.solver == "barnesHut") {
          this.theta = this.encapsulateOptions.physics.barnesHut.theta;
          this.centralGravity = this.encapsulateOptions.physics.barnesHut.centralGravity;
          this.gravitationalConstant = this.encapsulateOptions.physics.barnesHut.gravitationalConstant;
          this.springLength = this.encapsulateOptions.physics.barnesHut.springLength;
          this.springConstant = this.encapsulateOptions.physics.barnesHut.springConstant;
          this.damping = this.encapsulateOptions.physics.barnesHut.damping;
          this.avoidOverlap = this.encapsulateOptions.physics.barnesHut.avoidOverlap;
        } else if (this.solver == "forceAtlas2Based") {
          this.theta = this.encapsulateOptions.physics.forceAtlas2Based.theta;
          this.centralGravity = this.encapsulateOptions.physics.forceAtlas2Based.centralGravity;
          this.gravitationalConstant = this.encapsulateOptions.physics.forceAtlas2Based.gravitationalConstant;
          this.springLength = this.encapsulateOptions.physics.forceAtlas2Based.springLength;
          this.springConstant = this.encapsulateOptions.physics.forceAtlas2Based.springConstant;
          this.damping = this.encapsulateOptions.physics.forceAtlas2Based.damping;
          this.avoidOverlap = this.encapsulateOptions.physics.forceAtlas2Based.avoidOverlap;
        } else if (this.solver == "repulsion") {
          this.centralGravity = this.encapsulateOptions.physics.repulsion.centralGravity;
          this.springLength = this.encapsulateOptions.physics.repulsion.springLength;
          this.springConstant = this.encapsulateOptions.physics.repulsion.springConstant;
          this.damping = this.encapsulateOptions.physics.repulsion.damping;
          this.nodeDistance = this.encapsulateOptions.physics.repulsion.nodeDistance;
        } else if (this.solver == "hierarchicalRepulsion") {
          this.centralGravity = this.encapsulateOptions.physics.hierarchicalRepulsion.centralGravity;
          this.centralGravity = this.encapsulateOptions.physics.hierarchicalRepulsion.centralGravity;
          this.springLength = this.encapsulateOptions.physics.hierarchicalRepulsion.springLength;
          this.springConstant = this.encapsulateOptions.physics.hierarchicalRepulsion.springConstant;
          this.damping = this.encapsulateOptions.physics.hierarchicalRepulsion.damping;
          this.nodeDistance = this.encapsulateOptions.physics.hierarchicalRepulsion.nodeDistance;
          this.avoidOverlap = this.encapsulateOptions.physics.hierarchicalRepulsion.avoidOverlap;
        }
      }
    },
    theta: function(newTheta, oldTheta) {
      switch (this.solver) {
        case "barnesHut": {
          this.encapsulateOptions.physics.barnesHut.theta = parseFloat(newTheta);
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "forceAtlas2Based": {
          this.encapsulateOptions.physics.forceAtlas2Based.theta = parseFloat(newTheta);
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
      }
    },
    centralGravity: function(newCentralGravity, oldCentralGravity) {
      switch (this.solver) {
        case "barnesHut": {
          this.encapsulateOptions.physics.barnesHut.centralGravity = parseFloat(newCentralGravity);
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "forceAtlas2Based": {
          this.encapsulateOptions.physics.forceAtlas2Based.centralGravity = parseFloat(newCentralGravity);
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "repulsion": {
          this.encapsulateOptions.physics.repulsion.centralGravity = parseFloat(newCentralGravity);
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "hierarchicalRepulsion": {
          this.encapsulateOptions.physics.hierarchicalRepulsion.centralGravity = parseFloat(newCentralGravity);
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
      }
    },
    gravitationalConstant: function(newGravitationalConstant, oldGravitationalConstant) {
      switch (this.solver) {
        case "barnesHut": {
          this.encapsulateOptions.physics.barnesHut.gravitationalConstant = parseFloat(newGravitationalConstant);
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "forceAtlas2Based": {
          this.encapsulateOptions.physics.forceAtlas2Based.gravitationalConstant = parseFloat(newGravitationalConstant);
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
      }
    },
    springLength: function(newSpringLength, oldSpringLength) {
      switch (this.solver) {
        case "barnesHut": {
          this.encapsulateOptions.physics.barnesHut.springLength = parseFloat(newSpringLength);
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "forceAtlas2Based": {
          this.encapsulateOptions.physics.forceAtlas2Based.springLength = parseFloat(newSpringLength);
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "repulsion": {
          this.encapsulateOptions.physics.repulsion.springLength = parseFloat(newSpringLength);
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "hierarchicalRepulsion": {
          this.encapsulateOptions.physics.hierarchicalRepulsion.springLength = parseFloat(newSpringLength);
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
      }
    },
    springConstant: function(newSpringConstant, oldSpringConstant) {
      switch (this.solver) {
        case "barnesHut": {
          this.encapsulateOptions.physics.barnesHut.springConstant = parseFloat(newSpringConstant);
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "forceAtlas2Based": {
          this.encapsulateOptions.physics.forceAtlas2Based.springConstant = parseFloat(newSpringConstant);
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "repulsion": {
          this.encapsulateOptions.physics.repulsion.springConstant = parseFloat(newSpringConstant);
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "hierarchicalRepulsion": {
          this.encapsulateOptions.physics.hierarchicalRepulsion.springConstant = parseFloat(newSpringConstant);
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
      }
    },
    damping: function(newDamping, oldDamping) {
      switch (this.solver) {
        case "barnesHut": {
          this.encapsulateOptions.physics.barnesHut.damping = parseFloat(newDamping);
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "forceAtlas2Based": {
          this.encapsulateOptions.physics.forceAtlas2Based.damping = parseFloat(newDamping);
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "repulsion": {
          this.encapsulateOptions.physics.repulsion.damping = parseFloat(newDamping);
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "hierarchicalRepulsion": {
          this.encapsulateOptions.physics.hierarchicalRepulsion.damping = parseFloat(newDamping);
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
      }
    },
    avoidOverlap: function(newAvoidOverlap, oldAvoidOverlap) {
      switch (this.solver) {
        case "barnesHut": {
          this.encapsulateOptions.physics.barnesHut.avoidOverlap = parseFloat(newAvoidOverlap);
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "forceAtlas2Based": {
          this.encapsulateOptions.physics.forceAtlas2Based.avoidOverlap = parseFloat(newAvoidOverlap);
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "hierarchicalRepulsion": {
          this.encapsulateOptions.physics.hierarchicalRepulsion.avoidOverlap = parseFloat(newAvoidOverlap);
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
      }
    },
    nodeDistance: function(newNodeDistance, oldNodeDistance) {
      switch (this.solver) {
        case "repulsion": {
          this.encapsulateOptions.physics.repulsion.nodeDistance = parseFloat(newNodeDistance);
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "hierarchicalRepulsion": {
          this.encapsulateOptions.physics.hierarchicalRepulsion.nodeDistance = parseFloat(newNodeDistance);
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
      }
    }
  },
  methods: {
    isFieldEnabled: function(field) {
      switch (this.solver) {
        case "barnesHut": {
          switch (field) {
            case "theta":
              return true;
            case "centralGravity":
              return true;
            case "gravitationalConstant":
              return true;
            case "springLength":
              return true;
            case "springConstant":
              return true;
            case "damping":
              return true;
            case "avoidOverlap":
              return true;
            default:
              return false;
          }
        }
        case "forceAtlas2Based": {
          switch (field) {
            case "theta":
              return true;
            case "centralGravity":
              return true;
            case "gravitationalConstant":
              return true;
            case "springLength":
              return true;
            case "springConstant":
              return true;
            case "damping":
              return true;
            case "avoidOverlap":
              return true;
            default:
              return false;
          }
        }
        case "repulsion": {
          switch (field) {
            case "centralGravity":
              return true;
            case "springLength":
              return true;
            case "springConstant":
              return true;
            case "damping":
              return true;
            case "nodeDistance":
              return true;
            default:
              return false;
          }
        }
        case "hierarchicalRepulsion": {
          switch (field) {
            case "centralGravity":
              return true;
            case "springLength":
              return true;
            case "springConstant":
              return true;
            case "damping":
              return true;
            case "nodeDistance":
              return true;
            case "avoidOverlap":
              return true;
            default:
              return false;
          }
        }
      }
    }
  },
  emits: [
    "options-has-changed"
  ]
};
const _hoisted_1$l = ["id", "aria-labelledby"];
const _hoisted_2$f = { class: "accordion-body" };
const _hoisted_3$c = { class: "row" };
const _hoisted_4$9 = {
  key: 0,
  class: "input-group input-group-sm mb-1"
};
const _hoisted_5$8 = ["id"];
const _hoisted_6$6 = ["aria-describedby", "id"];
const _hoisted_7$5 = {
  key: 1,
  class: "input-group input-group-sm mb-1"
};
const _hoisted_8$5 = ["id"];
const _hoisted_9$4 = ["aria-describedby", "id"];
const _hoisted_10$3 = {
  key: 2,
  class: "input-group input-group-sm mb-1"
};
const _hoisted_11$3 = ["id"];
const _hoisted_12$3 = ["aria-describedby", "id"];
const _hoisted_13$2 = {
  key: 3,
  class: "input-group input-group-sm mb-1"
};
const _hoisted_14$2 = ["id"];
const _hoisted_15$1 = ["aria-describedby", "id"];
const _hoisted_16$1 = {
  key: 4,
  class: "input-group input-group-sm mb-1"
};
const _hoisted_17$1 = ["id"];
const _hoisted_18$1 = ["aria-describedby", "id"];
const _hoisted_19$1 = {
  key: 5,
  class: "input-group input-group-sm mb-1"
};
const _hoisted_20$1 = ["id"];
const _hoisted_21$1 = ["aria-describedby", "id"];
const _hoisted_22$1 = {
  key: 6,
  class: "input-group input-group-sm mb-1"
};
const _hoisted_23 = ["id"];
const _hoisted_24 = ["aria-describedby", "id"];
const _hoisted_25 = {
  key: 7,
  class: "input-group input-group-sm mb-1"
};
const _hoisted_26 = ["id"];
const _hoisted_27 = ["aria-describedby", "id"];
function _sfc_render$r(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    id: $props.ariaControls,
    class: "accordion-collapse collapse",
    "aria-labelledby": $props.ariaLabelledBy,
    "data-bs-parent": "#accordionFlushExample"
  }, [
    createBaseVNode("div", _hoisted_2$f, [
      createBaseVNode("div", _hoisted_3$c, [
        this.isFieldEnabled("theta") ? (openBlock(), createElementBlock("div", _hoisted_4$9, [
          createBaseVNode("span", {
            class: "input-group-text",
            id: "addon-theta-" + this.solver + "-label",
            "data-bs-toggle": "tooltip",
            title: "Este parâmetro determina o limite entre as forças consolidadas de longo alcance e as forças individuais de curto alcance. Para simplificar demais, valores mais altos são mais rápidos, mas geram mais erros, valores mais baixos são mais lentos, mas com menos erros."
          }, "Teta (Theta):", 8, _hoisted_5$8),
          withDirectives(createBaseVNode("input", {
            type: "number",
            min: "0",
            step: "0.5",
            class: "form-control",
            placeholder: "Teta",
            "aria-label": "Teta",
            "aria-describedby": "addon-theta-" + this.solver + "-label",
            id: "theta-" + this.solver,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => this.theta = $event)
          }, null, 8, _hoisted_6$6), [
            [vModelText, this.theta]
          ])
        ])) : createCommentVNode("", true),
        $options.isFieldEnabled("gravitationalConstant") ? (openBlock(), createElementBlock("div", _hoisted_7$5, [
          createBaseVNode("span", {
            class: "input-group-text",
            id: "addon-gc-" + this.solver + "-label",
            "data-bs-toggle": "tooltip",
            title: "A gravidade atrai. Gostamos de repulsão. Portanto o valor é negativo. Se quiser que a repulsão seja mais forte, diminua o valor (coloque -10000, -50000)."
          }, "Const. Gravitacional (G. C.):", 8, _hoisted_8$5),
          withDirectives(createBaseVNode("input", {
            type: "text",
            class: "form-control",
            min: "0",
            step: "0.1",
            placeholder: "Constante Gravitacional",
            "aria-label": "Constante Gravitacional",
            "aria-describedby": "addon-gc-" + this.solver + "-label",
            id: "gc-" + this.solver,
            "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => this.gravitationalConstant = $event)
          }, null, 8, _hoisted_9$4), [
            [vModelText, this.gravitationalConstant]
          ])
        ])) : createCommentVNode("", true),
        $options.isFieldEnabled("centralGravity") ? (openBlock(), createElementBlock("div", _hoisted_10$3, [
          createBaseVNode("span", {
            class: "input-group-text",
            id: "addon-centralGravity-" + this.solver + "-label",
            "data-bs-toggle": "tooltip",
            title: "Existe um atrator gravitacional central para puxar toda o grafo de volta ao centro."
          }, "Gravidade Central (C. G.):", 8, _hoisted_11$3),
          withDirectives(createBaseVNode("input", {
            type: "number",
            min: "0",
            step: "0.1",
            class: "form-control",
            placeholder: "CentralGravity",
            "aria-label": "CentralGravity",
            "aria-describedby": "addon-centralGravity-" + this.solver + "-label",
            id: "centralGravity" + this.solver,
            "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => this.centralGravity = $event)
          }, null, 8, _hoisted_12$3), [
            [vModelText, this.centralGravity]
          ])
        ])) : createCommentVNode("", true),
        $options.isFieldEnabled("springLength") ? (openBlock(), createElementBlock("div", _hoisted_13$2, [
          createBaseVNode("span", {
            class: "input-group-text",
            id: "addon-springLength-" + this.solver + "-label",
            "data-bs-toggle": "tooltip",
            title: "As arestas são modeladas como molas. O comprimento da mola aqui é o comprimento restante das mola."
          }, "Tamanho da Mola (S. L.):", 8, _hoisted_14$2),
          withDirectives(createBaseVNode("input", {
            type: "number",
            min: "0",
            step: "1",
            class: "form-control",
            placeholder: "springLength",
            "aria-label": "springLength",
            "aria-describedby": "addon-springLength-" + this.solver + "-label",
            id: "springLength-" + this.solver,
            "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => this.springLength = $event)
          }, null, 8, _hoisted_15$1), [
            [vModelText, this.springLength]
          ])
        ])) : createCommentVNode("", true),
        $options.isFieldEnabled("springConstant") ? (openBlock(), createElementBlock("div", _hoisted_16$1, [
          createBaseVNode("span", {
            class: "input-group-text",
            id: "addon-springConstant-" + this.solver + "-label",
            "data-bs-toggle": "tooltip",
            title: "É assim que as molas ficam 'resistentes'. Valores mais altos significam molas mais fortes."
          }, "Constante da Mola (S. C.):", 8, _hoisted_17$1),
          withDirectives(createBaseVNode("input", {
            type: "number",
            min: "0",
            step: "0.01",
            class: "form-control",
            placeholder: "springConstant",
            "aria-label": "springConstant",
            "aria-describedby": "addon-springConstant-" + this.solver + "-label",
            id: "springConstant-" + this.solver,
            "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => this.springConstant = $event)
          }, null, 8, _hoisted_18$1), [
            [vModelText, this.springConstant]
          ])
        ])) : createCommentVNode("", true),
        $options.isFieldEnabled("damping") ? (openBlock(), createElementBlock("div", _hoisted_19$1, [
          createBaseVNode("span", {
            class: "input-group-text",
            id: "addon-damping-" + this.solver + "-label",
            "data-bs-toggle": "tooltip",
            title: "Intervalo aceito: [0 .. 1]. \r\n                                        O fator de amortecimento é quanto da velocidade da iteração de simulação física anterior é transferida para a próxima iteração."
          }, "Amort. da Mola (Damping):", 8, _hoisted_20$1),
          withDirectives(createBaseVNode("input", {
            type: "number",
            min: "0",
            step: "0.01",
            max: "1",
            class: "form-control",
            placeholder: "damping",
            "aria-label": "damping",
            "aria-describedby": "addon-damping-" + this.solver + "-label",
            id: "damping-" + this.solver,
            "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => this.damping = $event)
          }, null, 8, _hoisted_21$1), [
            [vModelText, this.damping]
          ])
        ])) : createCommentVNode("", true),
        $options.isFieldEnabled("avoidOverlap") ? (openBlock(), createElementBlock("div", _hoisted_22$1, [
          createBaseVNode("span", {
            class: "input-group-text",
            id: "addon-avoidOverlap-" + this.solver + "-label",
            "data-bs-toggle": "tooltip",
            title: "Intervalo aceito: [0 .. 1]. Quando maior que 0, o tamanho do vértice é levado em consideração. \r\n                                        A distância será calculada a partir do raio do círculo envolvente do vértice para ambos os modelos gravitacionais. \r\n                                        O valor 1 é a evitação máxima de sobreposição."
          }, "Evitar Sobreposição (A. O.):", 8, _hoisted_23),
          withDirectives(createBaseVNode("input", {
            type: "number",
            min: "0",
            step: "0.01",
            max: "1",
            class: "form-control",
            placeholder: "avoidOverlap",
            "aria-label": "avoidOverlap",
            "aria-describedby": "addon-avoidOverlap-" + this.solver + "-label",
            id: "avoidOverlap-" + this.solver,
            "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => this.avoidOverlap = $event)
          }, null, 8, _hoisted_24), [
            [vModelText, this.avoidOverlap]
          ])
        ])) : createCommentVNode("", true),
        $options.isFieldEnabled("nodeDistance") ? (openBlock(), createElementBlock("div", _hoisted_25, [
          createBaseVNode("span", {
            class: "input-group-text",
            id: "addon-nodeDistance-" + this.solver + "-label",
            "data-bs-toggle": "tooltip",
            title: "Esta é a faixa de influência para a repulsão."
          }, "Dist. Vértices (N. D.):", 8, _hoisted_26),
          withDirectives(createBaseVNode("input", {
            type: "number",
            min: "0",
            step: "1",
            class: "form-control",
            placeholder: "nodeDistance",
            "aria-label": "nodeDistance",
            "aria-describedby": "addon-nodeDistance-" + this.solver + "-label",
            id: "nodeDistance-" + this.solver,
            "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => this.nodeDistance = $event)
          }, null, 8, _hoisted_27), [
            [vModelText, this.nodeDistance]
          ])
        ])) : createCommentVNode("", true)
      ])
    ])
  ], 8, _hoisted_1$l);
}
const solverParameters = /* @__PURE__ */ _export_sfc(_sfc_main$r, [["render", _sfc_render$r]]);
const _sfc_main$q = {
  name: "Stabilization",
  props: [
    "options",
    "localNetwork"
  ],
  data() {
    return {
      encapsulateOptions: null,
      encapsulateLocalNetwork: null,
      stabilizationEnabled: false,
      enablePhysicsStabilization: false,
      stabilizationIterations: 0,
      stabilizationUpdateInterval: 0,
      onlyDynamicEdges: false,
      fit: false
    };
  },
  watch: {
    stabilizationEnabled: function(newStabilizationEnabled, oldStabilizationEnabled) {
      this.encapsulateOptions = this.options;
      this.encapsulateLocalNetwork = toRaw(this.localNetwork);
      this.enablePhysicsStabilization = this.encapsulateOptions.physics.stabilization.enabled;
      this.stabilizationIterations = this.encapsulateOptions.physics.stabilization.iterations;
      this.stabilizationUpdateInterval = this.encapsulateOptions.physics.stabilization.updateInterval;
      this.onlyDynamicEdges = this.encapsulateOptions.physics.stabilization.onlyDynamicEdges;
      this.fit = this.encapsulateOptions.physics.stabilization.fit;
    },
    enablePhysicsStabilization: function(newEnablePhysicsStabilization, oldEnablePhysicsStabilization) {
      this.encapsulateOptions.physics.stabilization.enabled = newEnablePhysicsStabilization;
      this.$emit("options-has-changed", this.encapsulateOptions);
    },
    stabilizationIterations: function(newStabilizationIterations, oldStabilizationIterations) {
      this.encapsulateOptions.physics.stabilization.iterations = newStabilizationIterations;
      this.$emit("options-has-changed", this.encapsulateOptions);
    },
    stabilizationUpdateInterval: function(newStabilizationUpdateInterval, oldStabilizationUpdateInterval) {
      this.encapsulateOptions.physics.stabilization.updateInterval = newStabilizationUpdateInterval;
      this.$emit("options-has-changed", this.encapsulateOptions);
    },
    onlyDynamicEdges: function(newonlyDynamicEdges, oldonlyDynamicEdges) {
      this.encapsulateOptions.physics.stabilization.onlyDynamicEdges = newonlyDynamicEdges;
      this.$emit("options-has-changed", this.encapsulateOptions);
    },
    fit: function(newFit, oldFit) {
      this.encapsulateOptions.physics.stabilization.fit = newFit;
      this.$emit("options-has-changed", this.encapsulateOptions);
    }
  },
  emits: ["options-has-changed"]
};
const _hoisted_1$k = {
  class: "accordion accordion-flush mt-1",
  id: "accordionFlushStabilization"
};
const _hoisted_2$e = { class: "accordion-item" };
const _hoisted_3$b = {
  class: "accordion-header",
  id: "flush-stabilization"
};
const _hoisted_4$8 = {
  id: "flush-collapseStabilization",
  class: "accordion-collapse collapse",
  "aria-labelledby": "flush-stabilization",
  "data-bs-parent": "#accordionFlushStabilization"
};
const _hoisted_5$7 = { class: "accordion-body" };
const _hoisted_6$5 = { class: "row" };
const _hoisted_7$4 = { class: "form-check form-switch" };
const _hoisted_8$4 = ["checked"];
const _hoisted_9$3 = { class: "input-group input-group-sm p-0 mb-1" };
const _hoisted_10$2 = { class: "input-group input-group-sm p-0 mb-1" };
const _hoisted_11$2 = { class: "form-check form-switch" };
const _hoisted_12$2 = ["checked"];
const _hoisted_13$1 = { class: "form-check form-switch" };
const _hoisted_14$1 = ["checked"];
function _sfc_render$q(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1$k, [
    createBaseVNode("div", _hoisted_2$e, [
      createBaseVNode("div", _hoisted_3$b, [
        createBaseVNode("button", {
          class: "accordion-button collapsed p-1",
          type: "button",
          "data-bs-toggle": "collapse",
          "data-bs-target": "#flush-collapseStabilization",
          "aria-expanded": "false",
          "aria-controls": "flush-collapseStabilization",
          id: "collapseStabilization",
          onClick: _cache[0] || (_cache[0] = withModifiers(($event) => this.stabilizationEnabled = !this.stabilizationEnabled, ["prevent"]))
        }, _cache[6] || (_cache[6] = [
          createBaseVNode("div", { class: "d-flex w-100 justify-content-between pe-2" }, [
            createBaseVNode("div", null, " Estabilização "),
            createBaseVNode("div", {
              class: "flex-shrink-1 badge bg-info m-1",
              "data-bs-toggle": "tooltip",
              title: "Quando verdadeiro, o grafo é estabilizado no carregamento usando as configurações padrão.\r\n                                    Se falso, a estabilização é desabilitada. Para customizar isso no futuro, pode-se fornecer um objeto."
            }, [
              createBaseVNode("i", { class: "fa-solid fa-info text-right" })
            ])
          ], -1)
        ]))
      ]),
      createBaseVNode("div", _hoisted_4$8, [
        createBaseVNode("div", _hoisted_5$7, [
          createBaseVNode("div", _hoisted_6$5, [
            createBaseVNode("div", _hoisted_7$4, [
              withDirectives(createBaseVNode("input", {
                class: "form-check-input",
                type: "checkbox",
                role: "switch",
                id: "switchPhysicsEnableStabilization",
                checked: this.enablePhysicsStabilization,
                "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => this.enablePhysicsStabilization = $event)
              }, null, 8, _hoisted_8$4), [
                [vModelCheckbox, this.enablePhysicsStabilization]
              ]),
              _cache[7] || (_cache[7] = createBaseVNode("label", {
                class: "form-check-label",
                for: "switchPhysicsEnableStabilization",
                "data-bs-toggle": "tooltip",
                title: "Alterne a estabilização. Esta é uma propriedade opcional. Se indefinido, será automaticamente definido como verdadeiro quando qualquer uma das propriedades deste objeto for definida."
              }, "Habilitado (Enabled)", -1))
            ]),
            createBaseVNode("div", _hoisted_9$3, [
              _cache[8] || (_cache[8] = createBaseVNode("span", {
                class: "input-group-text",
                id: "addon-physics-stabilization-iterations-label",
                "data-bs-toggle": "tooltip",
                title: "O módulo de física tenta estabilizar o grafo durante a carga até um número máximo de iterações definido aqui. Se o grafo se estabilizou com menos, você terminou antes do número máximo."
              }, "Iterações (I):", -1)),
              withDirectives(createBaseVNode("input", {
                type: "number",
                min: "0",
                step: "1",
                class: "form-control",
                placeholder: "stabilizationIterations",
                "aria-label": "stabilizationIterations",
                "aria-describedby": "addon-physics-stabilization-iterations-label",
                id: "physics-stabilization-iterations",
                "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => this.stabilizationIterations = $event)
              }, null, 512), [
                [vModelText, this.stabilizationIterations]
              ])
            ]),
            createBaseVNode("div", _hoisted_10$2, [
              _cache[9] || (_cache[9] = createBaseVNode("span", {
                class: "input-group-text",
                id: "addon-physics-stabilization-updateInterval-label",
                "data-bs-toggle": "tooltip",
                title: "Ao estabilizar, o DOM pode congelar. Você pode dividir a estabilização em pedaços para mostrar uma barra de carregamento, por exemplo. O intervalo determina após quantas iterações o evento stabilizationProgress é acionado."
              }, "Intervalo de Atualização (U. I.):", -1)),
              withDirectives(createBaseVNode("input", {
                type: "number",
                min: "0",
                step: "1",
                class: "form-control",
                placeholder: "stabilizationUpdateInterval",
                "aria-label": "stabilizationUpdateInterval",
                "aria-describedby": "addon-physics-stabilization-updateInterval-label",
                id: "physics-stabilization-updateInterval",
                "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => this.stabilizationUpdateInterval = $event)
              }, null, 512), [
                [vModelText, this.stabilizationUpdateInterval]
              ])
            ]),
            createBaseVNode("div", _hoisted_11$2, [
              withDirectives(createBaseVNode("input", {
                class: "form-check-input",
                type: "checkbox",
                role: "switch",
                id: "physicsOnlyDinamycEdges",
                checked: this.onlyDynamicEdges,
                "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => this.onlyDynamicEdges = $event)
              }, null, 8, _hoisted_12$2), [
                [vModelCheckbox, this.onlyDynamicEdges]
              ]),
              _cache[10] || (_cache[10] = createBaseVNode("label", {
                class: "form-check-label",
                for: "physicsOnlyDinamycEdges",
                "data-bs-toggle": "tooltip",
                title: "Se você predefiniu a posição de todos os vértices e deseja estabilizar apenas as arestas suaves dinâmicas, defina isso como verdadeiro. Ele congela todos os vértices, exceto os vértices de suporte de curva suave dinâmica invisível. Se você deseja que os vértices visíveis se movam e se estabilizem, não use isto."
              }, "Somente Arestas Dinâmcias (O. D. E.)", -1))
            ]),
            createBaseVNode("div", _hoisted_13$1, [
              withDirectives(createBaseVNode("input", {
                class: "form-check-input",
                type: "checkbox",
                role: "switch",
                id: "physicsStabilizationFit",
                checked: this.fit,
                "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => this.fit = $event)
              }, null, 8, _hoisted_14$1), [
                [vModelCheckbox, this.fit]
              ]),
              _cache[11] || (_cache[11] = createBaseVNode("label", {
                class: "form-check-label",
                for: "physicsStabilizationFit",
                "data-bs-toggle": "tooltip",
                title: "Alterne se deseja ou não que a visualização seja ampliada para caber em todos os nós quando a estabilização for concluída."
              }, "Ajsute (Fit)", -1))
            ])
          ])
        ])
      ])
    ])
  ]);
}
const stabilization = /* @__PURE__ */ _export_sfc(_sfc_main$q, [["render", _sfc_render$q]]);
const _sfc_main$p = {
  name: "Wind",
  props: [
    "options",
    "network"
  ],
  data() {
    return {
      encapsulateOptions: null,
      encapsulateNetwork: null,
      isWindEnabled: false,
      windX: 0,
      windY: 0
    };
  },
  watch: {
    isWindEnabled: function(newWindEnabled, oldWindEnabled) {
      this.encapsulateNetwork = this.network;
      this.encapsulateOptions = this.options;
    },
    windX: function(newWindX, oldWindX) {
      this.encapsulateOptions.physics.wind.x = newWindX;
      this.$emit("options-has-changed", this.encapsulateOptions);
    },
    windY: function(newWindY, oldWindY) {
      this.encapsulateOptions.physics.wind.y = newWindY;
      this.$emit("options-has-changed", this.encapsulateOptions);
    }
  },
  emits: ["options-has-changed"]
};
const _hoisted_1$j = {
  class: "accordion accordion-flush mt-1",
  id: "accordionFlushWind"
};
const _hoisted_2$d = { class: "accordion-item" };
const _hoisted_3$a = {
  class: "accordion-header",
  id: "flush-wind"
};
const _hoisted_4$7 = {
  id: "flush-collapseWind",
  class: "accordion-collapse collapse",
  "aria-labelledby": "flush-wind",
  "data-bs-parent": "#accordionFlushWind"
};
const _hoisted_5$6 = { class: "accordion-body" };
const _hoisted_6$4 = { class: "row" };
const _hoisted_7$3 = { class: "input-group input-group-sm p-0 mb-1" };
const _hoisted_8$3 = { class: "input-group input-group-sm p-0 mb-1" };
function _sfc_render$p(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1$j, [
    createBaseVNode("div", _hoisted_2$d, [
      createBaseVNode("div", _hoisted_3$a, [
        createBaseVNode("button", {
          class: "accordion-button collapsed p-1",
          type: "button",
          "data-bs-toggle": "collapse",
          "data-bs-target": "#flush-collapseWind",
          "aria-expanded": "false",
          "aria-controls": "flush-collapseWind",
          id: "collapseWind",
          onClick: _cache[0] || (_cache[0] = withModifiers(($event) => this.isWindEnabled = !this.isWindEnabled, ["prevent"]))
        }, _cache[3] || (_cache[3] = [
          createBaseVNode("div", { class: "d-flex w-100 justify-content-between pe-2" }, [
            createBaseVNode("div", null, " Vento "),
            createBaseVNode("div", {
              class: "flex-shrink-1 badge bg-info m-1",
              "data-bs-toggle": "tooltip",
              title: "Uma força que empurra todos os vértices não fixados numa dada direção. Requer que todos os vértices estejam conectados a \r\n                                    outras vértices que estão fixos, caso contrário vértices não anexados ficarão se movendo indefinidamente."
            }, [
              createBaseVNode("i", { class: "fa-solid fa-info text-right" })
            ])
          ], -1)
        ]))
      ]),
      createBaseVNode("div", _hoisted_4$7, [
        createBaseVNode("div", _hoisted_5$6, [
          createBaseVNode("div", _hoisted_6$4, [
            createBaseVNode("div", _hoisted_7$3, [
              _cache[4] || (_cache[4] = createBaseVNode("span", {
                class: "input-group-text",
                id: "addon-physics-wind-x-label",
                "data-bs-toggle": "tooltip",
                title: "A quantidade de força a ser aplicada empurrando vértices não fixados para a direita (valores positivos) ou para a esquerda (valores negativos)."
              }, "Coord X:", -1)),
              withDirectives(createBaseVNode("input", {
                type: "number",
                step: "1",
                class: "form-control",
                placeholder: "windX",
                "aria-label": "windX",
                "aria-describedby": "addon-physics-wind-x-label",
                id: "physics-wind-x",
                "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.windX = $event)
              }, null, 512), [
                [vModelText, $data.windX]
              ])
            ]),
            createBaseVNode("div", _hoisted_8$3, [
              _cache[5] || (_cache[5] = createBaseVNode("span", {
                class: "input-group-text",
                id: "addon-physics-wind-y-label",
                "data-bs-toggle": "tooltip",
                title: "A quantidade de força a ser aplicada empurrando vértices não fixados para a baixo (valores positivos) ou para a cima (valores negativos)."
              }, "Coord X:", -1)),
              withDirectives(createBaseVNode("input", {
                type: "number",
                step: "1",
                class: "form-control",
                placeholder: "windY",
                "aria-label": "windY",
                "aria-describedby": "addon-physics-wind-y-label",
                id: "physics-wind-y",
                "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.windY = $event)
              }, null, 512), [
                [vModelText, $data.windY]
              ])
            ])
          ])
        ])
      ])
    ])
  ]);
}
const wind$1 = /* @__PURE__ */ _export_sfc(_sfc_main$p, [["render", _sfc_render$p]]);
const _sfc_main$o = {
  name: "Physics",
  props: [
    "localNetwork",
    "options"
  ],
  components: {
    "solver-parameters": solverParameters,
    "physics-stabilization": stabilization,
    "wind": wind$1
  },
  data() {
    return {
      encapsulateLocalNetwork: null,
      encapsulateOptions: null,
      barnesHutEnabled: false,
      forceAtlas2BasedEnabled: false,
      repulsionEnabled: false,
      hierarchicalRepulsionEnabled: false,
      maxVelocity: 0,
      minVelocity: 0,
      adaptiveTimestep: false,
      timestep: 0,
      solvers: {
        barnesHut: true,
        forceAtlas2Based: false,
        repulsion: false,
        hierarchicalRepulsion: false
      }
    };
  },
  methods: {
    setSolver(solver) {
      this.encapsulateOptions.physics.solver = solver;
      this.$emit("options-has-changed", this.options);
    },
    optionsHasChanged(options) {
      this.encapsulateOptions = options;
      this.$emit("options-has-changed", this.encapsulateOptions);
    },
    clickEnable(field) {
      if (field == "barnesHut") {
        this.barnesHutEnabled = this.barnesHutEnabled ? false : true;
        this.forceAtlas2BasedEnabled = false;
        this.repulsionEnabled = false;
        this.hierarchicalRepulsionEnabled = false;
      } else if (field == "forceAtlas2Based") {
        this.barnesHutEnabled = false;
        this.forceAtlas2BasedEnabled = this.forceAtlas2BasedEnabled ? false : true;
        this.repulsionEnabled = false;
        this.hierarchicalRepulsionEnabled = false;
      } else if (field == "repulsion") {
        this.barnesHutEnabled = false;
        this.forceAtlas2BasedEnabled = false;
        this.repulsionEnabled = this.repulsionEnabled ? false : true;
        this.hierarchicalRepulsionEnabled = false;
      } else if (field == "hierarchicalRepulsion") {
        this.barnesHutEnabled = false;
        this.forceAtlas2BasedEnabled = false;
        this.repulsionEnabled = false;
        this.hierarchicalRepulsionEnabled = this.hierarchicalRepulsionEnabled ? false : true;
      }
    }
  },
  watch: {
    "solvers.barnesHut": function(newSolverBarnesHut, oldSovlersBarnesHut) {
      if (newSolverBarnesHut) {
        this.solvers.forceAtlas2Based = false;
        this.solvers.repulsion = false;
        this.solvers.hierarchicalRepulsion = false;
        this.setSolver("barnesHut");
      }
    },
    "solvers.forceAtlas2Based": function(newSolversForceAtlas2Based, oldSolversForceAtlas2Based) {
      if (newSolversForceAtlas2Based) {
        this.solvers.barnesHut = false;
        this.solvers.repulsion = false;
        this.solvers.hierarchicalRepulsion = false;
        this.setSolver("forceAtlas2Based");
      }
    },
    "solvers.repulsion": function(newSolversRepulsion, oldSolversRepulsion) {
      if (newSolversRepulsion) {
        this.solvers.barnesHut = false;
        this.solvers.forceAtlas2Based = false;
        this.solvers.hierarchicalRepulsion = false;
        this.setSolver("repulsion");
      }
    },
    "solvers.hierarchicalRepulsion": function(newSolversHierarchicalRepulsion, oldSolversHierarchicalRepulsion) {
      if (newSolversHierarchicalRepulsion) {
        this.solvers.barnesHut = false;
        this.solvers.forceAtlas2Based = false;
        this.solvers.repulsion = false;
        this.setSolver("hierarchicalRepulsion");
      }
    },
    maxVelocity: function(newMaxVelocity, oldMaxVelocity) {
      this.encapsulateOptions.physics.maxVelocity = newMaxVelocity;
      this.$emit("options-has-changed", this.encapsulateOptions);
    },
    minVelocity: function(newMinVelocity, oldMinVelocity) {
      this.encapsulateOptions.physics.minVelocity = newMinVelocity;
      this.$emit("options-has-changed", this.encapsulateOptions);
    },
    adaptiveTimestep: function(newAdaptiveTimestep, oldAdaptiveTimestep) {
      this.encapsulateOptions.physics.adaptiveTimestep = newAdaptiveTimestep;
      this.$emit("options-has-changed", this.encapsulateOptions);
    },
    timestep: function(newTimestep, oldTimestep) {
      this.encapsulateOptions.physics.timestep = newTimestep;
      this.$emit("options-has-changed", this.encapsulateOptions);
    }
  },
  mounted() {
    console.log("Physics Component Mounted");
    this.encapsulateOptions = this.options;
    this.encapsulateLocalNetwork = toRaw(this.localNetwork);
    if (this.options.physics.solver == "barnesHut") {
      this.solvers.barnesHut = true;
    } else if (this.options.physics.solver == "forceAtlas2Based") {
      this.solvers.forceAtlas2Based = true;
    } else if (this.options.physics.solver == "repulsion") {
      this.solvers.repulsion = true;
    } else if (this.options.physics.solver == "hierarchicalRepulsion") {
      this.solvers.hierarchicalRepulsion = true;
    }
    this.maxVelocity = this.encapsulateOptions.physics.maxVelocity;
    this.minVelocity = this.encapsulateOptions.physics.minVelocity;
    this.adaptiveTimestep = this.encapsulateOptions.physics.adaptiveTimestep;
    this.timestep = this.encapsulateOptions.physics.timestep;
  },
  emits: [
    "options-has-changed"
  ]
};
const _hoisted_1$i = {
  class: "accordion accordion-flush mt-1",
  id: "accordionFlushExample"
};
const _hoisted_2$c = { class: "accordion-item" };
const _hoisted_3$9 = {
  class: "accordion-header d-flex align-items-center",
  id: "flush-headingOne"
};
const _hoisted_4$6 = { class: "form-check form-switch" };
const _hoisted_5$5 = ["checked", "disabled"];
const _hoisted_6$3 = { class: "accordion-item" };
const _hoisted_7$2 = {
  class: "accordion-header d-flex align-items-center",
  id: "flush-headingTwo"
};
const _hoisted_8$2 = { class: "form-check form-switch" };
const _hoisted_9$2 = ["checked", "disabled"];
const _hoisted_10$1 = { class: "accordion-item" };
const _hoisted_11$1 = {
  class: "accordion-header d-flex align-items-center",
  id: "flush-headingThree"
};
const _hoisted_12$1 = { class: "form-check form-switch" };
const _hoisted_13 = ["checked", "disabled"];
const _hoisted_14 = { class: "accordion-item" };
const _hoisted_15 = {
  class: "accordion-header d-flex align-items-center",
  id: "flush-headingFour"
};
const _hoisted_16 = { class: "form-check form-switch" };
const _hoisted_17 = ["checked", "disabled"];
const _hoisted_18 = { class: "input-group input-group-sm mb-1 mt-1" };
const _hoisted_19 = { class: "input-group input-group-sm mb-1 mt-1" };
const _hoisted_20 = { class: "form-check form-switch" };
const _hoisted_21 = ["checked"];
const _hoisted_22 = { class: "input-group input-group-sm mb-1 mt-1" };
function _sfc_render$o(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_solver_parameters = resolveComponent("solver-parameters");
  const _component_physics_stabilization = resolveComponent("physics-stabilization");
  const _component_wind = resolveComponent("wind");
  return openBlock(), createElementBlock(Fragment, null, [
    _cache[20] || (_cache[20] = createBaseVNode("h5", { class: "mt-1" }, "Resolvedores (Solvers) ", -1)),
    createBaseVNode("div", _hoisted_1$i, [
      createBaseVNode("div", _hoisted_2$c, [
        createBaseVNode("div", _hoisted_3$9, [
          createBaseVNode("div", _hoisted_4$6, [
            withDirectives(createBaseVNode("input", {
              class: "form-check-input",
              type: "checkbox",
              role: "switch",
              id: "switchEnabledBarnesHut",
              checked: this.solvers.barnesHut,
              disabled: this.solvers.barnesHut,
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => this.solvers.barnesHut = $event)
            }, null, 8, _hoisted_5$5), [
              [vModelCheckbox, this.solvers.barnesHut]
            ])
          ]),
          createBaseVNode("button", {
            class: "accordion-button collapsed p-1",
            type: "button",
            "data-bs-toggle": "collapse",
            "data-bs-target": "#flush-collapseOne",
            "aria-expanded": "false",
            "aria-controls": "flush-collapseOne",
            id: "accordionBarnesHut",
            onClick: _cache[1] || (_cache[1] = withModifiers(($event) => this.clickEnable("barnesHut"), ["prevent"]))
          }, _cache[12] || (_cache[12] = [
            createBaseVNode("div", { class: "d-flex w-100 justify-content-between pe-2" }, [
              createBaseVNode("div", null, " BarnesHut "),
              createBaseVNode("div", {
                class: "flex-shrink-1 badge bg-info m-1",
                "data-bs-toggle": "tooltip",
                title: "BarnesHut é um modelo gravitacional baseado em quadtree. \r\n                                Este é o resolvedor mais rápido, padrão e recomendado para layouts não hierárquicos."
              }, [
                createBaseVNode("i", { class: "fa-solid fa-info text-right" })
              ])
            ], -1)
          ]))
        ]),
        createVNode(_component_solver_parameters, {
          ariaControls: "flush-collapseOne",
          ariaLabelledBy: "flush-headingOne",
          options: this.encapsulateOptions,
          localNetwork: this.encapsulateLocalNetwork,
          solver: "barnesHut",
          solverEnabled: this.barnesHutEnabled,
          onOptionsHasChanged: this.optionsHasChanged
        }, null, 8, ["options", "localNetwork", "solverEnabled", "onOptionsHasChanged"])
      ]),
      createBaseVNode("div", _hoisted_6$3, [
        createBaseVNode("div", _hoisted_7$2, [
          createBaseVNode("div", _hoisted_8$2, [
            withDirectives(createBaseVNode("input", {
              class: "form-check-input",
              type: "checkbox",
              role: "switch",
              id: "switchEnabledForceAtlas2Based",
              checked: this.solvers.forceAtlas2Based,
              disabled: this.solvers.forceAtlas2Based,
              "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => this.solvers.forceAtlas2Based = $event)
            }, null, 8, _hoisted_9$2), [
              [vModelCheckbox, this.solvers.forceAtlas2Based]
            ])
          ]),
          createBaseVNode("button", {
            class: "accordion-button collapsed p-1",
            type: "button",
            "data-bs-toggle": "collapse",
            "data-bs-target": "#flush-collapseTwo",
            "aria-expanded": "false",
            "aria-controls": "flush-collapseTwo",
            id: "accordionForceAtlas2Based",
            onClick: _cache[3] || (_cache[3] = withModifiers(($event) => this.clickEnable("forceAtlas2Based"), ["prevent"]))
          }, _cache[13] || (_cache[13] = [
            createBaseVNode("div", { class: "d-flex w-100 justify-content-between pe-2" }, [
              createBaseVNode("div", null, " ForceAtlas2Based "),
              createBaseVNode("div", {
                class: "flex-shrink-1 badge bg-info m-1",
                "data-bs-toggle": "tooltip",
                title: "Force Atlas 2 foi desenvolvido por Jacomi et al (2014) para uso com Gephi. \r\n                                    O resolvedor forceAtlas2Based faz uso de algumas das equações fornecidas por eles e da implementação barnesHut no Vis. \r\n                                    As principais diferenças são o modelo de gravidade central, que aqui é independente da distância, e a repulsão sendo linear em vez de quadrática. \r\n                                    Finalmente, todas as massas dos vértices possuem um multiplicador baseado na quantidade de arestas conectadas mais um."
              }, [
                createBaseVNode("i", { class: "fa-solid fa-info text-right" })
              ])
            ], -1)
          ]))
        ]),
        createVNode(_component_solver_parameters, {
          ariaControls: "flush-collapseTwo",
          ariaLabelledBy: "flush-headingTwo",
          options: this.encapsulateOptions,
          localNetwork: this.encapsulateLocalNetwork,
          solver: "forceAtlas2Based",
          solverEnabled: this.forceAtlas2BasedEnabled,
          onOptionsHasChanged: this.optionsHasChanged
        }, null, 8, ["options", "localNetwork", "solverEnabled", "onOptionsHasChanged"])
      ]),
      createBaseVNode("div", _hoisted_10$1, [
        createBaseVNode("div", _hoisted_11$1, [
          createBaseVNode("div", _hoisted_12$1, [
            withDirectives(createBaseVNode("input", {
              class: "form-check-input",
              type: "checkbox",
              role: "switch",
              id: "switchEnabledRepulsion",
              checked: this.solvers.repulsion,
              "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => this.solvers.repulsion = $event),
              disabled: this.solvers.repulsion
            }, null, 8, _hoisted_13), [
              [vModelCheckbox, this.solvers.repulsion]
            ])
          ]),
          createBaseVNode("button", {
            class: "accordion-button collapsed p-1",
            type: "button",
            "data-bs-toggle": "collapse",
            "data-bs-target": "#flush-collapseThree",
            "aria-expanded": "false",
            "aria-controls": "flush-collapseThree",
            id: "accordionRepulsion",
            onClick: _cache[5] || (_cache[5] = withModifiers(($event) => this.clickEnable("repulsion"), ["prevent"]))
          }, _cache[14] || (_cache[14] = [
            createBaseVNode("div", { class: "d-flex w-100 justify-content-between pe-2" }, [
              createBaseVNode("div", null, " Repulsion "),
              createBaseVNode("div", {
                class: "flex-shrink-1 badge bg-info m-1",
                "data-bs-toggle": "tooltip",
                title: "O modelo de repulsão assume que os vértices possuem um campo de repulsão simplificado ao seu redor. \r\n                                    Sua força diminui linearmente de 1 (em 0,5 * distancia_vertice e menores) a 0 (em 2 * distancia_vertice)."
              }, [
                createBaseVNode("i", { class: "fa-solid fa-info text-right" })
              ])
            ], -1)
          ]))
        ]),
        createVNode(_component_solver_parameters, {
          ariaControls: "flush-collapseThree",
          ariaLabelledBy: "flush-headingThree",
          options: this.encapsulateOptions,
          localNetwork: this.encapsulateLocalNetwork,
          solver: "repulsion",
          solverEnabled: this.repulsionEnabled,
          onOptionsHasChanged: this.optionsHasChanged
        }, null, 8, ["options", "localNetwork", "solverEnabled", "onOptionsHasChanged"])
      ]),
      createBaseVNode("div", _hoisted_14, [
        createBaseVNode("div", _hoisted_15, [
          createBaseVNode("div", _hoisted_16, [
            withDirectives(createBaseVNode("input", {
              class: "form-check-input",
              type: "checkbox",
              role: "switch",
              id: "switchEnabledHierarchicalRepulsion",
              checked: this.solvers.hierarchicalRepulsion,
              disabled: this.solvers.hierarchicalRepulsion,
              "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => this.solvers.hierarchicalRepulsion = $event)
            }, null, 8, _hoisted_17), [
              [vModelCheckbox, this.solvers.hierarchicalRepulsion]
            ])
          ]),
          createBaseVNode("button", {
            class: "accordion-button collapsed p-1",
            type: "button",
            "data-bs-toggle": "collapse",
            "data-bs-target": "#flush-collapseFour",
            "aria-expanded": "false",
            "aria-controls": "flush-collapseFour",
            id: "accordionHierarchicalRepulsion",
            onClick: _cache[7] || (_cache[7] = withModifiers(($event) => this.clickEnable("hierarchicalRepulsion"), ["prevent"]))
          }, _cache[15] || (_cache[15] = [
            createBaseVNode("div", { class: "d-flex w-100 justify-content-between pe-2" }, [
              createBaseVNode("div", null, " HierarchicalRepulsion "),
              createBaseVNode("div", {
                class: "flex-shrink-1 badge bg-info m-1",
                "data-bs-toggle": "tooltip",
                title: "Este modelo é baseado no solucionador de repulsão, mas os níveis são levados em consideração e as forças são normalizadas."
              }, [
                createBaseVNode("i", { class: "fa-solid fa-info text-right" })
              ])
            ], -1)
          ]))
        ]),
        createVNode(_component_solver_parameters, {
          ariaControls: "flush-collapseFour",
          ariaLabelledBy: "flush-headingFour",
          options: this.encapsulateOptions,
          localNetwork: this.encapsulateLocalNetwork,
          solver: "hierarchicalRepulsion",
          solverEnabled: this.hierarchicalRepulsionEnabled,
          onOptionsHasChanged: this.optionsHasChanged
        }, null, 8, ["options", "localNetwork", "solverEnabled", "onOptionsHasChanged"])
      ])
    ]),
    createBaseVNode("div", _hoisted_18, [
      _cache[16] || (_cache[16] = createBaseVNode("span", {
        class: "input-group-text",
        id: "addon-maxVelocity-label",
        "data-bs-toggle": "tooltip",
        title: "O módulo de física limita a velocidade máxima dos vértices para aumentar o tempo de estabilização. Este é o valor máximo."
      }, "Velocidade Máx. (Max. V.):", -1)),
      withDirectives(createBaseVNode("input", {
        type: "number",
        min: "0",
        step: "1",
        class: "form-control",
        placeholder: "maxVelocity",
        "aria-label": "maxVelocity",
        "aria-describedby": "addon-maxVelocity-label",
        id: "physics-maxVelocity",
        "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => this.maxVelocity = $event)
      }, null, 512), [
        [vModelText, this.maxVelocity]
      ])
    ]),
    createBaseVNode("div", _hoisted_19, [
      _cache[17] || (_cache[17] = createBaseVNode("span", {
        class: "input-group-text",
        id: "addon-minVelocity-label",
        "data-bs-toggle": "tooltip",
        title: "Uma vez atingida a velocidade mínima para todos os vérticies, assumimos que a rede foi estabilizada e a simulação para."
      }, "Velocidade Mín. (Min. V.):", -1)),
      withDirectives(createBaseVNode("input", {
        type: "number",
        min: "0",
        step: "1",
        class: "form-control",
        placeholder: "minVelocity",
        "aria-label": "minVelocity",
        "aria-describedby": "addon-minVelocity-label",
        id: "physics-minVelocity",
        "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => this.minVelocity = $event)
      }, null, 512), [
        [vModelText, this.minVelocity]
      ])
    ]),
    createBaseVNode("div", _hoisted_20, [
      withDirectives(createBaseVNode("input", {
        class: "form-check-input",
        type: "checkbox",
        role: "switch",
        id: "switchPhysicsAdaptativoTimestep",
        checked: this.adaptiveTimestep,
        "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => this.adaptiveTimestep = $event)
      }, null, 8, _hoisted_21), [
        [vModelCheckbox, this.adaptiveTimestep]
      ]),
      _cache[18] || (_cache[18] = createBaseVNode("label", {
        class: "form-check-label",
        for: "switchPhysicsAdaptativoTimestep",
        "data-bs-toggle": "tooltip",
        title: "Se estiver habilitado, o timestep será adaptado de forma inteligente (somente durante o estágio de estabilização se a estabilização estiver habilitada!) para diminuir bastante os tempos de estabilização. \r\n                O timestep configurado acima é considerado o timestep mínimo. \r\n                Isso pode ser melhorado ainda mais usando o algoritmo ImprovedLayout."
      }, "Passo de tempo adaptativo (Adaptive Timestep)", -1))
    ]),
    createBaseVNode("div", _hoisted_22, [
      _cache[19] || (_cache[19] = createBaseVNode("span", {
        class: "input-group-text",
        id: "addon-timestep-label",
        "data-bs-toggle": "tooltip",
        title: "A simulação física é discreta. \r\n                    Isso significa que damos um passo no tempo, calculamos as forças, movemos os vértices e damos outro passo. \r\n                    Se você aumentar esse número, as etapas serão muito grandes e a rede poderá ficar instável. \r\n                    Se você observar muitos movimentos nervosos na rede, poderá reduzir um pouco esse valor."
      }, "Passo do tempo (Timestep):", -1)),
      withDirectives(createBaseVNode("input", {
        type: "number",
        min: "0",
        step: "0.5",
        class: "form-control",
        placeholder: "timestep",
        "aria-label": "timestep",
        "aria-describedby": "addon-timestep-label",
        id: "physics-timestep",
        "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => $data.timestep = $event)
      }, null, 512), [
        [vModelText, $data.timestep]
      ])
    ]),
    createVNode(_component_physics_stabilization, {
      options: this.encapsulateOptions,
      localNetwork: this.encapsulateLocalNetwork
    }, null, 8, ["options", "localNetwork"]),
    createVNode(_component_wind, {
      options: this.encapsulateOptions,
      localNetwork: this.encapsulateLocalNetwork
    }, null, 8, ["options", "localNetwork"])
  ], 64);
}
const physics$1 = /* @__PURE__ */ _export_sfc(_sfc_main$o, [["render", _sfc_render$o]]);
const _sfc_main$n = {
  name: "Switch Button Component",
  props: [
    "switchId",
    "switchDisabled",
    "switchInitialValue",
    "switchTooltipEnabled",
    "switchTooltip",
    "switchLabelEnabled",
    "switchLabelValue"
  ],
  data() {
    return {
      checkboxValue: false
    };
  },
  mounted() {
    this.checkboxValue = this.switchInitialValue;
  },
  watch: {
    checkboxValue: function(newCheckBoxValue, oldCheckBoxValue) {
      this.$emit("checkbox-status-changed", newCheckBoxValue);
    }
  },
  emits: ["checkbox-status-changed"]
};
const _hoisted_1$h = ["data-bs-toggle", "title"];
const _hoisted_2$b = ["id", "checked", "disabled"];
const _hoisted_3$8 = ["for"];
function _sfc_render$n(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    class: "form-check form-switch mt-1",
    "data-bs-toggle": this.switchTooltipEnabled ? "tooltip" : "",
    title: this.switchTooltip
  }, [
    withDirectives(createBaseVNode("input", {
      class: "form-check-input",
      type: "checkbox",
      id: this.switchId,
      checked: this.checkboxValue,
      "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => this.checkboxValue = $event),
      disabled: this.switchDisabled
    }, null, 8, _hoisted_2$b), [
      [vModelCheckbox, this.checkboxValue]
    ]),
    $props.switchLabelEnabled ? (openBlock(), createElementBlock("label", {
      key: 0,
      class: "form-check-label",
      for: this.switchId
    }, toDisplayString(this.switchLabelValue), 9, _hoisted_3$8)) : createCommentVNode("", true)
  ], 8, _hoisted_1$h);
}
const SwitchButton = /* @__PURE__ */ _export_sfc(_sfc_main$n, [["render", _sfc_render$n]]);
const _sfc_main$m = {
  name: "Switch Button With Info",
  props: [
    "switchId",
    "switchDisabled",
    "switchInitialValue",
    "switchTooltipEnabled",
    "switchTooltip",
    "switchLabelEnabled",
    "switchLabelValue"
  ],
  components: {
    "switch-button": SwitchButton
  },
  methods: {
    checkBoxStatusChanged: function(value2) {
      this.$emit("checkbox-status-changed", value2);
    }
  },
  emits: ["checkbox-status-changed"]
};
const _hoisted_1$g = { class: "d-flex justify-content-between" };
const _hoisted_2$a = ["title"];
function _sfc_render$m(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_switch_button = resolveComponent("switch-button");
  return openBlock(), createElementBlock("div", _hoisted_1$g, [
    createVNode(_component_switch_button, {
      switchId: this.switchId,
      switchDisabled: this.switchDisabled,
      switchInitialValue: this.switchInitialValue,
      switchTooltipEnabled: this.switchTooltipEnabled,
      switchTooltip: this.switchTooltip,
      switchLabelEnabled: this.switchLabelEnabled,
      switchLabelValue: this.switchLabelValue,
      onCheckboxStatusChanged: $options.checkBoxStatusChanged,
      class: "flex-fill"
    }, null, 8, ["switchId", "switchDisabled", "switchInitialValue", "switchTooltipEnabled", "switchTooltip", "switchLabelEnabled", "switchLabelValue", "onCheckboxStatusChanged"]),
    createBaseVNode("div", null, [
      createBaseVNode("div", {
        class: "flex-shrink-1 badge bg-info m-1",
        "data-bs-toggle": "tooltip",
        title: this.switchTooltip
      }, _cache[0] || (_cache[0] = [
        createBaseVNode("i", { class: "fa-solid fa-info text-right" }, null, -1)
      ]), 8, _hoisted_2$a)
    ])
  ]);
}
const SwitchWithInfo = /* @__PURE__ */ _export_sfc(_sfc_main$m, [["render", _sfc_render$m]]);
const _sfc_main$l = {
  name: "Label tooltip",
  props: [
    "labelValue",
    "tooltip",
    "forId",
    "hasSwitch",
    "switchId",
    "switchTooltip",
    "switchDisabled",
    "switchInitialValue",
    "switchLabelEnabled",
    "switchLabelValue",
    "switchTooltipEnabled"
  ],
  components: {
    "switch-button": SwitchButton
  },
  methods: {
    checkboxStatusChanged: function(value2) {
      this.$emit("checkbox-status-changed", value2);
    }
  },
  emits: ["checkbox-status-changed"]
};
const _hoisted_1$f = { class: "d-flex justify-content-between mt-1 mb-1" };
const _hoisted_2$9 = { class: "d-flex justify-content-between flex-fill" };
const _hoisted_3$7 = { class: "d-flex w-100 justify-content-between" };
const _hoisted_4$5 = ["title"];
const _hoisted_5$4 = ["for"];
const _hoisted_6$2 = ["title"];
function _sfc_render$l(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_switch_button = resolveComponent("switch-button");
  return openBlock(), createElementBlock("div", _hoisted_1$f, [
    this.hasSwitch ? (openBlock(), createBlock(_component_switch_button, {
      key: 0,
      switchId: this.switchId,
      switchDisabled: this.switchDisabled,
      switchInitialValue: this.switchInitialValue,
      switchTooltipEnabled: this.switchTooltipEnabled || false,
      switchTooltip: this.switchTooltip,
      switchLabelEnabled: this.switchLabelEnabled,
      switchLabelValue: this.switchLabelValue,
      onCheckboxStatusChanged: $options.checkboxStatusChanged
    }, null, 8, ["switchId", "switchDisabled", "switchInitialValue", "switchTooltipEnabled", "switchTooltip", "switchLabelEnabled", "switchLabelValue", "onCheckboxStatusChanged"])) : createCommentVNode("", true),
    createBaseVNode("div", _hoisted_2$9, [
      createBaseVNode("div", _hoisted_3$7, [
        createBaseVNode("div", {
          "data-bs-toggle": "tooltip",
          title: this.tooltip
        }, [
          createBaseVNode("label", {
            for: $props.forId,
            class: "form-label h-100 mb-0 pt-1 align-middle"
          }, toDisplayString(this.labelValue), 9, _hoisted_5$4)
        ], 8, _hoisted_4$5),
        createBaseVNode("div", {
          class: "flex-shrink-1 badge bg-info m-1",
          "data-bs-toggle": "tooltip",
          title: this.tooltip
        }, _cache[0] || (_cache[0] = [
          createBaseVNode("i", { class: "fa-solid fa-info text-right" }, null, -1)
        ]), 8, _hoisted_6$2)
      ])
    ])
  ]);
}
const LabelWithTooltip = /* @__PURE__ */ _export_sfc(_sfc_main$l, [["render", _sfc_render$l]]);
const _sfc_main$k = {
  name: "Color Picker Component",
  props: [
    "colorPickerId",
    "colorPickerDefaultColor",
    "tooltip",
    "disabled"
  ],
  data() {
    return {
      color: ""
    };
  },
  watch: {
    color: function(newValue, oldValue) {
      this.$emit("update-color", newValue);
    }
  },
  mounted() {
    this.color = this.colorPickerDefaultColor;
  },
  emits: ["update-color"]
};
const _hoisted_1$e = ["id", "title", "disabled"];
function _sfc_render$k(_ctx, _cache, $props, $setup, $data, $options) {
  return withDirectives((openBlock(), createElementBlock("input", {
    type: "color",
    class: "form-control form-control-color w-100 mb-1",
    id: this.colorPickerId,
    "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => this.color = $event),
    title: this.tooltip,
    disabled: this.disabled || false
  }, null, 8, _hoisted_1$e)), [
    [vModelText, this.color]
  ]);
}
const InputColorPicker = /* @__PURE__ */ _export_sfc(_sfc_main$k, [["render", _sfc_render$k]]);
const _sfc_main$j = {
  name: "Chosen Node Options",
  props: ["checkboxValue"],
  data() {
    return {
      enableObject: false,
      booleanValue: true,
      booleanDisabled: false
    };
  },
  components: {
    "switch-info": SwitchWithInfo,
    "label-tooltip": LabelWithTooltip,
    "input-color": InputColorPicker
  },
  methods: {
    configureBooleanSending: function(value2) {
      this.booleanValue = value2;
      this.emitMessage("update-chosen-node", value2);
    },
    avaliateObjectSend: function(value2) {
      if (value2 == true) {
        this.enableObject = true;
        this.booleanDisabled = true;
      } else {
        this.enableObject = false;
        this.booleanDisabled = false;
      }
    },
    updateChosenNodeBackgroundColor: function(value2) {
      this.emitMessage("update-chosen-node-background-color", value2);
    },
    emitMessage: function(message2, value2) {
      this.$emit("message", message2, value2);
    }
  },
  emits: ["message"]
};
const _hoisted_1$d = {
  key: 0,
  class: "border ms-1 me-1 pe-1 ps-1"
};
function _sfc_render$j(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_switch_info = resolveComponent("switch-info");
  const _component_label_tooltip = resolveComponent("label-tooltip");
  const _component_input_color = resolveComponent("input-color");
  return openBlock(), createElementBlock(Fragment, null, [
    createVNode(_component_switch_info, {
      switchId: "send-boolean-switch",
      switchTooltipEnabled: true,
      switchTooltip: "Toggle this to send true of false. Alterne esse marcador para enviar verdadeiro ou falso.",
      switchDisabled: this.booleanDisabled,
      switchInitialValue: true,
      switchLabelEnabled: true,
      switchLabelValue: !$data.enableObject ? "Enviando booleano " + ($data.booleanValue ? "verdadeiro." : "falso.") : "Não está enviando booleano.",
      onCheckboxStatusChanged: $options.configureBooleanSending
    }, null, 8, ["switchDisabled", "switchLabelValue", "onCheckboxStatusChanged"]),
    createVNode(_component_switch_info, {
      switchId: "send-object-switch",
      switchTooltipEnabled: true,
      switchTooltip: "Send Object instead of boolean. Ativa o envio de objeto ao invés do envio do boolean verdadeiro ou falso.",
      switchDisabled: false,
      switchInitialValue: false,
      switchLabelEnabled: true,
      switchLabelValue: "Ativar envio de objeto",
      onCheckboxStatusChanged: $options.avaliateObjectSend
    }, null, 8, ["onCheckboxStatusChanged"]),
    this.enableObject ? (openBlock(), createElementBlock("div", _hoisted_1$d, [
      createVNode(_component_label_tooltip, {
        labelValue: "Cor de fundo",
        tooltip: "Options.Nodes.Chosen.node.color - Configure a cor de background dos vértices selecionados.",
        forId: "background-color-pick",
        hasSwitch: false,
        switchId: "",
        switchTooltip: "",
        switchDisabled: false,
        switchInitialValue: false,
        switchLabelEnabled: false,
        switchLabelValue: ""
      }),
      createVNode(_component_input_color, {
        colorPickerId: "background-color-pick",
        colorPickerDefaultColor: "#97C2FC",
        tooltip: "Options.Nodes.Chosen.node.color - Configure a cor de background dos vértices selecionados.",
        onUpdateColor: $options.updateChosenNodeBackgroundColor
      }, null, 8, ["onUpdateColor"])
    ])) : createCommentVNode("", true)
  ], 64);
}
const ChosenNodeAccordion = /* @__PURE__ */ _export_sfc(_sfc_main$j, [["render", _sfc_render$j]]);
const _sfc_main$i = {
  name: "Nodes Color Component",
  props: ["checkboxValue"],
  methods: {
    updateBorderColor: function(value2) {
      this.$emit("message", "update-node-color-border", value2);
    },
    updateBackgroundColor: function(value2) {
      this.$emit("message", "update-node-color-background", value2);
    },
    updateHighlightBorderColor: function(value2) {
      this.$emit("message", "update-node-highlight-border-color", value2);
    },
    updateHighlightBackgroundColor: function(value2) {
      this.$emit("message", "update-node-highlight-background-color", value2);
    },
    updateHoverBorderColor: function(value2) {
      this.$emit("message", "update-node-hover-border-color", value2);
    },
    updateHoverBackgroundColor: function(value2) {
      this.$emit("message", "update-node-hover-background-color", value2);
    }
  },
  components: {
    "label-tooltip": LabelWithTooltip,
    "input-color": InputColorPicker
  },
  emits: ["message"]
};
function _sfc_render$i(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_label_tooltip = resolveComponent("label-tooltip");
  const _component_input_color = resolveComponent("input-color");
  return openBlock(), createElementBlock(Fragment, null, [
    createVNode(_component_label_tooltip, {
      labelValue: "Cor da borda",
      tooltip: "Options.Nodes.Color.Border - Configure a cor da borda dos vértices quando não estiver selecionado ou pairado sobre.",
      forId: "border-color-pick",
      hasSwitch: false,
      switchId: "",
      switchTooltip: "",
      switchDisabled: false,
      switchInitialValue: false,
      switchLabelEnabled: false,
      switchLabelValue: ""
    }),
    createVNode(_component_input_color, {
      colorPickerId: "border-color-pick",
      colorPickerDefaultColor: "#2B7CE9",
      tooltip: "Options.Nodes.Color.Border - Configure a cor da borda dos vértices quando não estiver selecionado ou pairado sobre.",
      onUpdateColor: $options.updateBorderColor
    }, null, 8, ["onUpdateColor"]),
    createVNode(_component_label_tooltip, {
      labelValue: "Cor de fundo",
      tooltip: "Options.Nodes.Color.Background - Configure a cor de background dos vértices quando não estiver selecionado ou pairado sobre.",
      forId: "background-color-pick",
      hasSwitch: false,
      switchId: "",
      switchTooltip: "",
      switchDisabled: false,
      switchInitialValue: false,
      switchLabelEnabled: false,
      switchLabelValue: ""
    }),
    createVNode(_component_input_color, {
      colorPickerId: "background-color-pick",
      colorPickerDefaultColor: "#97C2FC",
      tooltip: "Options.Nodes.Color.Background - Configure a cor de background dos vértices quando não estiver selecionado ou pairado sobre.",
      onUpdateColor: $options.updateBackgroundColor
    }, null, 8, ["onUpdateColor"]),
    createVNode(_component_label_tooltip, {
      labelValue: "Cor da borda do vértice selecionado",
      tooltip: "Options.Nodes.Color.Highlight.Border - Configure a cor da borda dos vértices quando o vértice estiver selecionado.",
      forId: "border-highlight-color-pick",
      hasSwitch: false,
      switchId: "",
      switchTooltip: "",
      switchDisabled: false,
      switchInitialValue: false,
      switchLabelEnabled: false,
      switchLabelValue: ""
    }),
    createVNode(_component_input_color, {
      colorPickerId: "border-highlight-color-pick",
      colorPickerDefaultColor: "#2B7CE9",
      tooltip: "Options.Nodes.Color.Highlight.Border - Configure a cor da borda dos vértices quando o vértice estiver selecionado.",
      onUpdateColor: $options.updateHighlightBorderColor
    }, null, 8, ["onUpdateColor"]),
    createVNode(_component_label_tooltip, {
      labelValue: "Cor de fundo do vértice selecionado",
      tooltip: "Options.Nodes.Color.Highlight.Background - Configure a cor de background dos vértices quando o vértice estiver selecionado.",
      forId: "background-highlight-color-pick",
      hasSwitch: false,
      switchId: "",
      switchTooltip: "",
      switchDisabled: false,
      switchInitialValue: false,
      switchLabelEnabled: false,
      switchLabelValue: ""
    }),
    createVNode(_component_input_color, {
      colorPickerId: "background-highlight-color-pick",
      colorPickerDefaultColor: "#D2E5FF",
      tooltip: "Options.Nodes.Color.Highlight.Background - Configure a cor de background dos vértices quando o vértice estiver selecionado.",
      onUpdateColor: $options.updateHighlightBackgroundColor
    }, null, 8, ["onUpdateColor"]),
    createVNode(_component_label_tooltip, {
      labelValue: "Cor da borda do vértice pairado",
      tooltip: "Options.Nodes.Color.Hover.Border - Configure a cor da borda dos vértices quando o vértice estiver sendo pairado.",
      forId: "border-hover-color-pick",
      hasSwitch: false,
      switchId: "",
      switchTooltip: "",
      switchDisabled: false,
      switchInitialValue: false,
      switchLabelEnabled: false,
      switchLabelValue: ""
    }),
    createVNode(_component_input_color, {
      colorPickerId: "border-hover-color-pick",
      colorPickerDefaultColor: "#2B7CE9",
      tooltip: "Options.Nodes.Color.Hover.Border - Configure a cor da borda dos vértices quando o vértice estiver sendo pairado.",
      onUpdateColor: $options.updateHoverBorderColor
    }, null, 8, ["onUpdateColor"]),
    createVNode(_component_label_tooltip, {
      labelValue: "Cor de fundo do vértice pairado",
      tooltip: "Options.Nodes.Color.Hover.Background - Configure a cor de background dos vértices quando o vértice estiver pairado sobre.",
      forId: "background-hover-color-pick",
      hasSwitch: false,
      switchId: "",
      switchTooltip: "",
      switchDisabled: false,
      switchInitialValue: false,
      switchLabelEnabled: false,
      switchLabelValue: ""
    }),
    createVNode(_component_input_color, {
      colorPickerId: "background-hover-color-pick",
      colorPickerDefaultColor: "#D2E5FF",
      tooltip: "Options.Nodes.Color.Hover.Background - Configure a cor de background dos vértices quando o vértice estiver pairado sobre.",
      onUpdateColor: $options.updateHoverBackgroundColor
    }, null, 8, ["onUpdateColor"])
  ], 64);
}
const ColorNodeAccordion = /* @__PURE__ */ _export_sfc(_sfc_main$i, [["render", _sfc_render$i]]);
const _sfc_main$h = {
  name: "Fixed Node Accordion Component",
  props: ["checkboxValue"],
  data() {
    return {
      enableObjectChekcboxValue: false
    };
  },
  components: {
    "switch-info": SwitchWithInfo
  },
  methods: {
    enableObjectSending: function(value2) {
      this.enableObjectChekcboxValue = value2;
      this.$emit("message", "enable-fixed-node-object-sending", value2);
    },
    fixXCoordinate: function(value2) {
      this.$emit("message", "fix-nodes-x-coordinate", value2);
    },
    fixYCoordinate: function(value2) {
      this.$emit("message", "fix-nodes-y-coordinate", value2);
    }
  },
  emits: ["message"]
};
function _sfc_render$h(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_switch_info = resolveComponent("switch-info");
  return openBlock(), createElementBlock(Fragment, null, [
    createVNode(_component_switch_info, {
      switchId: "enable-fixed-objects",
      switchDisabled: false,
      switchInitialValue: this.enableObjectChekcboxValue,
      switchTooltipEnabled: true,
      switchTooltip: "Enable Fixed Object Sending. Ativa o envio do objeto Fixed.",
      switchLabelEnabled: true,
      switchLabelValue: "Ativar envio de objeto",
      onCheckboxStatusChanged: $options.enableObjectSending
    }, null, 8, ["switchInitialValue", "onCheckboxStatusChanged"]),
    this.enableObjectChekcboxValue ? (openBlock(), createBlock(_component_switch_info, {
      key: 0,
      switchId: "enable-fixed-objects-x",
      switchDisabled: false,
      switchInitialValue: false,
      switchTooltipEnabled: true,
      switchTooltip: "Enable Fixed Object Sending at X Coordinate. Ativa o envio do objeto Fixed na coordenada X.",
      switchLabelEnabled: true,
      switchLabelValue: "Fixar X",
      onCheckboxStatusChanged: $options.fixXCoordinate
    }, null, 8, ["onCheckboxStatusChanged"])) : createCommentVNode("", true),
    this.enableObjectChekcboxValue ? (openBlock(), createBlock(_component_switch_info, {
      key: 1,
      switchId: "enable-fixed-objects-y",
      switchDisabled: false,
      switchInitialValue: false,
      switchTooltipEnabled: true,
      switchTooltip: "Enable Fixed Object Sending at Y Coordinate. Ativa o envio do objeto Fixed.",
      switchLabelEnabled: true,
      switchLabelValue: "Fixar Y",
      onCheckboxStatusChanged: $options.fixYCoordinate
    }, null, 8, ["onCheckboxStatusChanged"])) : createCommentVNode("", true)
  ], 64);
}
const FixedNodeAccordion = /* @__PURE__ */ _export_sfc(_sfc_main$h, [["render", _sfc_render$h]]);
const _sfc_main$g = {
  name: "Range Component",
  props: [
    "inputId",
    "isLabelEnabled",
    "min",
    "max",
    "step",
    "initialValue",
    "labelValue",
    "tooltip",
    "disabled",
    "labelHasSwitch",
    "labelSwitchId",
    "labelSwitchDisabled",
    "labelSwitchInitialValue",
    "labelSwitchTooltipEnabled"
  ],
  data() {
    return {
      objectValue: 0
    };
  },
  watch: {
    objectValue: function(newValue, oldValue) {
      this.$emit("update-value-from-range-input", newValue);
    },
    initialValue: function(newValue, oldValue) {
      this.objectValue = "" + newValue;
    }
  },
  components: {
    "tooltip-label": LabelWithTooltip
  },
  mounted() {
    this.objectValue = this.initialValue;
  },
  methods: {
    onCheckboxStatusChanged: function(value2) {
      this.$emit("checkbox-status-changed", value2);
    }
  },
  emits: ["update-value-from-range-input", "checkbox-status-changed"]
};
const _hoisted_1$c = { class: "d-flex" };
const _hoisted_2$8 = ["value", "id"];
const _hoisted_3$6 = ["min", "max", "step", "id", "disabled"];
function _sfc_render$g(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_tooltip_label = resolveComponent("tooltip-label");
  return openBlock(), createElementBlock(Fragment, null, [
    this.isLabelEnabled ? (openBlock(), createBlock(_component_tooltip_label, {
      key: 0,
      labelValue: this.labelValue,
      tooltip: this.tooltip,
      forId: this.inputId,
      hasSwitch: this.labelHasSwitch || false,
      switchId: this.labelSwitchId || "",
      switchTooltip: this.tooltip || "",
      switchDisabled: this.labelSwitchDisabled || false,
      switchInitialValue: this.labelSwitchInitialValue || false,
      switchLabelEnabled: false,
      switchLabelValue: "",
      switchTooltipEnabled: this.labelSwitchTooltipEnabled || false,
      onCheckboxStatusChanged: $options.onCheckboxStatusChanged
    }, null, 8, ["labelValue", "tooltip", "forId", "hasSwitch", "switchId", "switchTooltip", "switchDisabled", "switchInitialValue", "switchTooltipEnabled", "onCheckboxStatusChanged"])) : createCommentVNode("", true),
    createBaseVNode("div", _hoisted_1$c, [
      createBaseVNode("input", {
        type: "text",
        class: "form-control w-25 h-75 text-center form-control-sm p-0",
        value: this.objectValue,
        id: $props.inputId + "-textfield",
        disabled: ""
      }, null, 8, _hoisted_2$8),
      withDirectives(createBaseVNode("input", {
        type: "range",
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => this.objectValue = $event),
        class: "form-range d-flex-fill m-2 h-75",
        min: $props.min,
        max: $props.max,
        step: $props.step,
        id: $props.inputId,
        disabled: $props.disabled || false
      }, null, 8, _hoisted_3$6), [
        [vModelText, this.objectValue]
      ])
    ])
  ], 64);
}
const InputRange = /* @__PURE__ */ _export_sfc(_sfc_main$g, [["render", _sfc_render$g]]);
const _sfc_main$f = {
  name: "Select Component",
  data() {
    return {
      selected: null,
      optionsGroups: []
    };
  },
  props: [
    "selectId",
    "options",
    "disabled"
  ],
  mounted() {
    this.selected = this.options.find((element) => element.selected == true).value;
    if (Object.hasOwn(this.options[0], "group")) {
      this.optionsGroups = Object.entries(
        this.options.reduce((acc, { value: value2, label, selected, group }) => {
          if (!acc[group]) {
            acc[group] = [];
          }
          acc[group].push({ value: value2, label, selected });
          return acc;
        }, {})
      ).map(([label, options]) => ({ label, options }));
    }
  },
  watch: {
    selected: function(newValue, oldValue) {
      this.$emit("update-selection", newValue);
    }
  },
  emits: ["update-selection"]
};
const _hoisted_1$b = ["id", "disabled"];
const _hoisted_2$7 = ["value", "selected"];
const _hoisted_3$5 = ["id", "disabled"];
const _hoisted_4$4 = ["label"];
const _hoisted_5$3 = ["value"];
function _sfc_render$f(_ctx, _cache, $props, $setup, $data, $options) {
  return !$props.options[0].group ? withDirectives((openBlock(), createElementBlock("select", {
    key: 0,
    class: "form-select",
    "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => this.selected = $event),
    id: this.selectId,
    disabled: this.disabled || false
  }, [
    (openBlock(true), createElementBlock(Fragment, null, renderList($props.options, (item, i2) => {
      return openBlock(), createElementBlock("option", {
        key: i2,
        value: item.value,
        selected: item.selected
      }, toDisplayString(item.label), 9, _hoisted_2$7);
    }), 128))
  ], 8, _hoisted_1$b)), [
    [vModelSelect, this.selected]
  ]) : withDirectives((openBlock(), createElementBlock("select", {
    key: 1,
    class: "form-select",
    "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => this.selected = $event),
    id: this.selectId,
    disabled: this.disabled || false
  }, [
    (openBlock(true), createElementBlock(Fragment, null, renderList($data.optionsGroups, (group, j2) => {
      return openBlock(), createElementBlock("optgroup", {
        key: j2,
        label: group.label
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(group.options, (item, i2) => {
          return openBlock(), createElementBlock("option", {
            key: i2,
            value: item.value
          }, toDisplayString(item.label), 9, _hoisted_5$3);
        }), 128))
      ], 8, _hoisted_4$4);
    }), 128))
  ], 8, _hoisted_3$5)), [
    [vModelSelect, this.selected]
  ]);
}
const InputSelect = /* @__PURE__ */ _export_sfc(_sfc_main$f, [["render", _sfc_render$f]]);
const _sfc_main$e = {
  name: "Input Text Component",
  data() {
    return {
      checkboxValue: false,
      inputValue: ""
    };
  },
  props: [
    "inputId",
    "inputEnabled",
    "inputInitialValue",
    "inputPlaceholder",
    "isLabelEnabled",
    "labelValue",
    "tooltip",
    "hasSwitch",
    "switchId",
    "switchTooltip",
    "switchDisabled",
    "switchInitialValue",
    "switchLabelEnabled",
    "switchLabelValue"
  ],
  components: {
    LabelWithTooltip
  },
  methods: {
    checkboxStatusChanged: function(oldCBValue, newCBValue) {
      this.$emit("checkbox-value-change", oldCBValue);
    }
  },
  watch: {
    inputValue: function(newValue, oldValue) {
      this.$emit("input-value-change", newValue);
    }
  },
  mounted() {
    this.checkboxValue = this.switchInitialValue;
    this.inputValue = this.inputInitialValue;
  },
  emits: ["checkbox-value-change", "input-value-change"]
};
const _hoisted_1$a = ["enabled", "id"];
function _sfc_render$e(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_LabelWithTooltip = resolveComponent("LabelWithTooltip");
  return openBlock(), createElementBlock(Fragment, null, [
    this.isLabelEnabled ? (openBlock(), createBlock(_component_LabelWithTooltip, {
      key: 0,
      labelValue: this.labelValue,
      tooltip: this.tooltip,
      forId: this.inputId,
      hasSwitch: this.hasSwitch,
      switchId: this.switchId,
      switchTooltip: this.switchTooltip,
      switchDisabled: this.switchDisabled,
      switchInitialValue: this.checkboxValue,
      switchLabelEnabled: this.switchLabelEnabled,
      switchLabelValue: this.switchLabelValue,
      onCheckboxStatusChanged: $options.checkboxStatusChanged
    }, null, 8, ["labelValue", "tooltip", "forId", "hasSwitch", "switchId", "switchTooltip", "switchDisabled", "switchInitialValue", "switchLabelEnabled", "switchLabelValue", "onCheckboxStatusChanged"])) : createCommentVNode("", true),
    withDirectives(createBaseVNode("input", {
      type: "text",
      class: "form-control",
      enabled: this.inputEnabled,
      id: this.inputId,
      "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => this.inputValue = $event)
    }, null, 8, _hoisted_1$a), [
      [vModelText, this.inputValue]
    ])
  ], 64);
}
const InputText = /* @__PURE__ */ _export_sfc(_sfc_main$e, [["render", _sfc_render$e]]);
const _sfc_main$d = {
  props: [
    "checkboxValue"
  ],
  data() {
    return {
      objectEnabled: true,
      fontColor: "#000000",
      fontFace: "arial",
      size: "14",
      fontBackgroundColor: void 0,
      fontBackgroundEnabled: false,
      strokeWidthValue: 0,
      strokeColor: "#ffffff",
      stringFont: "15px arial black"
    };
  },
  components: {
    "color-picker": InputColorPicker,
    "label-tooltip": LabelWithTooltip,
    InputRange,
    InputSelect,
    SwitchWithInfo,
    InputText
  },
  methods: {
    changeOptionsEnabledToggled: function(value2) {
      this.objectEnabled = value2;
      this.$emit("message", "node-font-object-enabled", value2);
    },
    nodesFontValueChanged: function(value2) {
      if (!this.objectEnabled) {
        this.stringFont = value2;
        this.$emit("message", "node-font-string", value2);
      }
    },
    updateBorderColor: function(value2) {
      if (this.objectEnabled) {
        this.fontColor = value2;
        this.$emit("message", "node-font-color", value2);
      }
    },
    emitSizeUpdate: function(value2) {
      if (this.objectEnabled) {
        this.size = parseInt(value2);
        this.$emit("message", "node-font-size", value2);
      }
    },
    updateNodesFontFace: function(value2) {
      if (this.objectEnabled) {
        this.fontFace = value2;
        this.$emit("message", "node-font-face", value2);
      }
    },
    updateEnableFontBackground: function(value2) {
      if (this.objectEnabled) {
        this.fontBackgroundEnabled = value2;
        this.$emit("message", "enable-font-background", value2);
      }
    },
    updateFontBackgroundColor: function(value2) {
      if (this.objectEnabled) {
        this.fontBackgroundColor = value2;
        this.$emit("message", "node-font-background", value2);
      }
    },
    emitStrokeWidthUpdate: function(value2) {
      if (this.objectEnabled) {
        this.strokeWidthValue = parseInt(value2);
        this.$emit("message", "node-stroke-width", value2);
      }
    },
    updateNodesFontStrokeColor: function(value2) {
      if (this.objectEnabled) {
        this.strokeColor = value2;
        this.$emit("message", "node-stroke-color", value2);
      }
    }
  },
  emits: ["message"]
};
const _hoisted_1$9 = { key: 0 };
const _hoisted_2$6 = { key: 1 };
function _sfc_render$d(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_SwitchWithInfo = resolveComponent("SwitchWithInfo");
  const _component_label_tooltip = resolveComponent("label-tooltip");
  const _component_color_picker = resolveComponent("color-picker");
  const _component_InputRange = resolveComponent("InputRange");
  const _component_InputSelect = resolveComponent("InputSelect");
  const _component_InputText = resolveComponent("InputText");
  return openBlock(), createElementBlock(Fragment, null, [
    createVNode(_component_SwitchWithInfo, {
      switchId: "send-object-nodes-font-enabled",
      switchDisabled: !this.checkboxValue,
      switchInitialValue: this.objectEnabled,
      switchTooltipEnabled: true,
      switchTooltip: "Options.Nodes.Font as Object - Se há a necessidade de somente uma cor nos vértices, use a forma de string {tamanho fonte cor}. Desative o marcador para alternar entre string e objeto.",
      switchLabelEnabled: true,
      switchLabelValue: this.objectEnabled ? "Usando Fonte como Objeto" : "Usando Fonte como String",
      onCheckboxStatusChanged: $options.changeOptionsEnabledToggled
    }, null, 8, ["switchDisabled", "switchInitialValue", "switchLabelValue", "onCheckboxStatusChanged"]),
    this.objectEnabled ? (openBlock(), createElementBlock("div", _hoisted_1$9, [
      createVNode(_component_label_tooltip, {
        labelValue: "Cor da fonte",
        tooltip: "Options.Nodes.Font.Color - Altere a cor da fonte dos rótulos dos vértices.",
        forId: "node-label-node-font-color",
        hasSwitch: false
      }),
      createVNode(_component_color_picker, {
        colorPickerId: "node-label-node-font-color",
        colorPickerDefaultColor: this.fontColor,
        tooltip: "Options.Nodes.Font.Color - Altere a cor da fonte dos rótulos dos vértices.",
        disabled: !this.checkboxValue,
        onUpdateColor: $options.updateBorderColor
      }, null, 8, ["colorPickerDefaultColor", "disabled", "onUpdateColor"]),
      createVNode(_component_InputRange, {
        inputId: "size-range",
        isLabelEnabled: true,
        min: 1,
        max: 50,
        step: 1,
        initialValue: this.size,
        labelValue: "Tamanho",
        tooltip: "Options.Nodes.Font.Size - Tamanho da fonte do rótulo dos vértices",
        onUpdateValueFromRangeInput: $options.emitSizeUpdate,
        disabled: !this.checkboxValue
      }, null, 8, ["initialValue", "onUpdateValueFromRangeInput", "disabled"]),
      createVNode(_component_label_tooltip, {
        labelValue: "Fonte",
        tooltip: "Options.Nodes.Font.Face - Altere o tipo da fonte dos rótulos dos vértices.",
        forId: "options-nodes-font-face",
        hasSwitch: false
      }),
      createVNode(_component_InputSelect, {
        selectId: "options-nodes-font-face",
        disabled: !this.checkboxValue,
        options: [
          { value: "arial", label: "Arial", selected: true },
          { value: "verdana", label: "Verdana", selected: false },
          { value: "tahoma", label: "Tahoma", selected: false },
          { value: "Trebuchet MS", label: "Trebuchet MS", selected: false },
          { value: "Times New Roman", label: "Times New Roman", selected: false },
          { value: "Georgia", label: "Georgia", selected: false },
          { value: "Geramond", label: "Geramond", selected: false },
          { value: "Courier New", label: "Courier New", selected: false },
          { value: "Brush Script MT", label: "Brush Script MT", selected: false }
        ],
        onUpdateSelection: $options.updateNodesFontFace
      }, null, 8, ["disabled", "onUpdateSelection"]),
      createVNode(_component_label_tooltip, {
        labelValue: "Cor de Plano de fundo",
        tooltip: "Options.Nodes.Font.Background - Altere o plano de fundo da fonte dos rótulos dos vértices.",
        forId: "options-nodes-font-background",
        hasSwitch: true,
        switchId: "options-nodes-font-background",
        switchTooltip: "Toggle Font Background On/Off. Altere entre a ativação do plano de fundo dos rótulos dos vértices.",
        switchDisabled: !this.checkboxValue,
        switchInitialValue: false,
        switchLabelEnabled: false,
        switchLabelValue: "",
        onCheckboxStatusChanged: $options.updateEnableFontBackground
      }, null, 8, ["switchDisabled", "onCheckboxStatusChanged"]),
      this.fontBackgroundEnabled ? (openBlock(), createBlock(_component_color_picker, {
        key: 0,
        colorPickerId: "options-nodes-font-background",
        colorPickerDefaultColor: "#ffffff",
        tooltip: "Options.Nodes.Font.Background - Altere a cor do plano de fundo da fonte dos rótulos dos vértices.",
        disabled: !this.checkboxValue,
        onUpdateColor: $options.updateFontBackgroundColor
      }, null, 8, ["disabled", "onUpdateColor"])) : createCommentVNode("", true),
      createVNode(_component_InputRange, {
        inputId: "stroke-size-range",
        isLabelEnabled: true,
        min: 0,
        max: 30,
        step: 1,
        initialValue: 0,
        labelValue: "Tamanho da borda do rótulo",
        tooltip: "Options.Nodes.Font.StrokeWidth - Tamanho da borda da fonte do rótulo dos vértices",
        disabled: !this.checkboxValue,
        onUpdateValueFromRangeInput: $options.emitStrokeWidthUpdate
      }, null, 8, ["disabled", "onUpdateValueFromRangeInput"]),
      this.strokeWidthValue > 0 ? (openBlock(), createBlock(_component_label_tooltip, {
        key: 1,
        labelValue: "Cor da borda do rótulo",
        tooltip: "Options.Nodes.Font.StrokeColor - Altere a cor da borda da fonte do rótudo dos vértices.",
        forId: "options-nodes-font-strokeColor",
        hasSwitch: false
      })) : createCommentVNode("", true),
      this.strokeWidthValue > 0 ? (openBlock(), createBlock(_component_color_picker, {
        key: 2,
        colorPickerId: "options-nodes-font-strokeColor",
        colorPickerDefaultColor: this.strokeColor,
        tooltip: "Options.Nodes.Font.StrokeColor - Altere a cor da borda da fonte do rótudo dos vértices.",
        onUpdateColor: $options.updateNodesFontStrokeColor
      }, null, 8, ["colorPickerDefaultColor", "onUpdateColor"])) : createCommentVNode("", true)
    ])) : (openBlock(), createElementBlock("div", _hoisted_2$6, [
      createVNode(_component_InputText, {
        inputId: "input-nodes-font",
        inputEnabled: !this.checkboxValue,
        inputInitialValue: this.stringFont,
        inputPlaceholder: "size face color",
        isLabelEnabled: true,
        labelValue: "String de estilização de fonte",
        tooltip: "Options.Nodes.Font - Altere a fonte dos vértices em seu tamanho fonte e cor da mesma forma da string mostrada.",
        hasSwitch: false,
        onInputValueChange: $options.nodesFontValueChanged
      }, null, 8, ["inputEnabled", "inputInitialValue", "onInputValueChange"])
    ]))
  ], 64);
}
const FontNodeAccordion = /* @__PURE__ */ _export_sfc(_sfc_main$d, [["render", _sfc_render$d]]);
const _sfc_main$c = {
  name: "Height Constraint Component",
  props: [
    "checkboxValue"
  ],
  components: {
    SwitchWithInfo,
    InputRange,
    InputSelect,
    LabelWithTooltip
  },
  data() {
    return {
      heightConstraintObjectEnabled: false,
      heightConstraintIntegerValue: 0,
      hCObjectMinimum: 0,
      hcObjectValign: "middle"
    };
  },
  methods: {
    heightConstraintObjectEnableEvent: function(value2) {
      this.heightConstraintObjectEnabled = value2;
      this.$emit("message", "height-constraint-object-enabled", value2);
    },
    updateHeightConstraintRangeValue: function(value2) {
      this.heightConstraintIntegerValue = parseInt(value2);
      this.$emit("message", "height-constraint-value", value2);
    },
    updateHeightConstraintObjectMinium: function(value2) {
      this.hCObjectMinimum = parseInt(value2);
      this.$emit("message", "height-constraint-object-minimum", value2);
    },
    updateHeightConstraintObjectValign: function(value2) {
      console.log("Update height constraint valign" + value2);
      this.hcObjectValign = value2;
      this.$emit("message", "height-constraint-object-valign", value2);
    }
  },
  watch: {
    checkboxValue: function(newValue, oldValue) {
      if (newValue) {
        if (!this.heightConstraintObjectEnabled) {
          this.updateHeightConstraintRangeValue(this.heightConstraintIntegerValue);
        } else {
          this.updateHeightConstraintObjectMinium(this.hCObjectMinimum);
          this.updateHeightConstraintObjectValign(this.hcObjectValign);
        }
      }
    },
    heightConstraintObjectEnabled: function(newValue, oldValue) {
      if (this.checkboxValue) {
        if (!newValue) {
          this.updateHeightConstraintRangeValue(this.heightConstraintIntegerValue);
        } else {
          this.updateHeightConstraintObjectMinium(this.hCObjectMinimum);
          this.updateHeightConstraintObjectValign(this.hcObjectValign);
        }
      }
    }
  },
  emits: ["message"]
};
function _sfc_render$c(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_SwitchWithInfo = resolveComponent("SwitchWithInfo");
  const _component_InputRange = resolveComponent("InputRange");
  const _component_LabelWithTooltip = resolveComponent("LabelWithTooltip");
  const _component_InputSelect = resolveComponent("InputSelect");
  return openBlock(), createElementBlock(Fragment, null, [
    createVNode(_component_SwitchWithInfo, {
      switchId: "height-constraint-object-enabled",
      switchDisabled: !this.checkboxValue,
      switchInitialValue: this.heightConstraintObjectEnabled,
      switchTooltipEnabled: true,
      switchTooltip: "Toggle Options.Nodes.Font.HeightConstraint between number and object sending. - Alterne o envio de objeto ou de valor para o campo.",
      switchLabelEnabled: true,
      switchLabelValue: this.heightConstraintObjectEnabled ? "Enviando objeto para o campo." : "Enviando valor inteiro para o campo.",
      onCheckboxStatusChanged: $options.heightConstraintObjectEnableEvent
    }, null, 8, ["switchDisabled", "switchInitialValue", "switchLabelValue", "onCheckboxStatusChanged"]),
    !this.heightConstraintObjectEnabled ? (openBlock(), createBlock(_component_InputRange, {
      key: 0,
      inputId: "height-constraint-range-value",
      isLabelEnabled: true,
      min: 0,
      max: 100,
      step: 1,
      initialValue: this.heightConstraintIntegerValue,
      labelValue: "Valor de constante de altura",
      tooltip: "Options.Nodes.Font.HeightConstraint (Value) - Modifique para alterar a constante de altura",
      disabled: !this.checkboxValue,
      onUpdateValueFromRangeInput: $options.updateHeightConstraintRangeValue
    }, null, 8, ["initialValue", "disabled", "onUpdateValueFromRangeInput"])) : createCommentVNode("", true),
    this.heightConstraintObjectEnabled ? (openBlock(), createBlock(_component_InputRange, {
      key: 1,
      inputId: "height-constraint-object-minimum",
      isLabelEnabled: true,
      min: 0,
      max: 100,
      step: 1,
      initialValue: this.hCObjectMinimum,
      labelValue: "Valor de constante de altura mínima",
      tooltip: "Options.Nodes.Font.HeightConstraint.Minimum - Se um número for especificado, o valor será usado como a altura mínima do vértice. A altura do vértice será definida como mínima se for menor que o valor.",
      disabled: !this.checkboxValue,
      onUpdateValueFromRangeInput: $options.updateHeightConstraintObjectMinium
    }, null, 8, ["initialValue", "disabled", "onUpdateValueFromRangeInput"])) : createCommentVNode("", true),
    this.heightConstraintObjectEnabled ? (openBlock(), createBlock(_component_LabelWithTooltip, {
      key: 2,
      labelValue: "Alinhamento do rótulo na constante de altura",
      tooltip: "Os valores válidos são 'superior', 'médio' e 'inferior'. Quando especificado, se a altura do texto da etiqueta for menor que o mínimo (incluindo quaisquer margens superiores ou inferiores), ela será deslocada verticalmente para a posição designada.",
      forId: "nodes-font-heightconstraint-align",
      hasSwitch: false
    })) : createCommentVNode("", true),
    this.heightConstraintObjectEnabled ? (openBlock(), createBlock(_component_InputSelect, {
      key: 3,
      selectId: "nodes-font-heightconstraint-align",
      options: [
        { value: "top", label: "Superior", selected: false },
        { value: "middle", label: "Medio", selected: true },
        { value: "bottom", label: "Inferior", selected: false }
      ],
      disabled: !this.checkboxValue,
      onUpdateSelection: $options.updateHeightConstraintObjectValign
    }, null, 8, ["disabled", "onUpdateSelection"])) : createCommentVNode("", true)
  ], 64);
}
const HeightConstraintNodeAccordion = /* @__PURE__ */ _export_sfc(_sfc_main$c, [["render", _sfc_render$c]]);
const scriptRel = "modulepreload";
const assetsURL = function(dep) {
  return "/paad-grafos-v2/" + dep;
};
const seen = {};
const __vitePreload = function preload(baseModule, deps, importerUrl) {
  let promise2 = Promise.resolve();
  if (deps && deps.length > 0) {
    document.getElementsByTagName("link");
    const cspNonceMeta = document.querySelector(
      "meta[property=csp-nonce]"
    );
    const cspNonce = (cspNonceMeta == null ? void 0 : cspNonceMeta.nonce) || (cspNonceMeta == null ? void 0 : cspNonceMeta.getAttribute("nonce"));
    promise2 = Promise.allSettled(
      deps.map((dep) => {
        dep = assetsURL(dep);
        if (dep in seen) return;
        seen[dep] = true;
        const isCss = dep.endsWith(".css");
        const cssSelector = isCss ? '[rel="stylesheet"]' : "";
        if (document.querySelector(`link[href="${dep}"]${cssSelector}`)) {
          return;
        }
        const link2 = document.createElement("link");
        link2.rel = isCss ? "stylesheet" : scriptRel;
        if (!isCss) {
          link2.as = "script";
        }
        link2.crossOrigin = "";
        link2.href = dep;
        if (cspNonce) {
          link2.setAttribute("nonce", cspNonce);
        }
        document.head.appendChild(link2);
        if (isCss) {
          return new Promise((res, rej) => {
            link2.addEventListener("load", res);
            link2.addEventListener(
              "error",
              () => rej(new Error(`Unable to preload CSS for ${dep}`))
            );
          });
        }
      })
    );
  }
  function handlePreloadError(err) {
    const e2 = new Event("vite:preloadError", {
      cancelable: true
    });
    e2.payload = err;
    window.dispatchEvent(e2);
    if (!e2.defaultPrevented) {
      throw err;
    }
  }
  return promise2.then((res) => {
    for (const item of res || []) {
      if (item.status !== "rejected") continue;
      handlePreloadError(item.reason);
    }
    return baseModule().catch(handlePreloadError);
  });
};
function isEmpty(opt) {
  if (opt === 0) return false;
  if (Array.isArray(opt) && opt.length === 0) return true;
  return !opt;
}
function not(fun) {
  return (...params) => !fun(...params);
}
function includes(str, query) {
  if (str === void 0) str = "undefined";
  if (str === null) str = "null";
  if (str === false) str = "false";
  const text = str.toString().toLowerCase();
  return text.indexOf(query.trim()) !== -1;
}
function filterOptions(options, search, label, customLabel) {
  return search ? options.filter((option) => includes(customLabel(option, label), search)).sort((a2, b2) => customLabel(a2, label).length - customLabel(b2, label).length) : options;
}
function stripGroups(options) {
  return options.filter((option) => !option.$isLabel);
}
function flattenOptions(values2, label) {
  return (options) => options.reduce((prev, curr) => {
    if (curr[values2] && curr[values2].length) {
      prev.push({
        $groupLabel: curr[label],
        $isLabel: true
      });
      return prev.concat(curr[values2]);
    }
    return prev;
  }, []);
}
function filterGroups(search, label, values2, groupLabel, customLabel) {
  return (groups) => groups.map((group) => {
    if (!group[values2]) {
      console.warn(`Options passed to vue-multiselect do not contain groups, despite the config.`);
      return [];
    }
    const groupOptions = filterOptions(group[values2], search, label, customLabel);
    return groupOptions.length ? {
      [groupLabel]: group[groupLabel],
      [values2]: groupOptions
    } : [];
  });
}
const flow = (...fns) => (x2) => fns.reduce((v2, f2) => f2(v2), x2);
var multiselectMixin = {
  data() {
    return {
      search: "",
      isOpen: false,
      preferredOpenDirection: "below",
      optimizedHeight: this.maxHeight
    };
  },
  props: {
    /**
     * Decide whether to filter the results based on search query.
     * Useful for async filtering, where we search through more complex data.
     * @type {Boolean}
     */
    internalSearch: {
      type: Boolean,
      default: true
    },
    /**
     * Array of available options: Objects, Strings or Integers.
     * If array of objects, visible label will default to option.label.
     * If `labal` prop is passed, label will equal option['label']
     * @type {Array}
     */
    options: {
      type: Array,
      required: true
    },
    /**
     * Equivalent to the `multiple` attribute on a `<select>` input.
     * @default false
     * @type {Boolean}
     */
    multiple: {
      type: Boolean,
      default: false
    },
    /**
     * Key to compare objects
     * @default 'id'
     * @type {String}
     */
    trackBy: {
      type: String
    },
    /**
     * Label to look for in option Object
     * @default 'label'
     * @type {String}
     */
    label: {
      type: String
    },
    /**
     * Enable/disable search in options
     * @default true
     * @type {Boolean}
     */
    searchable: {
      type: Boolean,
      default: true
    },
    /**
     * Clear the search input after `)
     * @default true
     * @type {Boolean}
     */
    clearOnSelect: {
      type: Boolean,
      default: true
    },
    /**
     * Hide already selected options
     * @default false
     * @type {Boolean}
     */
    hideSelected: {
      type: Boolean,
      default: false
    },
    /**
     * Equivalent to the `placeholder` attribute on a `<select>` input.
     * @default 'Select option'
     * @type {String}
     */
    placeholder: {
      type: String,
      default: "Select option"
    },
    /**
     * Allow to remove all selected values
     * @default true
     * @type {Boolean}
     */
    allowEmpty: {
      type: Boolean,
      default: true
    },
    /**
     * Reset this.internalValue, this.search after this.internalValue changes.
     * Useful if want to create a stateless dropdown.
     * @default false
     * @type {Boolean}
     */
    resetAfter: {
      type: Boolean,
      default: false
    },
    /**
     * Enable/disable closing after selecting an option
     * @default true
     * @type {Boolean}
     */
    closeOnSelect: {
      type: Boolean,
      default: true
    },
    /**
     * Function to interpolate the custom label
     * @default false
     * @type {Function}
     */
    customLabel: {
      type: Function,
      default(option, label) {
        if (isEmpty(option)) return "";
        return label ? option[label] : option;
      }
    },
    /**
     * Disable / Enable tagging
     * @default false
     * @type {Boolean}
     */
    taggable: {
      type: Boolean,
      default: false
    },
    /**
     * String to show when highlighting a potential tag
     * @default 'Press enter to create a tag'
     * @type {String}
    */
    tagPlaceholder: {
      type: String,
      default: "Press enter to create a tag"
    },
    /**
     * By default new tags will appear above the search results.
     * Changing to 'bottom' will revert this behaviour
     * and will proritize the search results
     * @default 'top'
     * @type {String}
    */
    tagPosition: {
      type: String,
      default: "top"
    },
    /**
     * Number of allowed selected options. No limit if 0.
     * @default 0
     * @type {Number}
    */
    max: {
      type: [Number, Boolean],
      default: false
    },
    /**
     * Will be passed with all events as second param.
     * Useful for identifying events origin.
     * @default null
     * @type {String|Integer}
    */
    id: {
      default: null
    },
    /**
     * Limits the options displayed in the dropdown
     * to the first X options.
     * @default 1000
     * @type {Integer}
    */
    optionsLimit: {
      type: Number,
      default: 1e3
    },
    /**
     * Name of the property containing
     * the group values
     * @default 1000
     * @type {String}
    */
    groupValues: {
      type: String
    },
    /**
     * Name of the property containing
     * the group label
     * @default 1000
     * @type {String}
    */
    groupLabel: {
      type: String
    },
    /**
     * Allow to select all group values
     * by selecting the group label
     * @default false
     * @type {Boolean}
     */
    groupSelect: {
      type: Boolean,
      default: false
    },
    /**
     * Array of keyboard keys to block
     * when selecting
     * @default 1000
     * @type {String}
    */
    blockKeys: {
      type: Array,
      default() {
        return [];
      }
    },
    /**
     * Prevent from wiping up the search value
     * @default false
     * @type {Boolean}
    */
    preserveSearch: {
      type: Boolean,
      default: false
    },
    /**
     * Select 1st options if value is empty
     * @default false
     * @type {Boolean}
    */
    preselectFirst: {
      type: Boolean,
      default: false
    },
    /**
     * Prevent autofocus
     * @default false
     * @type {Boolean}
    */
    preventAutofocus: {
      type: Boolean,
      default: false
    }
  },
  mounted() {
    if (!this.multiple && this.max) {
      console.warn("[Vue-Multiselect warn]: Max prop should not be used when prop Multiple equals false.");
    }
    if (this.preselectFirst && !this.internalValue.length && this.options.length) {
      this.select(this.filteredOptions[0]);
    }
  },
  computed: {
    internalValue() {
      return this.modelValue || this.modelValue === 0 ? Array.isArray(this.modelValue) ? this.modelValue : [this.modelValue] : [];
    },
    filteredOptions() {
      const search = this.search || "";
      const normalizedSearch = search.toLowerCase().trim();
      let options = this.options.concat();
      if (this.internalSearch) {
        options = this.groupValues ? this.filterAndFlat(options, normalizedSearch, this.label) : filterOptions(options, normalizedSearch, this.label, this.customLabel);
      } else {
        options = this.groupValues ? flattenOptions(this.groupValues, this.groupLabel)(options) : options;
      }
      options = this.hideSelected ? options.filter(not(this.isSelected)) : options;
      if (this.taggable && normalizedSearch.length && !this.isExistingOption(normalizedSearch)) {
        if (this.tagPosition === "bottom") {
          options.push({ isTag: true, label: search });
        } else {
          options.unshift({ isTag: true, label: search });
        }
      }
      return options.slice(0, this.optionsLimit);
    },
    valueKeys() {
      if (this.trackBy) {
        return this.internalValue.map((element) => element[this.trackBy]);
      } else {
        return this.internalValue;
      }
    },
    optionKeys() {
      const options = this.groupValues ? this.flatAndStrip(this.options) : this.options;
      return options.map((element) => this.customLabel(element, this.label).toString().toLowerCase());
    },
    currentOptionLabel() {
      return this.multiple ? this.searchable ? "" : this.placeholder : this.internalValue.length ? this.getOptionLabel(this.internalValue[0]) : this.searchable ? "" : this.placeholder;
    }
  },
  watch: {
    internalValue: {
      handler() {
        if (this.resetAfter && this.internalValue.length) {
          this.search = "";
          this.$emit("update:modelValue", this.multiple ? [] : null);
        }
      },
      deep: true
    },
    search() {
      this.$emit("search-change", this.search);
    }
  },
  emits: ["open", "search-change", "close", "select", "update:modelValue", "remove", "tag"],
  methods: {
    /**
     * Returns the internalValue in a way it can be emited to the parent
     * @returns {Object||Array||String||Integer}
     */
    getValue() {
      return this.multiple ? this.internalValue : this.internalValue.length === 0 ? null : this.internalValue[0];
    },
    /**
     * Filters and then flattens the options list
     * @param  {Array}
     * @return {Array} returns a filtered and flat options list
     */
    filterAndFlat(options, search, label) {
      return flow(
        filterGroups(search, label, this.groupValues, this.groupLabel, this.customLabel),
        flattenOptions(this.groupValues, this.groupLabel)
      )(options);
    },
    /**
     * Flattens and then strips the group labels from the options list
     * @param  {Array}
     * @return {Array} returns a flat options list without group labels
     */
    flatAndStrip(options) {
      return flow(
        flattenOptions(this.groupValues, this.groupLabel),
        stripGroups
      )(options);
    },
    /**
     * Updates the search value
     * @param  {String}
     */
    updateSearch(query) {
      this.search = query;
    },
    /**
     * Finds out if the given query is already present
     * in the available options
     * @param  {String}
     * @return {Boolean} returns true if element is available
     */
    isExistingOption(query) {
      return !this.options ? false : this.optionKeys.indexOf(query) > -1;
    },
    /**
     * Finds out if the given element is already present
     * in the result value
     * @param  {Object||String||Integer} option passed element to check
     * @returns {Boolean} returns true if element is selected
     */
    isSelected(option) {
      const opt = this.trackBy ? option[this.trackBy] : option;
      return this.valueKeys.indexOf(opt) > -1;
    },
    /**
     * Finds out if the given option is disabled
     * @param  {Object||String||Integer} option passed element to check
     * @returns {Boolean} returns true if element is disabled
     */
    isOptionDisabled(option) {
      return !!option.$isDisabled;
    },
    /**
     * Returns empty string when options is null/undefined
     * Returns tag query if option is tag.
     * Returns the customLabel() results and casts it to string.
     *
     * @param  {Object||String||Integer} Passed option
     * @returns {Object||String}
     */
    getOptionLabel(option) {
      if (isEmpty(option)) return "";
      if (option.isTag) return option.label;
      if (option.$isLabel) return option.$groupLabel;
      const label = this.customLabel(option, this.label);
      if (isEmpty(label)) return "";
      return label;
    },
    /**
     * Add the given option to the list of selected options
     * or sets the option as the selected option.
     * If option is already selected -> remove it from the results.
     *
     * @param  {Object||String||Integer} option to select/deselect
     * @param  {Boolean} block removing
     */
    select(option, key2) {
      if (option.$isLabel && this.groupSelect) {
        this.selectGroup(option);
        return;
      }
      if (this.blockKeys.indexOf(key2) !== -1 || this.disabled || option.$isDisabled || option.$isLabel) return;
      if (this.max && this.multiple && this.internalValue.length === this.max) return;
      if (key2 === "Tab" && !this.pointerDirty) return;
      if (option.isTag) {
        this.$emit("tag", option.label, this.id);
        this.search = "";
        if (this.closeOnSelect && !this.multiple) this.deactivate();
      } else {
        const isSelected = this.isSelected(option);
        if (isSelected) {
          if (key2 !== "Tab") this.removeElement(option);
          return;
        }
        if (this.multiple) {
          this.$emit("update:modelValue", this.internalValue.concat([option]));
        } else {
          this.$emit("update:modelValue", option);
        }
        this.$emit("select", option, this.id);
        if (this.clearOnSelect) this.search = "";
      }
      if (this.closeOnSelect) this.deactivate();
    },
    /**
     * Add the given group options to the list of selected options
     * If all group optiona are already selected -> remove it from the results.
     *
     * @param  {Object||String||Integer} group to select/deselect
     */
    selectGroup(selectedGroup) {
      const group = this.options.find((option) => {
        return option[this.groupLabel] === selectedGroup.$groupLabel;
      });
      if (!group) return;
      if (this.wholeGroupSelected(group)) {
        this.$emit("remove", group[this.groupValues], this.id);
        const groupValues = this.trackBy ? group[this.groupValues].map((val) => val[this.trackBy]) : group[this.groupValues];
        const newValue = this.internalValue.filter(
          (option) => groupValues.indexOf(this.trackBy ? option[this.trackBy] : option) === -1
        );
        this.$emit("update:modelValue", newValue);
      } else {
        let optionsToAdd = group[this.groupValues].filter(
          (option) => !(this.isOptionDisabled(option) || this.isSelected(option))
        );
        if (this.max) {
          optionsToAdd.splice(this.max - this.internalValue.length);
        }
        this.$emit("select", optionsToAdd, this.id);
        this.$emit(
          "update:modelValue",
          this.internalValue.concat(optionsToAdd)
        );
      }
      if (this.closeOnSelect) this.deactivate();
    },
    /**
     * Helper to identify if all values in a group are selected
     *
     * @param {Object} group to validated selected values against
     */
    wholeGroupSelected(group) {
      return group[this.groupValues].every(
        (option) => this.isSelected(option) || this.isOptionDisabled(option)
      );
    },
    /**
     * Helper to identify if all values in a group are disabled
     *
     * @param {Object} group to check for disabled values
     */
    wholeGroupDisabled(group) {
      return group[this.groupValues].every(this.isOptionDisabled);
    },
    /**
     * Removes the given option from the selected options.
     * Additionally checks this.allowEmpty prop if option can be removed when
     * it is the last selected option.
     *
     * @param  {type} option description
     * @return {type}        description
     */
    removeElement(option, shouldClose = true) {
      if (this.disabled) return;
      if (option.$isDisabled) return;
      if (!this.allowEmpty && this.internalValue.length <= 1) {
        this.deactivate();
        return;
      }
      const index2 = typeof option === "object" ? this.valueKeys.indexOf(option[this.trackBy]) : this.valueKeys.indexOf(option);
      if (this.multiple) {
        const newValue = this.internalValue.slice(0, index2).concat(this.internalValue.slice(index2 + 1));
        this.$emit("update:modelValue", newValue);
      } else {
        this.$emit("update:modelValue", null);
      }
      this.$emit("remove", option, this.id);
      if (this.closeOnSelect && shouldClose) this.deactivate();
    },
    /**
     * Calls this.removeElement() with the last element
     * from this.internalValue (selected element Array)
     *
     * @fires this#removeElement
     */
    removeLastElement() {
      if (this.blockKeys.indexOf("Delete") !== -1) return;
      if (this.search.length === 0 && Array.isArray(this.internalValue) && this.internalValue.length) {
        this.removeElement(this.internalValue[this.internalValue.length - 1], false);
      }
    },
    /**
     * Opens the multiselect’s dropdown.
     * Sets this.isOpen to TRUE
     */
    activate() {
      if (this.isOpen || this.disabled) return;
      this.adjustPosition();
      if (this.groupValues && this.pointer === 0 && this.filteredOptions.length) {
        this.pointer = 1;
      }
      this.isOpen = true;
      if (this.searchable) {
        if (!this.preserveSearch) this.search = "";
        if (!this.preventAutofocus) this.$nextTick(() => this.$refs.search && this.$refs.search.focus());
      } else if (!this.preventAutofocus) {
        if (typeof this.$el !== "undefined") this.$el.focus();
      }
      this.$emit("open", this.id);
    },
    /**
     * Closes the multiselect’s dropdown.
     * Sets this.isOpen to FALSE
     */
    deactivate() {
      if (!this.isOpen) return;
      this.isOpen = false;
      if (this.searchable) {
        if (this.$refs.search !== null && typeof this.$refs.search !== "undefined") this.$refs.search.blur();
      } else {
        if (typeof this.$el !== "undefined") this.$el.blur();
      }
      if (!this.preserveSearch) this.search = "";
      this.$emit("close", this.getValue(), this.id);
    },
    /**
     * Call this.activate() or this.deactivate()
     * depending on this.isOpen value.
     *
     * @fires this#activate || this#deactivate
     * @property {Boolean} isOpen indicates if dropdown is open
     */
    toggle() {
      this.isOpen ? this.deactivate() : this.activate();
    },
    /**
     * Updates the hasEnoughSpace variable used for
     * detecting where to expand the dropdown
     */
    adjustPosition() {
      if (typeof window === "undefined") return;
      const spaceAbove = this.$el.getBoundingClientRect().top;
      const spaceBelow = window.innerHeight - this.$el.getBoundingClientRect().bottom;
      const hasEnoughSpaceBelow = spaceBelow > this.maxHeight;
      if (hasEnoughSpaceBelow || spaceBelow > spaceAbove || this.openDirection === "below" || this.openDirection === "bottom") {
        this.preferredOpenDirection = "below";
        this.optimizedHeight = Math.min(spaceBelow - 40, this.maxHeight);
      } else {
        this.preferredOpenDirection = "above";
        this.optimizedHeight = Math.min(spaceAbove - 40, this.maxHeight);
      }
    }
  }
};
var pointerMixin = {
  data() {
    return {
      pointer: 0,
      pointerDirty: false
    };
  },
  props: {
    /**
     * Enable/disable highlighting of the pointed value.
     * @type {Boolean}
     * @default true
     */
    showPointer: {
      type: Boolean,
      default: true
    },
    optionHeight: {
      type: Number,
      default: 40
    }
  },
  computed: {
    pointerPosition() {
      return this.pointer * this.optionHeight;
    },
    visibleElements() {
      return this.optimizedHeight / this.optionHeight;
    }
  },
  watch: {
    filteredOptions() {
      this.pointerAdjust();
    },
    isOpen() {
      this.pointerDirty = false;
    },
    pointer() {
      this.$refs.search && this.$refs.search.setAttribute("aria-activedescendant", this.id + "-" + this.pointer.toString());
    }
  },
  methods: {
    optionHighlight(index2, option) {
      return {
        "multiselect__option--highlight": index2 === this.pointer && this.showPointer,
        "multiselect__option--selected": this.isSelected(option)
      };
    },
    groupHighlight(index2, selectedGroup) {
      if (!this.groupSelect) {
        return [
          "multiselect__option--disabled",
          { "multiselect__option--group": selectedGroup.$isLabel }
        ];
      }
      const group = this.options.find((option) => {
        return option[this.groupLabel] === selectedGroup.$groupLabel;
      });
      return group && !this.wholeGroupDisabled(group) ? [
        "multiselect__option--group",
        { "multiselect__option--highlight": index2 === this.pointer && this.showPointer },
        { "multiselect__option--group-selected": this.wholeGroupSelected(group) }
      ] : "multiselect__option--disabled";
    },
    addPointerElement({ key: key2 } = "Enter") {
      if (this.filteredOptions.length > 0) {
        this.select(this.filteredOptions[this.pointer], key2);
      }
      this.pointerReset();
    },
    pointerForward() {
      if (this.pointer < this.filteredOptions.length - 1) {
        this.pointer++;
        if (this.$refs.list.scrollTop <= this.pointerPosition - (this.visibleElements - 1) * this.optionHeight) {
          this.$refs.list.scrollTop = this.pointerPosition - (this.visibleElements - 1) * this.optionHeight;
        }
        if (this.filteredOptions[this.pointer] && this.filteredOptions[this.pointer].$isLabel && !this.groupSelect) this.pointerForward();
      }
      this.pointerDirty = true;
    },
    pointerBackward() {
      if (this.pointer > 0) {
        this.pointer--;
        if (this.$refs.list.scrollTop >= this.pointerPosition) {
          this.$refs.list.scrollTop = this.pointerPosition;
        }
        if (this.filteredOptions[this.pointer] && this.filteredOptions[this.pointer].$isLabel && !this.groupSelect) this.pointerBackward();
      } else {
        if (this.filteredOptions[this.pointer] && this.filteredOptions[0].$isLabel && !this.groupSelect) this.pointerForward();
      }
      this.pointerDirty = true;
    },
    pointerReset() {
      if (!this.closeOnSelect) return;
      this.pointer = 0;
      if (this.$refs.list) {
        this.$refs.list.scrollTop = 0;
      }
    },
    pointerAdjust() {
      if (this.pointer >= this.filteredOptions.length - 1) {
        this.pointer = this.filteredOptions.length ? this.filteredOptions.length - 1 : 0;
      }
      if (this.filteredOptions.length > 0 && this.filteredOptions[this.pointer].$isLabel && !this.groupSelect) {
        this.pointerForward();
      }
    },
    pointerSet(index2) {
      this.pointer = index2;
      this.pointerDirty = true;
    }
  }
};
var script = {
  name: "vue-multiselect",
  mixins: [multiselectMixin, pointerMixin],
  compatConfig: {
    MODE: 3,
    ATTR_ENUMERATED_COERCION: false
  },
  props: {
    /**
       * name attribute to match optional label element
       * @default ''
       * @type {String}
       */
    name: {
      type: String,
      default: ""
    },
    /**
       * Presets the selected options value.
       * @type {Object||Array||String||Integer}
       */
    modelValue: {
      type: null,
      default() {
        return [];
      }
    },
    /**
       * String to show when pointing to an option
       * @default 'Press enter to select'
       * @type {String}
       */
    selectLabel: {
      type: String,
      default: "Press enter to select"
    },
    /**
       * String to show when pointing to an option
       * @default 'Press enter to select'
       * @type {String}
       */
    selectGroupLabel: {
      type: String,
      default: "Press enter to select group"
    },
    /**
       * String to show next to selected option
       * @default 'Selected'
       * @type {String}
       */
    selectedLabel: {
      type: String,
      default: "Selected"
    },
    /**
       * String to show when pointing to an already selected option
       * @default 'Press enter to remove'
       * @type {String}
       */
    deselectLabel: {
      type: String,
      default: "Press enter to remove"
    },
    /**
       * String to show when pointing to an already selected option
       * @default 'Press enter to remove'
       * @type {String}
       */
    deselectGroupLabel: {
      type: String,
      default: "Press enter to deselect group"
    },
    /**
       * Decide whether to show pointer labels
       * @default true
       * @type {Boolean}
       */
    showLabels: {
      type: Boolean,
      default: true
    },
    /**
       * Limit the display of selected options. The rest will be hidden within the limitText string.
       * @default 99999
       * @type {Integer}
       */
    limit: {
      type: Number,
      default: 99999
    },
    /**
       * Sets maxHeight style value of the dropdown
       * @default 300
       * @type {Integer}
       */
    maxHeight: {
      type: Number,
      default: 300
    },
    /**
       * Function that process the message shown when selected
       * elements pass the defined limit.
       * @default 'and * more'
       * @param {Int} count Number of elements more than limit
       * @type {Function}
       */
    limitText: {
      type: Function,
      default: (count) => `and ${count} more`
    },
    /**
       * Set true to trigger the loading spinner.
       * @default False
       * @type {Boolean}
       */
    loading: {
      type: Boolean,
      default: false
    },
    /**
       * Disables the multiselect if true.
       * @default false
       * @type {Boolean}
       */
    disabled: {
      type: Boolean,
      default: false
    },
    /**
     * Enables search input's spellcheck if true.
     * @default false
     * @type {Boolean}
     */
    spellcheck: {
      type: Boolean,
      default: false
    },
    /**
       * Fixed opening direction
       * @default ''
       * @type {String}
       */
    openDirection: {
      type: String,
      default: ""
    },
    /**
       * Shows slot with message about empty options
       * @default true
       * @type {Boolean}
       */
    showNoOptions: {
      type: Boolean,
      default: true
    },
    showNoResults: {
      type: Boolean,
      default: true
    },
    tabindex: {
      type: Number,
      default: 0
    },
    required: {
      type: Boolean,
      default: false
    }
  },
  computed: {
    hasOptionGroup() {
      return this.groupValues && this.groupLabel && this.groupSelect;
    },
    isSingleLabelVisible() {
      return (this.singleValue || this.singleValue === 0) && (!this.isOpen || !this.searchable) && !this.visibleValues.length;
    },
    isPlaceholderVisible() {
      return !this.internalValue.length && (!this.searchable || !this.isOpen);
    },
    visibleValues() {
      return this.multiple ? this.internalValue.slice(0, this.limit) : [];
    },
    singleValue() {
      return this.internalValue[0];
    },
    deselectLabelText() {
      return this.showLabels ? this.deselectLabel : "";
    },
    deselectGroupLabelText() {
      return this.showLabels ? this.deselectGroupLabel : "";
    },
    selectLabelText() {
      return this.showLabels ? this.selectLabel : "";
    },
    selectGroupLabelText() {
      return this.showLabels ? this.selectGroupLabel : "";
    },
    selectedLabelText() {
      return this.showLabels ? this.selectedLabel : "";
    },
    inputStyle() {
      if (this.searchable || this.multiple && this.modelValue && this.modelValue.length) {
        return this.isOpen ? { width: "100%" } : { width: "0", position: "absolute", padding: "0" };
      }
      return "";
    },
    contentStyle() {
      return this.options.length ? { display: "inline-block" } : { display: "block" };
    },
    isAbove() {
      if (this.openDirection === "above" || this.openDirection === "top") {
        return true;
      } else if (this.openDirection === "below" || this.openDirection === "bottom") {
        return false;
      } else {
        return this.preferredOpenDirection === "above";
      }
    },
    showSearchInput() {
      return this.searchable && (this.hasSingleSelectedSlot && (this.visibleSingleValue || this.visibleSingleValue === 0) ? this.isOpen : true);
    }
  }
};
const _hoisted_1$8 = {
  ref: "tags",
  class: "multiselect__tags"
};
const _hoisted_2$5 = { class: "multiselect__tags-wrap" };
const _hoisted_3$4 = { class: "multiselect__spinner" };
const _hoisted_4$3 = { key: 0 };
const _hoisted_5$2 = { class: "multiselect__option" };
const _hoisted_6$1 = { class: "multiselect__option" };
const _hoisted_7$1 = /* @__PURE__ */ createTextVNode("No elements found. Consider changing the search query.");
const _hoisted_8$1 = { class: "multiselect__option" };
const _hoisted_9$1 = /* @__PURE__ */ createTextVNode("List is empty.");
function render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock("div", {
    tabindex: _ctx.searchable ? -1 : $props.tabindex,
    class: [{ "multiselect--active": _ctx.isOpen, "multiselect--disabled": $props.disabled, "multiselect--above": $options.isAbove, "multiselect--has-options-group": $options.hasOptionGroup }, "multiselect"],
    onFocus: _cache[14] || (_cache[14] = ($event) => _ctx.activate()),
    onBlur: _cache[15] || (_cache[15] = ($event) => _ctx.searchable ? false : _ctx.deactivate()),
    onKeydown: [
      _cache[16] || (_cache[16] = withKeys(withModifiers(($event) => _ctx.pointerForward(), ["self", "prevent"]), ["down"])),
      _cache[17] || (_cache[17] = withKeys(withModifiers(($event) => _ctx.pointerBackward(), ["self", "prevent"]), ["up"]))
    ],
    onKeypress: _cache[18] || (_cache[18] = withKeys(withModifiers(($event) => _ctx.addPointerElement($event), ["stop", "self"]), ["enter", "tab"])),
    onKeyup: _cache[19] || (_cache[19] = withKeys(($event) => _ctx.deactivate(), ["esc"])),
    role: "combobox",
    "aria-owns": "listbox-" + _ctx.id
  }, [
    renderSlot(_ctx.$slots, "caret", { toggle: _ctx.toggle }, () => [
      createVNode(
        "div",
        {
          onMousedown: _cache[1] || (_cache[1] = withModifiers(($event) => _ctx.toggle(), ["prevent", "stop"])),
          class: "multiselect__select"
        },
        null,
        32
        /* HYDRATE_EVENTS */
      )
    ]),
    renderSlot(_ctx.$slots, "clear", { search: _ctx.search }),
    createVNode(
      "div",
      _hoisted_1$8,
      [
        renderSlot(_ctx.$slots, "selection", {
          search: _ctx.search,
          remove: _ctx.removeElement,
          values: $options.visibleValues,
          isOpen: _ctx.isOpen
        }, () => [
          withDirectives(createVNode(
            "div",
            _hoisted_2$5,
            [
              (openBlock(true), createBlock(
                Fragment,
                null,
                renderList($options.visibleValues, (option, index2) => {
                  return renderSlot(_ctx.$slots, "tag", {
                    option,
                    search: _ctx.search,
                    remove: _ctx.removeElement
                  }, () => [
                    (openBlock(), createBlock("span", {
                      class: "multiselect__tag",
                      key: index2
                    }, [
                      createVNode("span", {
                        textContent: toDisplayString(_ctx.getOptionLabel(option))
                      }, null, 8, ["textContent"]),
                      createVNode("i", {
                        tabindex: "1",
                        onKeypress: withKeys(withModifiers(($event) => _ctx.removeElement(option), ["prevent"]), ["enter"]),
                        onMousedown: withModifiers(($event) => _ctx.removeElement(option), ["prevent"]),
                        class: "multiselect__tag-icon"
                      }, null, 40, ["onKeypress", "onMousedown"])
                    ]))
                  ]);
                }),
                256
                /* UNKEYED_FRAGMENT */
              ))
            ],
            512
            /* NEED_PATCH */
          ), [
            [vShow, $options.visibleValues.length > 0]
          ]),
          _ctx.internalValue && _ctx.internalValue.length > $props.limit ? renderSlot(_ctx.$slots, "limit", { key: 0 }, () => [
            createVNode("strong", {
              class: "multiselect__strong",
              textContent: toDisplayString($props.limitText(_ctx.internalValue.length - $props.limit))
            }, null, 8, ["textContent"])
          ]) : createCommentVNode("v-if", true)
        ]),
        createVNode(Transition, { name: "multiselect__loading" }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "loading", {}, () => [
              withDirectives(createVNode(
                "div",
                _hoisted_3$4,
                null,
                512
                /* NEED_PATCH */
              ), [
                [vShow, $props.loading]
              ])
            ])
          ]),
          _: 3
          /* FORWARDED */
        }),
        _ctx.searchable ? (openBlock(), createBlock("input", {
          key: 0,
          ref: "search",
          name: $props.name,
          id: _ctx.id,
          type: "text",
          autocomplete: "off",
          spellcheck: $props.spellcheck,
          placeholder: _ctx.placeholder,
          required: $props.required,
          style: $options.inputStyle,
          value: _ctx.search,
          disabled: $props.disabled,
          tabindex: $props.tabindex,
          onInput: _cache[2] || (_cache[2] = ($event) => _ctx.updateSearch($event.target.value)),
          onFocus: _cache[3] || (_cache[3] = withModifiers(($event) => _ctx.activate(), ["prevent"])),
          onBlur: _cache[4] || (_cache[4] = withModifiers(($event) => _ctx.deactivate(), ["prevent"])),
          onKeyup: _cache[5] || (_cache[5] = withKeys(($event) => _ctx.deactivate(), ["esc"])),
          onKeydown: [
            _cache[6] || (_cache[6] = withKeys(withModifiers(($event) => _ctx.pointerForward(), ["prevent"]), ["down"])),
            _cache[7] || (_cache[7] = withKeys(withModifiers(($event) => _ctx.pointerBackward(), ["prevent"]), ["up"])),
            _cache[9] || (_cache[9] = withKeys(withModifiers(($event) => _ctx.removeLastElement(), ["stop"]), ["delete"]))
          ],
          onKeypress: _cache[8] || (_cache[8] = withKeys(withModifiers(($event) => _ctx.addPointerElement($event), ["prevent", "stop", "self"]), ["enter"])),
          class: "multiselect__input",
          "aria-controls": "listbox-" + _ctx.id
        }, null, 44, ["name", "id", "spellcheck", "placeholder", "required", "value", "disabled", "tabindex", "aria-controls"])) : createCommentVNode("v-if", true),
        $options.isSingleLabelVisible ? (openBlock(), createBlock(
          "span",
          {
            key: 1,
            class: "multiselect__single",
            onMousedown: _cache[10] || (_cache[10] = withModifiers((...args) => _ctx.toggle && _ctx.toggle(...args), ["prevent"]))
          },
          [
            renderSlot(_ctx.$slots, "singleLabel", { option: $options.singleValue }, () => [
              createTextVNode(
                toDisplayString(_ctx.currentOptionLabel),
                1
                /* TEXT */
              )
            ])
          ],
          32
          /* HYDRATE_EVENTS */
        )) : createCommentVNode("v-if", true),
        $options.isPlaceholderVisible ? (openBlock(), createBlock(
          "span",
          {
            key: 2,
            class: "multiselect__placeholder",
            onMousedown: _cache[11] || (_cache[11] = withModifiers((...args) => _ctx.toggle && _ctx.toggle(...args), ["prevent"]))
          },
          [
            renderSlot(_ctx.$slots, "placeholder", {}, () => [
              createTextVNode(
                toDisplayString(_ctx.placeholder),
                1
                /* TEXT */
              )
            ])
          ],
          32
          /* HYDRATE_EVENTS */
        )) : createCommentVNode("v-if", true)
      ],
      512
      /* NEED_PATCH */
    ),
    createVNode(Transition, { name: "multiselect" }, {
      default: withCtx(() => [
        withDirectives(createVNode(
          "div",
          {
            class: "multiselect__content-wrapper",
            onFocus: _cache[12] || (_cache[12] = (...args) => _ctx.activate && _ctx.activate(...args)),
            tabindex: "-1",
            onMousedown: _cache[13] || (_cache[13] = withModifiers(() => {
            }, ["prevent"])),
            style: { maxHeight: _ctx.optimizedHeight + "px" },
            ref: "list"
          },
          [
            createVNode("ul", {
              class: "multiselect__content",
              style: $options.contentStyle,
              role: "listbox",
              id: "listbox-" + _ctx.id,
              "aria-multiselectable": _ctx.multiple
            }, [
              renderSlot(_ctx.$slots, "beforeList"),
              _ctx.multiple && _ctx.max === _ctx.internalValue.length ? (openBlock(), createBlock("li", _hoisted_4$3, [
                createVNode("span", _hoisted_5$2, [
                  renderSlot(_ctx.$slots, "maxElements", {}, () => [
                    createTextVNode(
                      "Maximum of " + toDisplayString(_ctx.max) + " options selected. First remove a selected option to select another.",
                      1
                      /* TEXT */
                    )
                  ])
                ])
              ])) : createCommentVNode("v-if", true),
              !_ctx.max || _ctx.internalValue.length < _ctx.max ? (openBlock(true), createBlock(
                Fragment,
                { key: 1 },
                renderList(_ctx.filteredOptions, (option, index2) => {
                  return openBlock(), createBlock("li", {
                    class: "multiselect__element",
                    key: index2,
                    "aria-selected": _ctx.isSelected(option),
                    id: _ctx.id + "-" + index2,
                    role: !(option && (option.$isLabel || option.$isDisabled)) ? "option" : null
                  }, [
                    !(option && (option.$isLabel || option.$isDisabled)) ? (openBlock(), createBlock("span", {
                      key: 0,
                      class: [_ctx.optionHighlight(index2, option), "multiselect__option"],
                      onClick: withModifiers(($event) => _ctx.select(option), ["stop"]),
                      onMouseenter: withModifiers(($event) => _ctx.pointerSet(index2), ["self"]),
                      "data-select": option && option.isTag ? _ctx.tagPlaceholder : $options.selectLabelText,
                      "data-selected": $options.selectedLabelText,
                      "data-deselect": $options.deselectLabelText
                    }, [
                      renderSlot(_ctx.$slots, "option", {
                        option,
                        search: _ctx.search,
                        index: index2
                      }, () => [
                        createVNode(
                          "span",
                          null,
                          toDisplayString(_ctx.getOptionLabel(option)),
                          1
                          /* TEXT */
                        )
                      ])
                    ], 42, ["onClick", "onMouseenter", "data-select", "data-selected", "data-deselect"])) : createCommentVNode("v-if", true),
                    option && (option.$isLabel || option.$isDisabled) ? (openBlock(), createBlock("span", {
                      key: 1,
                      "data-select": _ctx.groupSelect && $options.selectGroupLabelText,
                      "data-deselect": _ctx.groupSelect && $options.deselectGroupLabelText,
                      class: [_ctx.groupHighlight(index2, option), "multiselect__option"],
                      onMouseenter: withModifiers(($event) => _ctx.groupSelect && _ctx.pointerSet(index2), ["self"]),
                      onMousedown: withModifiers(($event) => _ctx.selectGroup(option), ["prevent"])
                    }, [
                      renderSlot(_ctx.$slots, "option", {
                        option,
                        search: _ctx.search,
                        index: index2
                      }, () => [
                        createVNode(
                          "span",
                          null,
                          toDisplayString(_ctx.getOptionLabel(option)),
                          1
                          /* TEXT */
                        )
                      ])
                    ], 42, ["data-select", "data-deselect", "onMouseenter", "onMousedown"])) : createCommentVNode("v-if", true)
                  ], 8, ["aria-selected", "id", "role"]);
                }),
                128
                /* KEYED_FRAGMENT */
              )) : createCommentVNode("v-if", true),
              withDirectives(createVNode(
                "li",
                null,
                [
                  createVNode("span", _hoisted_6$1, [
                    renderSlot(_ctx.$slots, "noResult", { search: _ctx.search }, () => [
                      _hoisted_7$1
                    ])
                  ])
                ],
                512
                /* NEED_PATCH */
              ), [
                [vShow, $props.showNoResults && (_ctx.filteredOptions.length === 0 && _ctx.search && !$props.loading)]
              ]),
              withDirectives(createVNode(
                "li",
                null,
                [
                  createVNode("span", _hoisted_8$1, [
                    renderSlot(_ctx.$slots, "noOptions", {}, () => [
                      _hoisted_9$1
                    ])
                  ])
                ],
                512
                /* NEED_PATCH */
              ), [
                [vShow, $props.showNoOptions && ((_ctx.options.length === 0 || $options.hasOptionGroup === true && _ctx.filteredOptions.length === 0) && !_ctx.search && !$props.loading)]
              ]),
              renderSlot(_ctx.$slots, "afterList")
            ], 12, ["id", "aria-multiselectable"])
          ],
          36
          /* STYLE, HYDRATE_EVENTS */
        ), [
          [vShow, _ctx.isOpen]
        ])
      ]),
      _: 3
      /* FORWARDED */
    })
  ], 42, ["tabindex", "aria-owns"]);
}
script.render = render;
const _sfc_main$b = {
  data() {
    return {
      value: null,
      disabled: false
    };
  },
  props: [
    "selectId",
    "isDisabled",
    "placeholder",
    "options",
    "selected"
  ],
  components: {
    Multiselect: script
  },
  watch: {
    value: function(newValue, oldValue) {
      this.value = newValue;
      this.$emit("option-chosen", newValue);
    },
    selected: function(newValue, oldValue) {
      this.value = newValue;
    }
  },
  mounted() {
    this.value = this.selected;
  },
  emits: ["option-chosen"]
};
const _hoisted_1$7 = { class: "d-flex" };
const _hoisted_2$4 = ["innerHTML"];
const _hoisted_3$3 = { class: "d-flex" };
const _hoisted_4$2 = ["innerHTML"];
function _sfc_render$b(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_Multiselect = resolveComponent("Multiselect");
  return openBlock(), createBlock(_component_Multiselect, {
    options: $props.options,
    id: this.selectId,
    modelValue: this.value,
    "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => this.value = $event),
    disabled: this.disabled,
    searchable: true,
    "close-on-select": true,
    "show-labels": true,
    label: "label",
    "track-by": "id",
    placeholder: this.placeholder
  }, {
    singleLabel: withCtx(({ option }) => [
      createBaseVNode("div", _hoisted_1$7, [
        createBaseVNode("div", {
          innerHTML: option.code
        }, null, 8, _hoisted_2$4),
        createTextVNode(" - " + toDisplayString(option.label), 1)
      ])
    ]),
    option: withCtx(({ option }) => [
      createBaseVNode("div", _hoisted_3$3, [
        createBaseVNode("div", {
          innerHTML: option.code
        }, null, 8, _hoisted_4$2),
        createTextVNode(" - " + toDisplayString(option.label), 1)
      ])
    ]),
    _: 1
  }, 8, ["options", "id", "modelValue", "disabled", "placeholder"]);
}
const InputSelectSearch = /* @__PURE__ */ _export_sfc(_sfc_main$b, [["render", _sfc_render$b]]);
const a = {
  aliases: {
    unicodes: {
      composite: [
        "61"
      ]
    }
  },
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "A",
  search: {
    terms: [
      "Latin Capital Letter A",
      "Latin Small Letter A",
      "letter"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "41",
  voted: false
};
const accusoft = {
  changes: [
    "5.0.0"
  ],
  label: "Accusoft",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f369",
  voted: false
};
const adn = {
  changes: [
    "3.2.0",
    "5.0.0"
  ],
  label: "App.net",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f170",
  voted: false
};
const adversal = {
  changes: [
    "5.0.0"
  ],
  label: "Adversal",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f36a",
  voted: false
};
const affiliatetheme = {
  changes: [
    "5.0.0"
  ],
  label: "affiliatetheme",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f36b",
  voted: false
};
const airbnb = {
  changes: [
    "5.8.0"
  ],
  label: "Airbnb",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f834",
  voted: false
};
const algolia = {
  changes: [
    "5.0.0",
    "6.3.0"
  ],
  label: "Algolia",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f36c",
  voted: false
};
const alipay = {
  changes: [
    "5.3.0"
  ],
  label: "Alipay",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f642",
  voted: false
};
const amazon = {
  changes: [
    "4.4.0",
    "5.0.0"
  ],
  label: "Amazon",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f270",
  voted: false
};
const amilia = {
  changes: [
    "5.0.0"
  ],
  label: "Amilia",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f36d",
  voted: false
};
const anchor = {
  aliases: {
    unicodes: {
      composite: [
        "2693"
      ],
      secondary: [
        "10f13d"
      ]
    }
  },
  changes: [
    "3.1.0",
    "5.0.0",
    "5.11.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Anchor",
  search: {
    terms: [
      "anchor",
      "berth",
      "boat",
      "dock",
      "embed",
      "link",
      "maritime",
      "moor",
      "port",
      "secure",
      "ship",
      "tool"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f13d",
  voted: false
};
const android = {
  changes: [
    "3.2.0",
    "5.0.0",
    "5.12.0"
  ],
  label: "Android",
  search: {
    terms: [
      "robot"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f17b",
  voted: false
};
const angellist = {
  changes: [
    "4.2.0",
    "5.0.0"
  ],
  label: "AngelList",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f209",
  voted: false
};
const angrycreative = {
  changes: [
    "5.0.0"
  ],
  label: "Angry Creative",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f36e",
  voted: false
};
const angular = {
  changes: [
    "5.0.0",
    "5.8.0"
  ],
  label: "Angular",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f420",
  voted: false
};
const ankh = {
  aliases: {
    unicodes: {
      composite: [
        "2625"
      ],
      secondary: [
        "10f644"
      ]
    }
  },
  changes: [
    "5.3.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Ankh",
  search: {
    terms: [
      "Ankh",
      "amulet",
      "copper",
      "coptic christianity",
      "copts",
      "crux ansata",
      "egypt",
      "venus"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f644",
  voted: false
};
const apper = {
  changes: [
    "5.0.0"
  ],
  label: "Apper Systems AB",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f371",
  voted: false
};
const apple = {
  changes: [
    "3.2.0",
    "5.0.0",
    "5.0.7",
    "5.8.0"
  ],
  label: "Apple",
  search: {
    terms: [
      "fruit",
      "ios",
      "mac",
      "operating system",
      "os",
      "osx"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f179",
  voted: false
};
const archway = {
  aliases: {
    unicodes: {
      secondary: [
        "10f557"
      ]
    }
  },
  changes: [
    "5.1.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Archway",
  search: {
    terms: [
      "arc",
      "monument",
      "road",
      "street",
      "tunnel"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f557",
  voted: false
};
const artstation = {
  changes: [
    "5.6.0",
    "5.8.0"
  ],
  label: "Artstation",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f77a",
  voted: true
};
const asterisk = {
  aliases: {
    unicodes: {
      composite: [
        "2731",
        "f069"
      ],
      primary: [
        "f069"
      ],
      secondary: [
        "102a",
        "10f069"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Asterisk",
  search: {
    terms: [
      "Asterisk",
      "Heavy Asterisk",
      "annotation",
      "details",
      "reference",
      "required",
      "star"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "2a",
  voted: false
};
const asymmetrik = {
  changes: [
    "5.0.0"
  ],
  label: "Asymmetrik, Ltd.",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f372",
  voted: false
};
const at = {
  aliases: {
    unicodes: {
      composite: [
        "f1fa"
      ],
      primary: [
        "f1fa"
      ],
      secondary: [
        "10f1fa"
      ]
    }
  },
  changes: [
    "4.2.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "At",
  search: {
    terms: [
      "Commercial At",
      "address",
      "author",
      "e-mail",
      "email",
      "fluctuate",
      "handle"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "40",
  voted: false
};
const atlassian = {
  changes: [
    "5.6.0"
  ],
  label: "Atlassian",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f77b",
  voted: true
};
const atom = {
  aliases: {
    unicodes: {
      composite: [
        "269b"
      ],
      secondary: [
        "10f5d2"
      ]
    }
  },
  changes: [
    "5.2.0",
    "5.12.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Atom",
  search: {
    terms: [
      "atheism",
      "atheist",
      "atom",
      "atom symbol",
      "chemistry",
      "electron",
      "ion",
      "isotope",
      "knowledge",
      "neutron",
      "nuclear",
      "proton",
      "science"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f5d2",
  voted: false
};
const audible = {
  changes: [
    "5.0.0"
  ],
  label: "Audible",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f373",
  voted: false
};
const autoprefixer = {
  changes: [
    "5.0.0"
  ],
  label: "Autoprefixer",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f41c",
  voted: false
};
const avianex = {
  changes: [
    "5.0.0"
  ],
  label: "avianex",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f374",
  voted: false
};
const aviato = {
  changes: [
    "5.0.0"
  ],
  label: "Aviato",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f421",
  voted: false
};
const award = {
  aliases: {
    unicodes: {
      secondary: [
        "10f559"
      ]
    }
  },
  changes: [
    "5.1.0",
    "5.2.0",
    "5.10.2",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Award",
  search: {
    terms: [
      "guarantee",
      "honor",
      "praise",
      "prize",
      "recognition",
      "ribbon",
      "trophy",
      "warranty"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f559",
  voted: true
};
const aws = {
  changes: [
    "5.0.0",
    "5.1.0"
  ],
  label: "Amazon Web Services (AWS)",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f375",
  voted: false
};
const b = {
  aliases: {
    unicodes: {
      composite: [
        "62"
      ]
    }
  },
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "B",
  search: {
    terms: [
      "Latin Capital Letter B",
      "Latin Small Letter B",
      "letter"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "42",
  voted: false
};
const baby = {
  aliases: {
    unicodes: {
      secondary: [
        "10f77c"
      ]
    }
  },
  changes: [
    "5.6.0",
    "5.10.1",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Baby",
  search: {
    terms: [
      "uer",
      "users-people"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f77c",
  voted: true
};
const backward = {
  aliases: {
    unicodes: {
      composite: [
        "23ea"
      ],
      secondary: [
        "10f04a"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Backward",
  search: {
    terms: [
      "arrow",
      "double",
      "fast reverse button",
      "previous",
      "rewind"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f04a",
  voted: false
};
const bacon = {
  aliases: {
    unicodes: {
      composite: [
        "1f953"
      ],
      secondary: [
        "10f7e5"
      ]
    }
  },
  changes: [
    "5.7.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Bacon",
  search: {
    terms: [
      "bacon",
      "blt",
      "breakfast",
      "food",
      "ham",
      "lard",
      "meat",
      "pancetta",
      "pork",
      "rasher"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f7e5",
  voted: false
};
const bacteria = {
  aliases: {
    unicodes: {
      secondary: [
        "10e059"
      ]
    }
  },
  changes: [
    "5.13.0",
    "5.13.1",
    "5.14.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Bacteria",
  search: {
    terms: [
      "antibiotic",
      "antibody",
      "covid-19",
      "health",
      "organism",
      "sick"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e059",
  voted: false
};
const bacterium = {
  aliases: {
    unicodes: {
      secondary: [
        "10e05a"
      ]
    }
  },
  changes: [
    "5.13.0",
    "5.13.1",
    "5.14.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Bacterium",
  search: {
    terms: [
      "antibiotic",
      "antibody",
      "covid-19",
      "germ",
      "health",
      "organism",
      "sick"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e05a",
  voted: false
};
const bahai = {
  aliases: {
    names: [
      "haykal"
    ],
    unicodes: {
      secondary: [
        "10f666"
      ]
    }
  },
  changes: [
    "5.3.0",
    "5.12.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Bahai",
  search: {
    terms: [
      "bahai",
      "bahá'í",
      "star"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f666",
  voted: false
};
const ban = {
  aliases: {
    names: [
      "cancel"
    ],
    unicodes: {
      composite: [
        "1f6ab"
      ],
      secondary: [
        "10f05e"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Ban",
  search: {
    terms: [
      "404",
      "abort",
      "ban",
      "block",
      "cancel",
      "delete",
      "deny",
      "disabled",
      "entry",
      "failed",
      "forbidden",
      "hide",
      "no",
      "not",
      "not found",
      "prohibit",
      "prohibited",
      "remove",
      "stop",
      "trash"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f05e",
  voted: false
};
const bandage = {
  aliases: {
    names: [
      "band-aid"
    ],
    unicodes: {
      composite: [
        "1fa79"
      ],
      secondary: [
        "10f462"
      ]
    }
  },
  changes: [
    "5.0.7",
    "5.10.2",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Bandage",
  search: {
    terms: [
      "adhesive bandage",
      "bandage",
      "boo boo",
      "first aid",
      "modify",
      "ouch"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f462",
  voted: false
};
const bandcamp = {
  changes: [
    "4.7.0",
    "5.0.0",
    "5.13.1"
  ],
  label: "Bandcamp",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f2d5",
  voted: false
};
const barcode = {
  aliases: {
    unicodes: {
      secondary: [
        "10f02a"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Barcode",
  search: {
    terms: [
      "info",
      "laser",
      "price",
      "scan",
      "upc"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f02a",
  voted: false
};
const bars = {
  aliases: {
    names: [
      "navicon"
    ],
    unicodes: {
      secondary: [
        "10f0c9"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Bars",
  search: {
    terms: [
      "checklist",
      "drag",
      "hamburger",
      "list",
      "menu",
      "nav",
      "navigation",
      "ol",
      "reorder",
      "settings",
      "todo",
      "ul"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f0c9",
  voted: false
};
const baseball = {
  aliases: {
    names: [
      "baseball-ball"
    ],
    unicodes: {
      composite: [
        "1f94e",
        "26be"
      ],
      secondary: [
        "10f433"
      ]
    }
  },
  changes: [
    "5.0.5",
    "5.11.0",
    "5.11.1",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Baseball",
  search: {
    terms: [
      "ball",
      "baseball",
      "foul",
      "glove",
      "hardball",
      "league",
      "leather",
      "mlb",
      "softball",
      "sport",
      "underarm"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f433",
  voted: false
};
const basketball = {
  aliases: {
    names: [
      "basketball-ball"
    ],
    unicodes: {
      composite: [
        "1f3c0"
      ],
      secondary: [
        "10f434"
      ]
    }
  },
  changes: [
    "5.0.5",
    "5.11.0",
    "5.11.1",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Basketball",
  search: {
    terms: [
      "ball",
      "basketball",
      "dribble",
      "dunk",
      "hoop",
      "nba"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f434",
  voted: false
};
const bath = {
  aliases: {
    names: [
      "bathtub"
    ],
    unicodes: {
      composite: [
        "1f6c1"
      ],
      secondary: [
        "10f2cd"
      ]
    }
  },
  changes: [
    "4.7.0",
    "5.0.0",
    "5.12.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Bath",
  search: {
    terms: [
      "bath",
      "bathtub",
      "clean",
      "shower",
      "tub",
      "wash"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f2cd",
  voted: false
};
const bed = {
  aliases: {
    unicodes: {
      composite: [
        "1f6cc"
      ],
      secondary: [
        "10f236"
      ]
    }
  },
  changes: [
    "4.3.0",
    "5.0.0",
    "5.1.0",
    "6.0.0-beta1",
    "6.1.2",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Bed",
  search: {
    terms: [
      "hospital",
      "hotel",
      "lodging",
      "mattress",
      "patient",
      "person in bed",
      "rest",
      "sleep",
      "travel",
      "uer"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f236",
  voted: false
};
const behance = {
  changes: [
    "4.1.0",
    "5.0.0"
  ],
  label: "Behance",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f1b4",
  voted: false
};
const bell = {
  aliases: {
    unicodes: {
      composite: [
        "1f514",
        "f0a2"
      ],
      secondary: [
        "10f0f3"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "5.2.0",
    "5.11.0",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Bell",
  search: {
    terms: [
      "alarm",
      "alert",
      "bel",
      "bell",
      "chime",
      "notification",
      "reminder",
      "request"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f0f3",
  voted: false
};
const bicycle = {
  aliases: {
    unicodes: {
      composite: [
        "1f6b2"
      ],
      secondary: [
        "10f206"
      ]
    }
  },
  changes: [
    "4.2.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Bicycle",
  search: {
    terms: [
      "bicycle",
      "bike",
      "gears",
      "pedal",
      "transportation",
      "vehicle"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f206",
  voted: false
};
const bilibili = {
  changes: [
    "6.0.0-beta2"
  ],
  label: "Bilibili",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e3d9",
  voted: true
};
const bimobject = {
  changes: [
    "5.0.0"
  ],
  label: "BIMobject",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f378",
  voted: false
};
const binoculars = {
  aliases: {
    unicodes: {
      secondary: [
        "10f1e5"
      ]
    }
  },
  changes: [
    "4.2.0",
    "5.0.0",
    "5.2.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Binoculars",
  search: {
    terms: [
      "glasses",
      "inspection",
      "magnifier",
      "magnify",
      "scenic",
      "spyglass",
      "view"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f1e5",
  voted: false
};
const biohazard = {
  aliases: {
    unicodes: {
      composite: [
        "2623"
      ],
      secondary: [
        "10f780"
      ]
    }
  },
  changes: [
    "5.6.0",
    "5.7.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Biohazard",
  search: {
    terms: [
      "biohazard",
      "covid-19",
      "danger",
      "dangerous",
      "epidemic",
      "hazmat",
      "medical",
      "pandemic",
      "radioactive",
      "sign",
      "toxic",
      "waste",
      "zombie"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f780",
  voted: true
};
const bitbucket = {
  aliases: {
    unicodes: {
      composite: [
        "f172"
      ]
    }
  },
  changes: [
    "3.2.0",
    "5.0.0",
    "5.6.0",
    "5.8.0"
  ],
  label: "Bitbucket",
  search: {
    terms: [
      "atlassian",
      "bitbucket-square",
      "git"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f171",
  voted: false
};
const bitcoin = {
  changes: [
    "5.0.0"
  ],
  label: "Bitcoin",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f379",
  voted: false
};
const bity = {
  changes: [
    "5.0.0"
  ],
  label: "Bity",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f37a",
  voted: false
};
const blackberry = {
  changes: [
    "5.0.0"
  ],
  label: "BlackBerry",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f37b",
  voted: false
};
const blender = {
  aliases: {
    unicodes: {
      secondary: [
        "10f517"
      ]
    }
  },
  changes: [
    "5.0.13",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Blender",
  search: {
    terms: [
      "cocktail",
      "milkshake",
      "mixer",
      "puree",
      "smoothie"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f517",
  voted: false
};
const blog = {
  aliases: {
    unicodes: {
      secondary: [
        "10f781"
      ]
    }
  },
  changes: [
    "5.6.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Blog",
  search: {
    terms: [
      "journal",
      "log",
      "online",
      "personal",
      "post",
      "web 2.0",
      "wordpress",
      "writing"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f781",
  voted: true
};
const blogger = {
  changes: [
    "5.0.0"
  ],
  label: "Blogger",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f37c",
  voted: false
};
const bluesky = {
  changes: [
    "6.5.2",
    "6.7.0",
    "6.7.1"
  ],
  label: "Bluesky",
  search: {
    terms: [
      "social network"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "e671",
  voted: false
};
const bluetooth = {
  aliases: {
    unicodes: {
      secondary: [
        "10f293"
      ]
    }
  },
  changes: [
    "4.5.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Bluetooth",
  search: {
    terms: [
      "signal"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f293",
  voted: false
};
const bold = {
  aliases: {
    unicodes: {
      secondary: [
        "10f032"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.9.0",
    "5.10.2",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Bold",
  search: {
    terms: [
      "emphasis",
      "format",
      "text"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f032",
  voted: false
};
const bolt = {
  aliases: {
    names: [
      "zap"
    ],
    unicodes: {
      composite: [
        "26a1"
      ],
      secondary: [
        "10f0e7"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "5.5.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Bolt",
  search: {
    terms: [
      "charge",
      "danger",
      "electric",
      "electricity",
      "flash",
      "high voltage",
      "lightning",
      "voltage",
      "weather",
      "zap"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f0e7",
  voted: false
};
const bomb = {
  aliases: {
    unicodes: {
      composite: [
        "1f4a3"
      ],
      secondary: [
        "10f1e2"
      ]
    }
  },
  changes: [
    "4.1.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.1.2",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Bomb",
  search: {
    terms: [
      "bomb",
      "comic",
      "error",
      "explode",
      "fuse",
      "grenade",
      "warning"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f1e2",
  voted: false
};
const bone = {
  aliases: {
    unicodes: {
      composite: [
        "1f9b4"
      ],
      secondary: [
        "10f5d7"
      ]
    }
  },
  changes: [
    "5.2.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Bone",
  search: {
    terms: [
      "bone",
      "calcium",
      "dog",
      "skeletal",
      "skeleton",
      "tibia"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f5d7",
  voted: false
};
const bong = {
  aliases: {
    unicodes: {
      secondary: [
        "10f55c"
      ]
    }
  },
  changes: [
    "5.1.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Bong",
  search: {
    terms: [
      "aparatus",
      "cannabis",
      "marijuana",
      "pipe",
      "smoke",
      "smoking"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f55c",
  voted: false
};
const book = {
  aliases: {
    unicodes: {
      composite: [
        "1f4d4"
      ],
      secondary: [
        "10f02d"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Book",
  search: {
    terms: [
      "book",
      "cover",
      "decorated",
      "diary",
      "documentation",
      "journal",
      "knowledge",
      "library",
      "notebook",
      "notebook with decorative cover",
      "read",
      "research",
      "scholar"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f02d",
  voted: false
};
const bookmark = {
  aliases: {
    unicodes: {
      composite: [
        "1f516",
        "f097"
      ],
      secondary: [
        "10f02e"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.10.2",
    "6.0.0-beta1",
    "6.1.2",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Bookmark",
  search: {
    terms: [
      "bookmark",
      "favorite",
      "library",
      "mark",
      "marker",
      "read",
      "remember",
      "research",
      "save"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f02e",
  voted: false
};
const bootstrap = {
  changes: [
    "5.8.0",
    "5.15.4",
    "6.0.0-beta1"
  ],
  label: "Bootstrap",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f836",
  voted: false
};
const bots = {
  changes: [
    "6.0.0-beta1"
  ],
  label: "Bots",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e340",
  voted: false
};
const box = {
  aliases: {
    unicodes: {
      composite: [
        "1f4e6"
      ],
      secondary: [
        "10f466"
      ]
    }
  },
  changes: [
    "5.0.7",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Box",
  search: {
    terms: [
      "archive",
      "box",
      "container",
      "package",
      "parcel",
      "storage"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f466",
  voted: false
};
const braille = {
  aliases: {
    unicodes: {
      secondary: [
        "10f2a1"
      ]
    }
  },
  changes: [
    "4.6.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Braille",
  search: {
    terms: [
      "alphabet",
      "blind",
      "dots",
      "raised",
      "vision"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f2a1",
  voted: false
};
const brain = {
  aliases: {
    unicodes: {
      composite: [
        "1f9e0"
      ],
      secondary: [
        "10f5dc"
      ]
    }
  },
  changes: [
    "5.2.0",
    "5.9.0",
    "5.11.0",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Brain",
  search: {
    terms: [
      "brain",
      "cerebellum",
      "gray matter",
      "intellect",
      "intelligent",
      "knowledge",
      "medulla oblongata",
      "mind",
      "noodle",
      "scholar",
      "wit"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f5dc",
  voted: false
};
const brave = {
  changes: [
    "6.5.0"
  ],
  label: "Brave",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e63c",
  voted: false
};
const bridge = {
  changes: [
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Bridge",
  search: {
    terms: [
      "bridge",
      "road"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e4c8",
  voted: false
};
const briefcase = {
  aliases: {
    unicodes: {
      composite: [
        "1f4bc"
      ],
      secondary: [
        "10f0b1"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "5.3.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Briefcase",
  search: {
    terms: [
      "bag",
      "briefcas",
      "briefcase",
      "business",
      "luggage",
      "offer",
      "office",
      "portfolio",
      "work"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f0b1",
  voted: false
};
const broom = {
  aliases: {
    unicodes: {
      composite: [
        "1f9f9"
      ],
      secondary: [
        "10f51a"
      ]
    }
  },
  changes: [
    "5.0.13",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Broom",
  search: {
    terms: [
      "broom",
      "clean",
      "cleaning",
      "firebolt",
      "fly",
      "halloween",
      "nimbus 2000",
      "quidditch",
      "sweep",
      "sweeping",
      "witch"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f51a",
  voted: true
};
const brush = {
  aliases: {
    unicodes: {
      secondary: [
        "10f55d"
      ]
    }
  },
  changes: [
    "5.1.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Brush",
  search: {
    terms: [
      "art",
      "bristles",
      "color",
      "handle",
      "maintenance",
      "modify",
      "paint"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f55d",
  voted: false
};
const btc = {
  changes: [
    "3.2.0",
    "5.0.0"
  ],
  label: "BTC",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f15a",
  voted: false
};
const bucket = {
  changes: [
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Bucket",
  search: {
    terms: [
      "bucket",
      "pail",
      "sandcastle"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e4cf",
  voted: false
};
const buffer = {
  changes: [
    "5.8.0"
  ],
  label: "Buffer",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f837",
  voted: false
};
const bug = {
  aliases: {
    unicodes: {
      secondary: [
        "10f188"
      ]
    }
  },
  changes: [
    "3.2.0",
    "5.0.0",
    "5.15.4",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Bug",
  search: {
    terms: [
      "beetle",
      "error",
      "glitch",
      "insect",
      "repair",
      "report"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f188",
  voted: false
};
const bugs = {
  changes: [
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Bugs",
  search: {
    terms: [
      "bedbug",
      "infestation",
      "lice",
      "plague",
      "ticks"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e4d0",
  voted: false
};
const building = {
  aliases: {
    unicodes: {
      composite: [
        "1f3e2",
        "f0f7"
      ],
      secondary: [
        "10f1ad"
      ]
    }
  },
  changes: [
    "4.1.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.0.0-beta3",
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Building",
  search: {
    terms: [
      "apartment",
      "building",
      "business",
      "city",
      "company",
      "office",
      "office building",
      "urban",
      "work"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f1ad",
  voted: false
};
const bullhorn = {
  aliases: {
    unicodes: {
      composite: [
        "1f4e2",
        "1f56b"
      ],
      secondary: [
        "10f0a1"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "5.3.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Bullhorn",
  search: {
    terms: [
      "Bullhorn",
      "announcement",
      "broadcast",
      "loud",
      "louder",
      "loudspeaker",
      "megaphone",
      "public address",
      "request",
      "share"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f0a1",
  voted: false
};
const bullseye = {
  aliases: {
    unicodes: {
      secondary: [
        "10f140"
      ]
    }
  },
  changes: [
    "3.1.0",
    "5.0.0",
    "5.3.0",
    "5.10.1",
    "5.15.4",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Bullseye",
  search: {
    terms: [
      "archery",
      "goal",
      "objective",
      "strategy",
      "target"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f140",
  voted: false
};
const burger = {
  aliases: {
    names: [
      "hamburger"
    ],
    unicodes: {
      secondary: [
        "10f805"
      ]
    }
  },
  changes: [
    "5.7.0",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Burger",
  search: {
    terms: [
      "bacon",
      "beef",
      "burger",
      "burger king",
      "cheeseburger",
      "fast food",
      "grill",
      "ground beef",
      "mcdonalds",
      "sandwich"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f805",
  voted: false
};
const buromobelexperte = {
  changes: [
    "5.0.0"
  ],
  label: "Büromöbel-Experte GmbH & Co. KG.",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f37f",
  voted: false
};
const burst = {
  changes: [
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Burst",
  search: {
    terms: [
      "boom",
      "crash",
      "explosion"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e4dc",
  voted: false
};
const bus = {
  aliases: {
    unicodes: {
      composite: [
        "1f68d"
      ],
      secondary: [
        "10f207"
      ]
    }
  },
  changes: [
    "4.2.0",
    "5.0.0",
    "5.1.0",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Bus",
  search: {
    terms: [
      "bus",
      "oncoming",
      "oncoming bus",
      "public transportation",
      "transportation",
      "travel",
      "vehicle"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f207",
  voted: false
};
const buysellads = {
  changes: [
    "4.3.0",
    "5.0.0"
  ],
  label: "BuySellAds",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f20d",
  voted: false
};
const c = {
  aliases: {
    unicodes: {
      composite: [
        "63"
      ]
    }
  },
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "C",
  search: {
    terms: [
      "Latin Capital Letter C",
      "Latin Small Letter C",
      "letter"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "43",
  voted: false
};
const calculator = {
  aliases: {
    unicodes: {
      composite: [
        "1f5a9"
      ],
      secondary: [
        "10f1ec"
      ]
    }
  },
  changes: [
    "4.2.0",
    "5.0.0",
    "5.3.0",
    "5.11.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Calculator",
  search: {
    terms: [
      "Pocket Calculator",
      "abacus",
      "addition",
      "arithmetic",
      "counting",
      "math",
      "multiplication",
      "subtraction"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f1ec",
  voted: false
};
const calendar = {
  aliases: {
    unicodes: {
      composite: [
        "1f4c5",
        "1f4c6"
      ],
      secondary: [
        "10f133"
      ]
    }
  },
  changes: [
    "3.1.0",
    "5.0.0",
    "5.10.2",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Calendar",
  search: {
    terms: [
      "calendar",
      "calendar-o",
      "date",
      "day",
      "event",
      "month",
      "schedule",
      "tear-off calendar",
      "time",
      "when",
      "year"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f133",
  voted: false
};
const camera = {
  aliases: {
    names: [
      "camera-alt"
    ],
    unicodes: {
      composite: [
        "f332"
      ],
      primary: [
        "f332"
      ],
      secondary: [
        "10f030",
        "10f332"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Camera",
  search: {
    terms: [
      "image",
      "img",
      "lens",
      "photo",
      "picture",
      "record",
      "shutter",
      "video"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f030",
  voted: false
};
const campground = {
  aliases: {
    unicodes: {
      composite: [
        "26fa"
      ],
      secondary: [
        "10f6bb"
      ]
    }
  },
  changes: [
    "5.4.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Campground",
  search: {
    terms: [
      "camping",
      "fall",
      "outdoors",
      "teepee",
      "tent",
      "tipi"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f6bb",
  voted: false
};
const cannabis = {
  aliases: {
    unicodes: {
      secondary: [
        "10f55f"
      ]
    }
  },
  changes: [
    "5.1.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Cannabis",
  search: {
    terms: [
      "bud",
      "chronic",
      "drugs",
      "endica",
      "endo",
      "ganja",
      "marijuana",
      "mary jane",
      "pot",
      "reefer",
      "sativa",
      "spliff",
      "weed",
      "whacky-tabacky"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f55f",
  voted: false
};
const capsules = {
  aliases: {
    unicodes: {
      secondary: [
        "10f46b"
      ]
    }
  },
  changes: [
    "5.0.7",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Capsules",
  search: {
    terms: [
      "drugs",
      "medicine",
      "pills",
      "prescription"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f46b",
  voted: false
};
const car = {
  aliases: {
    names: [
      "automobile"
    ],
    unicodes: {
      composite: [
        "1f698"
      ],
      secondary: [
        "10f1b9"
      ]
    }
  },
  changes: [
    "4.1.0",
    "5.0.0",
    "5.2.0",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Car",
  search: {
    terms: [
      "auto",
      "automobile",
      "car",
      "oncoming",
      "oncoming automobile",
      "sedan",
      "transportation",
      "travel",
      "vehicle"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f1b9",
  voted: false
};
const caravan = {
  aliases: {
    unicodes: {
      secondary: [
        "10f8ff"
      ]
    }
  },
  changes: [
    "5.12.0",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Caravan",
  search: {
    terms: [
      "camper",
      "motor home",
      "rv",
      "trailer",
      "travel"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f8ff",
  voted: true
};
const carrot = {
  aliases: {
    unicodes: {
      composite: [
        "1f955"
      ],
      secondary: [
        "10f787"
      ]
    }
  },
  changes: [
    "5.6.0",
    "5.10.1",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Carrot",
  search: {
    terms: [
      "bugs bunny",
      "carrot",
      "food",
      "orange",
      "vegan",
      "vegetable"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f787",
  voted: false
};
const cat = {
  aliases: {
    unicodes: {
      composite: [
        "1f408"
      ],
      secondary: [
        "10f6be"
      ]
    }
  },
  changes: [
    "5.4.0",
    "5.10.1",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Cat",
  search: {
    terms: [
      "cat",
      "feline",
      "halloween",
      "holiday",
      "kitten",
      "kitty",
      "meow",
      "pet"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f6be",
  voted: true
};
const centercode = {
  changes: [
    "5.0.0"
  ],
  label: "Centercode",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f380",
  voted: false
};
const centos = {
  changes: [
    "5.6.0",
    "5.8.0"
  ],
  label: "Centos",
  search: {
    terms: [
      "linux",
      "operating system",
      "os"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f789",
  voted: true
};
const certificate = {
  aliases: {
    unicodes: {
      secondary: [
        "10f0a3"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "5.10.1",
    "5.10.2",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Certificate",
  search: {
    terms: [
      "badge",
      "guarantee",
      "star",
      "verified"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f0a3",
  voted: false
};
const chair = {
  aliases: {
    unicodes: {
      composite: [
        "1fa91"
      ],
      secondary: [
        "10f6c0"
      ]
    }
  },
  changes: [
    "5.4.0",
    "5.11.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Chair",
  search: {
    terms: [
      "chair",
      "furniture",
      "seat",
      "sit"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f6c0",
  voted: true
};
const chalkboard = {
  aliases: {
    names: [
      "blackboard"
    ],
    unicodes: {
      secondary: [
        "10f51b"
      ]
    }
  },
  changes: [
    "5.0.13",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Chalkboard",
  search: {
    terms: [
      "blackboard",
      "learning",
      "school",
      "teaching",
      "whiteboard",
      "writing"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f51b",
  voted: false
};
const check = {
  aliases: {
    unicodes: {
      composite: [
        "2713",
        "2714"
      ],
      secondary: [
        "10f00c"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Check",
  search: {
    terms: [
      "Check Mark",
      "accept",
      "agree",
      "check",
      "check mark",
      "checkmark",
      "confirm",
      "correct",
      "coupon",
      "done",
      "enable",
      "mark",
      "notice",
      "notification",
      "notify",
      "ok",
      "select",
      "success",
      "tick",
      "todo",
      "true",
      "validate",
      "working",
      "yes",
      "✓"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f00c",
  voted: false
};
const cheese = {
  aliases: {
    unicodes: {
      secondary: [
        "10f7ef"
      ]
    }
  },
  changes: [
    "5.7.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.5.2",
    "6.6.0",
    "6.7.0"
  ],
  label: "Cheese",
  search: {
    terms: [
      "cheddar",
      "curd",
      "gouda",
      "melt",
      "parmesan",
      "sandwich",
      "swiss",
      "wedge"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f7ef",
  voted: false
};
const chess = {
  aliases: {
    unicodes: {
      secondary: [
        "10f439"
      ]
    }
  },
  changes: [
    "5.0.5",
    "5.9.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Chess",
  search: {
    terms: [
      "board",
      "castle",
      "checkmate",
      "game",
      "king",
      "rook",
      "strategy",
      "tournament"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f439",
  voted: false
};
const child = {
  aliases: {
    unicodes: {
      secondary: [
        "10f1ae"
      ]
    }
  },
  changes: [
    "4.1.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.1.1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Child",
  search: {
    terms: [
      "boy",
      "girl",
      "kid",
      "toddler",
      "uer",
      "young",
      "youth"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f1ae",
  voted: false
};
const children = {
  changes: [
    "6.1.0",
    "6.1.1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Children",
  search: {
    terms: [
      "boy",
      "child",
      "girl",
      "kid",
      "kids",
      "together",
      "uer",
      "young",
      "youth"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e4e1",
  voted: false
};
const chrome = {
  changes: [
    "4.4.0",
    "5.0.0",
    "6.1.2"
  ],
  label: "Chrome",
  search: {
    terms: [
      "browser"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f268",
  voted: false
};
const chromecast = {
  changes: [
    "5.8.0"
  ],
  label: "Chromecast",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f838",
  voted: false
};
const church = {
  aliases: {
    unicodes: {
      composite: [
        "26ea"
      ],
      secondary: [
        "10f51d"
      ]
    }
  },
  changes: [
    "5.0.13",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Church",
  search: {
    terms: [
      "Christian",
      "building",
      "cathedral",
      "chapel",
      "church",
      "community",
      "cross",
      "religion"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f51d",
  voted: true
};
const circle = {
  aliases: {
    unicodes: {
      composite: [
        "1f534",
        "1f535",
        "1f7e0",
        "1f7e1",
        "1f7e2",
        "1f7e3",
        "1f7e4",
        "25cf",
        "26aa",
        "26ab",
        "2b24",
        "f10c",
        "f1db"
      ],
      secondary: [
        "10f111"
      ]
    }
  },
  changes: [
    "3.0.0",
    "5.0.0",
    "5.10.1",
    "5.10.2",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Circle",
  search: {
    terms: [
      "Black Circle",
      "Black Large Circle",
      "black circle",
      "blue",
      "blue circle",
      "brown",
      "brown circle",
      "chart",
      "circle",
      "circle-thin",
      "diameter",
      "dot",
      "ellipse",
      "fill",
      "geometric",
      "green",
      "green circle",
      "notification",
      "orange",
      "orange circle",
      "progress",
      "purple",
      "purple circle",
      "red",
      "red circle",
      "round",
      "white circle",
      "yellow",
      "yellow circle"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f111",
  voted: false
};
const city = {
  aliases: {
    unicodes: {
      composite: [
        "1f3d9"
      ],
      secondary: [
        "10f64f"
      ]
    }
  },
  changes: [
    "5.3.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "City",
  search: {
    terms: [
      "buildings",
      "busy",
      "city",
      "cityscape",
      "skyscrapers",
      "urban",
      "windows"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f64f",
  voted: false
};
const clapperboard = {
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Clapperboard",
  search: {
    terms: [
      "camera",
      "clapper",
      "clapper board",
      "director",
      "film",
      "movie",
      "record"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e131",
  voted: true
};
const clipboard = {
  aliases: {
    unicodes: {
      composite: [
        "1f4cb"
      ],
      secondary: [
        "10f328"
      ]
    }
  },
  changes: [
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.2.1",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Clipboard",
  search: {
    terms: [
      "clipboar",
      "clipboard",
      "copy",
      "notepad",
      "notes",
      "paste",
      "record"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f328",
  voted: false
};
const clock = {
  aliases: {
    names: [
      "clock-four"
    ],
    unicodes: {
      composite: [
        "1f553"
      ],
      secondary: [
        "10f017"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.12.1",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Clock",
  search: {
    terms: [
      "00",
      "4",
      "4:00",
      "clock",
      "date",
      "four",
      "four o’clock",
      "hour",
      "late",
      "minute",
      "o'clock",
      "o’clock",
      "pending",
      "schedule",
      "ticking",
      "time",
      "timer",
      "timestamp",
      "watch"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f017",
  voted: false
};
const clone = {
  aliases: {
    unicodes: {
      secondary: [
        "10f24d"
      ]
    }
  },
  changes: [
    "4.4.0",
    "5.0.0",
    "5.11.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Clone",
  search: {
    terms: [
      "arrange",
      "copy",
      "duplicate",
      "paste"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f24d",
  voted: false
};
const cloud = {
  aliases: {
    unicodes: {
      composite: [
        "2601"
      ],
      secondary: [
        "10f0c2"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "5.0.11",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Cloud",
  search: {
    terms: [
      "atmosphere",
      "cloud",
      "fog",
      "overcast",
      "save",
      "upload",
      "weather"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f0c2",
  voted: false
};
const cloudflare = {
  changes: [
    "5.15.0"
  ],
  label: "Cloudflare",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e07d",
  voted: false
};
const cloudscale = {
  changes: [
    "5.0.0"
  ],
  label: "cloudscale.ch",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f383",
  voted: false
};
const cloudsmith = {
  changes: [
    "5.0.0",
    "6.4.1"
  ],
  label: "Cloudsmith",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f384",
  voted: false
};
const cloudversify = {
  changes: [
    "5.0.0"
  ],
  label: "cloudversify",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f385",
  voted: false
};
const clover = {
  changes: [
    "6.0.0-beta1",
    "6.1.2",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Clover",
  search: {
    terms: [
      "4",
      "charm",
      "clover",
      "four",
      "four leaf clover",
      "four-leaf clover",
      "leaf",
      "leprechaun",
      "luck",
      "lucky"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e139",
  voted: false
};
const cmplid = {
  changes: [
    "6.0.0-beta1"
  ],
  label: "Cmplid",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e360",
  voted: false
};
const code = {
  aliases: {
    unicodes: {
      secondary: [
        "10f121"
      ]
    }
  },
  changes: [
    "3.1.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Code",
  search: {
    terms: [
      "brackets",
      "code",
      "development",
      "html",
      "mysql",
      "sql"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f121",
  voted: false
};
const codepen = {
  changes: [
    "4.1.0",
    "5.0.0"
  ],
  label: "Codepen",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f1cb",
  voted: false
};
const codiepie = {
  changes: [
    "4.5.0",
    "5.0.0"
  ],
  label: "Codie Pie",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f284",
  voted: false
};
const coins = {
  aliases: {
    unicodes: {
      secondary: [
        "10f51e"
      ]
    }
  },
  changes: [
    "5.0.13",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Coins",
  search: {
    terms: [
      "currency",
      "dime",
      "financial",
      "gold",
      "money",
      "penny",
      "premium"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f51e",
  voted: true
};
const comment = {
  aliases: {
    unicodes: {
      composite: [
        "1f5e9",
        "f0e5"
      ],
      secondary: [
        "10f075"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.0.9",
    "5.10.1",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Comment",
  search: {
    terms: [
      "Right Speech Bubble",
      "answer",
      "bubble",
      "chat",
      "commenting",
      "conversation",
      "conversation",
      "discussion",
      "feedback",
      "message",
      "note",
      "notification",
      "sms",
      "speech",
      "talk",
      "talking",
      "texting"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f075",
  voted: false
};
const comments = {
  aliases: {
    unicodes: {
      composite: [
        "1f5ea",
        "f0e6"
      ],
      secondary: [
        "10f086"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.0.9",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Comments",
  search: {
    terms: [
      "Two Speech Bubbles",
      "answer",
      "bubble",
      "chat",
      "commenting",
      "conversation",
      "conversation",
      "discussion",
      "feedback",
      "message",
      "note",
      "notification",
      "sms",
      "speech",
      "talk",
      "talking",
      "texting"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f086",
  voted: false
};
const compass = {
  aliases: {
    unicodes: {
      composite: [
        "1f9ed"
      ],
      secondary: [
        "10f14e"
      ]
    }
  },
  changes: [
    "3.2.0",
    "5.0.0",
    "5.2.0",
    "5.11.0",
    "5.11.1",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Compass",
  search: {
    terms: [
      "compass",
      "directions",
      "directory",
      "location",
      "magnetic",
      "menu",
      "navigation",
      "orienteering",
      "safari",
      "travel"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f14e",
  voted: false
};
const compress = {
  aliases: {
    unicodes: {
      secondary: [
        "10f066"
      ]
    }
  },
  changes: [
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Compress",
  search: {
    terms: [
      "collapse",
      "fullscreen",
      "minimize",
      "move",
      "resize",
      "shrink",
      "smaller"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f066",
  voted: false
};
const computer = {
  changes: [
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Computer",
  search: {
    terms: [
      "computer",
      "desktop",
      "display",
      "monitor",
      "tower"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e4e5",
  voted: false
};
const confluence = {
  changes: [
    "5.6.0"
  ],
  label: "Confluence",
  search: {
    terms: [
      "atlassian"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f78d",
  voted: true
};
const connectdevelop = {
  changes: [
    "4.3.0",
    "5.0.0"
  ],
  label: "Connect Develop",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f20e",
  voted: false
};
const contao = {
  changes: [
    "4.4.0",
    "5.0.0"
  ],
  label: "Contao",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f26d",
  voted: false
};
const cookie = {
  aliases: {
    unicodes: {
      composite: [
        "1f36a"
      ],
      secondary: [
        "10f563"
      ]
    }
  },
  changes: [
    "5.1.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Cookie",
  search: {
    terms: [
      "baked good",
      "chips",
      "chocolate",
      "cookie",
      "dessert",
      "eat",
      "snack",
      "sweet",
      "treat"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f563",
  voted: true
};
const copy = {
  aliases: {
    unicodes: {
      secondary: [
        "10f0c5"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "5.10.2",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.4.1",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Copy",
  search: {
    terms: [
      "clone",
      "duplicate",
      "file",
      "files-o",
      "paper",
      "paste"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f0c5",
  voted: false
};
const copyright = {
  aliases: {
    unicodes: {
      composite: [
        "a9"
      ],
      secondary: [
        "10f1f9"
      ]
    }
  },
  changes: [
    "4.2.0",
    "5.0.0",
    "5.10.1",
    "5.10.2",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Copyright",
  search: {
    terms: [
      "brand",
      "c",
      "copyright",
      "mark",
      "register",
      "trademark"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f1f9",
  voted: false
};
const couch = {
  aliases: {
    unicodes: {
      secondary: [
        "10f4b8"
      ]
    }
  },
  changes: [
    "5.0.9",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Couch",
  search: {
    terms: [
      "chair",
      "cushion",
      "furniture",
      "relax",
      "sofa"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f4b8",
  voted: false
};
const cow = {
  aliases: {
    unicodes: {
      composite: [
        "1f404"
      ],
      secondary: [
        "10f6c8"
      ]
    }
  },
  changes: [
    "5.4.0",
    "6.0.0-beta1",
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Cow",
  search: {
    terms: [
      "agriculture",
      "animal",
      "beef",
      "bovine",
      "co",
      "cow",
      "farm",
      "fauna",
      "livestock",
      "mammal",
      "milk",
      "moo"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f6c8",
  voted: false
};
const cpanel = {
  changes: [
    "5.0.0"
  ],
  label: "cPanel",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f388",
  voted: false
};
const crop = {
  aliases: {
    unicodes: {
      secondary: [
        "10f125"
      ]
    }
  },
  changes: [
    "3.1.0",
    "5.0.0",
    "5.1.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Crop",
  search: {
    terms: [
      "design",
      "frame",
      "mask",
      "modify",
      "resize",
      "shrink"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f125",
  voted: false
};
const cross = {
  aliases: {
    unicodes: {
      composite: [
        "1f547",
        "271d"
      ],
      secondary: [
        "10f654"
      ]
    }
  },
  changes: [
    "5.3.0",
    "5.10.1",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Cross",
  search: {
    terms: [
      "Christian",
      "Heavy Latin Cross",
      "catholicism",
      "christianity",
      "church",
      "cross",
      "jesus",
      "latin cross",
      "religion"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f654",
  voted: false
};
const crosshairs = {
  aliases: {
    unicodes: {
      secondary: [
        "10f05b"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Crosshairs",
  search: {
    terms: [
      "aim",
      "bullseye",
      "gpd",
      "picker",
      "position"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f05b",
  voted: false
};
const crow = {
  aliases: {
    unicodes: {
      secondary: [
        "10f520"
      ]
    }
  },
  changes: [
    "5.0.13",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Crow",
  search: {
    terms: [
      "bird",
      "bullfrog",
      "fauna",
      "halloween",
      "holiday",
      "toad"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f520",
  voted: false
};
const crown = {
  aliases: {
    unicodes: {
      composite: [
        "1f451"
      ],
      secondary: [
        "10f521"
      ]
    }
  },
  changes: [
    "5.0.13",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Crown",
  search: {
    terms: [
      "award",
      "clothing",
      "crown",
      "favorite",
      "king",
      "queen",
      "royal",
      "tiara",
      "vip"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f521",
  voted: true
};
const crutch = {
  aliases: {
    unicodes: {
      secondary: [
        "10f7f7"
      ]
    }
  },
  changes: [
    "5.7.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Crutch",
  search: {
    terms: [
      "cane",
      "injury",
      "mobility",
      "wheelchair"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f7f7",
  voted: false
};
const css = {
  changes: [
    "6.7.0"
  ],
  label: "Css",
  search: {
    terms: [
      "rebecca purple"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "e6a2",
  voted: false
};
const css3 = {
  changes: [
    "3.1.0",
    "5.0.0"
  ],
  label: "CSS 3 Logo",
  search: {
    terms: [
      "code"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f13c",
  voted: false
};
const cube = {
  aliases: {
    unicodes: {
      secondary: [
        "10f1b2"
      ]
    }
  },
  changes: [
    "4.1.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Cube",
  search: {
    terms: [
      "3d",
      "block",
      "dice",
      "package",
      "square",
      "tesseract"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f1b2",
  voted: false
};
const cubes = {
  aliases: {
    unicodes: {
      secondary: [
        "10f1b3"
      ]
    }
  },
  changes: [
    "4.1.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Cubes",
  search: {
    terms: [
      "3d",
      "block",
      "dice",
      "package",
      "pyramid",
      "square",
      "stack",
      "tesseract"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f1b3",
  voted: false
};
const cuttlefish = {
  changes: [
    "5.0.0"
  ],
  label: "Cuttlefish",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f38c",
  voted: false
};
const d = {
  aliases: {
    unicodes: {
      composite: [
        "64"
      ]
    }
  },
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "D",
  search: {
    terms: [
      "Latin Capital Letter D",
      "Latin Small Letter D",
      "letter"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "44",
  voted: false
};
const dailymotion = {
  changes: [
    "5.12.1",
    "5.14.0"
  ],
  label: "dailymotion",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e052",
  voted: true
};
const dashcube = {
  changes: [
    "4.3.0",
    "5.0.0",
    "5.0.3"
  ],
  label: "DashCube",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f210",
  voted: false
};
const database = {
  aliases: {
    unicodes: {
      secondary: [
        "10f1c0"
      ]
    }
  },
  changes: [
    "4.1.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Database",
  search: {
    terms: [
      "computer",
      "development",
      "directory",
      "memory",
      "mysql",
      "sql",
      "storage"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f1c0",
  voted: false
};
const debian = {
  changes: [
    "6.4.1",
    "6.5.0"
  ],
  label: "Debian",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e60b",
  voted: false
};
const deezer = {
  changes: [
    "5.13.1",
    "5.14.0"
  ],
  label: "Deezer",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e077",
  voted: true
};
const delicious = {
  changes: [
    "4.1.0",
    "5.0.0",
    "5.7.0"
  ],
  label: "Delicious",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f1a5",
  voted: false
};
const democrat = {
  aliases: {
    unicodes: {
      secondary: [
        "10f747"
      ]
    }
  },
  changes: [
    "5.5.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Democrat",
  search: {
    terms: [
      "american",
      "democratic party",
      "donkey",
      "election",
      "left",
      "left-wing",
      "liberal",
      "politics",
      "usa"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f747",
  voted: false
};
const deploydog = {
  changes: [
    "5.0.0"
  ],
  label: "deploy.dog",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f38e",
  voted: false
};
const deskpro = {
  changes: [
    "5.0.0"
  ],
  label: "Deskpro",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f38f",
  voted: false
};
const desktop = {
  aliases: {
    names: [
      "desktop-alt"
    ],
    unicodes: {
      composite: [
        "1f5a5",
        "f108"
      ],
      primary: [
        "f108"
      ],
      secondary: [
        "10f108",
        "10f390"
      ]
    }
  },
  changes: [
    "3.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Desktop",
  search: {
    terms: [
      "computer",
      "cpu",
      "demo",
      "desktop",
      "desktop computer",
      "device",
      "imac",
      "machine",
      "monitor",
      "pc",
      "screen"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f390",
  voted: false
};
const dev = {
  changes: [
    "5.4.0"
  ],
  label: "DEV",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f6cc",
  voted: true
};
const deviantart = {
  changes: [
    "4.1.0",
    "5.0.0"
  ],
  label: "deviantART",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f1bd",
  voted: false
};
const dharmachakra = {
  aliases: {
    unicodes: {
      composite: [
        "2638"
      ],
      secondary: [
        "10f655"
      ]
    }
  },
  changes: [
    "5.3.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Dharmachakra",
  search: {
    terms: [
      "Buddhist",
      "buddhism",
      "buddhist",
      "dharma",
      "religion",
      "wheel",
      "wheel of dharma"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f655",
  voted: false
};
const dhl = {
  changes: [
    "5.6.0"
  ],
  label: "DHL",
  search: {
    terms: [
      "Dalsey",
      "Hillblom and Lynn",
      "german",
      "package",
      "shipping"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f790",
  voted: false
};
const diamond = {
  aliases: {
    unicodes: {
      composite: [
        "2666"
      ],
      secondary: [
        "10f219"
      ]
    }
  },
  changes: [
    "4.3.0",
    "5.0.0",
    "5.10.1",
    "5.10.2",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Diamond",
  search: {
    terms: [
      "ace",
      "card",
      "cards",
      "diamond suit",
      "game",
      "gem",
      "gemstone",
      "poker",
      "suit"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f219",
  voted: false
};
const diaspora = {
  changes: [
    "5.6.0",
    "5.8.0"
  ],
  label: "Diaspora",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f791",
  voted: true
};
const dice = {
  aliases: {
    unicodes: {
      composite: [
        "1f3b2"
      ],
      secondary: [
        "10f522"
      ]
    }
  },
  changes: [
    "5.0.13",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Dice",
  search: {
    terms: [
      "chance",
      "dice",
      "die",
      "gambling",
      "game",
      "game die",
      "roll"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f522",
  voted: true
};
const digg = {
  changes: [
    "4.1.0",
    "5.0.0"
  ],
  label: "Digg Logo",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f1a6",
  voted: false
};
const discord = {
  changes: [
    "5.0.0",
    "5.15.4",
    "6.0.0-beta1"
  ],
  label: "Discord",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f392",
  voted: false
};
const discourse = {
  changes: [
    "5.0.0",
    "5.0.3"
  ],
  label: "Discourse",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f393",
  voted: false
};
const disease = {
  aliases: {
    unicodes: {
      secondary: [
        "10f7fa"
      ]
    }
  },
  changes: [
    "5.7.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Disease",
  search: {
    terms: [
      "bacteria",
      "cancer",
      "coronavirus",
      "covid-19",
      "flu",
      "illness",
      "infection",
      "pandemic",
      "sickness",
      "virus"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f7fa",
  voted: false
};
const display = {
  changes: [
    "6.0.0-beta1",
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Display",
  search: {
    terms: [
      "Screen",
      "computer",
      "desktop",
      "imac"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e163",
  voted: false
};
const divide = {
  aliases: {
    unicodes: {
      composite: [
        "2797",
        "f7"
      ],
      secondary: [
        "10f529"
      ]
    }
  },
  changes: [
    "5.0.13",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Divide",
  search: {
    terms: [
      "Division Sign",
      "arithmetic",
      "calculus",
      "divide",
      "division",
      "math",
      "sign",
      "÷"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f529",
  voted: false
};
const dna = {
  aliases: {
    unicodes: {
      composite: [
        "1f9ec"
      ],
      secondary: [
        "10f471"
      ]
    }
  },
  changes: [
    "5.0.7",
    "5.0.10",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Dna",
  search: {
    terms: [
      "biologist",
      "dna",
      "double helix",
      "evolution",
      "gene",
      "genetic",
      "genetics",
      "helix",
      "life",
      "molecule",
      "protein"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f471",
  voted: false
};
const dochub = {
  changes: [
    "5.0.0"
  ],
  label: "DocHub",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f394",
  voted: false
};
const docker = {
  changes: [
    "5.0.0"
  ],
  label: "Docker",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f395",
  voted: false
};
const dog = {
  aliases: {
    unicodes: {
      composite: [
        "1f415"
      ],
      secondary: [
        "10f6d3"
      ]
    }
  },
  changes: [
    "5.4.0",
    "5.12.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Dog",
  search: {
    terms: [
      "animal",
      "canine",
      "dog",
      "fauna",
      "mammal",
      "pet",
      "pooch",
      "puppy",
      "woof"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f6d3",
  voted: false
};
const dolly = {
  aliases: {
    names: [
      "dolly-box"
    ],
    unicodes: {
      secondary: [
        "10f472"
      ]
    }
  },
  changes: [
    "5.0.7",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Dolly",
  search: {
    terms: [
      "carry",
      "shipping",
      "transport"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f472",
  voted: false
};
const dove = {
  aliases: {
    unicodes: {
      composite: [
        "1f54a"
      ],
      secondary: [
        "10f4ba"
      ]
    }
  },
  changes: [
    "5.0.9",
    "5.10.1",
    "5.10.2",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Dove",
  search: {
    terms: [
      "bird",
      "dove",
      "fauna",
      "fly",
      "flying",
      "peace",
      "war"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f4ba",
  voted: false
};
const download = {
  aliases: {
    unicodes: {
      secondary: [
        "10f019"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Download",
  search: {
    terms: [
      "export",
      "hard drive",
      "insert",
      "save",
      "transfer"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f019",
  voted: false
};
const draft2digital = {
  changes: [
    "5.0.0"
  ],
  label: "Draft2digital",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f396",
  voted: false
};
const dragon = {
  aliases: {
    unicodes: {
      composite: [
        "1f409"
      ],
      secondary: [
        "10f6d5"
      ]
    }
  },
  changes: [
    "5.4.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Dragon",
  search: {
    terms: [
      "Dungeons & Dragons",
      "d&d",
      "dnd",
      "dragon",
      "fairy tale",
      "fantasy",
      "fire",
      "lizard",
      "serpent"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f6d5",
  voted: false
};
const dribbble = {
  changes: [
    "5.0.0"
  ],
  label: "Dribbble",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f17d",
  voted: false
};
const dropbox = {
  changes: [
    "3.2.0",
    "5.0.0",
    "5.0.1"
  ],
  label: "Dropbox",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f16b",
  voted: false
};
const droplet = {
  aliases: {
    names: [
      "tint"
    ],
    unicodes: {
      composite: [
        "1f4a7"
      ],
      secondary: [
        "10f043"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.1.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.2.1",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Droplet",
  search: {
    terms: [
      "blood",
      "cold",
      "color",
      "comic",
      "drop",
      "droplet",
      "raindrop",
      "sweat",
      "waterdrop"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f043",
  voted: false
};
const drum = {
  aliases: {
    unicodes: {
      composite: [
        "1f941"
      ],
      secondary: [
        "10f569"
      ]
    }
  },
  changes: [
    "5.1.0",
    "5.11.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Drum",
  search: {
    terms: [
      "drum",
      "drumsticks",
      "instrument",
      "music",
      "percussion",
      "snare",
      "sound"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f569",
  voted: true
};
const drupal = {
  changes: [
    "4.1.0",
    "5.0.0",
    "6.0.0-beta1"
  ],
  label: "Drupal Logo",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f1a9",
  voted: false
};
const dumbbell = {
  aliases: {
    unicodes: {
      secondary: [
        "10f44b"
      ]
    }
  },
  changes: [
    "5.0.5",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Dumbbell",
  search: {
    terms: [
      "exercise",
      "gym",
      "strength",
      "weight",
      "weight-lifting",
      "workout"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f44b",
  voted: false
};
const dumpster = {
  aliases: {
    unicodes: {
      secondary: [
        "10f793"
      ]
    }
  },
  changes: [
    "5.6.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Dumpster",
  search: {
    terms: [
      "alley",
      "bin",
      "commercial",
      "trash",
      "waste"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f793",
  voted: true
};
const dungeon = {
  aliases: {
    unicodes: {
      secondary: [
        "10f6d9"
      ]
    }
  },
  changes: [
    "5.4.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Dungeon",
  search: {
    terms: [
      "Dungeons & Dragons",
      "building",
      "d&d",
      "dnd",
      "door",
      "entrance",
      "fantasy",
      "gate"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f6d9",
  voted: false
};
const dyalog = {
  changes: [
    "5.0.0"
  ],
  label: "Dyalog",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f399",
  voted: false
};
const e = {
  aliases: {
    unicodes: {
      composite: [
        "65"
      ]
    }
  },
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "E",
  search: {
    terms: [
      "Latin Capital Letter E",
      "Latin Small Letter E",
      "letter"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "45",
  voted: false
};
const earlybirds = {
  changes: [
    "5.0.0"
  ],
  label: "Earlybirds",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f39a",
  voted: false
};
const ebay = {
  changes: [
    "5.0.11",
    "5.7.0"
  ],
  label: "eBay",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f4f4",
  voted: true
};
const edge = {
  changes: [
    "4.5.0",
    "5.0.0",
    "5.12.1",
    "6.1.2"
  ],
  label: "Edge Browser",
  search: {
    terms: [
      "browser",
      "ie"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f282",
  voted: false
};
const egg = {
  aliases: {
    unicodes: {
      composite: [
        "1f95a"
      ],
      secondary: [
        "10f7fb"
      ]
    }
  },
  changes: [
    "5.7.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.2.1",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Egg",
  search: {
    terms: [
      "breakfast",
      "chicken",
      "easter",
      "egg",
      "food",
      "shell",
      "yolk"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f7fb",
  voted: false
};
const eject = {
  aliases: {
    unicodes: {
      composite: [
        "23cf"
      ],
      secondary: [
        "10f052"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Eject",
  search: {
    terms: [
      "abort",
      "cancel",
      "cd",
      "discharge",
      "eject",
      "eject button"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f052",
  voted: false
};
const elementor = {
  changes: [
    "5.0.3",
    "6.1.0"
  ],
  label: "Elementor",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f430",
  voted: true
};
const elevator = {
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Elevator",
  search: {
    terms: [
      "accessibility",
      "elevator",
      "hoist",
      "lift",
      "uer",
      "users-people"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e16d",
  voted: true
};
const ellipsis = {
  aliases: {
    names: [
      "ellipsis-h"
    ],
    unicodes: {
      secondary: [
        "10f141"
      ]
    }
  },
  changes: [
    "3.1.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Ellipsis",
  search: {
    terms: [
      "dots",
      "drag",
      "kebab",
      "list",
      "menu",
      "nav",
      "navigation",
      "ol",
      "pacman",
      "reorder",
      "settings",
      "three dots",
      "ul"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f141",
  voted: false
};
const ello = {
  changes: [
    "5.2.0"
  ],
  label: "Ello",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f5f1",
  voted: true
};
const ember = {
  changes: [
    "5.0.0",
    "5.0.3"
  ],
  label: "Ember",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f423",
  voted: false
};
const empire = {
  changes: [
    "4.1.0",
    "5.0.0"
  ],
  label: "Galactic Empire",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f1d1",
  voted: false
};
const envelope = {
  aliases: {
    unicodes: {
      composite: [
        "1f582",
        "2709",
        "f003"
      ],
      secondary: [
        "10f0e0"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "5.10.1",
    "5.10.2",
    "6.0.0-beta1",
    "6.1.0",
    "6.2.0",
    "6.2.1",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Envelope",
  search: {
    terms: [
      "Back of Envelope",
      "e-mail",
      "email",
      "envelope",
      "letter",
      "mail",
      "message",
      "newsletter",
      "notification",
      "offer",
      "support"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f0e0",
  voted: false
};
const envira = {
  changes: [
    "4.6.0",
    "5.0.0"
  ],
  label: "Envira Gallery",
  search: {
    terms: [
      "leaf"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f299",
  voted: false
};
const equals = {
  aliases: {
    unicodes: {
      composite: [
        "f52c"
      ],
      primary: [
        "f52c"
      ],
      secondary: [
        "103d",
        "10f52c"
      ]
    }
  },
  changes: [
    "5.0.13",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Equals",
  search: {
    terms: [
      "Equals Sign",
      "arithmetic",
      "even",
      "match",
      "math"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "3d",
  voted: false
};
const eraser = {
  aliases: {
    unicodes: {
      secondary: [
        "10f12d"
      ]
    }
  },
  changes: [
    "3.1.0",
    "5.0.0",
    "5.8.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Eraser",
  search: {
    terms: [
      "art",
      "delete",
      "remove",
      "rubber"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f12d",
  voted: false
};
const erlang = {
  changes: [
    "5.0.0",
    "5.0.3",
    "5.7.0"
  ],
  label: "Erlang",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f39d",
  voted: false
};
const ethereum = {
  changes: [
    "5.0.2"
  ],
  label: "Ethereum",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f42e",
  voted: true
};
const ethernet = {
  aliases: {
    unicodes: {
      secondary: [
        "10f796"
      ]
    }
  },
  changes: [
    "5.6.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Ethernet",
  search: {
    terms: [
      "cable",
      "cat 5",
      "cat 6",
      "connection",
      "hardware",
      "internet",
      "network",
      "wired"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f796",
  voted: true
};
const etsy = {
  changes: [
    "4.7.0",
    "5.0.0"
  ],
  label: "Etsy",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f2d7",
  voted: false
};
const evernote = {
  changes: [
    "5.8.0"
  ],
  label: "Evernote",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f839",
  voted: false
};
const exclamation = {
  aliases: {
    unicodes: {
      composite: [
        "2755",
        "2757",
        "f12a"
      ],
      primary: [
        "f12a"
      ],
      secondary: [
        "1021",
        "10f12a"
      ]
    }
  },
  changes: [
    "3.1.0",
    "5.0.0",
    "5.10.1",
    "5.10.2",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Exclamation",
  search: {
    terms: [
      "!",
      "Exclamation Mark",
      "alert",
      "attention",
      "danger",
      "error",
      "exclamation",
      "failed",
      "important",
      "mark",
      "notice",
      "notification",
      "notify",
      "outlined",
      "problem",
      "punctuation",
      "red exclamation mark",
      "required",
      "warning",
      "white exclamation mark"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "21",
  voted: false
};
const expand = {
  aliases: {
    unicodes: {
      secondary: [
        "10f065"
      ]
    }
  },
  changes: [
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Expand",
  search: {
    terms: [
      "arrows",
      "bigger",
      "enlarge",
      "expand",
      "fullscreen",
      "maximize",
      "resize",
      "resize",
      "scale",
      "size",
      "viewfinder"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f065",
  voted: false
};
const expeditedssl = {
  changes: [
    "4.4.0",
    "5.0.0"
  ],
  label: "ExpeditedSSL",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f23e",
  voted: false
};
const explosion = {
  changes: [
    "6.1.0",
    "6.1.2",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Explosion",
  search: {
    terms: [
      "blast",
      "blowup",
      "boom",
      "crash",
      "detonation",
      "explosion"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e4e9",
  voted: false
};
const eye = {
  aliases: {
    unicodes: {
      composite: [
        "1f441"
      ],
      secondary: [
        "10f06e"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.7.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Eye",
  search: {
    terms: [
      "body",
      "eye",
      "look",
      "optic",
      "see",
      "seen",
      "show",
      "sight",
      "views",
      "visible"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f06e",
  voted: false
};
const f = {
  aliases: {
    unicodes: {
      composite: [
        "66"
      ]
    }
  },
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "F",
  search: {
    terms: [
      "Latin Capital Letter F",
      "Latin Small Letter F",
      "letter"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "46",
  voted: false
};
const facebook = {
  aliases: {
    unicodes: {
      composite: [
        "f230"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "5.8.2",
    "6.5.0"
  ],
  label: "Facebook",
  search: {
    terms: [
      "fabook",
      "facebook-official",
      "fb",
      "social network"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f09a",
  voted: false
};
const fan = {
  aliases: {
    unicodes: {
      secondary: [
        "10f863"
      ]
    }
  },
  changes: [
    "5.9.0",
    "5.10.1",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Fan",
  search: {
    terms: [
      "ac",
      "air conditioning",
      "blade",
      "blower",
      "cool",
      "hot"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f863",
  voted: true
};
const faucet = {
  aliases: {
    unicodes: {
      secondary: [
        "10e005"
      ]
    }
  },
  changes: [
    "5.12.0",
    "5.14.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Faucet",
  search: {
    terms: [
      "covid-19",
      "drinking",
      "drip",
      "house",
      "hygiene",
      "kitchen",
      "potable",
      "potable water",
      "sanitation",
      "sink",
      "water"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e005",
  voted: false
};
const fax = {
  aliases: {
    unicodes: {
      composite: [
        "1f4e0",
        "1f5b7"
      ],
      secondary: [
        "10f1ac"
      ]
    }
  },
  changes: [
    "4.1.0",
    "5.0.0",
    "5.3.0",
    "5.11.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.5.2",
    "6.6.0",
    "6.7.0"
  ],
  label: "Fax",
  search: {
    terms: [
      "Fax Icon",
      "business",
      "communicate",
      "copy",
      "facsimile",
      "fax",
      "fax machine",
      "send"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f1ac",
  voted: false
};
const feather = {
  aliases: {
    unicodes: {
      composite: [
        "1fab6"
      ],
      secondary: [
        "10f52d"
      ]
    }
  },
  changes: [
    "5.0.13",
    "5.1.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Feather",
  search: {
    terms: [
      "bird",
      "feather",
      "flight",
      "light",
      "plucked",
      "plumage",
      "quill",
      "write"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f52d",
  voted: true
};
const fedex = {
  changes: [
    "5.6.0"
  ],
  label: "FedEx",
  search: {
    terms: [
      "Federal Express",
      "package",
      "shipping"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f797",
  voted: false
};
const fedora = {
  changes: [
    "5.6.0",
    "5.6.3",
    "5.8.0",
    "6.0.0"
  ],
  label: "Fedora",
  search: {
    terms: [
      "linux",
      "operating system",
      "os"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f798",
  voted: true
};
const ferry = {
  changes: [
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Ferry",
  search: {
    terms: [
      "barge",
      "boat",
      "carry",
      "ferryboat",
      "ship"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e4ea",
  voted: false
};
const figma = {
  changes: [
    "5.6.0",
    "5.7.0",
    "5.8.0",
    "5.15.4",
    "6.0.0-beta2"
  ],
  label: "Figma",
  search: {
    terms: [
      "app",
      "design",
      "interface"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f799",
  voted: false
};
const file = {
  aliases: {
    unicodes: {
      composite: [
        "1f4c4",
        "1f5cb",
        "f016"
      ],
      secondary: [
        "10f15b"
      ]
    }
  },
  changes: [
    "3.2.0",
    "5.0.0",
    "5.10.1",
    "5.10.2",
    "6.0.0-beta1",
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "File",
  search: {
    terms: [
      "Empty Document",
      "cv",
      "document",
      "new",
      "page",
      "page facing up",
      "pdf",
      "resume"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f15b",
  voted: false
};
const fill = {
  aliases: {
    unicodes: {
      secondary: [
        "10f575"
      ]
    }
  },
  changes: [
    "5.1.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Fill",
  search: {
    terms: [
      "bucket",
      "color",
      "paint",
      "paint bucket"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f575",
  voted: false
};
const film = {
  aliases: {
    unicodes: {
      composite: [
        "1f39e"
      ],
      secondary: [
        "10f008"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Film",
  search: {
    terms: [
      "cinema",
      "film",
      "film frames",
      "frames",
      "movie",
      "strip",
      "video"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f008",
  voted: false
};
const filter = {
  aliases: {
    unicodes: {
      secondary: [
        "10f0b0"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "5.10.1",
    "5.11.0",
    "5.11.1",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Filter",
  search: {
    terms: [
      "funnel",
      "options",
      "separate",
      "sort"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f0b0",
  voted: false
};
const fingerprint = {
  aliases: {
    unicodes: {
      secondary: [
        "10f577"
      ]
    }
  },
  changes: [
    "5.1.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Fingerprint",
  search: {
    terms: [
      "human",
      "id",
      "identification",
      "lock",
      "privacy",
      "smudge",
      "touch",
      "unique",
      "unlock"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f577",
  voted: true
};
const fire = {
  aliases: {
    unicodes: {
      composite: [
        "1f525"
      ],
      secondary: [
        "10f06d"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.6.0",
    "5.6.3",
    "5.10.1",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Fire",
  search: {
    terms: [
      "burn",
      "caliente",
      "fire",
      "flame",
      "heat",
      "hot",
      "popular",
      "tool"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f06d",
  voted: false
};
const firefox = {
  changes: [
    "4.4.0",
    "5.0.0",
    "5.0.1",
    "5.12.0"
  ],
  label: "Firefox",
  search: {
    terms: [
      "browser"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f269",
  voted: false
};
const firstdraft = {
  changes: [
    "5.0.0"
  ],
  label: "firstdraft",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3a1",
  voted: false
};
const fish = {
  aliases: {
    unicodes: {
      composite: [
        "1f41f"
      ],
      secondary: [
        "10f578"
      ]
    }
  },
  changes: [
    "5.1.0",
    "5.10.1",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Fish",
  search: {
    terms: [
      "Pisces",
      "fauna",
      "fish",
      "gold",
      "seafood",
      "swimming",
      "zodiac"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f578",
  voted: true
};
const flag = {
  aliases: {
    unicodes: {
      composite: [
        "1f3f4",
        "f11d"
      ],
      secondary: [
        "10f024"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.2.1",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Flag",
  search: {
    terms: [
      "black flag",
      "country",
      "notice",
      "notification",
      "notify",
      "pole",
      "report",
      "symbol",
      "waving"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f024",
  voted: false
};
const flask = {
  aliases: {
    unicodes: {
      secondary: [
        "10f0c3"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Flask",
  search: {
    terms: [
      "beaker",
      "chemicals",
      "experiment",
      "experimental",
      "knowledge",
      "labs",
      "liquid",
      "potion",
      "science",
      "vial"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f0c3",
  voted: false
};
const flickr = {
  changes: [
    "3.2.0",
    "5.0.0"
  ],
  label: "Flickr",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f16e",
  voted: false
};
const flipboard = {
  changes: [
    "5.0.5",
    "5.0.9"
  ],
  label: "Flipboard",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f44d",
  voted: true
};
const flutter = {
  changes: [
    "6.6.0"
  ],
  label: "Flutter",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e694",
  voted: false
};
const fly = {
  changes: [
    "5.0.0"
  ],
  label: "Fly",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f417",
  voted: false
};
const folder = {
  aliases: {
    names: [
      "folder-blank"
    ],
    unicodes: {
      composite: [
        "1f4c1",
        "1f5bf",
        "f114"
      ],
      secondary: [
        "10f07b"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.3.0",
    "5.10.1",
    "6.0.0-beta1",
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Folder",
  search: {
    terms: [
      "Black Folder",
      "archive",
      "directory",
      "document",
      "file",
      "file folder",
      "folder"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f07b",
  voted: false
};
const font = {
  aliases: {
    unicodes: {
      secondary: [
        "10f031"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.9.0",
    "5.10.2",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Font",
  search: {
    terms: [
      "alphabet",
      "glyph",
      "text",
      "type",
      "typeface"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f031",
  voted: false
};
const fonticons = {
  changes: [
    "4.4.0",
    "5.0.0"
  ],
  label: "Fonticons",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f280",
  voted: false
};
const football = {
  aliases: {
    names: [
      "football-ball"
    ],
    unicodes: {
      composite: [
        "1f3c8"
      ],
      secondary: [
        "10f44e"
      ]
    }
  },
  changes: [
    "5.0.5",
    "5.11.0",
    "5.11.1",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Football",
  search: {
    terms: [
      "american",
      "american football",
      "ball",
      "fall",
      "football",
      "nfl",
      "pigskin",
      "seasonal"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f44e",
  voted: false
};
const forumbee = {
  changes: [
    "4.3.0",
    "5.0.0"
  ],
  label: "Forumbee",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f211",
  voted: false
};
const forward = {
  aliases: {
    unicodes: {
      composite: [
        "23e9"
      ],
      secondary: [
        "10f04e"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Forward",
  search: {
    terms: [
      "arrow",
      "double",
      "fast",
      "fast-forward button",
      "forward",
      "next",
      "skip"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f04e",
  voted: false
};
const foursquare = {
  changes: [
    "3.2.0",
    "5.0.0"
  ],
  label: "Foursquare",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f180",
  voted: false
};
const freebsd = {
  changes: [
    "5.0.0"
  ],
  label: "FreeBSD",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3a4",
  voted: false
};
const frog = {
  aliases: {
    unicodes: {
      secondary: [
        "10f52e"
      ]
    }
  },
  changes: [
    "5.0.13",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Frog",
  search: {
    terms: [
      "amphibian",
      "bullfrog",
      "fauna",
      "hop",
      "kermit",
      "kiss",
      "prince",
      "ribbit",
      "toad",
      "wart"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f52e",
  voted: false
};
const fulcrum = {
  changes: [
    "5.0.12",
    "5.8.0"
  ],
  label: "Fulcrum",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f50b",
  voted: false
};
const futbol = {
  aliases: {
    names: [
      "futbol-ball",
      "soccer-ball"
    ],
    unicodes: {
      composite: [
        "26bd"
      ],
      secondary: [
        "10f1e3"
      ]
    }
  },
  changes: [
    "4.2.0",
    "5.0.0",
    "5.0.5",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.4.1",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Futbol",
  search: {
    terms: [
      "ball",
      "football",
      "mls",
      "soccer",
      "soccer ball"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f1e3",
  voted: false
};
const g = {
  aliases: {
    unicodes: {
      composite: [
        "67"
      ]
    }
  },
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "G",
  search: {
    terms: [
      "Latin Capital Letter G",
      "Latin Small Letter G",
      "letter"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "47",
  voted: false
};
const gamepad = {
  aliases: {
    unicodes: {
      secondary: [
        "10f11b"
      ]
    }
  },
  changes: [
    "3.1.0",
    "5.0.0",
    "5.11.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Gamepad",
  search: {
    terms: [
      "arcade",
      "controller",
      "d-pad",
      "joystick",
      "playstore",
      "video",
      "video game"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f11b",
  voted: false
};
const gauge = {
  aliases: {
    names: [
      "dashboard",
      "gauge-med",
      "tachometer-alt-average"
    ],
    unicodes: {
      secondary: [
        "10f624"
      ]
    }
  },
  changes: [
    "5.2.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Gauge",
  search: {
    terms: [
      "dashboard",
      "fast",
      "odometer",
      "speed",
      "speedometer"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f624",
  voted: false
};
const gavel = {
  aliases: {
    names: [
      "legal"
    ],
    unicodes: {
      secondary: [
        "10f0e3"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Gavel",
  search: {
    terms: [
      "hammer",
      "judge",
      "law",
      "lawyer",
      "opinion"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f0e3",
  voted: false
};
const gear = {
  aliases: {
    names: [
      "cog"
    ],
    unicodes: {
      composite: [
        "2699"
      ],
      secondary: [
        "10f013"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Gear",
  search: {
    terms: [
      "cog",
      "cogwheel",
      "configuration",
      "gear",
      "mechanical",
      "modify",
      "settings",
      "sprocket",
      "tool",
      "wheel"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f013",
  voted: false
};
const gears = {
  aliases: {
    names: [
      "cogs"
    ],
    unicodes: {
      secondary: [
        "10f085"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Gears",
  search: {
    terms: [
      "configuration",
      "gears",
      "mechanical",
      "modify",
      "settings",
      "sprocket",
      "wheel"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f085",
  voted: false
};
const gem = {
  aliases: {
    unicodes: {
      composite: [
        "1f48e"
      ],
      secondary: [
        "10f3a5"
      ]
    }
  },
  changes: [
    "5.0.0",
    "5.10.1",
    "6.0.0-beta1",
    "6.2.0",
    "6.2.1",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Gem",
  search: {
    terms: [
      "diamond",
      "gem",
      "gem stone",
      "jewel",
      "jewelry",
      "sapphire",
      "stone",
      "treasure"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f3a5",
  voted: false
};
const genderless = {
  aliases: {
    unicodes: {
      secondary: [
        "10f22d"
      ]
    }
  },
  changes: [
    "4.4.0",
    "5.0.0",
    "5.11.0",
    "5.11.1",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Genderless",
  search: {
    terms: [
      "androgynous",
      "asexual",
      "gender",
      "sexless"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f22d",
  voted: false
};
const gg = {
  changes: [
    "4.4.0",
    "5.0.0"
  ],
  label: "GG Currency",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f260",
  voted: false
};
const ghost = {
  aliases: {
    unicodes: {
      composite: [
        "1f47b"
      ],
      secondary: [
        "10f6e2"
      ]
    }
  },
  changes: [
    "5.4.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Ghost",
  search: {
    terms: [
      "apparition",
      "blinky",
      "clyde",
      "creature",
      "face",
      "fairy tale",
      "fantasy",
      "floating",
      "ghost",
      "halloween",
      "holiday",
      "inky",
      "monster",
      "pacman",
      "pinky",
      "spirit"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f6e2",
  voted: false
};
const gift = {
  aliases: {
    unicodes: {
      composite: [
        "1f381"
      ],
      secondary: [
        "10f06b"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.0.9",
    "5.6.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Gift",
  search: {
    terms: [
      "box",
      "celebration",
      "christmas",
      "generosity",
      "gift",
      "giving",
      "holiday",
      "party",
      "present",
      "wrapped",
      "wrapped gift",
      "xmas"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f06b",
  voted: false
};
const gifts = {
  aliases: {
    unicodes: {
      secondary: [
        "10f79c"
      ]
    }
  },
  changes: [
    "5.6.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Gifts",
  search: {
    terms: [
      "christmas",
      "generosity",
      "giving",
      "holiday",
      "party",
      "present",
      "wrapped",
      "xmas"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f79c",
  voted: false
};
const git = {
  changes: [
    "4.1.0",
    "5.0.0",
    "5.8.2"
  ],
  label: "Git",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f1d3",
  voted: false
};
const github = {
  changes: [
    "2.0.0",
    "5.0.0"
  ],
  label: "GitHub",
  search: {
    terms: [
      "octocat"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f09b",
  voted: false
};
const gitkraken = {
  changes: [
    "5.0.0"
  ],
  label: "GitKraken",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3a6",
  voted: false
};
const gitlab = {
  changes: [
    "4.6.0",
    "5.0.0",
    "5.7.0",
    "6.0.0-beta1",
    "6.1.2"
  ],
  label: "GitLab",
  search: {
    terms: [
      "Axosoft"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f296",
  voted: false
};
const gitter = {
  changes: [
    "5.0.0"
  ],
  label: "Gitter",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f426",
  voted: false
};
const glasses = {
  aliases: {
    unicodes: {
      secondary: [
        "10f530"
      ]
    }
  },
  changes: [
    "5.0.13",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Glasses",
  search: {
    terms: [
      "hipster",
      "nerd",
      "reading",
      "sight",
      "spectacles",
      "vision"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f530",
  voted: true
};
const glide = {
  changes: [
    "4.6.0",
    "5.0.0"
  ],
  label: "Glide",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f2a5",
  voted: false
};
const globe = {
  aliases: {
    unicodes: {
      composite: [
        "1f310"
      ],
      secondary: [
        "10f0ac"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "5.0.9",
    "5.11.0",
    "5.11.1",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Globe",
  search: {
    terms: [
      "all",
      "coordinates",
      "country",
      "earth",
      "global",
      "globe",
      "globe with meridians",
      "gps",
      "internet",
      "language",
      "localize",
      "location",
      "map",
      "meridians",
      "network",
      "online",
      "place",
      "planet",
      "translate",
      "travel",
      "world",
      "www"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f0ac",
  voted: false
};
const gofore = {
  changes: [
    "5.0.0"
  ],
  label: "Gofore",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3a7",
  voted: false
};
const golang = {
  changes: [
    "6.0.0-beta2"
  ],
  label: "Go",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e40f",
  voted: true
};
const goodreads = {
  changes: [
    "5.0.0"
  ],
  label: "Goodreads",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3a8",
  voted: false
};
const google = {
  changes: [
    "4.1.0",
    "5.0.0"
  ],
  label: "Google Logo",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f1a0",
  voted: false
};
const gopuram = {
  aliases: {
    unicodes: {
      secondary: [
        "10f664"
      ]
    }
  },
  changes: [
    "5.3.0",
    "5.7.0",
    "5.11.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Gopuram",
  search: {
    terms: [
      "building",
      "entrance",
      "hinduism",
      "temple",
      "tower"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f664",
  voted: false
};
const gratipay = {
  changes: [
    "3.2.0",
    "5.0.0"
  ],
  label: "Gratipay (Gittip)",
  search: {
    terms: [
      "favorite",
      "heart",
      "like",
      "love"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f184",
  voted: false
};
const grav = {
  changes: [
    "4.7.0",
    "5.0.0"
  ],
  label: "Grav",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f2d6",
  voted: false
};
const grip = {
  aliases: {
    names: [
      "grip-horizontal"
    ],
    unicodes: {
      secondary: [
        "10f58d"
      ]
    }
  },
  changes: [
    "5.1.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Grip",
  search: {
    terms: [
      "affordance",
      "drag",
      "drop",
      "grab",
      "handle"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f58d",
  voted: true
};
const gripfire = {
  changes: [
    "5.0.0"
  ],
  label: "Gripfire, Inc.",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3ac",
  voted: false
};
const grunt = {
  changes: [
    "5.0.0"
  ],
  label: "Grunt",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3ad",
  voted: false
};
const guilded = {
  changes: [
    "5.15.0"
  ],
  label: "Guilded",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e07e",
  voted: false
};
const guitar = {
  aliases: {
    unicodes: {
      secondary: [
        "10f7a6"
      ]
    }
  },
  changes: [
    "5.6.0",
    "5.11.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Guitar",
  search: {
    terms: [
      "acoustic",
      "instrument",
      "music",
      "rock",
      "rock and roll",
      "song",
      "strings"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f7a6",
  voted: true
};
const gulp = {
  changes: [
    "5.0.0"
  ],
  label: "Gulp",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3ae",
  voted: false
};
const gun = {
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Gun",
  search: {
    terms: [
      "firearm",
      "pistol",
      "weapon"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e19b",
  voted: true
};
const h = {
  aliases: {
    unicodes: {
      composite: [
        "68"
      ]
    }
  },
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "H",
  search: {
    terms: [
      "Latin Capital Letter H",
      "Latin Small Letter H",
      "letter"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "48",
  voted: false
};
const hackerrank = {
  changes: [
    "5.2.0",
    "5.8.0"
  ],
  label: "Hackerrank",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f5f7",
  voted: true
};
const hammer = {
  aliases: {
    unicodes: {
      composite: [
        "1f528"
      ],
      secondary: [
        "10f6e3"
      ]
    }
  },
  changes: [
    "5.4.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Hammer",
  search: {
    terms: [
      "admin",
      "configuration",
      "equipment",
      "fix",
      "hammer",
      "maintenance",
      "modify",
      "recovery",
      "repair",
      "settings",
      "tool"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f6e3",
  voted: true
};
const hamsa = {
  aliases: {
    unicodes: {
      secondary: [
        "10f665"
      ]
    }
  },
  changes: [
    "5.3.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Hamsa",
  search: {
    terms: [
      "amulet",
      "christianity",
      "islam",
      "jewish",
      "judaism",
      "muslim",
      "protection"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f665",
  voted: false
};
const hand = {
  aliases: {
    names: [
      "hand-paper"
    ],
    unicodes: {
      composite: [
        "1f91a",
        "270b"
      ],
      secondary: [
        "10f256"
      ]
    }
  },
  changes: [
    "4.4.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Hand",
  search: {
    terms: [
      "Raised Hand",
      "backhand",
      "game",
      "halt",
      "palm",
      "raised",
      "raised back of hand",
      "request",
      "roshambo",
      "stop"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f256",
  voted: false
};
const handcuffs = {
  changes: [
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Handcuffs",
  search: {
    terms: [
      "arrest",
      "criminal",
      "handcuffs",
      "jail",
      "lock",
      "police",
      "wrist"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e4f8",
  voted: false
};
const hands = {
  aliases: {
    names: [
      "sign-language",
      "signing"
    ],
    unicodes: {
      secondary: [
        "10f2a7"
      ]
    }
  },
  changes: [
    "4.6.0",
    "5.0.0",
    "5.10.2",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Hands",
  search: {
    terms: [
      "Translate",
      "asl",
      "deaf",
      "hands"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f2a7",
  voted: false
};
const handshake = {
  aliases: {
    unicodes: {
      secondary: [
        "10f2b5"
      ]
    }
  },
  changes: [
    "4.7.0",
    "5.0.0",
    "5.0.9",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.4.1",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Handshake",
  search: {
    terms: [
      "agreement",
      "greeting",
      "meeting",
      "partnership"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f2b5",
  voted: false
};
const hanukiah = {
  aliases: {
    unicodes: {
      composite: [
        "1f54e"
      ],
      secondary: [
        "10f6e6"
      ]
    }
  },
  changes: [
    "5.4.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Hanukiah",
  search: {
    terms: [
      "candelabrum",
      "candle",
      "candlestick",
      "hanukkah",
      "jewish",
      "judaism",
      "light",
      "menorah",
      "religion"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f6e6",
  voted: false
};
const hashnode = {
  changes: [
    "6.0.0"
  ],
  label: "Hashnode",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e499",
  voted: false
};
const hashtag = {
  aliases: {
    unicodes: {
      composite: [
        "f292"
      ],
      primary: [
        "f292"
      ],
      secondary: [
        "1023",
        "10f292"
      ]
    }
  },
  changes: [
    "4.5.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Hashtag",
  search: {
    terms: [
      "Number Sign",
      "Twitter",
      "instagram",
      "pound",
      "social media",
      "tag"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "23",
  voted: false
};
const heading = {
  aliases: {
    names: [
      "header"
    ],
    unicodes: {
      secondary: [
        "10f1dc"
      ]
    }
  },
  changes: [
    "4.1.0",
    "5.0.0",
    "5.9.0",
    "5.10.1",
    "5.10.2",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Heading",
  search: {
    terms: [
      "format",
      "header",
      "text",
      "title"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f1dc",
  voted: false
};
const headphones = {
  aliases: {
    unicodes: {
      composite: [
        "1f3a7"
      ],
      secondary: [
        "10f025"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Headphones",
  search: {
    terms: [
      "audio",
      "earbud",
      "headphone",
      "listen",
      "music",
      "sound",
      "speaker"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f025",
  voted: false
};
const headset = {
  aliases: {
    unicodes: {
      secondary: [
        "10f590"
      ]
    }
  },
  changes: [
    "5.1.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Headset",
  search: {
    terms: [
      "audio",
      "gamer",
      "gaming",
      "listen",
      "live chat",
      "microphone",
      "shot caller",
      "sound",
      "support",
      "telemarketer"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f590",
  voted: true
};
const heart = {
  aliases: {
    unicodes: {
      composite: [
        "1f499",
        "1f49a",
        "1f49b",
        "1f49c",
        "1f5a4",
        "1f90d",
        "1f90e",
        "1f9e1",
        "2665",
        "2764",
        "f08a"
      ],
      secondary: [
        "10f004"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.0.9",
    "5.10.1",
    "5.10.2",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Heart",
  search: {
    terms: [
      "ace",
      "black",
      "black heart",
      "blue",
      "blue heart",
      "brown",
      "brown heart",
      "card",
      "evil",
      "favorite",
      "game",
      "green",
      "green heart",
      "heart",
      "heart suit",
      "like",
      "love",
      "orange",
      "orange heart",
      "purple",
      "purple heart",
      "red heart",
      "relationship",
      "valentine",
      "white",
      "white heart",
      "wicked",
      "wishlist",
      "yellow",
      "yellow heart"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f004",
  voted: false
};
const helicopter = {
  aliases: {
    unicodes: {
      composite: [
        "1f681"
      ],
      secondary: [
        "10f533"
      ]
    }
  },
  changes: [
    "5.0.13",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Helicopter",
  search: {
    terms: [
      "airwolf",
      "apache",
      "chopper",
      "flight",
      "fly",
      "helicopter",
      "travel",
      "vehicle"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f533",
  voted: true
};
const highlighter = {
  aliases: {
    unicodes: {
      secondary: [
        "10f591"
      ]
    }
  },
  changes: [
    "5.1.0",
    "5.10.1",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Highlighter",
  search: {
    terms: [
      "edit",
      "marker",
      "modify",
      "sharpie",
      "update",
      "write"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f591",
  voted: true
};
const hippo = {
  aliases: {
    unicodes: {
      composite: [
        "1f99b"
      ],
      secondary: [
        "10f6ed"
      ]
    }
  },
  changes: [
    "5.4.0",
    "5.10.1",
    "6.0.0-beta1",
    "6.1.2",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Hippo",
  search: {
    terms: [
      "animal",
      "fauna",
      "hippo",
      "hippopotamus",
      "hungry",
      "mammal"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f6ed",
  voted: false
};
const hips = {
  changes: [
    "5.0.5"
  ],
  label: "Hips",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f452",
  voted: false
};
const hive = {
  changes: [
    "5.15.0"
  ],
  label: "Hive Blockchain Network",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e07f",
  voted: false
};
const hooli = {
  changes: [
    "5.0.0",
    "5.7.0"
  ],
  label: "Hooli",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f427",
  voted: false
};
const hornbill = {
  changes: [
    "5.1.0",
    "5.8.0"
  ],
  label: "Hornbill",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f592",
  voted: false
};
const horse = {
  aliases: {
    unicodes: {
      composite: [
        "1f40e"
      ],
      secondary: [
        "10f6f0"
      ]
    }
  },
  changes: [
    "5.4.0",
    "5.10.1",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Horse",
  search: {
    terms: [
      "equestrian",
      "equus",
      "fauna",
      "horse",
      "mammmal",
      "mare",
      "neigh",
      "pony",
      "racehorse",
      "racing"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f6f0",
  voted: false
};
const hospital = {
  aliases: {
    names: [
      "hospital-alt",
      "hospital-wide"
    ],
    unicodes: {
      composite: [
        "1f3e5",
        "f47d"
      ],
      primary: [
        "f47d"
      ],
      secondary: [
        "10f0f8",
        "10f47d"
      ]
    }
  },
  changes: [
    "3.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Hospital",
  search: {
    terms: [
      "building",
      "covid-19",
      "doctor",
      "emergency room",
      "hospital",
      "medical center",
      "medicine"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f0f8",
  voted: false
};
const hotdog = {
  aliases: {
    unicodes: {
      composite: [
        "1f32d"
      ],
      secondary: [
        "10f80f"
      ]
    }
  },
  changes: [
    "5.7.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Hotdog",
  search: {
    terms: [
      "bun",
      "chili",
      "frankfurt",
      "frankfurter",
      "hot dog",
      "hotdog",
      "kosher",
      "polish",
      "sandwich",
      "sausage",
      "vienna",
      "weiner"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f80f",
  voted: false
};
const hotel = {
  aliases: {
    unicodes: {
      composite: [
        "1f3e8"
      ],
      secondary: [
        "10f594"
      ]
    }
  },
  changes: [
    "5.1.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Hotel",
  search: {
    terms: [
      "building",
      "hotel",
      "inn",
      "lodging",
      "motel",
      "resort",
      "travel"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f594",
  voted: false
};
const hotjar = {
  changes: [
    "5.0.0",
    "6.4.1"
  ],
  label: "Hotjar",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3b1",
  voted: false
};
const hourglass = {
  aliases: {
    names: [
      "hourglass-empty"
    ],
    unicodes: {
      composite: [
        "23f3",
        "f250"
      ],
      secondary: [
        "10f254"
      ]
    }
  },
  changes: [
    "4.4.0",
    "5.0.0",
    "5.10.1",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.0.0-beta3",
    "6.1.2",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Hourglass",
  search: {
    terms: [
      "hour",
      "hourglass",
      "hourglass not done",
      "minute",
      "sand",
      "stopwatch",
      "time",
      "timer"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f254",
  voted: false
};
const house = {
  aliases: {
    names: [
      "home",
      "home-alt",
      "home-lg-alt"
    ],
    unicodes: {
      composite: [
        "1f3e0",
        "f80a",
        "f80c"
      ],
      primary: [
        "f80a",
        "f80c"
      ],
      secondary: [
        "10f015",
        "10f80a",
        "10f80c"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.7.0",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.0.0-beta3",
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "House",
  search: {
    terms: [
      "abode",
      "building",
      "home",
      "house",
      "main",
      "residence"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f015",
  voted: false
};
const houzz = {
  changes: [
    "4.4.0",
    "5.0.0",
    "5.0.9",
    "5.8.0"
  ],
  label: "Houzz",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f27c",
  voted: false
};
const html5 = {
  changes: [
    "3.1.0",
    "5.0.0"
  ],
  label: "HTML 5 Logo",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f13b",
  voted: false
};
const hubspot = {
  changes: [
    "5.0.0"
  ],
  label: "HubSpot",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3b2",
  voted: false
};
const hurricane = {
  aliases: {
    unicodes: {
      secondary: [
        "10f751"
      ]
    }
  },
  changes: [
    "5.5.0",
    "5.10.1",
    "6.0.0-beta1",
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Hurricane",
  search: {
    terms: [
      "coriolis effect",
      "eye",
      "storm",
      "tropical cyclone",
      "typhoon"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f751",
  voted: false
};
const i = {
  aliases: {
    unicodes: {
      composite: [
        "69"
      ]
    }
  },
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "I",
  search: {
    terms: [
      "Latin Capital Letter I",
      "Latin Small Letter I",
      "letter"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "49",
  voted: false
};
const icicles = {
  aliases: {
    unicodes: {
      secondary: [
        "10f7ad"
      ]
    }
  },
  changes: [
    "5.6.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Icicles",
  search: {
    terms: [
      "cold",
      "frozen",
      "hanging",
      "ice",
      "seasonal",
      "sharp"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f7ad",
  voted: false
};
const icons = {
  aliases: {
    names: [
      "heart-music-camera-bolt"
    ],
    unicodes: {
      secondary: [
        "10f86d"
      ]
    }
  },
  changes: [
    "5.9.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Icons",
  search: {
    terms: [
      "bolt",
      "category",
      "emoji",
      "heart",
      "image",
      "music",
      "photo",
      "symbols"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f86d",
  voted: false
};
const ideal = {
  changes: [
    "5.12.0",
    "5.14.0"
  ],
  label: "iDeal",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e013",
  voted: true
};
const igloo = {
  aliases: {
    unicodes: {
      secondary: [
        "10f7ae"
      ]
    }
  },
  changes: [
    "5.6.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Igloo",
  search: {
    terms: [
      "dome",
      "dwelling",
      "eskimo",
      "home",
      "house",
      "ice",
      "snow"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f7ae",
  voted: false
};
const image = {
  aliases: {
    unicodes: {
      secondary: [
        "10f03e"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.10.1",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Image",
  search: {
    terms: [
      "album",
      "img",
      "landscape",
      "photo",
      "picture"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f03e",
  voted: false
};
const images = {
  aliases: {
    unicodes: {
      secondary: [
        "10f302"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.10.1",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Images",
  search: {
    terms: [
      "album",
      "img",
      "landscape",
      "photo",
      "picture"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f302",
  voted: false
};
const imdb = {
  changes: [
    "4.7.0",
    "5.0.0",
    "6.1.2"
  ],
  label: "IMDB",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f2d8",
  voted: false
};
const inbox = {
  aliases: {
    unicodes: {
      secondary: [
        "10f01c"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Inbox",
  search: {
    terms: [
      "archive",
      "desk",
      "email",
      "mail",
      "message"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f01c",
  voted: false
};
const indent = {
  aliases: {
    unicodes: {
      secondary: [
        "10f03c"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.9.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Indent",
  search: {
    terms: [
      "align",
      "justify",
      "paragraph",
      "tab"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f03c",
  voted: false
};
const industry = {
  aliases: {
    unicodes: {
      secondary: [
        "10f275"
      ]
    }
  },
  changes: [
    "4.4.0",
    "5.0.0",
    "5.10.1",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Industry",
  search: {
    terms: [
      "building",
      "factory",
      "industrial",
      "manufacturing",
      "mill",
      "warehouse"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f275",
  voted: false
};
const infinity = {
  aliases: {
    unicodes: {
      composite: [
        "221e",
        "267e"
      ],
      secondary: [
        "10f534"
      ]
    }
  },
  changes: [
    "5.0.13",
    "5.3.0",
    "5.10.1",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Infinity",
  search: {
    terms: [
      "Infinity",
      "eternity",
      "forever",
      "infinity",
      "math",
      "unbounded",
      "universal"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f534",
  voted: true
};
const info = {
  aliases: {
    unicodes: {
      secondary: [
        "10f129"
      ]
    }
  },
  changes: [
    "3.1.0",
    "5.0.0",
    "5.10.1",
    "5.10.2",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Info",
  search: {
    terms: [
      "details",
      "help",
      "information",
      "more",
      "support"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f129",
  voted: false
};
const instagram = {
  changes: [
    "4.6.0",
    "5.0.0"
  ],
  label: "Instagram",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f16d",
  voted: false
};
const instalod = {
  changes: [
    "5.15.0"
  ],
  label: "InstaLOD",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e081",
  voted: false
};
const intercom = {
  changes: [
    "5.6.0"
  ],
  label: "Intercom",
  search: {
    terms: [
      "app",
      "customer",
      "messenger"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f7af",
  voted: false
};
const invision = {
  changes: [
    "5.6.0"
  ],
  label: "InVision",
  search: {
    terms: [
      "app",
      "design",
      "interface"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f7b0",
  voted: false
};
const ioxhost = {
  changes: [
    "4.2.0",
    "5.0.0"
  ],
  label: "ioxhost",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f208",
  voted: false
};
const italic = {
  aliases: {
    unicodes: {
      secondary: [
        "10f033"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.9.0",
    "5.10.1",
    "5.10.2",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Italic",
  search: {
    terms: [
      "edit",
      "emphasis",
      "font",
      "format",
      "text",
      "type"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f033",
  voted: false
};
const itunes = {
  changes: [
    "5.0.0"
  ],
  label: "iTunes",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3b4",
  voted: false
};
const j = {
  aliases: {
    unicodes: {
      composite: [
        "6a"
      ]
    }
  },
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "J",
  search: {
    terms: [
      "Latin Capital Letter J",
      "Latin Small Letter J",
      "letter"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "4a",
  voted: false
};
const jar = {
  changes: [
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Jar",
  search: {
    terms: [
      "jam",
      "jelly",
      "storage"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e516",
  voted: false
};
const java = {
  changes: [
    "5.0.10",
    "5.7.0",
    "5.8.0"
  ],
  label: "Java",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f4e4",
  voted: false
};
const jedi = {
  aliases: {
    unicodes: {
      secondary: [
        "10f669"
      ]
    }
  },
  changes: [
    "5.3.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Jedi",
  search: {
    terms: [
      "crest",
      "force",
      "sith",
      "skywalker",
      "star wars",
      "yoda"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f669",
  voted: false
};
const jenkins = {
  changes: [
    "5.0.0"
  ],
  label: "Jenkis",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3b6",
  voted: false
};
const jira = {
  changes: [
    "5.6.0"
  ],
  label: "Jira",
  search: {
    terms: [
      "atlassian"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f7b1",
  voted: true
};
const joget = {
  changes: [
    "5.0.0"
  ],
  label: "Joget",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3b7",
  voted: false
};
const joint = {
  aliases: {
    unicodes: {
      secondary: [
        "10f595"
      ]
    }
  },
  changes: [
    "5.1.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Joint",
  search: {
    terms: [
      "blunt",
      "cannabis",
      "doobie",
      "drugs",
      "marijuana",
      "roach",
      "smoke",
      "smoking",
      "spliff"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f595",
  voted: false
};
const joomla = {
  changes: [
    "4.1.0",
    "5.0.0"
  ],
  label: "Joomla Logo",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f1aa",
  voted: false
};
const js = {
  changes: [
    "5.0.0"
  ],
  label: "JavaScript (JS)",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3b8",
  voted: false
};
const jsfiddle = {
  changes: [
    "4.1.0",
    "5.0.0"
  ],
  label: "jsFiddle",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f1cc",
  voted: false
};
const jxl = {
  changes: [
    "6.5.2"
  ],
  label: "JXL",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e67b",
  voted: false
};
const k = {
  aliases: {
    unicodes: {
      composite: [
        "6b"
      ]
    }
  },
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "K",
  search: {
    terms: [
      "Latin Capital Letter K",
      "Latin Small Letter K",
      "letter"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "4b",
  voted: false
};
const kaaba = {
  aliases: {
    unicodes: {
      composite: [
        "1f54b"
      ],
      secondary: [
        "10f66b"
      ]
    }
  },
  changes: [
    "5.3.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.1.2",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Kaaba",
  search: {
    terms: [
      "Muslim",
      "building",
      "cube",
      "islam",
      "kaaba",
      "muslim",
      "religion"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f66b",
  voted: false
};
const kaggle = {
  changes: [
    "5.2.0",
    "5.8.0"
  ],
  label: "Kaggle",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f5fa",
  voted: true
};
const key = {
  aliases: {
    unicodes: {
      composite: [
        "1f511"
      ],
      secondary: [
        "10f084"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.10.1",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Key",
  search: {
    terms: [
      "key",
      "lock",
      "password",
      "private",
      "secret",
      "unlock"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f084",
  voted: false
};
const keybase = {
  changes: [
    "5.0.11",
    "5.8.0",
    "5.10.2",
    "5.11.0"
  ],
  label: "Keybase",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f4f5",
  voted: true
};
const keyboard = {
  aliases: {
    unicodes: {
      composite: [
        "2328"
      ],
      secondary: [
        "10f11c"
      ]
    }
  },
  changes: [
    "3.1.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Keyboard",
  search: {
    terms: [
      "accessory",
      "computer",
      "edit",
      "input",
      "keyboard",
      "text",
      "type",
      "write"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f11c",
  voted: false
};
const keycdn = {
  changes: [
    "5.0.0"
  ],
  label: "KeyCDN",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3ba",
  voted: false
};
const khanda = {
  aliases: {
    unicodes: {
      composite: [
        "262c"
      ],
      secondary: [
        "10f66d"
      ]
    }
  },
  changes: [
    "5.3.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Khanda",
  search: {
    terms: [
      "Adi Shakti",
      "chakkar",
      "sikh",
      "sikhism",
      "sword"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f66d",
  voted: false
};
const kickstarter = {
  aliases: {
    names: [
      "square-kickstarter"
    ]
  },
  changes: [
    "5.0.0",
    "6.5.2"
  ],
  label: "Kickstarter",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3bb",
  voted: false
};
const korvue = {
  changes: [
    "5.0.2"
  ],
  label: "KORVUE",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f42f",
  voted: false
};
const l = {
  aliases: {
    unicodes: {
      composite: [
        "6c"
      ]
    }
  },
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "L",
  search: {
    terms: [
      "Latin Capital Letter L",
      "Latin Small Letter L",
      "letter"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "4c",
  voted: false
};
const landmark = {
  aliases: {
    unicodes: {
      composite: [
        "1f3db"
      ],
      secondary: [
        "10f66f"
      ]
    }
  },
  changes: [
    "5.3.0",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.0.0-beta3",
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Landmark",
  search: {
    terms: [
      "building",
      "classical",
      "historic",
      "memorable",
      "monument",
      "museum",
      "politics",
      "society"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f66f",
  voted: false
};
const language = {
  aliases: {
    unicodes: {
      secondary: [
        "10f1ab"
      ]
    }
  },
  changes: [
    "4.1.0",
    "5.0.0",
    "5.10.2",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Language",
  search: {
    terms: [
      "dialect",
      "idiom",
      "localize",
      "speech",
      "translate",
      "vernacular"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f1ab",
  voted: false
};
const laptop = {
  aliases: {
    unicodes: {
      composite: [
        "1f4bb"
      ],
      secondary: [
        "10f109"
      ]
    }
  },
  changes: [
    "3.0.0",
    "5.0.0",
    "5.2.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Laptop",
  search: {
    terms: [
      "computer",
      "cpu",
      "dell",
      "demo",
      "device",
      "fabook",
      "fb",
      "laptop",
      "mac",
      "macbook",
      "machine",
      "pc",
      "personal"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f109",
  voted: false
};
const laravel = {
  changes: [
    "5.0.0",
    "5.0.3",
    "5.11.2",
    "6.7.1"
  ],
  label: "Laravel",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3bd",
  voted: false
};
const lastfm = {
  changes: [
    "4.2.0",
    "5.0.0"
  ],
  label: "last.fm",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f202",
  voted: false
};
const leaf = {
  aliases: {
    unicodes: {
      secondary: [
        "10f06c"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.0.9",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Leaf",
  search: {
    terms: [
      "eco",
      "flora",
      "nature",
      "plant",
      "vegan"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f06c",
  voted: false
};
const leanpub = {
  changes: [
    "4.3.0",
    "5.0.0"
  ],
  label: "Leanpub",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f212",
  voted: false
};
const lemon = {
  aliases: {
    unicodes: {
      composite: [
        "1f34b"
      ],
      secondary: [
        "10f094"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Lemon",
  search: {
    terms: [
      "citrus",
      "fruit",
      "lemon",
      "lemonade",
      "lime",
      "tart"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f094",
  voted: false
};
const less = {
  changes: [
    "5.0.0"
  ],
  label: "Less",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f41d",
  voted: false
};
const letterboxd = {
  changes: [
    "6.5.0"
  ],
  label: "Letterboxd",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e62d",
  voted: false
};
const lightbulb = {
  aliases: {
    unicodes: {
      composite: [
        "1f4a1"
      ],
      secondary: [
        "10f0eb"
      ]
    }
  },
  changes: [
    "3.0.0",
    "5.0.0",
    "5.3.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Lightbulb",
  search: {
    terms: [
      "bulb",
      "bulb",
      "comic",
      "comic",
      "electric",
      "electric",
      "energy",
      "idea",
      "idea",
      "innovation",
      "inspiration",
      "inspiration",
      "light",
      "light bulb",
      "mechanical"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f0eb",
  voted: false
};
const line = {
  changes: [
    "5.0.0",
    "6.3.0"
  ],
  label: "Line",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3c0",
  voted: false
};
const link = {
  aliases: {
    names: [
      "chain"
    ],
    unicodes: {
      composite: [
        "1f517"
      ],
      secondary: [
        "10f0c1"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Link",
  search: {
    terms: [
      "attach",
      "attachment",
      "chain",
      "connect",
      "lin",
      "link"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f0c1",
  voted: false
};
const linkedin = {
  changes: [
    "1.0.0",
    "5.0.0"
  ],
  label: "LinkedIn",
  search: {
    terms: [
      "linkedin-square",
      "linkin"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f08c",
  voted: false
};
const linode = {
  changes: [
    "4.7.0",
    "5.0.0",
    "6.0.0-beta1"
  ],
  label: "Linode",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f2b8",
  voted: false
};
const linux = {
  changes: [
    "3.2.0",
    "5.0.0"
  ],
  label: "Linux",
  search: {
    terms: [
      "tux"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f17c",
  voted: false
};
const list = {
  aliases: {
    names: [
      "list-squares"
    ],
    unicodes: {
      secondary: [
        "10f03a"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.9.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "List",
  search: {
    terms: [
      "bullet",
      "category",
      "cheatsheet",
      "checklist",
      "completed",
      "done",
      "finished",
      "ol",
      "summary",
      "todo",
      "ul"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f03a",
  voted: false
};
const lock = {
  aliases: {
    unicodes: {
      composite: [
        "1f512"
      ],
      secondary: [
        "10f023"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Lock",
  search: {
    terms: [
      "admin",
      "closed",
      "lock",
      "locked",
      "open",
      "padlock",
      "password",
      "privacy",
      "private",
      "protect",
      "security"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f023",
  voted: false
};
const locust = {
  changes: [
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Locust",
  search: {
    terms: [
      "horde",
      "infestation",
      "locust",
      "plague",
      "swarm"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e520",
  voted: false
};
const lungs = {
  aliases: {
    unicodes: {
      composite: [
        "1fac1"
      ],
      secondary: [
        "10f604"
      ]
    }
  },
  changes: [
    "5.2.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Lungs",
  search: {
    terms: [
      "air",
      "breath",
      "covid-19",
      "exhalation",
      "inhalation",
      "lungs",
      "organ",
      "respiration",
      "respiratory"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f604",
  voted: false
};
const lyft = {
  changes: [
    "5.0.0"
  ],
  label: "lyft",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3c3",
  voted: false
};
const m = {
  aliases: {
    unicodes: {
      composite: [
        "6d"
      ]
    }
  },
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.2.1",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "M",
  search: {
    terms: [
      "Latin Capital Letter M",
      "Latin Small Letter M",
      "letter"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "4d",
  voted: false
};
const magento = {
  changes: [
    "5.0.0"
  ],
  label: "Magento",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3c4",
  voted: false
};
const magnet = {
  aliases: {
    unicodes: {
      composite: [
        "1f9f2"
      ],
      secondary: [
        "10f076"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.8.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Magnet",
  search: {
    terms: [
      "Attract",
      "attraction",
      "horseshoe",
      "lodestone",
      "magnet",
      "magnetic",
      "tool"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f076",
  voted: false
};
const mailchimp = {
  changes: [
    "5.1.0",
    "5.7.0",
    "5.8.0",
    "5.8.2"
  ],
  label: "Mailchimp",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f59e",
  voted: true
};
const mandalorian = {
  changes: [
    "5.0.12",
    "5.8.0"
  ],
  label: "Mandalorian",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f50f",
  voted: false
};
const map = {
  aliases: {
    unicodes: {
      composite: [
        "1f5fa",
        "f278"
      ],
      secondary: [
        "10f279"
      ]
    }
  },
  changes: [
    "4.4.0",
    "5.0.0",
    "5.1.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Map",
  search: {
    terms: [
      "address",
      "coordinates",
      "destination",
      "gps",
      "localize",
      "location",
      "map",
      "navigation",
      "paper",
      "pin",
      "place",
      "point of interest",
      "position",
      "route",
      "travel",
      "world",
      "world map"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f279",
  voted: false
};
const markdown = {
  changes: [
    "5.2.0",
    "5.7.0"
  ],
  label: "Markdown",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f60f",
  voted: true
};
const marker = {
  aliases: {
    unicodes: {
      secondary: [
        "10f5a1"
      ]
    }
  },
  changes: [
    "5.1.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Marker",
  search: {
    terms: [
      "design",
      "edit",
      "modify",
      "sharpie",
      "update",
      "write"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f5a1",
  voted: true
};
const mars = {
  aliases: {
    unicodes: {
      composite: [
        "2642"
      ],
      secondary: [
        "10f222"
      ]
    }
  },
  changes: [
    "4.3.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Mars",
  search: {
    terms: [
      "gender",
      "male",
      "male sign",
      "man"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f222",
  voted: false
};
const mask = {
  aliases: {
    unicodes: {
      secondary: [
        "10f6fa"
      ]
    }
  },
  changes: [
    "5.4.0",
    "5.10.1",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Mask",
  search: {
    terms: [
      "carnivale",
      "costume",
      "disguise",
      "halloween",
      "secret",
      "super hero"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f6fa",
  voted: false
};
const mastodon = {
  changes: [
    "5.0.11",
    "5.8.0"
  ],
  label: "Mastodon",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f4f6",
  voted: true
};
const maxcdn = {
  changes: [
    "3.1.0",
    "5.0.0"
  ],
  label: "MaxCDN",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f136",
  voted: false
};
const maximize = {
  aliases: {
    names: [
      "expand-arrows-alt"
    ],
    unicodes: {
      secondary: [
        "10f31e"
      ]
    }
  },
  changes: [
    "5.0.0",
    "5.8.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Maximize",
  search: {
    terms: [
      "arrows",
      "bigger",
      "enlarge",
      "expand",
      "fullscreen",
      "maximize",
      "resize",
      "resize",
      "scale",
      "size"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f31e",
  voted: false
};
const mdb = {
  changes: [
    "5.11.0"
  ],
  label: "Material Design for Bootstrap",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f8ca",
  voted: false
};
const medal = {
  aliases: {
    unicodes: {
      composite: [
        "1f3c5"
      ],
      secondary: [
        "10f5a2"
      ]
    }
  },
  changes: [
    "5.1.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Medal",
  search: {
    terms: [
      "award",
      "guarantee",
      "medal",
      "quality",
      "ribbon",
      "sports medal",
      "star",
      "trophy",
      "warranty"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f5a2",
  voted: true
};
const medapps = {
  changes: [
    "5.0.0"
  ],
  label: "MedApps",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3c6",
  voted: false
};
const medium = {
  aliases: {
    names: [
      "medium-m"
    ],
    unicodes: {
      composite: [
        "f3c7"
      ]
    }
  },
  changes: [
    "4.3.0",
    "5.0.0",
    "6.0.0-beta1"
  ],
  label: "Medium",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f23a",
  voted: false
};
const medrt = {
  changes: [
    "5.0.0"
  ],
  label: "MRT",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3c8",
  voted: false
};
const meetup = {
  changes: [
    "4.7.0",
    "5.0.0"
  ],
  label: "Meetup",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f2e0",
  voted: false
};
const megaport = {
  changes: [
    "5.1.0"
  ],
  label: "Megaport",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f5a3",
  voted: false
};
const memory = {
  aliases: {
    unicodes: {
      secondary: [
        "10f538"
      ]
    }
  },
  changes: [
    "5.0.13",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Memory",
  search: {
    terms: [
      "DIMM",
      "RAM",
      "hardware",
      "storage",
      "technology"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f538",
  voted: true
};
const mendeley = {
  changes: [
    "5.6.0"
  ],
  label: "Mendeley",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f7b3",
  voted: true
};
const menorah = {
  aliases: {
    unicodes: {
      secondary: [
        "10f676"
      ]
    }
  },
  changes: [
    "5.3.0",
    "5.4.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Menorah",
  search: {
    terms: [
      "candle",
      "hanukkah",
      "jewish",
      "judaism",
      "light"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f676",
  voted: false
};
const mercury = {
  aliases: {
    unicodes: {
      composite: [
        "263f"
      ],
      secondary: [
        "10f223"
      ]
    }
  },
  changes: [
    "4.3.0",
    "5.0.0",
    "5.11.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Mercury",
  search: {
    terms: [
      "Mercury",
      "gender",
      "hybrid",
      "transgender"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f223",
  voted: false
};
const message = {
  aliases: {
    names: [
      "comment-alt"
    ],
    unicodes: {
      secondary: [
        "10f27a"
      ]
    }
  },
  changes: [
    "4.4.0",
    "5.0.0",
    "5.10.1",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Message",
  search: {
    terms: [
      "answer",
      "bubble",
      "chat",
      "commenting",
      "conversation",
      "conversation",
      "discussion",
      "feedback",
      "message",
      "note",
      "notification",
      "sms",
      "speech",
      "talk",
      "talking",
      "texting"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f27a",
  voted: false
};
const meta = {
  changes: [
    "6.0.0",
    "6.1.2"
  ],
  label: "Meta",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e49b",
  voted: false
};
const meteor = {
  aliases: {
    unicodes: {
      composite: [
        "2604"
      ],
      secondary: [
        "10f753"
      ]
    }
  },
  changes: [
    "5.5.0",
    "5.12.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Meteor",
  search: {
    terms: [
      "armageddon",
      "asteroid",
      "comet",
      "shooting star",
      "space"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f753",
  voted: false
};
const microblog = {
  changes: [
    "5.12.0",
    "5.14.0"
  ],
  label: "Micro.blog",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e01a",
  voted: true
};
const microchip = {
  aliases: {
    unicodes: {
      secondary: [
        "10f2db"
      ]
    }
  },
  changes: [
    "4.7.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Microchip",
  search: {
    terms: [
      "cpu",
      "hardware",
      "processor",
      "technology"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f2db",
  voted: false
};
const microphone = {
  aliases: {
    unicodes: {
      secondary: [
        "10f130"
      ]
    }
  },
  changes: [
    "3.1.0",
    "5.0.0",
    "5.0.13",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Microphone",
  search: {
    terms: [
      "address",
      "audio",
      "information",
      "podcast",
      "public",
      "record",
      "sing",
      "sound",
      "talking",
      "voice"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f130",
  voted: false
};
const microscope = {
  aliases: {
    unicodes: {
      composite: [
        "1f52c"
      ],
      secondary: [
        "10f610"
      ]
    }
  },
  changes: [
    "5.2.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Microscope",
  search: {
    terms: [
      "covid-19",
      "electron",
      "knowledge",
      "lens",
      "microscope",
      "optics",
      "science",
      "shrink",
      "testing",
      "tool"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f610",
  voted: false
};
const microsoft = {
  changes: [
    "5.0.0"
  ],
  label: "Microsoft",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3ca",
  voted: true
};
const minimize = {
  aliases: {
    names: [
      "compress-arrows-alt"
    ],
    unicodes: {
      secondary: [
        "10f78c"
      ]
    }
  },
  changes: [
    "5.6.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Minimize",
  search: {
    terms: [
      "collapse",
      "fullscreen",
      "minimize",
      "move",
      "resize",
      "shrink",
      "smaller"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f78c",
  voted: true
};
const mintbit = {
  changes: [
    "6.5.0"
  ],
  label: "Mintbit",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e62f",
  voted: false
};
const minus = {
  aliases: {
    names: [
      "subtract"
    ],
    unicodes: {
      composite: [
        "2013",
        "2212",
        "2796"
      ],
      secondary: [
        "10f068"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Minus",
  search: {
    terms: [
      "En Dash",
      "Minus Sign",
      "collapse",
      "delete",
      "hide",
      "math",
      "minify",
      "minus",
      "negative",
      "remove",
      "sign",
      "trash",
      "−"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f068",
  voted: false
};
const mitten = {
  aliases: {
    unicodes: {
      secondary: [
        "10f7b5"
      ]
    }
  },
  changes: [
    "5.6.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Mitten",
  search: {
    terms: [
      "clothing",
      "cold",
      "glove",
      "hands",
      "knitted",
      "seasonal",
      "warmth"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f7b5",
  voted: false
};
const mix = {
  changes: [
    "5.0.0",
    "5.0.3"
  ],
  label: "Mix",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3cb",
  voted: false
};
const mixcloud = {
  changes: [
    "4.5.0",
    "5.0.0",
    "6.1.2"
  ],
  label: "Mixcloud",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f289",
  voted: false
};
const mixer = {
  changes: [
    "5.12.1",
    "5.14.0"
  ],
  label: "Mixer",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e056",
  voted: true
};
const mizuni = {
  changes: [
    "5.0.0"
  ],
  label: "Mizuni",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3cc",
  voted: false
};
const mobile = {
  aliases: {
    names: [
      "mobile-android",
      "mobile-phone"
    ],
    unicodes: {
      composite: [
        "1f4f1"
      ],
      secondary: [
        "10f3ce"
      ]
    }
  },
  changes: [
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Mobile",
  search: {
    terms: [
      "android",
      "call",
      "cell",
      "cell phone",
      "device",
      "mobile",
      "mobile phone",
      "number",
      "phone",
      "screen",
      "telephone",
      "text"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f3ce",
  voted: false
};
const modx = {
  changes: [
    "4.5.0",
    "5.0.0"
  ],
  label: "MODX",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f285",
  voted: false
};
const monero = {
  changes: [
    "5.0.0"
  ],
  label: "Monero",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3d0",
  voted: false
};
const monument = {
  aliases: {
    unicodes: {
      secondary: [
        "10f5a6"
      ]
    }
  },
  changes: [
    "5.1.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Monument",
  search: {
    terms: [
      "building",
      "historic",
      "landmark",
      "memorable"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f5a6",
  voted: false
};
const moon = {
  aliases: {
    unicodes: {
      composite: [
        "1f319",
        "23fe"
      ],
      secondary: [
        "10f186"
      ]
    }
  },
  changes: [
    "3.2.0",
    "5.0.0",
    "5.11.0",
    "5.11.1",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Moon",
  search: {
    terms: [
      "Power Sleep Symbol",
      "contrast",
      "crescent",
      "crescent moon",
      "dark",
      "lunar",
      "moon",
      "night"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f186",
  voted: false
};
const mosque = {
  aliases: {
    unicodes: {
      composite: [
        "1f54c"
      ],
      secondary: [
        "10f678"
      ]
    }
  },
  changes: [
    "5.3.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Mosque",
  search: {
    terms: [
      "Muslim",
      "building",
      "islam",
      "landmark",
      "mosque",
      "muslim",
      "religion"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f678",
  voted: false
};
const mosquito = {
  changes: [
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Mosquito",
  search: {
    terms: [
      "bite",
      "bug",
      "mosquito",
      "west nile"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e52b",
  voted: false
};
const motorcycle = {
  aliases: {
    unicodes: {
      composite: [
        "1f3cd"
      ],
      secondary: [
        "10f21c"
      ]
    }
  },
  changes: [
    "4.3.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Motorcycle",
  search: {
    terms: [
      "bike",
      "machine",
      "motorcycle",
      "racing",
      "transportation",
      "vehicle"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f21c",
  voted: false
};
const mound = {
  changes: [
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Mound",
  search: {
    terms: [
      "barrier",
      "hill",
      "pitcher",
      "speedbump"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e52d",
  voted: false
};
const mountain = {
  aliases: {
    unicodes: {
      composite: [
        "1f3d4"
      ],
      secondary: [
        "10f6fc"
      ]
    }
  },
  changes: [
    "5.4.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Mountain",
  search: {
    terms: [
      "cold",
      "glacier",
      "hiking",
      "hill",
      "landscape",
      "mountain",
      "snow",
      "snow-capped mountain",
      "travel",
      "view"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f6fc",
  voted: false
};
const music = {
  aliases: {
    unicodes: {
      composite: [
        "1f3b5"
      ],
      secondary: [
        "10f001"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.2.0",
    "5.11.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Music",
  search: {
    terms: [
      "lyrics",
      "melody",
      "music",
      "musical note",
      "note",
      "sing",
      "sound"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f001",
  voted: false
};
const n = {
  aliases: {
    unicodes: {
      composite: [
        "6e"
      ]
    }
  },
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.2.1",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "N",
  search: {
    terms: [
      "Latin Capital Letter N",
      "Latin Small Letter N",
      "letter",
      "nay",
      "no"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "4e",
  voted: false
};
const napster = {
  changes: [
    "5.0.0"
  ],
  label: "Napster",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3d2",
  voted: false
};
const neos = {
  changes: [
    "5.2.0",
    "5.8.0"
  ],
  label: "Neos",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f612",
  voted: true
};
const neuter = {
  aliases: {
    unicodes: {
      composite: [
        "26b2"
      ],
      secondary: [
        "10f22c"
      ]
    }
  },
  changes: [
    "4.3.0",
    "5.0.0",
    "5.11.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Neuter",
  search: {
    terms: [
      "Neuter",
      "gender"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f22c",
  voted: false
};
const newspaper = {
  aliases: {
    unicodes: {
      composite: [
        "1f4f0"
      ],
      secondary: [
        "10f1ea"
      ]
    }
  },
  changes: [
    "4.2.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Newspaper",
  search: {
    terms: [
      "article",
      "editorial",
      "headline",
      "journal",
      "journalism",
      "news",
      "newsletter",
      "newspaper",
      "paper",
      "press"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f1ea",
  voted: false
};
const nimblr = {
  changes: [
    "5.1.0",
    "5.8.0"
  ],
  label: "Nimblr",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f5a8",
  voted: false
};
const node = {
  changes: [
    "5.0.0"
  ],
  label: "Node.js",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f419",
  voted: true
};
const notdef = {
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.2.1",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Notdef",
  search: {
    terms: [
      "404",
      "close",
      "missing",
      "not found"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e1fe",
  voted: false
};
const npm = {
  changes: [
    "5.0.0"
  ],
  label: "npm",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3d4",
  voted: false
};
const ns8 = {
  changes: [
    "5.0.0",
    "5.15.0"
  ],
  label: "NS8",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3d5",
  voted: false
};
const nutritionix = {
  changes: [
    "5.0.0"
  ],
  label: "Nutritionix",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3d6",
  voted: false
};
const o = {
  aliases: {
    unicodes: {
      composite: [
        "6f"
      ]
    }
  },
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "O",
  search: {
    terms: [
      "Latin Capital Letter O",
      "Latin Small Letter O",
      "letter"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "4f",
  voted: false
};
const odnoklassniki = {
  changes: [
    "4.4.0",
    "5.0.0"
  ],
  label: "Odnoklassniki",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f263",
  voted: false
};
const odysee = {
  changes: [
    "6.2.1",
    "6.3.0"
  ],
  label: "Odysee",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e5c6",
  voted: false
};
const om = {
  aliases: {
    unicodes: {
      composite: [
        "1f549"
      ],
      secondary: [
        "10f679"
      ]
    }
  },
  changes: [
    "5.3.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Om",
  search: {
    terms: [
      "Hindu",
      "buddhism",
      "hinduism",
      "jainism",
      "mantra",
      "om",
      "religion"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f679",
  voted: false
};
const opencart = {
  changes: [
    "4.4.0",
    "5.0.0"
  ],
  label: "OpenCart",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f23d",
  voted: false
};
const openid = {
  changes: [
    "4.1.0",
    "5.0.0"
  ],
  label: "OpenID",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f19b",
  voted: false
};
const opensuse = {
  changes: [
    "6.5.0"
  ],
  label: "Opensuse",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e62b",
  voted: false
};
const opera = {
  changes: [
    "4.4.0",
    "5.0.0"
  ],
  label: "Opera",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f26a",
  voted: false
};
const orcid = {
  changes: [
    "5.11.0"
  ],
  label: "ORCID",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f8d2",
  voted: false
};
const osi = {
  changes: [
    "5.0.0",
    "5.8.0"
  ],
  label: "Open Source Initiative",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f41a",
  voted: false
};
const otter = {
  aliases: {
    unicodes: {
      composite: [
        "1f9a6"
      ],
      secondary: [
        "10f700"
      ]
    }
  },
  changes: [
    "5.4.0",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Otter",
  search: {
    terms: [
      "animal",
      "badger",
      "fauna",
      "fishing",
      "fur",
      "mammal",
      "marten",
      "otter",
      "playful"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f700",
  voted: false
};
const outdent = {
  aliases: {
    names: [
      "dedent"
    ],
    unicodes: {
      secondary: [
        "10f03b"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.9.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Outdent",
  search: {
    terms: [
      "align",
      "justify",
      "paragraph",
      "tab"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f03b",
  voted: false
};
const p = {
  aliases: {
    unicodes: {
      composite: [
        "70"
      ]
    }
  },
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "P",
  search: {
    terms: [
      "Latin Capital Letter P",
      "Latin Small Letter P",
      "letter"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "50",
  voted: false
};
const padlet = {
  changes: [
    "6.0.0"
  ],
  label: "Padlet",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e4a0",
  voted: false
};
const page4 = {
  changes: [
    "5.0.0"
  ],
  label: "page4 Corporation",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3d7",
  voted: false
};
const pagelines = {
  changes: [
    "4.0.0",
    "5.0.0"
  ],
  label: "Pagelines",
  search: {
    terms: [
      "eco",
      "flora",
      "leaf",
      "leaves",
      "nature",
      "plant",
      "tree"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f18c",
  voted: false
};
const pager = {
  aliases: {
    unicodes: {
      composite: [
        "1f4df"
      ],
      secondary: [
        "10f815"
      ]
    }
  },
  changes: [
    "5.7.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Pager",
  search: {
    terms: [
      "beeper",
      "cell phone",
      "communication",
      "page",
      "pager"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f815",
  voted: false
};
const paintbrush = {
  aliases: {
    names: [
      "paint-brush"
    ],
    unicodes: {
      composite: [
        "1f58c"
      ],
      secondary: [
        "10f1fc"
      ]
    }
  },
  changes: [
    "4.2.0",
    "5.0.0",
    "5.1.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Paintbrush",
  search: {
    terms: [
      "acrylic",
      "art",
      "brush",
      "color",
      "fill",
      "modify",
      "paint",
      "paintbrush",
      "painting",
      "pigment",
      "watercolor"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f1fc",
  voted: false
};
const palette = {
  aliases: {
    unicodes: {
      composite: [
        "1f3a8"
      ],
      secondary: [
        "10f53f"
      ]
    }
  },
  changes: [
    "5.0.13",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Palette",
  search: {
    terms: [
      "acrylic",
      "art",
      "artist palette",
      "brush",
      "color",
      "fill",
      "museum",
      "paint",
      "painting",
      "palette",
      "pigment",
      "watercolor"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f53f",
  voted: true
};
const palfed = {
  changes: [
    "5.0.0",
    "5.0.3"
  ],
  label: "Palfed",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3d8",
  voted: false
};
const pallet = {
  aliases: {
    unicodes: {
      secondary: [
        "10f482"
      ]
    }
  },
  changes: [
    "5.0.7",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Pallet",
  search: {
    terms: [
      "archive",
      "box",
      "inventory",
      "shipping",
      "warehouse"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f482",
  voted: false
};
const panorama = {
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Panorama",
  search: {
    terms: [
      "image",
      "img",
      "landscape",
      "photo",
      "wide"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e209",
  voted: false
};
const paperclip = {
  aliases: {
    unicodes: {
      composite: [
        "1f4ce"
      ],
      secondary: [
        "10f0c6"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Paperclip",
  search: {
    terms: [
      "attach",
      "attachment",
      "connect",
      "link",
      "papercli",
      "paperclip"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f0c6",
  voted: false
};
const paragraph = {
  aliases: {
    unicodes: {
      composite: [
        "b6"
      ],
      secondary: [
        "10f1dd"
      ]
    }
  },
  changes: [
    "4.1.0",
    "5.0.0",
    "5.9.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Paragraph",
  search: {
    terms: [
      "Pilcrow Sign",
      "edit",
      "format",
      "text",
      "writing"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f1dd",
  voted: false
};
const passport = {
  aliases: {
    unicodes: {
      secondary: [
        "10f5ab"
      ]
    }
  },
  changes: [
    "5.1.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Passport",
  search: {
    terms: [
      "document",
      "id",
      "identification",
      "issued",
      "travel"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f5ab",
  voted: false
};
const paste = {
  aliases: {
    names: [
      "file-clipboard"
    ],
    unicodes: {
      secondary: [
        "10f0ea"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.2.1",
    "6.3.0",
    "6.4.0",
    "6.4.1",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Paste",
  search: {
    terms: [
      "clipboard",
      "copy",
      "document",
      "paper"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f0ea",
  voted: false
};
const patreon = {
  changes: [
    "5.0.0",
    "5.0.3",
    "6.5.0"
  ],
  label: "Patreon",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3d9",
  voted: false
};
const pause = {
  aliases: {
    unicodes: {
      composite: [
        "23f8"
      ],
      secondary: [
        "10f04c"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.10.2",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Pause",
  search: {
    terms: [
      "bar",
      "double",
      "hold",
      "pause",
      "pause button",
      "vertical",
      "wait"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f04c",
  voted: false
};
const paw = {
  aliases: {
    unicodes: {
      secondary: [
        "10f1b0"
      ]
    }
  },
  changes: [
    "4.1.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.1.2",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Paw",
  search: {
    terms: [
      "animal",
      "cat",
      "dog",
      "pet",
      "print"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f1b0",
  voted: false
};
const paypal = {
  changes: [
    "4.2.0",
    "5.0.0"
  ],
  label: "Paypal",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f1ed",
  voted: false
};
const peace = {
  aliases: {
    unicodes: {
      composite: [
        "262e"
      ],
      secondary: [
        "10f67c"
      ]
    }
  },
  changes: [
    "5.3.0",
    "5.11.0",
    "5.11.1",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Peace",
  search: {
    terms: [
      "peace",
      "peace symbol",
      "serenity",
      "tranquility",
      "truce",
      "war"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f67c",
  voted: false
};
const pen = {
  aliases: {
    unicodes: {
      composite: [
        "1f58a"
      ],
      secondary: [
        "10f304"
      ]
    }
  },
  changes: [
    "5.0.0",
    "5.1.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Pen",
  search: {
    terms: [
      "ballpoint",
      "design",
      "edit",
      "modify",
      "pen",
      "update",
      "write"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f304",
  voted: false
};
const pencil = {
  aliases: {
    names: [
      "pencil-alt"
    ],
    unicodes: {
      composite: [
        "270f",
        "f040"
      ],
      primary: [
        "f040"
      ],
      secondary: [
        "10f040",
        "10f303"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.2.1",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Pencil",
  search: {
    terms: [
      "Lower Left Pencil",
      "design",
      "draw",
      "edit",
      "lead",
      "maintenance",
      "modify",
      "pencil",
      "update",
      "write"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f303",
  voted: false
};
const perbyte = {
  changes: [
    "5.15.0"
  ],
  label: "PerByte",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e083",
  voted: false
};
const percent = {
  aliases: {
    names: [
      "percentage"
    ],
    unicodes: {
      composite: [
        "f295",
        "f541"
      ],
      primary: [
        "f295",
        "f541"
      ],
      secondary: [
        "1025",
        "10f295",
        "10f541"
      ]
    }
  },
  changes: [
    "4.5.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Percent",
  search: {
    terms: [
      "Percent Sign",
      "discount",
      "fraction",
      "proportion",
      "rate",
      "ratio"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "25",
  voted: true
};
const periscope = {
  changes: [
    "5.0.0"
  ],
  label: "Periscope",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3da",
  voted: false
};
const person = {
  aliases: {
    names: [
      "male"
    ],
    unicodes: {
      composite: [
        "1f9cd"
      ],
      secondary: [
        "10f183"
      ]
    }
  },
  changes: [
    "3.2.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Person",
  search: {
    terms: [
      "default",
      "man",
      "person standing",
      "stand",
      "standing",
      "uer",
      "woman"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f183",
  voted: false
};
const phabricator = {
  changes: [
    "5.0.0"
  ],
  label: "Phabricator",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3db",
  voted: false
};
const phone = {
  aliases: {
    unicodes: {
      composite: [
        "1f4de",
        "1f57b"
      ],
      secondary: [
        "10f095"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "5.10.1",
    "5.10.2",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Phone",
  search: {
    terms: [
      "Left Hand Telephone Receiver",
      "call",
      "earphone",
      "number",
      "phone",
      "receiver",
      "support",
      "talking",
      "telephone",
      "telephone receiver",
      "voice"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f095",
  voted: false
};
const php = {
  changes: [
    "5.0.5"
  ],
  label: "PHP",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f457",
  voted: true
};
const pills = {
  aliases: {
    unicodes: {
      secondary: [
        "10f484"
      ]
    }
  },
  changes: [
    "5.0.7",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Pills",
  search: {
    terms: [
      "drugs",
      "medicine",
      "prescription",
      "tablets"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f484",
  voted: false
};
const pinterest = {
  changes: [
    "2.0.0",
    "5.0.0"
  ],
  label: "Pinterest",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f0d2",
  voted: false
};
const pix = {
  changes: [
    "6.0.0-beta2"
  ],
  label: "Pix",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e43a",
  voted: true
};
const pixiv = {
  changes: [
    "6.5.0"
  ],
  label: "Pixiv",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e640",
  voted: false
};
const plane = {
  aliases: {
    unicodes: {
      secondary: [
        "10f072"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.0.13",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.4.1",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Plane",
  search: {
    terms: [
      "airplane",
      "airport",
      "destination",
      "fly",
      "location",
      "mode",
      "travel",
      "trip"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f072",
  voted: false
};
const play = {
  aliases: {
    unicodes: {
      composite: [
        "25b6"
      ],
      secondary: [
        "10f04b"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.10.2",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Play",
  search: {
    terms: [
      "arrow",
      "audio",
      "music",
      "play",
      "play button",
      "playing",
      "right",
      "sound",
      "start",
      "triangle",
      "video"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f04b",
  voted: false
};
const playstation = {
  changes: [
    "5.0.0"
  ],
  label: "PlayStation",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3df",
  voted: false
};
const plug = {
  aliases: {
    unicodes: {
      composite: [
        "1f50c"
      ],
      secondary: [
        "10f1e6"
      ]
    }
  },
  changes: [
    "4.2.0",
    "5.0.0",
    "5.12.0",
    "6.0.0-beta1",
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Plug",
  search: {
    terms: [
      "connect",
      "electric",
      "electric plug",
      "electricity",
      "online",
      "plug",
      "power"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f1e6",
  voted: false
};
const plus = {
  aliases: {
    names: [
      "add"
    ],
    unicodes: {
      composite: [
        "2795",
        "f067"
      ],
      primary: [
        "f067"
      ],
      secondary: [
        "102b",
        "10f067"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.0.13",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Plus",
  search: {
    terms: [
      "+",
      "Plus Sign",
      "add",
      "create",
      "expand",
      "follow",
      "math",
      "modify",
      "new",
      "plus",
      "positive",
      "shape",
      "sign"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "2b",
  voted: false
};
const podcast = {
  aliases: {
    unicodes: {
      secondary: [
        "10f2ce"
      ]
    }
  },
  changes: [
    "4.7.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Podcast",
  search: {
    terms: [
      "audio",
      "broadcast",
      "music",
      "sound"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f2ce",
  voted: false
};
const poo = {
  aliases: {
    unicodes: {
      composite: [
        "1f4a9"
      ],
      secondary: [
        "10f2fe"
      ]
    }
  },
  changes: [
    "5.0.0",
    "5.0.9",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Poo",
  search: {
    terms: [
      "crap",
      "dung",
      "face",
      "monster",
      "pile of poo",
      "poo",
      "poop",
      "shit",
      "smile",
      "turd",
      "uer"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f2fe",
  voted: false
};
const poop = {
  aliases: {
    unicodes: {
      secondary: [
        "10f619"
      ]
    }
  },
  changes: [
    "5.2.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.4.1",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Poop",
  search: {
    terms: [
      "crap",
      "poop",
      "shit",
      "smile",
      "turd"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f619",
  voted: false
};
const prescription = {
  aliases: {
    unicodes: {
      secondary: [
        "10f5b1"
      ]
    }
  },
  changes: [
    "5.1.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Prescription",
  search: {
    terms: [
      "drugs",
      "medical",
      "medicine",
      "pharmacy",
      "rx"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f5b1",
  voted: false
};
const print = {
  aliases: {
    unicodes: {
      composite: [
        "1f5a8",
        "1f5b6",
        "2399"
      ],
      secondary: [
        "10f02f"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.3.0",
    "5.11.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.5.2",
    "6.6.0",
    "6.7.0"
  ],
  label: "Print",
  search: {
    terms: [
      "Print Screen Symbol",
      "Printer Icon",
      "business",
      "computer",
      "copy",
      "document",
      "office",
      "paper",
      "printer"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f02f",
  voted: false
};
const pushed = {
  changes: [
    "5.0.0"
  ],
  label: "Pushed",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3e1",
  voted: false
};
const python = {
  changes: [
    "5.0.0"
  ],
  label: "Python",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3e2",
  voted: false
};
const q = {
  aliases: {
    unicodes: {
      composite: [
        "71"
      ]
    }
  },
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Q",
  search: {
    terms: [
      "Latin Capital Letter Q",
      "Latin Small Letter Q",
      "letter"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "51",
  voted: false
};
const qq = {
  changes: [
    "4.1.0",
    "5.0.0"
  ],
  label: "QQ",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f1d6",
  voted: false
};
const qrcode = {
  aliases: {
    unicodes: {
      secondary: [
        "10f029"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.10.1",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Qrcode",
  search: {
    terms: [
      "barcode",
      "info",
      "information",
      "scan"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f029",
  voted: false
};
const question = {
  aliases: {
    unicodes: {
      composite: [
        "2753",
        "2754",
        "f128"
      ],
      primary: [
        "f128"
      ],
      secondary: [
        "103f",
        "10f128"
      ]
    }
  },
  changes: [
    "3.1.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Question",
  search: {
    terms: [
      "?",
      "Question Mark",
      "faq",
      "help",
      "information",
      "mark",
      "outlined",
      "punctuation",
      "question",
      "red question mark",
      "request",
      "support",
      "unknown",
      "white question mark"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "3f",
  voted: false
};
const quinscape = {
  changes: [
    "5.0.5",
    "5.7.0",
    "5.8.0"
  ],
  label: "QuinScape",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f459",
  voted: false
};
const quora = {
  changes: [
    "4.7.0",
    "5.0.0"
  ],
  label: "Quora",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f2c4",
  voted: false
};
const r = {
  aliases: {
    unicodes: {
      composite: [
        "72"
      ]
    }
  },
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "R",
  search: {
    terms: [
      "Latin Capital Letter R",
      "Latin Small Letter R",
      "letter"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "52",
  voted: false
};
const radiation = {
  aliases: {
    unicodes: {
      secondary: [
        "10f7b9"
      ]
    }
  },
  changes: [
    "5.6.0",
    "5.8.2",
    "5.11.0",
    "5.11.1",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Radiation",
  search: {
    terms: [
      "danger",
      "dangerous",
      "deadly",
      "hazard",
      "nuclear",
      "radioactive",
      "warning"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f7b9",
  voted: true
};
const radio = {
  aliases: {
    unicodes: {
      composite: [
        "1f4fb"
      ],
      secondary: [
        "10f8d7"
      ]
    }
  },
  changes: [
    "5.11.0",
    "6.0.0-beta1",
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Radio",
  search: {
    terms: [
      "am",
      "broadcast",
      "fm",
      "frequency",
      "music",
      "news",
      "radio",
      "receiver",
      "transmitter",
      "tuner",
      "video"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f8d7",
  voted: false
};
const rainbow = {
  aliases: {
    unicodes: {
      composite: [
        "1f308"
      ],
      secondary: [
        "10f75b"
      ]
    }
  },
  changes: [
    "5.5.0",
    "5.10.1",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Rainbow",
  search: {
    terms: [
      "gold",
      "leprechaun",
      "prism",
      "rain",
      "rainbow",
      "sky"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f75b",
  voted: false
};
const ravelry = {
  changes: [
    "4.7.0",
    "5.0.0",
    "5.15.1"
  ],
  label: "Ravelry",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f2d9",
  voted: false
};
const react = {
  changes: [
    "5.0.0"
  ],
  label: "React",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f41b",
  voted: false
};
const reacteurope = {
  changes: [
    "5.5.0",
    "5.8.0"
  ],
  label: "ReactEurope",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f75d",
  voted: false
};
const readme = {
  changes: [
    "5.0.9",
    "5.0.10"
  ],
  label: "ReadMe",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f4d5",
  voted: false
};
const rebel = {
  changes: [
    "4.1.0",
    "5.0.0"
  ],
  label: "Rebel Alliance",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f1d0",
  voted: false
};
const receipt = {
  aliases: {
    unicodes: {
      composite: [
        "1f9fe"
      ],
      secondary: [
        "10f543"
      ]
    }
  },
  changes: [
    "5.0.13",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Receipt",
  search: {
    terms: [
      "accounting",
      "bookkeeping",
      "check",
      "coupon",
      "evidence",
      "invoice",
      "money",
      "pay",
      "proof",
      "receipt",
      "table"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f543",
  voted: true
};
const recycle = {
  aliases: {
    unicodes: {
      composite: [
        "2672",
        "267a",
        "267b"
      ],
      secondary: [
        "10f1b8"
      ]
    }
  },
  changes: [
    "4.1.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Recycle",
  search: {
    terms: [
      "Recycling Symbol For Generic Materials",
      "Universal Recycling Symbol",
      "Waste",
      "compost",
      "garbage",
      "recycle",
      "recycling symbol",
      "reuse",
      "trash"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f1b8",
  voted: false
};
const reddit = {
  changes: [
    "4.1.0",
    "5.0.0",
    "6.5.1"
  ],
  label: "Reddit",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f1a1",
  voted: false
};
const redhat = {
  changes: [
    "5.6.0",
    "5.8.2"
  ],
  label: "Redhat",
  search: {
    terms: [
      "linux",
      "operating system",
      "os"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f7bc",
  voted: true
};
const registered = {
  aliases: {
    unicodes: {
      composite: [
        "ae"
      ],
      secondary: [
        "10f25d"
      ]
    }
  },
  changes: [
    "4.4.0",
    "5.0.0",
    "5.10.1",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Registered",
  search: {
    terms: [
      "copyright",
      "mark",
      "r",
      "registered",
      "trademark"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f25d",
  voted: false
};
const renren = {
  changes: [
    "3.2.0",
    "5.0.0"
  ],
  label: "Renren",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f18b",
  voted: false
};
const repeat = {
  aliases: {
    unicodes: {
      composite: [
        "1f501"
      ],
      secondary: [
        "10f363"
      ]
    }
  },
  changes: [
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Repeat",
  search: {
    terms: [
      "arrow",
      "clockwise",
      "flip",
      "reload",
      "renew",
      "repeat",
      "repeat button",
      "retry",
      "rewind",
      "switch"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f363",
  voted: false
};
const reply = {
  aliases: {
    names: [
      "mail-reply"
    ],
    unicodes: {
      composite: [
        "f112"
      ],
      secondary: [
        "10f3e5"
      ]
    }
  },
  changes: [
    "3.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.2.1",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Reply",
  search: {
    terms: [
      "mail",
      "message",
      "respond"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f3e5",
  voted: false
};
const replyd = {
  changes: [
    "5.0.0"
  ],
  label: "replyd",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3e6",
  voted: false
};
const republican = {
  aliases: {
    unicodes: {
      secondary: [
        "10f75e"
      ]
    }
  },
  changes: [
    "5.5.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Republican",
  search: {
    terms: [
      "american",
      "conservative",
      "election",
      "elephant",
      "politics",
      "republican party",
      "right",
      "right-wing",
      "usa"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f75e",
  voted: false
};
const researchgate = {
  changes: [
    "5.0.11"
  ],
  label: "Researchgate",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f4f8",
  voted: true
};
const resolving = {
  changes: [
    "5.0.0"
  ],
  label: "Resolving",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3e7",
  voted: false
};
const restroom = {
  aliases: {
    unicodes: {
      secondary: [
        "10f7bd"
      ]
    }
  },
  changes: [
    "5.6.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Restroom",
  search: {
    terms: [
      "bathroom",
      "toilet",
      "uer",
      "water closet",
      "wc"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f7bd",
  voted: true
};
const retweet = {
  aliases: {
    unicodes: {
      secondary: [
        "10f079"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Retweet",
  search: {
    terms: [
      "refresh",
      "reload",
      "renew",
      "retry",
      "share",
      "swap"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f079",
  voted: false
};
const rev = {
  changes: [
    "5.1.0",
    "5.1.1",
    "5.8.0"
  ],
  label: "Rev.io",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f5b2",
  voted: false
};
const ribbon = {
  aliases: {
    unicodes: {
      composite: [
        "1f397"
      ],
      secondary: [
        "10f4d6"
      ]
    }
  },
  changes: [
    "5.0.9",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Ribbon",
  search: {
    terms: [
      "badge",
      "cause",
      "celebration",
      "lapel",
      "pin",
      "reminder",
      "reminder ribbon",
      "ribbon"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f4d6",
  voted: false
};
const ring = {
  aliases: {
    unicodes: {
      secondary: [
        "10f70b"
      ]
    }
  },
  changes: [
    "5.4.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Ring",
  search: {
    terms: [
      "Dungeons & Dragons",
      "Gollum",
      "band",
      "binding",
      "d&d",
      "dnd",
      "engagement",
      "fantasy",
      "gold",
      "jewelry",
      "marriage",
      "precious",
      "premium"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f70b",
  voted: false
};
const road = {
  aliases: {
    unicodes: {
      composite: [
        "1f6e3"
      ],
      secondary: [
        "10f018"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.2.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Road",
  search: {
    terms: [
      "highway",
      "map",
      "motorway",
      "pavement",
      "road",
      "route",
      "street",
      "travel"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f018",
  voted: false
};
const robot = {
  aliases: {
    unicodes: {
      composite: [
        "1f916"
      ],
      secondary: [
        "10f544"
      ]
    }
  },
  changes: [
    "5.0.13",
    "5.12.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Robot",
  search: {
    terms: [
      "android",
      "automate",
      "computer",
      "cyborg",
      "face",
      "monster",
      "robot"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f544",
  voted: true
};
const rocket = {
  aliases: {
    unicodes: {
      secondary: [
        "10f135"
      ]
    }
  },
  changes: [
    "3.1.0",
    "5.0.0",
    "5.7.0",
    "5.12.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Rocket",
  search: {
    terms: [
      "aircraft",
      "app",
      "jet",
      "launch",
      "nasa",
      "space"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f135",
  voted: false
};
const rocketchat = {
  changes: [
    "5.0.0",
    "5.4.2",
    "5.8.0",
    "5.15.0"
  ],
  label: "Rocket.Chat",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3e8",
  voted: false
};
const rockrms = {
  changes: [
    "5.0.0"
  ],
  label: "Rockrms",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3e9",
  voted: false
};
const rotate = {
  aliases: {
    names: [
      "sync-alt"
    ],
    unicodes: {
      composite: [
        "1f504"
      ],
      secondary: [
        "10f2f1"
      ]
    }
  },
  changes: [
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Rotate",
  search: {
    terms: [
      "arrow",
      "clockwise",
      "exchange",
      "modify",
      "refresh",
      "reload",
      "renew",
      "retry",
      "rotate",
      "swap",
      "withershins"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f2f1",
  voted: false
};
const route = {
  aliases: {
    unicodes: {
      secondary: [
        "10f4d7"
      ]
    }
  },
  changes: [
    "5.0.9",
    "5.2.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Route",
  search: {
    terms: [
      "directions",
      "navigation",
      "travel"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f4d7",
  voted: false
};
const rss = {
  aliases: {
    names: [
      "feed"
    ],
    unicodes: {
      secondary: [
        "10f09e"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Rss",
  search: {
    terms: [
      "blog",
      "feed",
      "journal",
      "news",
      "writing"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f09e",
  voted: false
};
const rug = {
  changes: [
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Rug",
  search: {
    terms: [
      "blanket",
      "carpet",
      "rug",
      "textile"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e569",
  voted: false
};
const ruler = {
  aliases: {
    unicodes: {
      composite: [
        "1f4cf"
      ],
      secondary: [
        "10f545"
      ]
    }
  },
  changes: [
    "5.0.13",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Ruler",
  search: {
    terms: [
      "design",
      "draft",
      "length",
      "measure",
      "planning",
      "ruler",
      "straight edge",
      "straight ruler"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f545",
  voted: true
};
const rust = {
  changes: [
    "5.13.1",
    "5.14.0"
  ],
  label: "Rust",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e07a",
  voted: true
};
const s = {
  aliases: {
    unicodes: {
      composite: [
        "73"
      ]
    }
  },
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "S",
  search: {
    terms: [
      "Latin Capital Letter S",
      "Latin Small Letter S",
      "letter"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "53",
  voted: false
};
const safari = {
  changes: [
    "4.4.0",
    "5.0.0",
    "5.12.0"
  ],
  label: "Safari",
  search: {
    terms: [
      "browser"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f267",
  voted: false
};
const sailboat = {
  changes: [
    "6.0.0-beta2",
    "6.0.0-beta3",
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Sailboat",
  search: {
    terms: [
      "dinghy",
      "mast",
      "sailboat",
      "sailing",
      "yacht"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e445",
  voted: false
};
const salesforce = {
  changes: [
    "5.8.0"
  ],
  label: "Salesforce",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f83b",
  voted: false
};
const sass = {
  changes: [
    "5.0.0",
    "5.8.0"
  ],
  label: "Sass",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f41e",
  voted: false
};
const satellite = {
  aliases: {
    unicodes: {
      composite: [
        "1f6f0"
      ],
      secondary: [
        "10f7bf"
      ]
    }
  },
  changes: [
    "5.6.0",
    "5.10.1",
    "5.12.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Satellite",
  search: {
    terms: [
      "communications",
      "hardware",
      "orbit",
      "satellite",
      "space"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f7bf",
  voted: true
};
const schlix = {
  changes: [
    "5.0.0"
  ],
  label: "SCHLIX",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3ea",
  voted: false
};
const school = {
  aliases: {
    unicodes: {
      composite: [
        "1f3eb"
      ],
      secondary: [
        "10f549"
      ]
    }
  },
  changes: [
    "5.0.13",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.0.0-beta3",
    "6.1.0",
    "6.2.0",
    "6.2.1",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "School",
  search: {
    terms: [
      "building",
      "education",
      "learn",
      "school",
      "student",
      "teacher"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f549",
  voted: true
};
const scissors = {
  aliases: {
    names: [
      "cut"
    ],
    unicodes: {
      composite: [
        "2700",
        "2702",
        "2704"
      ],
      secondary: [
        "10f0c4"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "5.1.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Scissors",
  search: {
    terms: [
      "Black Safety Scissors",
      "White Scissors",
      "clip",
      "cutting",
      "equipment",
      "modify",
      "scissors",
      "snip",
      "tool"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f0c4",
  voted: false
};
const screenpal = {
  changes: [
    "6.1.0"
  ],
  label: "Screenpal",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e570",
  voted: false
};
const screwdriver = {
  aliases: {
    unicodes: {
      composite: [
        "1fa9b"
      ],
      secondary: [
        "10f54a"
      ]
    }
  },
  changes: [
    "5.0.13",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Screwdriver",
  search: {
    terms: [
      "admin",
      "configuration",
      "equipment",
      "fix",
      "maintenance",
      "mechanic",
      "modify",
      "repair",
      "screw",
      "screwdriver",
      "settings",
      "tool"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f54a",
  voted: true
};
const scribd = {
  changes: [
    "4.5.0",
    "5.0.0"
  ],
  label: "Scribd",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f28a",
  voted: false
};
const scroll = {
  aliases: {
    unicodes: {
      composite: [
        "1f4dc"
      ],
      secondary: [
        "10f70e"
      ]
    }
  },
  changes: [
    "5.4.0",
    "5.10.2",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Scroll",
  search: {
    terms: [
      "Dungeons & Dragons",
      "announcement",
      "d&d",
      "dnd",
      "fantasy",
      "paper",
      "scholar",
      "script",
      "scroll"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f70e",
  voted: false
};
const searchengin = {
  changes: [
    "5.0.0"
  ],
  label: "Searchengin",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3eb",
  voted: false
};
const section = {
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Section",
  search: {
    terms: [
      "Section Sign",
      "law",
      "legal",
      "silcrow"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e447",
  voted: true
};
const seedling = {
  aliases: {
    names: [
      "sprout"
    ],
    unicodes: {
      composite: [
        "1f331"
      ],
      secondary: [
        "10f4d8"
      ]
    }
  },
  changes: [
    "5.0.9",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Seedling",
  search: {
    terms: [
      "environment",
      "flora",
      "grow",
      "investment",
      "plant",
      "sapling",
      "seedling",
      "vegan",
      "young"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f4d8",
  voted: false
};
const sellcast = {
  changes: [
    "5.0.0"
  ],
  label: "Sellcast",
  search: {
    terms: [
      "eercast"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f2da",
  voted: false
};
const sellsy = {
  changes: [
    "4.3.0",
    "5.0.0"
  ],
  label: "Sellsy",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f213",
  voted: false
};
const server = {
  aliases: {
    unicodes: {
      secondary: [
        "10f233"
      ]
    }
  },
  changes: [
    "4.3.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Server",
  search: {
    terms: [
      "computer",
      "cpu",
      "database",
      "hardware",
      "mysql",
      "network",
      "sql"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f233",
  voted: false
};
const servicestack = {
  changes: [
    "5.0.0"
  ],
  label: "Servicestack",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3ec",
  voted: false
};
const shapes = {
  aliases: {
    names: [
      "triangle-circle-square"
    ],
    unicodes: {
      secondary: [
        "10f61f"
      ]
    }
  },
  changes: [
    "5.2.0",
    "5.12.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Shapes",
  search: {
    terms: [
      "blocks",
      "build",
      "circle",
      "square",
      "triangle"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f61f",
  voted: false
};
const share = {
  aliases: {
    names: [
      "mail-forward"
    ],
    unicodes: {
      secondary: [
        "10f064"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.2.1",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Share",
  search: {
    terms: [
      "forward",
      "save",
      "send",
      "social"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f064",
  voted: false
};
const shield = {
  aliases: {
    names: [
      "shield-blank"
    ],
    unicodes: {
      composite: [
        "1f6e1"
      ],
      secondary: [
        "10f132"
      ]
    }
  },
  changes: [
    "3.1.0",
    "5.0.0",
    "5.10.2",
    "6.0.0-beta1",
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Shield",
  search: {
    terms: [
      "achievement",
      "armor",
      "award",
      "block",
      "cleric",
      "defend",
      "defense",
      "holy",
      "paladin",
      "protect",
      "safety",
      "security",
      "shield",
      "weapon",
      "winner"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f132",
  voted: false
};
const ship = {
  aliases: {
    unicodes: {
      composite: [
        "1f6a2"
      ],
      secondary: [
        "10f21a"
      ]
    }
  },
  changes: [
    "4.3.0",
    "5.0.0",
    "5.10.2",
    "5.11.0",
    "5.11.1",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Ship",
  search: {
    terms: [
      "boat",
      "passenger",
      "sea",
      "ship",
      "water"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f21a",
  voted: false
};
const shirt = {
  aliases: {
    names: [
      "t-shirt",
      "tshirt"
    ],
    unicodes: {
      composite: [
        "1f455"
      ],
      secondary: [
        "10f553"
      ]
    }
  },
  changes: [
    "5.0.13",
    "5.10.2",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.4.1",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Shirt",
  search: {
    terms: [
      "clothing",
      "fashion",
      "garment",
      "shirt",
      "short sleeve",
      "t-shirt",
      "tshirt"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f553",
  voted: true
};
const shirtsinbulk = {
  changes: [
    "4.3.0",
    "5.0.0",
    "5.7.0"
  ],
  label: "Shirts in Bulk",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f214",
  voted: false
};
const shoelace = {
  changes: [
    "6.4.1",
    "6.5.1"
  ],
  label: "Shoelace",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e60c",
  voted: false
};
const shop = {
  aliases: {
    names: [
      "store-alt"
    ],
    unicodes: {
      secondary: [
        "10f54f"
      ]
    }
  },
  changes: [
    "5.0.13",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Shop",
  search: {
    terms: [
      "bodega",
      "building",
      "buy",
      "market",
      "purchase",
      "shopping",
      "store"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f54f",
  voted: true
};
const shopify = {
  changes: [
    "5.12.1",
    "5.14.0"
  ],
  label: "Shopify",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e057",
  voted: false
};
const shopware = {
  changes: [
    "5.1.0",
    "5.8.0"
  ],
  label: "Shopware",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f5b5",
  voted: false
};
const shower = {
  aliases: {
    unicodes: {
      composite: [
        "1f6bf"
      ],
      secondary: [
        "10f2cc"
      ]
    }
  },
  changes: [
    "4.7.0",
    "5.0.0",
    "5.12.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Shower",
  search: {
    terms: [
      "bath",
      "clean",
      "faucet",
      "shower",
      "water"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f2cc",
  voted: false
};
const shrimp = {
  aliases: {
    unicodes: {
      composite: [
        "1f990"
      ]
    }
  },
  changes: [
    "6.0.0-beta2",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Shrimp",
  search: {
    terms: [
      "allergy",
      "crustacean",
      "prawn",
      "seafood",
      "shellfish",
      "shrimp",
      "tail"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e448",
  voted: false
};
const shuffle = {
  aliases: {
    names: [
      "random"
    ],
    unicodes: {
      composite: [
        "1f500"
      ],
      secondary: [
        "10f074"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Shuffle",
  search: {
    terms: [
      "arrow",
      "arrows",
      "crossed",
      "shuffle",
      "shuffle tracks button",
      "sort",
      "swap",
      "switch",
      "transfer"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f074",
  voted: false
};
const signal = {
  aliases: {
    names: [
      "signal-5",
      "signal-perfect"
    ],
    unicodes: {
      composite: [
        "1f4f6"
      ],
      secondary: [
        "10f012"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.3.0",
    "5.10.1",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Signal",
  search: {
    terms: [
      "antenna",
      "antenna bars",
      "bar",
      "bars",
      "cell",
      "graph",
      "mobile",
      "online",
      "phone",
      "reception",
      "status"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f012",
  voted: false
};
const signature = {
  aliases: {
    unicodes: {
      secondary: [
        "10f5b7"
      ]
    }
  },
  changes: [
    "5.1.0",
    "5.6.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Signature",
  search: {
    terms: [
      "John Hancock",
      "cursive",
      "name",
      "username",
      "writing"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f5b7",
  voted: true
};
const simplybuilt = {
  changes: [
    "4.3.0",
    "5.0.0"
  ],
  label: "SimplyBuilt",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f215",
  voted: false
};
const sink = {
  aliases: {
    unicodes: {
      secondary: [
        "10e06d"
      ]
    }
  },
  changes: [
    "5.13.0",
    "5.13.1",
    "5.14.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Sink",
  search: {
    terms: [
      "bathroom",
      "covid-19",
      "faucet",
      "kitchen",
      "wash"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e06d",
  voted: false
};
const sistrix = {
  changes: [
    "5.0.0"
  ],
  label: "SISTRIX",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3ee",
  voted: false
};
const sitemap = {
  aliases: {
    unicodes: {
      secondary: [
        "10f0e8"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "5.0.13",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Sitemap",
  search: {
    terms: [
      "directory",
      "hierarchy",
      "ia",
      "information architecture",
      "organization"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f0e8",
  voted: false
};
const sith = {
  changes: [
    "5.0.12"
  ],
  label: "Sith",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f512",
  voted: false
};
const sitrox = {
  changes: [
    "6.0.0-beta2"
  ],
  label: "Sitrox",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e44a",
  voted: false
};
const sketch = {
  changes: [
    "5.6.0",
    "5.8.0"
  ],
  label: "Sketch",
  search: {
    terms: [
      "app",
      "design",
      "interface"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f7c6",
  voted: false
};
const skull = {
  aliases: {
    unicodes: {
      composite: [
        "1f480"
      ],
      secondary: [
        "10f54c"
      ]
    }
  },
  changes: [
    "5.0.13",
    "5.10.2",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Skull",
  search: {
    terms: [
      "bones",
      "death",
      "face",
      "fairy tale",
      "monster",
      "skeleton",
      "skull",
      "uer",
      "x-ray",
      "yorick"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f54c",
  voted: true
};
const skyatlas = {
  changes: [
    "4.3.0",
    "5.0.0",
    "5.0.3"
  ],
  label: "skyatlas",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f216",
  voted: false
};
const skype = {
  changes: [
    "3.2.0",
    "5.0.0"
  ],
  label: "Skype",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f17e",
  voted: false
};
const slack = {
  aliases: {
    names: [
      "slack-hash"
    ],
    unicodes: {
      composite: [
        "f3ef"
      ]
    }
  },
  changes: [
    "4.1.0",
    "5.0.0",
    "5.7.0"
  ],
  label: "Slack Logo",
  search: {
    terms: [
      "anchor",
      "hash",
      "hashtag"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f198",
  voted: false
};
const slash = {
  aliases: {
    unicodes: {
      secondary: [
        "10f715"
      ]
    }
  },
  changes: [
    "5.4.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Slash",
  search: {
    terms: [
      "cancel",
      "close",
      "mute",
      "off",
      "stop",
      "x"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f715",
  voted: true
};
const sleigh = {
  aliases: {
    unicodes: {
      secondary: [
        "10f7cc"
      ]
    }
  },
  changes: [
    "5.6.0",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Sleigh",
  search: {
    terms: [
      "christmas",
      "claus",
      "fly",
      "holiday",
      "santa",
      "sled",
      "snow",
      "xmas"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f7cc",
  voted: false
};
const sliders = {
  aliases: {
    names: [
      "sliders-h"
    ],
    unicodes: {
      secondary: [
        "10f1de"
      ]
    }
  },
  changes: [
    "4.1.0",
    "5.0.0",
    "5.0.11",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Sliders",
  search: {
    terms: [
      "adjust",
      "configuration",
      "modify",
      "settings",
      "sliders",
      "toggle"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f1de",
  voted: false
};
const slideshare = {
  changes: [
    "4.2.0",
    "5.0.0"
  ],
  label: "Slideshare",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f1e7",
  voted: false
};
const smog = {
  aliases: {
    unicodes: {
      secondary: [
        "10f75f"
      ]
    }
  },
  changes: [
    "5.5.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Smog",
  search: {
    terms: [
      "dragon",
      "fog",
      "haze",
      "pollution",
      "smoke",
      "weather"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f75f",
  voted: false
};
const smoking = {
  aliases: {
    unicodes: {
      composite: [
        "1f6ac"
      ],
      secondary: [
        "10f48d"
      ]
    }
  },
  changes: [
    "5.0.7",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Smoking",
  search: {
    terms: [
      "cancer",
      "cigarette",
      "nicotine",
      "smoking",
      "smoking status",
      "tobacco"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f48d",
  voted: true
};
const snapchat = {
  aliases: {
    names: [
      "snapchat-ghost"
    ],
    unicodes: {
      composite: [
        "f2ac"
      ]
    }
  },
  changes: [
    "4.6.0",
    "5.0.0",
    "6.0.0-beta1"
  ],
  label: "Snapchat",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f2ab",
  voted: false
};
const snowflake = {
  aliases: {
    unicodes: {
      composite: [
        "2744",
        "2746"
      ],
      secondary: [
        "10f2dc"
      ]
    }
  },
  changes: [
    "4.7.0",
    "5.0.0",
    "5.5.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Snowflake",
  search: {
    terms: [
      "Heavy Chevron Snowflake",
      "cold",
      "precipitation",
      "rain",
      "snow",
      "snowfall",
      "snowflake",
      "winter"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f2dc",
  voted: false
};
const snowman = {
  aliases: {
    unicodes: {
      composite: [
        "2603",
        "26c4"
      ],
      secondary: [
        "10f7d0"
      ]
    }
  },
  changes: [
    "5.6.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Snowman",
  search: {
    terms: [
      "cold",
      "decoration",
      "frost",
      "frosty",
      "holiday",
      "snow",
      "snowman",
      "snowman without snow"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f7d0",
  voted: false
};
const snowplow = {
  aliases: {
    unicodes: {
      secondary: [
        "10f7d2"
      ]
    }
  },
  changes: [
    "5.6.0",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Snowplow",
  search: {
    terms: [
      "clean up",
      "cold",
      "road",
      "storm",
      "winter"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f7d2",
  voted: false
};
const soap = {
  aliases: {
    unicodes: {
      composite: [
        "1f9fc"
      ],
      secondary: [
        "10e06e"
      ]
    }
  },
  changes: [
    "5.13.0",
    "5.14.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Soap",
  search: {
    terms: [
      "bar",
      "bathing",
      "bubbles",
      "clean",
      "cleaning",
      "covid-19",
      "hygiene",
      "lather",
      "soap",
      "soapdish",
      "wash"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e06e",
  voted: false
};
const socks = {
  aliases: {
    unicodes: {
      composite: [
        "1f9e6"
      ],
      secondary: [
        "10f696"
      ]
    }
  },
  changes: [
    "5.3.0",
    "5.10.2",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Socks",
  search: {
    terms: [
      "business socks",
      "business time",
      "clothing",
      "feet",
      "flight of the conchords",
      "socks",
      "stocking",
      "wednesday"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f696",
  voted: false
};
const sort = {
  aliases: {
    names: [
      "unsorted"
    ],
    unicodes: {
      secondary: [
        "10f0dc"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "5.10.2",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Sort",
  search: {
    terms: [
      "filter",
      "order"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f0dc",
  voted: false
};
const soundcloud = {
  changes: [
    "4.1.0",
    "5.0.0",
    "6.6.0"
  ],
  label: "Soundcloud",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f1be",
  voted: false
};
const sourcetree = {
  changes: [
    "5.6.0",
    "5.8.0"
  ],
  label: "Sourcetree",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f7d3",
  voted: true
};
const spa = {
  aliases: {
    unicodes: {
      secondary: [
        "10f5bb"
      ]
    }
  },
  changes: [
    "5.1.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Spa",
  search: {
    terms: [
      "flora",
      "massage",
      "mindfulness",
      "plant",
      "wellness"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f5bb",
  voted: false
};
const speakap = {
  changes: [
    "5.0.0",
    "5.4.0",
    "5.8.0"
  ],
  label: "Speakap",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3f3",
  voted: false
};
const spider = {
  aliases: {
    unicodes: {
      composite: [
        "1f577"
      ],
      secondary: [
        "10f717"
      ]
    }
  },
  changes: [
    "5.4.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Spider",
  search: {
    terms: [
      "arachnid",
      "bug",
      "charlotte",
      "crawl",
      "eight",
      "halloween",
      "insect",
      "spider"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f717",
  voted: true
};
const spinner = {
  aliases: {
    unicodes: {
      secondary: [
        "10f110"
      ]
    }
  },
  changes: [
    "3.0.0",
    "5.0.0",
    "5.10.2",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Spinner",
  search: {
    terms: [
      "circle",
      "loading",
      "pending",
      "progress"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f110",
  voted: false
};
const splotch = {
  aliases: {
    unicodes: {
      secondary: [
        "10f5bc"
      ]
    }
  },
  changes: [
    "5.1.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Splotch",
  search: {
    terms: [
      "Ink",
      "blob",
      "blotch",
      "glob",
      "stain"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f5bc",
  voted: false
};
const spoon = {
  aliases: {
    names: [
      "utensil-spoon"
    ],
    unicodes: {
      composite: [
        "1f944",
        "f1b1"
      ],
      secondary: [
        "10f2e5"
      ]
    }
  },
  changes: [
    "5.0.0",
    "5.10.2",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Spoon",
  search: {
    terms: [
      "cutlery",
      "dining",
      "scoop",
      "silverware",
      "spoon",
      "tableware"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f2e5",
  voted: false
};
const spotify = {
  changes: [
    "4.1.0",
    "5.0.0"
  ],
  label: "Spotify",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f1bc",
  voted: false
};
const square = {
  aliases: {
    unicodes: {
      composite: [
        "25a0",
        "25fb",
        "25fc",
        "f096"
      ],
      secondary: [
        "10f0c8"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "5.10.1",
    "5.10.2",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Square",
  search: {
    terms: [
      "Black Square",
      "black medium square",
      "block",
      "box",
      "geometric",
      "shape",
      "square",
      "white medium square"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f0c8",
  voted: false
};
const squarespace = {
  changes: [
    "5.1.0"
  ],
  label: "Squarespace",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f5be",
  voted: true
};
const stackpath = {
  changes: [
    "5.8.2"
  ],
  label: "Stackpath",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f842",
  voted: false
};
const stairs = {
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Stairs",
  search: {
    terms: [
      "exit",
      "steps",
      "up"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e289",
  voted: true
};
const stamp = {
  aliases: {
    unicodes: {
      secondary: [
        "10f5bf"
      ]
    }
  },
  changes: [
    "5.1.0",
    "5.10.2",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Stamp",
  search: {
    terms: [
      "art",
      "certificate",
      "imprint",
      "rubber",
      "seal"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f5bf",
  voted: false
};
const stapler = {
  changes: [
    "6.1.2",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Stapler",
  search: {
    terms: [
      "desktop",
      "milton",
      "office",
      "paperclip",
      "staple"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e5af",
  voted: false
};
const star = {
  aliases: {
    unicodes: {
      composite: [
        "2b50",
        "f006"
      ],
      secondary: [
        "10f005"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.10.2",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Star",
  search: {
    terms: [
      "achievement",
      "award",
      "favorite",
      "important",
      "night",
      "quality",
      "rating",
      "score",
      "star",
      "vip"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f005",
  voted: false
};
const staylinked = {
  changes: [
    "5.0.0"
  ],
  label: "StayLinked",
  search: {
    terms: [
      "linkin"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f3f5",
  voted: false
};
const steam = {
  changes: [
    "4.1.0",
    "5.0.0"
  ],
  label: "Steam",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f1b6",
  voted: false
};
const stethoscope = {
  aliases: {
    unicodes: {
      composite: [
        "1fa7a"
      ],
      secondary: [
        "10f0f1"
      ]
    }
  },
  changes: [
    "3.0.0",
    "5.0.0",
    "5.0.7",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Stethoscope",
  search: {
    terms: [
      "covid-19",
      "diagnosis",
      "doctor",
      "general practitioner",
      "heart",
      "hospital",
      "infirmary",
      "medicine",
      "office",
      "outpatient",
      "stethoscope"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f0f1",
  voted: false
};
const stop = {
  aliases: {
    unicodes: {
      composite: [
        "23f9"
      ],
      secondary: [
        "10f04d"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.10.2",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Stop",
  search: {
    terms: [
      "block",
      "box",
      "square",
      "stop",
      "stop button"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f04d",
  voted: false
};
const stopwatch = {
  aliases: {
    unicodes: {
      composite: [
        "23f1"
      ],
      secondary: [
        "10f2f2"
      ]
    }
  },
  changes: [
    "5.0.0",
    "5.10.2",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Stopwatch",
  search: {
    terms: [
      "clock",
      "reminder",
      "stopwatch",
      "time",
      "waiting"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f2f2",
  voted: false
};
const store = {
  aliases: {
    unicodes: {
      secondary: [
        "10f54e"
      ]
    }
  },
  changes: [
    "5.0.13",
    "5.11.0",
    "5.11.1",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Store",
  search: {
    terms: [
      "bodega",
      "building",
      "buy",
      "market",
      "purchase",
      "shopping",
      "store"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f54e",
  voted: true
};
const strava = {
  changes: [
    "5.0.0",
    "5.0.1",
    "5.7.0",
    "5.8.0"
  ],
  label: "Strava",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f428",
  voted: false
};
const strikethrough = {
  aliases: {
    unicodes: {
      secondary: [
        "10f0cc"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "5.9.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Strikethrough",
  search: {
    terms: [
      "cancel",
      "edit",
      "font",
      "format",
      "modify",
      "text",
      "type"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f0cc",
  voted: false
};
const stripe = {
  changes: [
    "5.0.0",
    "5.0.3"
  ],
  label: "Stripe",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f429",
  voted: false
};
const stroopwafel = {
  aliases: {
    unicodes: {
      secondary: [
        "10f551"
      ]
    }
  },
  changes: [
    "5.0.13",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Stroopwafel",
  search: {
    terms: [
      "caramel",
      "cookie",
      "dessert",
      "sweets",
      "waffle"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f551",
  voted: false
};
const stubber = {
  changes: [
    "6.2.1",
    "6.3.0"
  ],
  label: "Stubber",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e5c7",
  voted: false
};
const studiovinari = {
  changes: [
    "5.0.0"
  ],
  label: "Studio Vinari",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3f8",
  voted: false
};
const stumbleupon = {
  changes: [
    "4.1.0",
    "5.0.0"
  ],
  label: "StumbleUpon Logo",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f1a4",
  voted: false
};
const subscript = {
  aliases: {
    unicodes: {
      secondary: [
        "10f12c"
      ]
    }
  },
  changes: [
    "3.1.0",
    "5.0.0",
    "5.9.0",
    "5.10.2",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Subscript",
  search: {
    terms: [
      "edit",
      "font",
      "format",
      "text",
      "type"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f12c",
  voted: false
};
const suitcase = {
  aliases: {
    unicodes: {
      composite: [
        "1f9f3"
      ],
      secondary: [
        "10f0f2"
      ]
    }
  },
  changes: [
    "3.0.0",
    "5.0.0",
    "5.0.9",
    "6.0.0-beta1",
    "6.1.2",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Suitcase",
  search: {
    terms: [
      "baggage",
      "luggage",
      "move",
      "packing",
      "suitcase",
      "travel",
      "trip"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f0f2",
  voted: false
};
const sun = {
  aliases: {
    unicodes: {
      composite: [
        "2600"
      ],
      secondary: [
        "10f185"
      ]
    }
  },
  changes: [
    "3.2.0",
    "5.0.0",
    "5.5.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Sun",
  search: {
    terms: [
      "bright",
      "brighten",
      "contrast",
      "day",
      "lighter",
      "rays",
      "sol",
      "solar",
      "star",
      "sun",
      "sunny",
      "weather"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f185",
  voted: false
};
const superpowers = {
  changes: [
    "4.7.0",
    "5.0.0"
  ],
  label: "Superpowers",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f2dd",
  voted: false
};
const superscript = {
  aliases: {
    unicodes: {
      secondary: [
        "10f12b"
      ]
    }
  },
  changes: [
    "3.1.0",
    "5.0.0",
    "5.9.0",
    "5.10.2",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Superscript",
  search: {
    terms: [
      "edit",
      "exponential",
      "font",
      "format",
      "text",
      "type"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f12b",
  voted: false
};
const supple = {
  changes: [
    "5.0.0"
  ],
  label: "Supple",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f3f9",
  voted: false
};
const suse = {
  changes: [
    "5.6.0",
    "5.8.0",
    "6.5.0"
  ],
  label: "Suse",
  search: {
    terms: [
      "linux",
      "operating system",
      "os"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f7d6",
  voted: true
};
const swatchbook = {
  aliases: {
    unicodes: {
      secondary: [
        "10f5c3"
      ]
    }
  },
  changes: [
    "5.1.0",
    "5.11.0",
    "5.11.1",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Swatchbook",
  search: {
    terms: [
      "Pantone",
      "color",
      "design",
      "hue",
      "palette"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f5c3",
  voted: false
};
const swift = {
  changes: [
    "5.11.0"
  ],
  label: "Swift",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f8e1",
  voted: false
};
const symfony = {
  changes: [
    "5.8.0"
  ],
  label: "Symfony",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f83d",
  voted: false
};
const synagogue = {
  aliases: {
    unicodes: {
      composite: [
        "1f54d"
      ],
      secondary: [
        "10f69b"
      ]
    }
  },
  changes: [
    "5.3.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Synagogue",
  search: {
    terms: [
      "Jew",
      "Jewish",
      "building",
      "jewish",
      "judaism",
      "religion",
      "star of david",
      "synagogue",
      "temple"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f69b",
  voted: false
};
const syringe = {
  aliases: {
    unicodes: {
      composite: [
        "1f489"
      ],
      secondary: [
        "10f48e"
      ]
    }
  },
  changes: [
    "5.0.7",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Syringe",
  search: {
    terms: [
      "covid-19",
      "doctor",
      "immunizations",
      "medical",
      "medicine",
      "needle",
      "shot",
      "sick",
      "syringe",
      "vaccinate",
      "vaccine"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f48e",
  voted: false
};
const t = {
  aliases: {
    unicodes: {
      composite: [
        "74"
      ]
    }
  },
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "T",
  search: {
    terms: [
      "Latin Capital Letter T",
      "Latin Small Letter T",
      "letter"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "54",
  voted: false
};
const table = {
  aliases: {
    unicodes: {
      secondary: [
        "10f0ce"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Table",
  search: {
    terms: [
      "category",
      "data",
      "excel",
      "spreadsheet"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f0ce",
  voted: false
};
const tablet = {
  aliases: {
    names: [
      "tablet-android"
    ],
    unicodes: {
      secondary: [
        "10f3fb"
      ]
    }
  },
  changes: [
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Tablet",
  search: {
    terms: [
      "device",
      "kindle",
      "screen"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f3fb",
  voted: false
};
const tablets = {
  aliases: {
    unicodes: {
      secondary: [
        "10f490"
      ]
    }
  },
  changes: [
    "5.0.7",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Tablets",
  search: {
    terms: [
      "drugs",
      "medicine",
      "pills",
      "prescription"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f490",
  voted: false
};
const tag = {
  aliases: {
    unicodes: {
      composite: [
        "1f3f7"
      ],
      secondary: [
        "10f02b"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Tag",
  search: {
    terms: [
      "discount",
      "labe",
      "label",
      "price",
      "shopping"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f02b",
  voted: false
};
const tags = {
  aliases: {
    unicodes: {
      secondary: [
        "10f02c"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.10.2",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Tags",
  search: {
    terms: [
      "discount",
      "label",
      "price",
      "shopping"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f02c",
  voted: false
};
const tape = {
  aliases: {
    unicodes: {
      secondary: [
        "10f4db"
      ]
    }
  },
  changes: [
    "5.0.9",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Tape",
  search: {
    terms: [
      "design",
      "package",
      "sticky"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f4db",
  voted: false
};
const tarp = {
  changes: [
    "6.1.0",
    "6.1.2",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Tarp",
  search: {
    terms: [
      "protection",
      "tarp",
      "tent",
      "waterproof"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e57b",
  voted: false
};
const taxi = {
  aliases: {
    names: [
      "cab"
    ],
    unicodes: {
      composite: [
        "1f696"
      ],
      secondary: [
        "10f1ba"
      ]
    }
  },
  changes: [
    "4.1.0",
    "5.0.0",
    "5.1.0",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Taxi",
  search: {
    terms: [
      "cab",
      "cabbie",
      "car",
      "car service",
      "lyft",
      "machine",
      "oncoming",
      "oncoming taxi",
      "taxi",
      "transportation",
      "travel",
      "uber",
      "vehicle"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f1ba",
  voted: false
};
const teamspeak = {
  changes: [
    "5.0.11",
    "5.1.0",
    "5.8.0",
    "6.4.0"
  ],
  label: "Teamspeak",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f4f9",
  voted: true
};
const teeth = {
  aliases: {
    unicodes: {
      secondary: [
        "10f62e"
      ]
    }
  },
  changes: [
    "5.2.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Teeth",
  search: {
    terms: [
      "bite",
      "dental",
      "dentist",
      "gums",
      "mouth",
      "smile",
      "tooth"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f62e",
  voted: false
};
const telegram = {
  aliases: {
    names: [
      "telegram-plane"
    ],
    unicodes: {
      composite: [
        "f3fe"
      ],
      secondary: [
        "10f3fe"
      ]
    }
  },
  changes: [
    "4.7.0",
    "5.0.0",
    "6.0.0-beta1"
  ],
  label: "Telegram",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f2c6",
  voted: false
};
const tent = {
  changes: [
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Tent",
  search: {
    terms: [
      "bivouac",
      "campground",
      "campsite",
      "refugee",
      "shelter",
      "tent"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e57d",
  voted: false
};
const tents = {
  changes: [
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Tents",
  search: {
    terms: [
      "bivouac",
      "bivouac",
      "campground",
      "campground",
      "campsite",
      "refugee",
      "refugee",
      "shelter",
      "shelter",
      "tent",
      "tent"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e582",
  voted: false
};
const terminal = {
  aliases: {
    unicodes: {
      secondary: [
        "10f120"
      ]
    }
  },
  changes: [
    "3.1.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Terminal",
  search: {
    terms: [
      "code",
      "coding",
      "command",
      "console",
      "development",
      "prompt",
      "terminal"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f120",
  voted: false
};
const themeco = {
  changes: [
    "5.1.0",
    "5.8.0"
  ],
  label: "Themeco",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f5c6",
  voted: false
};
const themeisle = {
  changes: [
    "4.6.0",
    "5.0.0"
  ],
  label: "ThemeIsle",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f2b2",
  voted: false
};
const thermometer = {
  aliases: {
    unicodes: {
      secondary: [
        "10f491"
      ]
    }
  },
  changes: [
    "5.0.7",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Thermometer",
  search: {
    terms: [
      "covid-19",
      "mercury",
      "status",
      "temperature"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f491",
  voted: false
};
const threads = {
  changes: [
    "6.4.1",
    "6.4.2"
  ],
  label: "Threads",
  search: {
    terms: [
      "social network"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "e618",
  voted: false
};
const thumbtack = {
  aliases: {
    names: [
      "thumb-tack"
    ],
    unicodes: {
      composite: [
        "1f4cc",
        "1f588"
      ],
      secondary: [
        "10f08d"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.10.2",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Thumbtack",
  search: {
    terms: [
      "Black Pushpin",
      "coordinates",
      "location",
      "marker",
      "pin",
      "pushpin",
      "thumb-tack"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f08d",
  voted: false
};
const ticket = {
  aliases: {
    unicodes: {
      composite: [
        "1f39f"
      ],
      secondary: [
        "10f145"
      ]
    }
  },
  changes: [
    "3.1.0",
    "5.0.0",
    "5.10.1",
    "5.10.2",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Ticket",
  search: {
    terms: [
      "admission",
      "admission tickets",
      "coupon",
      "movie",
      "pass",
      "support",
      "ticket",
      "voucher"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f145",
  voted: false
};
const tiktok = {
  changes: [
    "5.13.1",
    "5.14.0"
  ],
  label: "TikTok",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e07b",
  voted: true
};
const timeline = {
  changes: [
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Timeline",
  search: {
    terms: [
      "chronological",
      "deadline",
      "history",
      "linear"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e29c",
  voted: true
};
const toilet = {
  aliases: {
    unicodes: {
      composite: [
        "1f6bd"
      ],
      secondary: [
        "10f7d8"
      ]
    }
  },
  changes: [
    "5.6.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Toilet",
  search: {
    terms: [
      "bathroom",
      "flush",
      "john",
      "loo",
      "pee",
      "plumbing",
      "poop",
      "porcelain",
      "potty",
      "restroom",
      "throne",
      "toile",
      "toilet",
      "washroom",
      "waste",
      "wc"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f7d8",
  voted: true
};
const toolbox = {
  aliases: {
    unicodes: {
      composite: [
        "1f9f0"
      ],
      secondary: [
        "10f552"
      ]
    }
  },
  changes: [
    "5.0.13",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.5.2",
    "6.6.0",
    "6.7.0"
  ],
  label: "Toolbox",
  search: {
    terms: [
      "admin",
      "chest",
      "configuration",
      "container",
      "equipment",
      "fix",
      "maintenance",
      "mechanic",
      "modify",
      "repair",
      "settings",
      "tool",
      "toolbox",
      "tools"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f552",
  voted: true
};
const tooth = {
  aliases: {
    unicodes: {
      composite: [
        "1f9b7"
      ],
      secondary: [
        "10f5c9"
      ]
    }
  },
  changes: [
    "5.1.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Tooth",
  search: {
    terms: [
      "bicuspid",
      "dental",
      "dentist",
      "molar",
      "mouth",
      "teeth",
      "tooth"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f5c9",
  voted: true
};
const tornado = {
  aliases: {
    unicodes: {
      composite: [
        "1f32a"
      ],
      secondary: [
        "10f76f"
      ]
    }
  },
  changes: [
    "5.5.0",
    "5.10.2",
    "6.0.0-beta1",
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Tornado",
  search: {
    terms: [
      "cloud",
      "cyclone",
      "dorothy",
      "landspout",
      "tornado",
      "toto",
      "twister",
      "vortext",
      "waterspout",
      "weather",
      "whirlwind"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f76f",
  voted: false
};
const tractor = {
  aliases: {
    unicodes: {
      composite: [
        "1f69c"
      ],
      secondary: [
        "10f722"
      ]
    }
  },
  changes: [
    "5.4.0",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Tractor",
  search: {
    terms: [
      "agriculture",
      "farm",
      "tractor",
      "vehicle"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f722",
  voted: false
};
const trademark = {
  aliases: {
    unicodes: {
      composite: [
        "2122"
      ],
      secondary: [
        "10f25c"
      ]
    }
  },
  changes: [
    "4.4.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Trademark",
  search: {
    terms: [
      "copyright",
      "mark",
      "register",
      "symbol",
      "tm",
      "trade mark",
      "trademark"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f25c",
  voted: false
};
const trailer = {
  aliases: {
    unicodes: {
      secondary: [
        "10e041"
      ]
    }
  },
  changes: [
    "5.12.0",
    "5.14.0",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Trailer",
  search: {
    terms: [
      "carry",
      "haul",
      "moving",
      "travel"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e041",
  voted: true
};
const train = {
  aliases: {
    unicodes: {
      composite: [
        "1f686"
      ],
      secondary: [
        "10f238"
      ]
    }
  },
  changes: [
    "4.3.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Train",
  search: {
    terms: [
      "bullet",
      "commute",
      "locomotive",
      "railway",
      "subway",
      "train"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f238",
  voted: false
};
const transgender = {
  aliases: {
    names: [
      "transgender-alt"
    ],
    unicodes: {
      composite: [
        "26a7"
      ],
      secondary: [
        "10f225"
      ]
    }
  },
  changes: [
    "4.3.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Transgender",
  search: {
    terms: [
      "female",
      "gender",
      "intersex",
      "male",
      "transgender",
      "transgender symbol"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f225",
  voted: false
};
const trash = {
  aliases: {
    unicodes: {
      secondary: [
        "10f1f8"
      ]
    }
  },
  changes: [
    "4.2.0",
    "5.0.0",
    "5.7.0",
    "5.10.2",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Trash",
  search: {
    terms: [
      "delete",
      "garbage",
      "hide",
      "remove"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f1f8",
  voted: false
};
const tree = {
  aliases: {
    unicodes: {
      composite: [
        "1f332"
      ],
      secondary: [
        "10f1bb"
      ]
    }
  },
  changes: [
    "4.1.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Tree",
  search: {
    terms: [
      "bark",
      "evergreen tree",
      "fall",
      "flora",
      "forest",
      "investment",
      "nature",
      "plant",
      "seasonal",
      "tree"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f1bb",
  voted: false
};
const trello = {
  changes: [
    "3.2.0",
    "5.0.0",
    "5.6.0"
  ],
  label: "Trello",
  search: {
    terms: [
      "atlassian"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f181",
  voted: false
};
const trophy = {
  aliases: {
    unicodes: {
      composite: [
        "1f3c6"
      ],
      secondary: [
        "10f091"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.11.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Trophy",
  search: {
    terms: [
      "achievement",
      "award",
      "cup",
      "game",
      "prize",
      "trophy",
      "winner"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f091",
  voted: false
};
const trowel = {
  changes: [
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Trowel",
  search: {
    terms: [
      "build",
      "construction",
      "equipment",
      "maintenance",
      "tool"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e589",
  voted: false
};
const truck = {
  aliases: {
    unicodes: {
      composite: [
        "1f69a",
        "26df"
      ],
      secondary: [
        "10f0d1"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "5.0.7",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.0.0-beta3",
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Truck",
  search: {
    terms: [
      "Black Truck",
      "cargo",
      "delivery",
      "delivery truck",
      "shipping",
      "truck",
      "vehicle"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f0d1",
  voted: false
};
const tty = {
  aliases: {
    names: [
      "teletype"
    ],
    unicodes: {
      secondary: [
        "10f1e4"
      ]
    }
  },
  changes: [
    "4.2.0",
    "5.0.0",
    "5.7.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Tty",
  search: {
    terms: [
      "communication",
      "deaf",
      "telephone",
      "teletypewriter",
      "text"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f1e4",
  voted: false
};
const tumblr = {
  changes: [
    "3.2.0",
    "5.0.0"
  ],
  label: "Tumblr",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f173",
  voted: false
};
const tv = {
  aliases: {
    names: [
      "television",
      "tv-alt"
    ],
    unicodes: {
      composite: [
        "f8e5"
      ],
      primary: [
        "f8e5"
      ],
      secondary: [
        "10f26c",
        "10f8e5"
      ]
    }
  },
  changes: [
    "4.4.0",
    "5.0.0",
    "5.11.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Tv",
  search: {
    terms: [
      "computer",
      "display",
      "monitor",
      "television"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f26c",
  voted: false
};
const twitch = {
  changes: [
    "4.2.0",
    "5.0.0",
    "5.12.0"
  ],
  label: "Twitch",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f1e8",
  voted: false
};
const twitter = {
  changes: [
    "2.0.0",
    "5.0.0"
  ],
  label: "Twitter",
  search: {
    terms: [
      "social network",
      "tweet"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f099",
  voted: false
};
const typo3 = {
  changes: [
    "5.0.1",
    "5.8.0"
  ],
  label: "Typo3",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f42b",
  voted: false
};
const u = {
  aliases: {
    unicodes: {
      composite: [
        "75"
      ]
    }
  },
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "U",
  search: {
    terms: [
      "Latin Capital Letter U",
      "Latin Small Letter U",
      "letter"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "55",
  voted: false
};
const uber = {
  changes: [
    "5.0.0"
  ],
  label: "Uber",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f402",
  voted: false
};
const ubuntu = {
  changes: [
    "5.6.0",
    "6.5.0"
  ],
  label: "Ubuntu",
  search: {
    terms: [
      "linux",
      "operating system",
      "os"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f7df",
  voted: true
};
const uikit = {
  changes: [
    "5.0.0"
  ],
  label: "UIkit",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f403",
  voted: false
};
const umbraco = {
  changes: [
    "5.11.0"
  ],
  label: "Umbraco",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f8e8",
  voted: false
};
const umbrella = {
  aliases: {
    unicodes: {
      secondary: [
        "10f0e9"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Umbrella",
  search: {
    terms: [
      "protection",
      "rain",
      "storm",
      "wet"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f0e9",
  voted: false
};
const uncharted = {
  changes: [
    "5.15.0"
  ],
  label: "Uncharted Software",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e084",
  voted: false
};
const underline = {
  aliases: {
    unicodes: {
      secondary: [
        "10f0cd"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "5.9.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Underline",
  search: {
    terms: [
      "edit",
      "emphasis",
      "format",
      "modify",
      "text",
      "writing"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f0cd",
  voted: false
};
const uniregistry = {
  changes: [
    "5.0.0"
  ],
  label: "Uniregistry",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f404",
  voted: false
};
const unity = {
  changes: [
    "5.12.0",
    "5.14.0",
    "6.0.0-beta3"
  ],
  label: "Unity 3D",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e049",
  voted: true
};
const unlock = {
  aliases: {
    unicodes: {
      composite: [
        "1f513"
      ],
      secondary: [
        "10f09c"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.0.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Unlock",
  search: {
    terms: [
      "admin",
      "lock",
      "open",
      "padlock",
      "password",
      "privacy",
      "private",
      "protect",
      "unlock",
      "unlocked"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f09c",
  voted: false
};
const unsplash = {
  changes: [
    "5.13.1",
    "5.14.0"
  ],
  label: "Unsplash",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e07c",
  voted: false
};
const untappd = {
  changes: [
    "5.0.0"
  ],
  label: "Untappd",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f405",
  voted: false
};
const upload = {
  aliases: {
    unicodes: {
      secondary: [
        "10f093"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Upload",
  search: {
    terms: [
      "hard drive",
      "import",
      "publish",
      "upgrade"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f093",
  voted: false
};
const ups = {
  changes: [
    "5.6.0",
    "5.8.0"
  ],
  label: "UPS",
  search: {
    terms: [
      "United Parcel Service",
      "package",
      "shipping"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f7e0",
  voted: false
};
const upwork = {
  changes: [
    "6.5.0",
    "6.5.2"
  ],
  label: "Upwork",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e641",
  voted: false
};
const usb = {
  changes: [
    "4.5.0",
    "5.0.0"
  ],
  label: "USB",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f287",
  voted: false
};
const user = {
  aliases: {
    unicodes: {
      composite: [
        "1f464",
        "f2c0"
      ],
      secondary: [
        "10f007"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.0.3",
    "5.0.11",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "User",
  search: {
    terms: [
      "adult",
      "bust",
      "bust in silhouette",
      "default",
      "employee",
      "gender-neutral",
      "person",
      "profile",
      "silhouette",
      "uer",
      "unspecified gender",
      "username",
      "users-people"
    ]
  },
  styles: [
    "solid",
    "regular"
  ],
  unicode: "f007",
  voted: false
};
const users = {
  aliases: {
    unicodes: {
      secondary: [
        "10f0c0"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "5.0.3",
    "5.0.11",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Users",
  search: {
    terms: [
      "employee",
      "together",
      "uer",
      "users-people"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f0c0",
  voted: false
};
const usps = {
  changes: [
    "5.6.0",
    "5.8.0"
  ],
  label: "United States Postal Service",
  search: {
    terms: [
      "american",
      "package",
      "shipping",
      "usa"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f7e1",
  voted: false
};
const ussunnah = {
  changes: [
    "5.0.0"
  ],
  label: "us-Sunnah Foundation",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f407",
  voted: false
};
const utensils = {
  aliases: {
    names: [
      "cutlery"
    ],
    unicodes: {
      composite: [
        "1f374",
        "f0f5"
      ],
      secondary: [
        "10f2e7"
      ]
    }
  },
  changes: [
    "5.0.0",
    "6.0.0-beta1",
    "6.0.0-beta2",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Utensils",
  search: {
    terms: [
      "cooking",
      "cutlery",
      "dining",
      "dinner",
      "eat",
      "food",
      "fork",
      "fork and knife",
      "knife",
      "restaurant"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f2e7",
  voted: false
};
const v = {
  aliases: {
    unicodes: {
      composite: [
        "76"
      ]
    }
  },
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "V",
  search: {
    terms: [
      "Latin Capital Letter V",
      "Latin Small Letter V",
      "letter"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "56",
  voted: false
};
const vaadin = {
  changes: [
    "5.0.0"
  ],
  label: "Vaadin",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f408",
  voted: false
};
const vault = {
  changes: [
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Vault",
  search: {
    terms: [
      "bank",
      "important",
      "investment",
      "lock",
      "money",
      "premium",
      "privacy",
      "safe",
      "salary"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e2c5",
  voted: false
};
const venus = {
  aliases: {
    unicodes: {
      composite: [
        "2640"
      ],
      secondary: [
        "10f221"
      ]
    }
  },
  changes: [
    "4.3.0",
    "5.0.0",
    "5.11.0",
    "5.11.1",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Venus",
  search: {
    terms: [
      "female",
      "female sign",
      "gender",
      "woman"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f221",
  voted: false
};
const vest = {
  aliases: {
    unicodes: {
      secondary: [
        "10e085"
      ]
    }
  },
  changes: [
    "5.15.0",
    "5.15.1",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Vest",
  search: {
    terms: [
      "biker",
      "fashion",
      "style"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e085",
  voted: false
};
const viacoin = {
  changes: [
    "4.3.0",
    "5.0.0"
  ],
  label: "Viacoin",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f237",
  voted: false
};
const viadeo = {
  changes: [
    "4.6.0",
    "5.0.0"
  ],
  label: "Viadeo",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f2a9",
  voted: false
};
const vial = {
  aliases: {
    unicodes: {
      composite: [
        "1f9ea"
      ],
      secondary: [
        "10f492"
      ]
    }
  },
  changes: [
    "5.0.7",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Vial",
  search: {
    terms: [
      "ampule",
      "chemist",
      "chemistry",
      "experiment",
      "knowledge",
      "lab",
      "sample",
      "science",
      "test",
      "test tube"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f492",
  voted: false
};
const vials = {
  aliases: {
    unicodes: {
      secondary: [
        "10f493"
      ]
    }
  },
  changes: [
    "5.0.7",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Vials",
  search: {
    terms: [
      "ampule",
      "experiment",
      "knowledge",
      "lab",
      "sample",
      "science",
      "test",
      "test tube"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f493",
  voted: false
};
const viber = {
  changes: [
    "5.0.0",
    "5.0.3"
  ],
  label: "Viber",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f409",
  voted: false
};
const video = {
  aliases: {
    names: [
      "video-camera"
    ],
    unicodes: {
      secondary: [
        "10f03d"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.0.9",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Video",
  search: {
    terms: [
      "camera",
      "film",
      "movie",
      "record",
      "video-camera"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f03d",
  voted: false
};
const vihara = {
  aliases: {
    unicodes: {
      secondary: [
        "10f6a7"
      ]
    }
  },
  changes: [
    "5.3.0",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Vihara",
  search: {
    terms: [
      "buddhism",
      "buddhist",
      "building",
      "monastery"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f6a7",
  voted: false
};
const vimeo = {
  changes: [
    "5.0.0"
  ],
  label: "Vimeo",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f40a",
  voted: false
};
const vine = {
  changes: [
    "4.1.0",
    "5.0.0"
  ],
  label: "Vine",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f1ca",
  voted: false
};
const virus = {
  aliases: {
    unicodes: {
      secondary: [
        "10e074"
      ]
    }
  },
  changes: [
    "5.13.0",
    "5.14.0",
    "6.0.0-beta1",
    "6.1.0",
    "6.1.2",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Virus",
  search: {
    terms: [
      "bug",
      "coronavirus",
      "covid-19",
      "flu",
      "health",
      "infection",
      "pandemic",
      "sick",
      "vaccine",
      "viral"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e074",
  voted: false
};
const viruses = {
  aliases: {
    unicodes: {
      secondary: [
        "10e076"
      ]
    }
  },
  changes: [
    "5.13.0",
    "5.14.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Viruses",
  search: {
    terms: [
      "bugs",
      "coronavirus",
      "covid-19",
      "flu",
      "health",
      "infection",
      "multiply",
      "pandemic",
      "sick",
      "spread",
      "vaccine",
      "viral"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e076",
  voted: false
};
const vk = {
  changes: [
    "3.2.0",
    "5.0.0",
    "6.0.0-beta3"
  ],
  label: "VK",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f189",
  voted: false
};
const vnv = {
  changes: [
    "5.0.0"
  ],
  label: "VNV",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f40b",
  voted: false
};
const voicemail = {
  aliases: {
    unicodes: {
      secondary: [
        "10f897"
      ]
    }
  },
  changes: [
    "5.9.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Voicemail",
  search: {
    terms: [
      "answer",
      "inbox",
      "message",
      "phone"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f897",
  voted: true
};
const volcano = {
  aliases: {
    unicodes: {
      composite: [
        "1f30b"
      ],
      secondary: [
        "10f770"
      ]
    }
  },
  changes: [
    "5.5.0",
    "5.10.2",
    "6.0.0-beta1",
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Volcano",
  search: {
    terms: [
      "caldera",
      "eruption",
      "lava",
      "magma",
      "mountain",
      "smoke",
      "volcano"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f770",
  voted: false
};
const volleyball = {
  aliases: {
    names: [
      "volleyball-ball"
    ],
    unicodes: {
      composite: [
        "1f3d0"
      ],
      secondary: [
        "10f45f"
      ]
    }
  },
  changes: [
    "5.0.5",
    "5.8.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Volleyball",
  search: {
    terms: [
      "ball",
      "beach",
      "game",
      "olympics",
      "sport",
      "volleyball"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f45f",
  voted: false
};
const vuejs = {
  changes: [
    "5.0.0"
  ],
  label: "Vue.js",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f41f",
  voted: false
};
const w = {
  aliases: {
    unicodes: {
      composite: [
        "77"
      ]
    }
  },
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "W",
  search: {
    terms: [
      "Latin Capital Letter W",
      "Latin Small Letter W",
      "letter"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "57",
  voted: false
};
const wallet = {
  aliases: {
    unicodes: {
      secondary: [
        "10f555"
      ]
    }
  },
  changes: [
    "5.0.13",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Wallet",
  search: {
    terms: [
      "billfold",
      "cash",
      "currency",
      "money",
      "salary"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f555",
  voted: true
};
const warehouse = {
  aliases: {
    unicodes: {
      secondary: [
        "10f494"
      ]
    }
  },
  changes: [
    "5.0.7",
    "6.0.0-beta1",
    "6.0.0-beta3",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Warehouse",
  search: {
    terms: [
      "building",
      "capacity",
      "garage",
      "inventory",
      "storage"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f494",
  voted: false
};
const water = {
  aliases: {
    unicodes: {
      secondary: [
        "10f773"
      ]
    }
  },
  changes: [
    "5.5.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Water",
  search: {
    terms: [
      "lake",
      "liquid",
      "ocean",
      "sea",
      "swim",
      "wet"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f773",
  voted: false
};
const waze = {
  changes: [
    "5.8.0"
  ],
  label: "Waze",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f83f",
  voted: false
};
const webflow = {
  changes: [
    "6.5.0",
    "6.5.1"
  ],
  label: "Webflow",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e65c",
  voted: false
};
const weebly = {
  changes: [
    "5.1.0"
  ],
  label: "Weebly",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f5cc",
  voted: true
};
const weibo = {
  changes: [
    "3.2.0",
    "5.0.0"
  ],
  label: "Weibo",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f18a",
  voted: false
};
const weixin = {
  changes: [
    "4.1.0",
    "5.0.0",
    "5.0.3"
  ],
  label: "Weixin (WeChat)",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f1d7",
  voted: false
};
const whatsapp = {
  changes: [
    "4.3.0",
    "5.0.0"
  ],
  label: "What's App",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f232",
  voted: false
};
const wheelchair = {
  aliases: {
    unicodes: {
      secondary: [
        "10f193"
      ]
    }
  },
  changes: [
    "4.0.0",
    "5.0.0",
    "5.10.2",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Wheelchair",
  search: {
    terms: [
      "disabled",
      "uer",
      "users-people"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f193",
  voted: false
};
const whmcs = {
  changes: [
    "5.0.0"
  ],
  label: "WHMCS",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f40d",
  voted: false
};
const wifi = {
  aliases: {
    names: [
      "wifi-3",
      "wifi-strong"
    ],
    unicodes: {
      secondary: [
        "10f1eb"
      ]
    }
  },
  changes: [
    "4.2.0",
    "5.0.0",
    "5.3.0",
    "5.10.1",
    "5.11.1",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Wifi",
  search: {
    terms: [
      "connection",
      "hotspot",
      "internet",
      "network",
      "signal",
      "wireless",
      "www"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f1eb",
  voted: false
};
const wind = {
  aliases: {
    unicodes: {
      secondary: [
        "10f72e"
      ]
    }
  },
  changes: [
    "5.4.0",
    "5.5.0",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Wind",
  search: {
    terms: [
      "air",
      "blow",
      "breeze",
      "fall",
      "seasonal",
      "weather"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f72e",
  voted: false
};
const windows = {
  changes: [
    "3.2.0",
    "5.0.0"
  ],
  label: "Windows",
  search: {
    terms: [
      "microsoft",
      "operating system",
      "os"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f17a",
  voted: false
};
const wirsindhandwerk = {
  aliases: {
    names: [
      "wsh"
    ]
  },
  changes: [
    "6.0.0-beta1"
  ],
  label: "wirsindhandwerk",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e2d0",
  voted: false
};
const wix = {
  changes: [
    "5.1.0"
  ],
  label: "Wix",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f5cf",
  voted: true
};
const wodu = {
  changes: [
    "5.15.0"
  ],
  label: "Wodu",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "e088",
  voted: false
};
const wordpress = {
  changes: [
    "4.1.0",
    "5.0.0"
  ],
  label: "WordPress Logo",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f19a",
  voted: false
};
const worm = {
  changes: [
    "6.1.0",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Worm",
  search: {
    terms: [
      "dirt",
      "garden",
      "worm",
      "wriggle"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "e599",
  voted: false
};
const wpbeginner = {
  changes: [
    "4.6.0",
    "5.0.0"
  ],
  label: "WPBeginner",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f297",
  voted: false
};
const wpexplorer = {
  changes: [
    "4.7.0",
    "5.0.0"
  ],
  label: "WPExplorer",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f2de",
  voted: false
};
const wpforms = {
  changes: [
    "4.6.0",
    "5.0.0"
  ],
  label: "WPForms",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f298",
  voted: false
};
const wpressr = {
  aliases: {
    names: [
      "rendact"
    ]
  },
  changes: [
    "5.4.2"
  ],
  label: "wpressr",
  search: {
    terms: [
      "rendact"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f3e4",
  voted: false
};
const wrench = {
  aliases: {
    unicodes: {
      composite: [
        "1f527"
      ],
      secondary: [
        "10f0ad"
      ]
    }
  },
  changes: [
    "2.0.0",
    "5.0.0",
    "5.0.13",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Wrench",
  search: {
    terms: [
      "configuration",
      "construction",
      "equipment",
      "fix",
      "mechanic",
      "modify",
      "plumbing",
      "settings",
      "spanner",
      "tool",
      "update",
      "wrench"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f0ad",
  voted: false
};
const x = {
  aliases: {
    unicodes: {
      composite: [
        "78"
      ]
    }
  },
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "X",
  search: {
    terms: [
      "Latin Capital Letter X",
      "Latin Small Letter X",
      "letter",
      "uncheck"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "58",
  voted: false
};
const xbox = {
  changes: [
    "5.0.0"
  ],
  label: "Xbox",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f412",
  voted: false
};
const xing = {
  changes: [
    "3.2.0",
    "5.0.0"
  ],
  label: "Xing",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f168",
  voted: false
};
const xmark = {
  aliases: {
    names: [
      "close",
      "multiply",
      "remove",
      "times"
    ],
    unicodes: {
      composite: [
        "1f5d9",
        "2715",
        "2716",
        "274c",
        "d7"
      ],
      secondary: [
        "10f00d"
      ]
    }
  },
  changes: [
    "1.0.0",
    "5.0.0",
    "5.0.13",
    "5.11.0",
    "5.11.1",
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Xmark",
  search: {
    terms: [
      "Cancellation X",
      "Multiplication Sign",
      "Multiplication X",
      "cancel",
      "close",
      "cross",
      "cross mark",
      "error",
      "exit",
      "incorrect",
      "mark",
      "multiplication",
      "multiply",
      "notice",
      "notification",
      "notify",
      "problem",
      "sign",
      "uncheck",
      "wrong",
      "x",
      "×"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "f00d",
  voted: false
};
const y = {
  aliases: {
    unicodes: {
      composite: [
        "79"
      ]
    }
  },
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Y",
  search: {
    terms: [
      "Latin Capital Letter Y",
      "Latin Small Letter Y",
      "letter",
      "yay",
      "yes"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "59",
  voted: false
};
const yahoo = {
  changes: [
    "4.1.0",
    "5.0.0",
    "5.0.3",
    "5.13.1"
  ],
  label: "Yahoo Logo",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f19e",
  voted: false
};
const yammer = {
  changes: [
    "5.8.0",
    "6.0.0-beta1"
  ],
  label: "Yammer",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f840",
  voted: false
};
const yandex = {
  changes: [
    "5.0.0"
  ],
  label: "Yandex",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f413",
  voted: false
};
const yarn = {
  changes: [
    "5.6.0"
  ],
  label: "Yarn",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f7e3",
  voted: true
};
const yelp = {
  changes: [
    "4.2.0",
    "5.0.0",
    "5.7.0",
    "5.8.0"
  ],
  label: "Yelp",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f1e9",
  voted: false
};
const yoast = {
  changes: [
    "4.6.0",
    "5.0.0",
    "5.0.3"
  ],
  label: "Yoast",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f2b1",
  voted: false
};
const youtube = {
  aliases: {
    unicodes: {
      composite: [
        "f16a"
      ]
    }
  },
  changes: [
    "3.2.0",
    "5.0.0"
  ],
  label: "YouTube",
  search: {
    terms: [
      "film",
      "video",
      "youtube-play",
      "youtube-square"
    ]
  },
  styles: [
    "brands"
  ],
  unicode: "f167",
  voted: false
};
const z = {
  aliases: {
    unicodes: {
      composite: [
        "7a"
      ]
    }
  },
  changes: [
    "6.0.0-beta1",
    "6.2.0",
    "6.3.0",
    "6.4.0",
    "6.5.0",
    "6.6.0",
    "6.7.0"
  ],
  label: "Z",
  search: {
    terms: [
      "Latin Capital Letter Z",
      "Latin Small Letter Z",
      "letter"
    ]
  },
  styles: [
    "solid"
  ],
  unicode: "5a",
  voted: false
};
const zhihu = {
  changes: [
    "5.2.0"
  ],
  label: "Zhihu",
  search: {
    terms: []
  },
  styles: [
    "brands"
  ],
  unicode: "f63f",
  voted: true
};
const FontAwesomeJsonIcons = {
  "42-group": {
    aliases: {
      names: [
        "innosoft"
      ]
    },
    changes: [
      "5.15.0",
      "6.0.0-beta2"
    ],
    label: "42.group",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "e080",
    voted: false
  },
  "500px": {
    changes: [
      "4.4.0",
      "5.0.0"
    ],
    label: "500px",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f26e",
    voted: false
  },
  a,
  "accessible-icon": {
    aliases: {
      unicodes: {
        composite: [
          "f29b"
        ]
      }
    },
    changes: [
      "5.0.0"
    ],
    label: "Accessible Icon",
    search: {
      terms: [
        "accessibility",
        "disabled",
        "handicap",
        "person",
        "uer",
        "wheelchair",
        "wheelchair-alt"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f368",
    voted: false
  },
  accusoft,
  "address-book": {
    aliases: {
      names: [
        "contact-book"
      ],
      unicodes: {
        composite: [
          "f2ba"
        ],
        secondary: [
          "10f2b9"
        ]
      }
    },
    changes: [
      "4.7.0",
      "5.0.0",
      "5.0.3",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Address Book",
    search: {
      terms: [
        "contact",
        "directory",
        "employee",
        "index",
        "little black book",
        "portfolio",
        "rolodex",
        "uer",
        "username"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f2b9",
    voted: false
  },
  "address-card": {
    aliases: {
      names: [
        "contact-card",
        "vcard"
      ],
      unicodes: {
        composite: [
          "f2bc"
        ],
        secondary: [
          "10f2bb"
        ]
      }
    },
    changes: [
      "4.7.0",
      "5.0.0",
      "5.0.3",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Address Card",
    search: {
      terms: [
        "about",
        "contact",
        "employee",
        "id",
        "identification",
        "portfolio",
        "postcard",
        "profile",
        "registration",
        "uer",
        "username"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f2bb",
    voted: false
  },
  adn,
  adversal,
  affiliatetheme,
  airbnb,
  algolia,
  "align-center": {
    aliases: {
      unicodes: {
        secondary: [
          "10f037"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "5.9.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Align Center",
    search: {
      terms: [
        "format",
        "middle",
        "paragraph",
        "text"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f037",
    voted: false
  },
  "align-justify": {
    aliases: {
      unicodes: {
        secondary: [
          "10f039"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "5.9.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Align Justify",
    search: {
      terms: [
        "format",
        "paragraph",
        "text"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f039",
    voted: false
  },
  "align-left": {
    aliases: {
      unicodes: {
        secondary: [
          "10f036"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "5.9.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Align Left",
    search: {
      terms: [
        "format",
        "paragraph",
        "text"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f036",
    voted: false
  },
  "align-right": {
    aliases: {
      unicodes: {
        secondary: [
          "10f038"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "5.9.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Align Right",
    search: {
      terms: [
        "format",
        "paragraph",
        "text"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f038",
    voted: false
  },
  alipay,
  amazon,
  "amazon-pay": {
    changes: [
      "5.0.2",
      "5.8.0"
    ],
    label: "Amazon Pay",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f42c",
    voted: false
  },
  amilia,
  anchor,
  "anchor-circle-check": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Anchor Circle Check",
    search: {
      terms: [
        "enable",
        "marina",
        "not affected",
        "ok",
        "okay",
        "port",
        "validate",
        "working"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4aa",
    voted: false
  },
  "anchor-circle-exclamation": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Anchor Circle Exclamation",
    search: {
      terms: [
        "affected",
        "failed",
        "marina",
        "port"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4ab",
    voted: false
  },
  "anchor-circle-xmark": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Anchor Circle Xmark",
    search: {
      terms: [
        "destroy",
        "marina",
        "port",
        "uncheck"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4ac",
    voted: false
  },
  "anchor-lock": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Anchor Lock",
    search: {
      terms: [
        "closed",
        "lockdown",
        "marina",
        "padlock",
        "port",
        "privacy",
        "quarantine"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4ad",
    voted: false
  },
  android,
  angellist,
  "angle-down": {
    aliases: {
      unicodes: {
        composite: [
          "2304"
        ],
        secondary: [
          "10f107"
        ]
      }
    },
    changes: [
      "3.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.5.2",
      "6.6.0",
      "6.7.0"
    ],
    label: "Angle Down",
    search: {
      terms: [
        "Down Arrowhead",
        "arrow",
        "caret",
        "download",
        "expand",
        "insert"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f107",
    voted: false
  },
  "angle-left": {
    aliases: {
      unicodes: {
        composite: [
          "2039"
        ],
        secondary: [
          "10f104"
        ]
      }
    },
    changes: [
      "3.0.0",
      "5.0.0",
      "5.11.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Angle Left",
    search: {
      terms: [
        "Single Left-Pointing Angle Quotation Mark",
        "arrow",
        "back",
        "caret",
        "less",
        "previous"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f104",
    voted: false
  },
  "angle-right": {
    aliases: {
      unicodes: {
        composite: [
          "203a"
        ],
        secondary: [
          "10f105"
        ]
      }
    },
    changes: [
      "3.0.0",
      "5.0.0",
      "5.11.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Angle Right",
    search: {
      terms: [
        "Single Right-Pointing Angle Quotation Mark",
        "arrow",
        "care",
        "forward",
        "more",
        "next"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f105",
    voted: false
  },
  "angle-up": {
    aliases: {
      unicodes: {
        composite: [
          "2303"
        ],
        secondary: [
          "10f106"
        ]
      }
    },
    changes: [
      "3.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Angle Up",
    search: {
      terms: [
        "Up Arrowhead",
        "arrow",
        "caret",
        "collapse",
        "upgrade",
        "upload"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f106",
    voted: false
  },
  "angles-down": {
    aliases: {
      names: [
        "angle-double-down"
      ],
      unicodes: {
        secondary: [
          "10f103"
        ]
      }
    },
    changes: [
      "3.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Angles Down",
    search: {
      terms: [
        "arrows",
        "caret",
        "download",
        "expand"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f103",
    voted: false
  },
  "angles-left": {
    aliases: {
      names: [
        "angle-double-left"
      ],
      unicodes: {
        composite: [
          "ab"
        ],
        secondary: [
          "10f100"
        ]
      }
    },
    changes: [
      "3.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Angles Left",
    search: {
      terms: [
        "Left-Pointing Double Angle Quotation Mark",
        "arrows",
        "back",
        "caret",
        "laquo",
        "previous",
        "quote"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f100",
    voted: false
  },
  "angles-right": {
    aliases: {
      names: [
        "angle-double-right"
      ],
      unicodes: {
        composite: [
          "bb"
        ],
        secondary: [
          "10f101"
        ]
      }
    },
    changes: [
      "3.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Angles Right",
    search: {
      terms: [
        "Right-Pointing Double Angle Quotation Mark",
        "arrows",
        "caret",
        "forward",
        "more",
        "next",
        "quote",
        "raquo"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f101",
    voted: false
  },
  "angles-up": {
    aliases: {
      names: [
        "angle-double-up"
      ],
      unicodes: {
        secondary: [
          "10f102"
        ]
      }
    },
    changes: [
      "3.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Angles Up",
    search: {
      terms: [
        "arrows",
        "caret",
        "collapse",
        "upload"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f102",
    voted: false
  },
  angrycreative,
  angular,
  ankh,
  "app-store": {
    changes: [
      "5.0.0"
    ],
    label: "App Store",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f36f",
    voted: false
  },
  "app-store-ios": {
    changes: [
      "5.0.0"
    ],
    label: "iOS App Store",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f370",
    voted: false
  },
  apper,
  apple,
  "apple-pay": {
    changes: [
      "5.0.0"
    ],
    label: "Apple Pay",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f415",
    voted: true
  },
  "apple-whole": {
    aliases: {
      names: [
        "apple-alt"
      ],
      unicodes: {
        composite: [
          "1f34e",
          "1f34f"
        ],
        secondary: [
          "10f5d1"
        ]
      }
    },
    changes: [
      "5.2.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Apple Whole",
    search: {
      terms: [
        "apple",
        "fall",
        "fruit",
        "fuji",
        "green",
        "green apple",
        "macintosh",
        "orchard",
        "red",
        "red apple",
        "seasonal",
        "vegan"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5d1",
    voted: false
  },
  archway,
  "arrow-down": {
    aliases: {
      unicodes: {
        composite: [
          "2193"
        ],
        secondary: [
          "10f063"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Down",
    search: {
      terms: [
        "Downwards Arrow",
        "download"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f063",
    voted: false
  },
  "arrow-down-1-9": {
    aliases: {
      names: [
        "sort-numeric-asc",
        "sort-numeric-down"
      ],
      unicodes: {
        secondary: [
          "10f162"
        ]
      }
    },
    changes: [
      "3.2.0",
      "5.0.0",
      "5.9.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Down 1 9",
    search: {
      terms: [
        "arrange",
        "filter",
        "numbers",
        "order",
        "sort-numeric-asc"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f162",
    voted: false
  },
  "arrow-down-9-1": {
    aliases: {
      names: [
        "sort-numeric-desc",
        "sort-numeric-down-alt"
      ],
      unicodes: {
        secondary: [
          "10f886"
        ]
      }
    },
    changes: [
      "5.9.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Down 9 1",
    search: {
      terms: [
        "arrange",
        "filter",
        "numbers",
        "order",
        "sort-numeric-asc"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f886",
    voted: false
  },
  "arrow-down-a-z": {
    aliases: {
      names: [
        "sort-alpha-asc",
        "sort-alpha-down"
      ],
      unicodes: {
        secondary: [
          "10f15d"
        ]
      }
    },
    changes: [
      "3.2.0",
      "5.0.0",
      "5.9.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Down A Z",
    search: {
      terms: [
        "alphabetical",
        "arrange",
        "filter",
        "order",
        "sort-alpha-asc"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f15d",
    voted: false
  },
  "arrow-down-long": {
    aliases: {
      names: [
        "long-arrow-down"
      ],
      unicodes: {
        secondary: [
          "10f175"
        ]
      }
    },
    changes: [
      "3.2.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Down Long",
    search: {
      terms: [
        "download",
        "long-arrow-down"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f175",
    voted: false
  },
  "arrow-down-short-wide": {
    aliases: {
      names: [
        "sort-amount-desc",
        "sort-amount-down-alt"
      ],
      unicodes: {
        secondary: [
          "10f884"
        ]
      }
    },
    changes: [
      "5.9.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Down Short Wide",
    search: {
      terms: [
        "arrange",
        "filter",
        "order",
        "sort-amount-asc"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f884",
    voted: false
  },
  "arrow-down-up-across-line": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Down Up Across Line",
    search: {
      terms: [
        "border",
        "crossing",
        "transfer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4af",
    voted: false
  },
  "arrow-down-up-lock": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Down Up Lock",
    search: {
      terms: [
        "border",
        "closed",
        "crossing",
        "lockdown",
        "padlock",
        "privacy",
        "quarantine",
        "transfer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4b0",
    voted: false
  },
  "arrow-down-wide-short": {
    aliases: {
      names: [
        "sort-amount-asc",
        "sort-amount-down"
      ],
      unicodes: {
        secondary: [
          "10f160"
        ]
      }
    },
    changes: [
      "3.2.0",
      "5.0.0",
      "5.9.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Down Wide Short",
    search: {
      terms: [
        "arrange",
        "filter",
        "number",
        "order",
        "sort-amount-asc"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f160",
    voted: false
  },
  "arrow-down-z-a": {
    aliases: {
      names: [
        "sort-alpha-desc",
        "sort-alpha-down-alt"
      ],
      unicodes: {
        secondary: [
          "10f881"
        ]
      }
    },
    changes: [
      "5.9.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Down Z A",
    search: {
      terms: [
        "alphabetical",
        "arrange",
        "filter",
        "order",
        "sort-alpha-asc"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f881",
    voted: false
  },
  "arrow-left": {
    aliases: {
      unicodes: {
        composite: [
          "2190"
        ],
        secondary: [
          "10f060"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Left",
    search: {
      terms: [
        "Leftwards Arrow",
        "back",
        "previous"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f060",
    voted: false
  },
  "arrow-left-long": {
    aliases: {
      names: [
        "long-arrow-left"
      ],
      unicodes: {
        secondary: [
          "10f177"
        ]
      }
    },
    changes: [
      "3.2.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Left Long",
    search: {
      terms: [
        "back",
        "long-arrow-left",
        "previous"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f177",
    voted: false
  },
  "arrow-pointer": {
    aliases: {
      names: [
        "mouse-pointer"
      ],
      unicodes: {
        secondary: [
          "10f245"
        ]
      }
    },
    changes: [
      "4.4.0",
      "5.0.0",
      "5.0.3",
      "6.0.0-beta1",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Pointer",
    search: {
      terms: [
        "arrow",
        "cursor",
        "select"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f245",
    voted: false
  },
  "arrow-right": {
    aliases: {
      unicodes: {
        composite: [
          "2192"
        ],
        secondary: [
          "10f061"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Right",
    search: {
      terms: [
        "Rightwards Arrow",
        "forward",
        "next"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f061",
    voted: false
  },
  "arrow-right-arrow-left": {
    aliases: {
      names: [
        "exchange"
      ],
      unicodes: {
        composite: [
          "21c4"
        ],
        secondary: [
          "10f0ec"
        ]
      }
    },
    changes: [
      "3.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Right Arrow Left",
    search: {
      terms: [
        "Rightwards Arrow Over Leftwards Arrow",
        "arrow",
        "arrows",
        "reciprocate",
        "return",
        "swap",
        "transfer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f0ec",
    voted: false
  },
  "arrow-right-from-bracket": {
    aliases: {
      names: [
        "sign-out"
      ],
      unicodes: {
        secondary: [
          "10f08b"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.5.2",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Right From Bracket",
    search: {
      terms: [
        "arrow",
        "exit",
        "leave",
        "log out",
        "logout"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f08b",
    voted: false
  },
  "arrow-right-long": {
    aliases: {
      names: [
        "long-arrow-right"
      ],
      unicodes: {
        secondary: [
          "10f178"
        ]
      }
    },
    changes: [
      "3.2.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Right Long",
    search: {
      terms: [
        "forward",
        "long-arrow-right",
        "next"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f178",
    voted: false
  },
  "arrow-right-to-bracket": {
    aliases: {
      names: [
        "sign-in"
      ],
      unicodes: {
        secondary: [
          "10f090"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.5.2",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Right To Bracket",
    search: {
      terms: [
        "arrow",
        "enter",
        "insert",
        "join",
        "log in",
        "login",
        "sign in",
        "sign up",
        "sign-in",
        "signin",
        "signup"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f090",
    voted: false
  },
  "arrow-right-to-city": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Right To City",
    search: {
      terms: [
        "building",
        "city",
        "exodus",
        "insert",
        "rural",
        "urban"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4b3",
    voted: false
  },
  "arrow-rotate-left": {
    aliases: {
      names: [
        "arrow-left-rotate",
        "arrow-rotate-back",
        "arrow-rotate-backward",
        "undo"
      ],
      unicodes: {
        composite: [
          "21ba"
        ],
        secondary: [
          "10f0e2"
        ]
      }
    },
    changes: [
      "2.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Rotate Left",
    search: {
      terms: [
        "Anticlockwise Open Circle Arrow",
        "back",
        "control z",
        "exchange",
        "oops",
        "return",
        "rotate",
        "swap"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f0e2",
    voted: false
  },
  "arrow-rotate-right": {
    aliases: {
      names: [
        "arrow-right-rotate",
        "arrow-rotate-forward",
        "redo"
      ],
      unicodes: {
        composite: [
          "21bb"
        ],
        secondary: [
          "10f01e"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "5.8.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Rotate Right",
    search: {
      terms: [
        "Clockwise Open Circle Arrow",
        "forward",
        "refresh",
        "reload",
        "renew",
        "repeat",
        "retry"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f01e",
    voted: false
  },
  "arrow-trend-down": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Trend Down",
    search: {
      terms: [
        "line",
        "stocks",
        "trend"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e097",
    voted: false
  },
  "arrow-trend-up": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Trend Up",
    search: {
      terms: [
        "line",
        "stocks",
        "trend"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e098",
    voted: false
  },
  "arrow-turn-down": {
    aliases: {
      names: [
        "level-down"
      ],
      unicodes: {
        secondary: [
          "10f149"
        ]
      }
    },
    changes: [
      "3.1.0",
      "5.0.0",
      "5.11.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Turn Down",
    search: {
      terms: [
        "arrow"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f149",
    voted: false
  },
  "arrow-turn-up": {
    aliases: {
      names: [
        "level-up"
      ],
      unicodes: {
        secondary: [
          "10f148"
        ]
      }
    },
    changes: [
      "3.1.0",
      "5.0.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Turn Up",
    search: {
      terms: [
        "arrow"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f148",
    voted: false
  },
  "arrow-up": {
    aliases: {
      unicodes: {
        composite: [
          "2191"
        ],
        secondary: [
          "10f062"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Up",
    search: {
      terms: [
        "Upwards Arrow",
        "forward",
        "upgrade",
        "upload"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f062",
    voted: false
  },
  "arrow-up-1-9": {
    aliases: {
      names: [
        "sort-numeric-up"
      ],
      unicodes: {
        secondary: [
          "10f163"
        ]
      }
    },
    changes: [
      "3.2.0",
      "5.0.0",
      "5.9.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Up 1 9",
    search: {
      terms: [
        "arrange",
        "filter",
        "numbers",
        "order",
        "sort-numeric-desc"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f163",
    voted: false
  },
  "arrow-up-9-1": {
    aliases: {
      names: [
        "sort-numeric-up-alt"
      ],
      unicodes: {
        secondary: [
          "10f887"
        ]
      }
    },
    changes: [
      "5.9.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Up 9 1",
    search: {
      terms: [
        "arrange",
        "filter",
        "numbers",
        "order",
        "sort-numeric-desc"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f887",
    voted: false
  },
  "arrow-up-a-z": {
    aliases: {
      names: [
        "sort-alpha-up"
      ],
      unicodes: {
        secondary: [
          "10f15e"
        ]
      }
    },
    changes: [
      "3.2.0",
      "5.0.0",
      "5.9.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Up A Z",
    search: {
      terms: [
        "alphabetical",
        "arrange",
        "filter",
        "order",
        "sort-alpha-desc"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f15e",
    voted: false
  },
  "arrow-up-from-bracket": {
    changes: [
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.5.2",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Up From Bracket",
    search: {
      terms: [
        "share",
        "transfer",
        "upgrade",
        "upload"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e09a",
    voted: false
  },
  "arrow-up-from-ground-water": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Up From Ground Water",
    search: {
      terms: [
        "groundwater",
        "spring",
        "upgrade",
        "water supply",
        "water table"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4b5",
    voted: false
  },
  "arrow-up-from-water-pump": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Up From Water Pump",
    search: {
      terms: [
        "flood",
        "groundwater",
        "pump",
        "submersible",
        "sump pump",
        "upgrade"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4b6",
    voted: false
  },
  "arrow-up-long": {
    aliases: {
      names: [
        "long-arrow-up"
      ],
      unicodes: {
        secondary: [
          "10f176"
        ]
      }
    },
    changes: [
      "3.2.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Up Long",
    search: {
      terms: [
        "long-arrow-up",
        "upload"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f176",
    voted: false
  },
  "arrow-up-right-dots": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Up Right Dots",
    search: {
      terms: [
        "growth",
        "increase",
        "population",
        "upgrade"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4b7",
    voted: false
  },
  "arrow-up-right-from-square": {
    aliases: {
      names: [
        "external-link"
      ],
      unicodes: {
        secondary: [
          "10f08e"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "5.11.0",
      "6.0.0-beta1",
      "6.1.0",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.4.1",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Up Right From Square",
    search: {
      terms: [
        "new",
        "open",
        "send",
        "share",
        "upgrade"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f08e",
    voted: false
  },
  "arrow-up-short-wide": {
    aliases: {
      names: [
        "sort-amount-up-alt"
      ],
      unicodes: {
        secondary: [
          "10f885"
        ]
      }
    },
    changes: [
      "5.9.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Up Short Wide",
    search: {
      terms: [
        "arrange",
        "filter",
        "order",
        "sort-amount-desc"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f885",
    voted: false
  },
  "arrow-up-wide-short": {
    aliases: {
      names: [
        "sort-amount-up"
      ],
      unicodes: {
        secondary: [
          "10f161"
        ]
      }
    },
    changes: [
      "3.2.0",
      "5.0.0",
      "5.9.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Up Wide Short",
    search: {
      terms: [
        "arrange",
        "filter",
        "order",
        "sort-amount-desc",
        "upgrade"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f161",
    voted: false
  },
  "arrow-up-z-a": {
    aliases: {
      names: [
        "sort-alpha-up-alt"
      ],
      unicodes: {
        secondary: [
          "10f882"
        ]
      }
    },
    changes: [
      "5.9.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrow Up Z A",
    search: {
      terms: [
        "alphabetical",
        "arrange",
        "filter",
        "order",
        "sort-alpha-desc"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f882",
    voted: false
  },
  "arrows-down-to-line": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrows Down To Line",
    search: {
      terms: [
        "insert",
        "scale down",
        "sink"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4b8",
    voted: false
  },
  "arrows-down-to-people": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrows Down To People",
    search: {
      terms: [
        "affected",
        "focus",
        "insert",
        "targeted",
        "together",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4b9",
    voted: false
  },
  "arrows-left-right": {
    aliases: {
      names: [
        "arrows-h"
      ],
      unicodes: {
        secondary: [
          "10f07e"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrows Left Right",
    search: {
      terms: [
        "expand",
        "horizontal",
        "landscape",
        "resize",
        "wide"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f07e",
    voted: false
  },
  "arrows-left-right-to-line": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrows Left Right To Line",
    search: {
      terms: [
        "analysis",
        "expand",
        "gap"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4ba",
    voted: false
  },
  "arrows-rotate": {
    aliases: {
      names: [
        "refresh",
        "sync"
      ],
      unicodes: {
        composite: [
          "1f5d8"
        ],
        secondary: [
          "10f021"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "5.8.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrows Rotate",
    search: {
      terms: [
        "Clockwise Right and Left Semicircle Arrows",
        "clockwise",
        "exchange",
        "modify",
        "refresh",
        "reload",
        "renew",
        "retry",
        "rotate",
        "swap"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f021",
    voted: false
  },
  "arrows-spin": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrows Spin",
    search: {
      terms: [
        "cycle",
        "rotate",
        "spin",
        "whirl"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4bb",
    voted: false
  },
  "arrows-split-up-and-left": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrows Split Up And Left",
    search: {
      terms: [
        "agile",
        "split"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4bc",
    voted: false
  },
  "arrows-to-circle": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrows To Circle",
    search: {
      terms: [
        "center",
        "concentrate",
        "coordinate",
        "coordination",
        "focal point",
        "focus",
        "insert"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4bd",
    voted: false
  },
  "arrows-to-dot": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrows To Dot",
    search: {
      terms: [
        "assembly point",
        "center",
        "condense",
        "focus",
        "insert",
        "minimize"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4be",
    voted: false
  },
  "arrows-to-eye": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrows To Eye",
    search: {
      terms: [
        "center",
        "coordinated assessment",
        "focus"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4bf",
    voted: false
  },
  "arrows-turn-right": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrows Turn Right",
    search: {
      terms: [
        "arrows"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4c0",
    voted: false
  },
  "arrows-turn-to-dots": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrows Turn To Dots",
    search: {
      terms: [
        "destination",
        "insert",
        "nexus"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4c1",
    voted: false
  },
  "arrows-up-down": {
    aliases: {
      names: [
        "arrows-v"
      ],
      unicodes: {
        secondary: [
          "10f07d"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrows Up Down",
    search: {
      terms: [
        "expand",
        "portrait",
        "resize",
        "tall",
        "vertical"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f07d",
    voted: false
  },
  "arrows-up-down-left-right": {
    aliases: {
      names: [
        "arrows"
      ],
      unicodes: {
        secondary: [
          "10f047"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrows Up Down Left Right",
    search: {
      terms: [
        "arrow",
        "arrows",
        "bigger",
        "enlarge",
        "expand",
        "fullscreen",
        "move",
        "position",
        "reorder",
        "resize"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f047",
    voted: false
  },
  "arrows-up-to-line": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Arrows Up To Line",
    search: {
      terms: [
        "rise",
        "scale up",
        "upgrade"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4c2",
    voted: false
  },
  artstation,
  asterisk,
  asymmetrik,
  at,
  atlassian,
  atom,
  audible,
  "audio-description": {
    aliases: {
      unicodes: {
        secondary: [
          "10f29e"
        ]
      }
    },
    changes: [
      "4.6.0",
      "5.0.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Audio Description",
    search: {
      terms: [
        "blind",
        "narration",
        "video",
        "visual"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f29e",
    voted: false
  },
  "austral-sign": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Austral Sign",
    search: {
      terms: [
        "Austral Sign",
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e0a9",
    voted: false
  },
  autoprefixer,
  avianex,
  aviato,
  award,
  aws,
  b,
  baby,
  "baby-carriage": {
    aliases: {
      names: [
        "carriage-baby"
      ],
      unicodes: {
        secondary: [
          "10f77d"
        ]
      }
    },
    changes: [
      "5.6.0",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.5.2",
      "6.6.0",
      "6.7.0"
    ],
    label: "Baby Carriage",
    search: {
      terms: [
        "buggy",
        "carrier",
        "infant",
        "push",
        "stroller",
        "transportation",
        "walk",
        "wheels"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f77d",
    voted: true
  },
  backward,
  "backward-fast": {
    aliases: {
      names: [
        "fast-backward"
      ],
      unicodes: {
        composite: [
          "23ee"
        ],
        secondary: [
          "10f049"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Backward Fast",
    search: {
      terms: [
        "arrow",
        "beginning",
        "first",
        "last track button",
        "previous",
        "previous scene",
        "previous track",
        "quick",
        "rewind",
        "start",
        "triangle"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f049",
    voted: false
  },
  "backward-step": {
    aliases: {
      names: [
        "step-backward"
      ],
      unicodes: {
        secondary: [
          "10f048"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "5.10.2",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Backward Step",
    search: {
      terms: [
        "beginning",
        "first",
        "previous",
        "rewind",
        "start"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f048",
    voted: false
  },
  bacon,
  bacteria,
  bacterium,
  "bag-shopping": {
    aliases: {
      names: [
        "shopping-bag"
      ],
      unicodes: {
        secondary: [
          "10f290"
        ]
      }
    },
    changes: [
      "4.5.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Bag Shopping",
    search: {
      terms: [
        "buy",
        "checkout",
        "grocery",
        "payment",
        "purchase"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f290",
    voted: false
  },
  bahai,
  "baht-sign": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Baht Sign",
    search: {
      terms: [
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e0ac",
    voted: false
  },
  ban,
  "ban-smoking": {
    aliases: {
      names: [
        "smoking-ban"
      ],
      unicodes: {
        composite: [
          "1f6ad"
        ],
        secondary: [
          "10f54d"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Ban Smoking",
    search: {
      terms: [
        "ban",
        "cancel",
        "deny",
        "disabled",
        "forbidden",
        "no",
        "no smoking",
        "non-smoking",
        "not",
        "prohibited",
        "smoking"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f54d",
    voted: true
  },
  bandage,
  bandcamp,
  "bangladeshi-taka-sign": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Bangladeshi Taka Sign",
    search: {
      terms: [
        "bdt",
        "currency",
        "tk"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e2e6",
    voted: false
  },
  barcode,
  bars,
  "bars-progress": {
    aliases: {
      names: [
        "tasks-alt"
      ],
      unicodes: {
        secondary: [
          "10f828"
        ]
      }
    },
    changes: [
      "5.7.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Bars Progress",
    search: {
      terms: [
        "checklist",
        "downloading",
        "downloads",
        "loading",
        "poll",
        "progress",
        "project management",
        "settings",
        "to do"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f828",
    voted: false
  },
  "bars-staggered": {
    aliases: {
      names: [
        "reorder",
        "stream"
      ],
      unicodes: {
        secondary: [
          "10f550"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Bars Staggered",
    search: {
      terms: [
        "flow",
        "list",
        "timeline"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f550",
    voted: false
  },
  baseball,
  "baseball-bat-ball": {
    aliases: {
      unicodes: {
        secondary: [
          "10f432"
        ]
      }
    },
    changes: [
      "5.0.5",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Baseball Bat Ball",
    search: {
      terms: [
        "bat",
        "league",
        "mlb",
        "slugger",
        "softball",
        "sport"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f432",
    voted: false
  },
  "basket-shopping": {
    aliases: {
      names: [
        "shopping-basket"
      ],
      unicodes: {
        secondary: [
          "10f291"
        ]
      }
    },
    changes: [
      "4.5.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Basket Shopping",
    search: {
      terms: [
        "buy",
        "checkout",
        "grocery",
        "payment",
        "purchase"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f291",
    voted: false
  },
  basketball,
  bath,
  "battery-empty": {
    aliases: {
      names: [
        "battery-0"
      ],
      unicodes: {
        secondary: [
          "10f244"
        ]
      }
    },
    changes: [
      "4.4.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Battery Empty",
    search: {
      terms: [
        "charge",
        "dead",
        "power",
        "status"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f244",
    voted: false
  },
  "battery-full": {
    aliases: {
      names: [
        "battery",
        "battery-5"
      ],
      unicodes: {
        composite: [
          "1f50b"
        ],
        secondary: [
          "10f240"
        ]
      }
    },
    changes: [
      "4.4.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Battery Full",
    search: {
      terms: [
        "batter",
        "battery",
        "charge",
        "power",
        "status"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f240",
    voted: false
  },
  "battery-half": {
    aliases: {
      names: [
        "battery-3"
      ],
      unicodes: {
        secondary: [
          "10f242"
        ]
      }
    },
    changes: [
      "4.4.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Battery Half",
    search: {
      terms: [
        "charge",
        "power",
        "status"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f242",
    voted: false
  },
  "battery-quarter": {
    aliases: {
      names: [
        "battery-2"
      ],
      unicodes: {
        secondary: [
          "10f243"
        ]
      }
    },
    changes: [
      "4.4.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Battery Quarter",
    search: {
      terms: [
        "charge",
        "low",
        "power",
        "status"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f243",
    voted: false
  },
  "battery-three-quarters": {
    aliases: {
      names: [
        "battery-4"
      ],
      unicodes: {
        secondary: [
          "10f241"
        ]
      }
    },
    changes: [
      "4.4.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Battery Three Quarters",
    search: {
      terms: [
        "charge",
        "power",
        "status"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f241",
    voted: false
  },
  "battle-net": {
    changes: [
      "5.8.0"
    ],
    label: "Battle.net",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f835",
    voted: false
  },
  bed,
  "bed-pulse": {
    aliases: {
      names: [
        "procedures"
      ],
      unicodes: {
        secondary: [
          "10f487"
        ]
      }
    },
    changes: [
      "5.0.7",
      "6.0.0-beta1",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Bed Pulse",
    search: {
      terms: [
        "EKG",
        "bed",
        "electrocardiogram",
        "health",
        "hospital",
        "life",
        "patient",
        "vital"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f487",
    voted: false
  },
  "beer-mug-empty": {
    aliases: {
      names: [
        "beer"
      ],
      unicodes: {
        secondary: [
          "10f0fc"
        ]
      }
    },
    changes: [
      "3.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Beer Mug Empty",
    search: {
      terms: [
        "alcohol",
        "ale",
        "bar",
        "beverage",
        "brew",
        "brewery",
        "drink",
        "foam",
        "lager",
        "liquor",
        "mug",
        "stein"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f0fc",
    voted: false
  },
  behance,
  bell,
  "bell-concierge": {
    aliases: {
      names: [
        "concierge-bell"
      ],
      unicodes: {
        composite: [
          "1f6ce"
        ],
        secondary: [
          "10f562"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Bell Concierge",
    search: {
      terms: [
        "attention",
        "bell",
        "bellhop",
        "bellhop bell",
        "hotel",
        "receptionist",
        "request",
        "service",
        "support"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f562",
    voted: false
  },
  "bell-slash": {
    aliases: {
      unicodes: {
        composite: [
          "1f515",
          "f1f7"
        ],
        secondary: [
          "10f1f6"
        ]
      }
    },
    changes: [
      "4.2.0",
      "5.0.0",
      "5.2.0",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Bell Slash",
    search: {
      terms: [
        "alert",
        "bell",
        "bell with slash",
        "cancel",
        "disabled",
        "forbidden",
        "mute",
        "notification",
        "off",
        "quiet",
        "reminder",
        "silent"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f1f6",
    voted: false
  },
  "bezier-curve": {
    aliases: {
      unicodes: {
        secondary: [
          "10f55b"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Bezier Curve",
    search: {
      terms: [
        "curves",
        "illustrator",
        "lines",
        "path",
        "vector"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f55b",
    voted: false
  },
  bicycle,
  bilibili,
  bimobject,
  binoculars,
  biohazard,
  bitbucket,
  bitcoin,
  "bitcoin-sign": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Bitcoin Sign",
    search: {
      terms: [
        "Bitcoin Sign",
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e0b4",
    voted: false
  },
  bity,
  "black-tie": {
    changes: [
      "4.4.0",
      "5.0.0"
    ],
    label: "Font Awesome Black Tie",
    search: {
      terms: [
        "administrator"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f27e",
    voted: false
  },
  blackberry,
  blender,
  "blender-phone": {
    aliases: {
      unicodes: {
        secondary: [
          "10f6b6"
        ]
      }
    },
    changes: [
      "5.4.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Blender Phone",
    search: {
      terms: [
        "appliance",
        "cocktail",
        "fantasy",
        "milkshake",
        "mixer",
        "puree",
        "silly",
        "smoothie"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f6b6",
    voted: false
  },
  blog,
  blogger,
  "blogger-b": {
    changes: [
      "5.0.0"
    ],
    label: "Blogger B",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f37d",
    voted: false
  },
  bluesky,
  bluetooth,
  "bluetooth-b": {
    changes: [
      "4.5.0",
      "5.0.0"
    ],
    label: "Bluetooth",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f294",
    voted: false
  },
  bold,
  bolt,
  "bolt-lightning": {
    changes: [
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Bolt Lightning",
    search: {
      terms: [
        "electricity",
        "flash",
        "lightning",
        "weather",
        "zap"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e0b7",
    voted: false
  },
  bomb,
  bone,
  bong,
  book,
  "book-atlas": {
    aliases: {
      names: [
        "atlas"
      ],
      unicodes: {
        secondary: [
          "10f558"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Book Atlas",
    search: {
      terms: [
        "book",
        "directions",
        "geography",
        "globe",
        "knowledge",
        "library",
        "map",
        "research",
        "travel",
        "wayfinding"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f558",
    voted: false
  },
  "book-bible": {
    aliases: {
      names: [
        "bible"
      ],
      unicodes: {
        secondary: [
          "10f647"
        ]
      }
    },
    changes: [
      "5.3.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Book Bible",
    search: {
      terms: [
        "book",
        "catholicism",
        "christianity",
        "god",
        "holy"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f647",
    voted: false
  },
  "book-bookmark": {
    changes: [
      "6.0.0-beta1",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Book Bookmark",
    search: {
      terms: [
        "knowledge",
        "library",
        "research"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e0bb",
    voted: false
  },
  "book-journal-whills": {
    aliases: {
      names: [
        "journal-whills"
      ],
      unicodes: {
        secondary: [
          "10f66a"
        ]
      }
    },
    changes: [
      "5.3.0",
      "5.11.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Book Journal Whills",
    search: {
      terms: [
        "book",
        "force",
        "jedi",
        "sith",
        "star wars",
        "yoda"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f66a",
    voted: false
  },
  "book-medical": {
    aliases: {
      unicodes: {
        secondary: [
          "10f7e6"
        ]
      }
    },
    changes: [
      "5.7.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Book Medical",
    search: {
      terms: [
        "diary",
        "documentation",
        "health",
        "history",
        "journal",
        "library",
        "read",
        "record",
        "research"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f7e6",
    voted: false
  },
  "book-open": {
    aliases: {
      unicodes: {
        composite: [
          "1f4d6",
          "1f56e"
        ],
        secondary: [
          "10f518"
        ]
      }
    },
    changes: [
      "5.0.13",
      "5.1.0",
      "5.2.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Book Open",
    search: {
      terms: [
        "Book",
        "book",
        "flyer",
        "knowledge",
        "library",
        "notebook",
        "open",
        "open book",
        "pamphlet",
        "reading",
        "research"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f518",
    voted: true
  },
  "book-open-reader": {
    aliases: {
      names: [
        "book-reader"
      ],
      unicodes: {
        secondary: [
          "10f5da"
        ]
      }
    },
    changes: [
      "5.2.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.4.1",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Book Open Reader",
    search: {
      terms: [
        "flyer",
        "library",
        "notebook",
        "open book",
        "pamphlet",
        "reading",
        "research"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5da",
    voted: false
  },
  "book-quran": {
    aliases: {
      names: [
        "quran"
      ],
      unicodes: {
        secondary: [
          "10f687"
        ]
      }
    },
    changes: [
      "5.3.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Book Quran",
    search: {
      terms: [
        "book",
        "islam",
        "muslim",
        "religion"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f687",
    voted: false
  },
  "book-skull": {
    aliases: {
      names: [
        "book-dead"
      ],
      unicodes: {
        secondary: [
          "10f6b7"
        ]
      }
    },
    changes: [
      "5.4.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Book Skull",
    search: {
      terms: [
        "Dungeons & Dragons",
        "crossbones",
        "d&d",
        "dark arts",
        "death",
        "dnd",
        "documentation",
        "evil",
        "fantasy",
        "halloween",
        "holiday",
        "library",
        "necronomicon",
        "read",
        "research",
        "skull",
        "spell"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f6b7",
    voted: false
  },
  "book-tanakh": {
    aliases: {
      names: [
        "tanakh"
      ],
      unicodes: {
        secondary: [
          "10f827"
        ]
      }
    },
    changes: [
      "5.7.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Book Tanakh",
    search: {
      terms: [
        "book",
        "jewish",
        "judaism",
        "religion"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f827",
    voted: false
  },
  bookmark,
  bootstrap,
  "border-all": {
    aliases: {
      unicodes: {
        secondary: [
          "10f84c"
        ]
      }
    },
    changes: [
      "5.9.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Border All",
    search: {
      terms: [
        "cell",
        "grid",
        "outline",
        "stroke",
        "table"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f84c",
    voted: false
  },
  "border-none": {
    aliases: {
      unicodes: {
        secondary: [
          "10f850"
        ]
      }
    },
    changes: [
      "5.9.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Border None",
    search: {
      terms: [
        "cell",
        "grid",
        "outline",
        "stroke",
        "table"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f850",
    voted: false
  },
  "border-top-left": {
    aliases: {
      names: [
        "border-style"
      ],
      unicodes: {
        secondary: [
          "10f853"
        ]
      }
    },
    changes: [
      "5.9.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Border Top Left",
    search: {
      terms: [
        "cell",
        "outline",
        "stroke",
        "table"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f853",
    voted: false
  },
  "bore-hole": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Bore Hole",
    search: {
      terms: [
        "bore",
        "bury",
        "drill",
        "hole"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4c3",
    voted: false
  },
  bots,
  "bottle-droplet": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Bottle Droplet",
    search: {
      terms: [
        "alcohol",
        "drink",
        "oil",
        "olive oil",
        "wine"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4c4",
    voted: false
  },
  "bottle-water": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.5.2",
      "6.6.0",
      "6.7.0"
    ],
    label: "Bottle Water",
    search: {
      terms: [
        "h2o",
        "plastic",
        "water"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4c5",
    voted: false
  },
  "bowl-food": {
    changes: [
      "6.1.0",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Bowl Food",
    search: {
      terms: [
        "catfood",
        "dogfood",
        "food",
        "rice"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4c6",
    voted: false
  },
  "bowl-rice": {
    changes: [
      "6.0.0-beta1",
      "6.1.0",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Bowl Rice",
    search: {
      terms: [
        "boiled",
        "cooked",
        "cooked rice",
        "rice",
        "steamed"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e2eb",
    voted: false
  },
  "bowling-ball": {
    aliases: {
      unicodes: {
        secondary: [
          "10f436"
        ]
      }
    },
    changes: [
      "5.0.5",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Bowling Ball",
    search: {
      terms: [
        "alley",
        "candlepin",
        "gutter",
        "lane",
        "strike",
        "tenpin"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f436",
    voted: false
  },
  box,
  "box-archive": {
    aliases: {
      names: [
        "archive"
      ],
      unicodes: {
        secondary: [
          "10f187"
        ]
      }
    },
    changes: [
      "3.2.0",
      "5.0.0",
      "5.0.9",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Box Archive",
    search: {
      terms: [
        "box",
        "package",
        "save",
        "storage"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f187",
    voted: false
  },
  "box-open": {
    aliases: {
      unicodes: {
        secondary: [
          "10f49e"
        ]
      }
    },
    changes: [
      "5.0.9",
      "5.7.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Box Open",
    search: {
      terms: [
        "archive",
        "container",
        "package",
        "storage",
        "unpack"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f49e",
    voted: false
  },
  "box-tissue": {
    aliases: {
      unicodes: {
        secondary: [
          "10e05b"
        ]
      }
    },
    changes: [
      "5.13.0",
      "5.14.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Box Tissue",
    search: {
      terms: [
        "cough",
        "covid-19",
        "kleenex",
        "mucus",
        "nose",
        "sneeze",
        "snot"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e05b",
    voted: false
  },
  "boxes-packing": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Boxes Packing",
    search: {
      terms: [
        "archive",
        "box",
        "package",
        "storage",
        "supplies"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4c7",
    voted: false
  },
  "boxes-stacked": {
    aliases: {
      names: [
        "boxes",
        "boxes-alt"
      ],
      unicodes: {
        composite: [
          "f4a1"
        ],
        primary: [
          "f4a1"
        ],
        secondary: [
          "10f468",
          "10f4a1"
        ]
      }
    },
    changes: [
      "5.0.7",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Boxes Stacked",
    search: {
      terms: [
        "archives",
        "inventory",
        "storage",
        "warehouse"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f468",
    voted: false
  },
  braille,
  brain,
  brave,
  "brave-reverse": {
    changes: [
      "6.5.0"
    ],
    label: "Brave Reverse",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "e63d",
    voted: false
  },
  "brazilian-real-sign": {
    changes: [
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Brazilian Real Sign",
    search: {
      terms: [
        "brazilian real sign",
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e46c",
    voted: false
  },
  "bread-slice": {
    aliases: {
      unicodes: {
        secondary: [
          "10f7ec"
        ]
      }
    },
    changes: [
      "5.7.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Bread Slice",
    search: {
      terms: [
        "bake",
        "bakery",
        "baking",
        "dough",
        "flour",
        "gluten",
        "grain",
        "sandwich",
        "sourdough",
        "toast",
        "wheat",
        "yeast"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f7ec",
    voted: false
  },
  bridge,
  "bridge-circle-check": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Bridge Circle Check",
    search: {
      terms: [
        "bridge",
        "enable",
        "not affected",
        "ok",
        "okay",
        "road",
        "validate",
        "working"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4c9",
    voted: false
  },
  "bridge-circle-exclamation": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Bridge Circle Exclamation",
    search: {
      terms: [
        "affected",
        "bridge",
        "failed",
        "road"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4ca",
    voted: false
  },
  "bridge-circle-xmark": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Bridge Circle Xmark",
    search: {
      terms: [
        "bridge",
        "destroy",
        "road",
        "uncheck"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4cb",
    voted: false
  },
  "bridge-lock": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Bridge Lock",
    search: {
      terms: [
        "bridge",
        "closed",
        "lockdown",
        "padlock",
        "privacy",
        "quarantine",
        "road"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4cc",
    voted: false
  },
  "bridge-water": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Bridge Water",
    search: {
      terms: [
        "bridge",
        "road"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4ce",
    voted: false
  },
  briefcase,
  "briefcase-medical": {
    aliases: {
      unicodes: {
        secondary: [
          "10f469"
        ]
      }
    },
    changes: [
      "5.0.7",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Briefcase Medical",
    search: {
      terms: [
        "doctor",
        "emt",
        "first aid",
        "health"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f469",
    voted: false
  },
  broom,
  "broom-ball": {
    aliases: {
      names: [
        "quidditch",
        "quidditch-broom-ball"
      ],
      unicodes: {
        secondary: [
          "10f458"
        ]
      }
    },
    changes: [
      "5.0.5",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Broom Ball",
    search: {
      terms: [
        "ball",
        "bludger",
        "broom",
        "golden snitch",
        "harry potter",
        "hogwarts",
        "quaffle",
        "sport",
        "wizard"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f458",
    voted: false
  },
  brush,
  btc,
  bucket,
  buffer,
  bug,
  "bug-slash": {
    changes: [
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Bug Slash",
    search: {
      terms: [
        "beetle",
        "disabled",
        "fix",
        "glitch",
        "insect",
        "optimize",
        "repair",
        "report",
        "warning"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e490",
    voted: false
  },
  bugs,
  building,
  "building-circle-arrow-right": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Building Circle Arrow Right",
    search: {
      terms: [
        "building",
        "city",
        "distribution center",
        "office"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4d1",
    voted: false
  },
  "building-circle-check": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Building Circle Check",
    search: {
      terms: [
        "building",
        "city",
        "enable",
        "not affected",
        "office",
        "ok",
        "okay",
        "validate",
        "working"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4d2",
    voted: false
  },
  "building-circle-exclamation": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Building Circle Exclamation",
    search: {
      terms: [
        "affected",
        "building",
        "city",
        "failed",
        "office"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4d3",
    voted: false
  },
  "building-circle-xmark": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Building Circle Xmark",
    search: {
      terms: [
        "building",
        "city",
        "destroy",
        "office",
        "uncheck"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4d4",
    voted: false
  },
  "building-columns": {
    aliases: {
      names: [
        "bank",
        "institution",
        "museum",
        "university"
      ],
      unicodes: {
        secondary: [
          "10f19c"
        ]
      }
    },
    changes: [
      "4.1.0",
      "5.0.0",
      "5.0.3",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Building Columns",
    search: {
      terms: [
        "bank",
        "building",
        "college",
        "education",
        "institution",
        "museum",
        "students"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f19c",
    voted: false
  },
  "building-flag": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Building Flag",
    search: {
      terms: [
        "building",
        "city",
        "diplomat",
        "embassy",
        "flag",
        "headquarters",
        "united nations"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4d5",
    voted: false
  },
  "building-lock": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Building Lock",
    search: {
      terms: [
        "building",
        "city",
        "closed",
        "lock",
        "lockdown",
        "padlock",
        "privacy",
        "quarantine",
        "secure"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4d6",
    voted: false
  },
  "building-ngo": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Building Ngo",
    search: {
      terms: [
        "building",
        "city",
        "non governmental organization",
        "office"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4d7",
    voted: false
  },
  "building-shield": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Building Shield",
    search: {
      terms: [
        "building",
        "city",
        "police",
        "protect",
        "safety"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4d8",
    voted: false
  },
  "building-un": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Building Un",
    search: {
      terms: [
        "building",
        "city",
        "office",
        "united nations"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4d9",
    voted: false
  },
  "building-user": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Building User",
    search: {
      terms: [
        "apartment",
        "building",
        "city",
        "employee",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4da",
    voted: false
  },
  "building-wheat": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Building Wheat",
    search: {
      terms: [
        "agriculture",
        "building",
        "city",
        "usda"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4db",
    voted: false
  },
  bullhorn,
  bullseye,
  burger,
  buromobelexperte,
  burst,
  bus,
  "bus-simple": {
    aliases: {
      names: [
        "bus-alt"
      ],
      unicodes: {
        secondary: [
          "10f55e"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Bus Simple",
    search: {
      terms: [
        "mta",
        "public transportation",
        "transportation",
        "travel",
        "vehicle"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f55e",
    voted: false
  },
  "business-time": {
    aliases: {
      names: [
        "briefcase-clock"
      ],
      unicodes: {
        secondary: [
          "10f64a"
        ]
      }
    },
    changes: [
      "5.3.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Business Time",
    search: {
      terms: [
        "alarm",
        "briefcase",
        "business socks",
        "clock",
        "flight of the conchords",
        "portfolio",
        "reminder",
        "wednesday"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f64a",
    voted: false
  },
  "buy-n-large": {
    changes: [
      "5.11.0"
    ],
    label: "Buy n Large",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f8a6",
    voted: false
  },
  buysellads,
  c,
  "cable-car": {
    aliases: {
      names: [
        "tram"
      ],
      unicodes: {
        composite: [
          "1f6a1",
          "e0cf"
        ],
        secondary: [
          "10f7da"
        ]
      }
    },
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Cable Car",
    search: {
      terms: [
        "aerial tramway",
        "cable",
        "gondola",
        "lift",
        "mountain",
        "mountain cableway",
        "tram",
        "tramway",
        "trolley"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f7da",
    voted: false
  },
  "cake-candles": {
    aliases: {
      names: [
        "birthday-cake",
        "cake"
      ],
      unicodes: {
        composite: [
          "1f382"
        ],
        secondary: [
          "10f1fd"
        ]
      }
    },
    changes: [
      "4.2.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Cake Candles",
    search: {
      terms: [
        "anniversary",
        "bakery",
        "birthday",
        "birthday cake",
        "cake",
        "candles",
        "celebration",
        "dessert",
        "frosting",
        "holiday",
        "party",
        "pastry",
        "sweet"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f1fd",
    voted: false
  },
  calculator,
  calendar,
  "calendar-check": {
    aliases: {
      unicodes: {
        secondary: [
          "10f274"
        ]
      }
    },
    changes: [
      "4.4.0",
      "5.0.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Calendar Check",
    search: {
      terms: [
        "accept",
        "agree",
        "appointment",
        "confirm",
        "correct",
        "date",
        "day",
        "done",
        "enable",
        "event",
        "month",
        "ok",
        "schedule",
        "select",
        "success",
        "tick",
        "time",
        "todo",
        "validate",
        "warranty",
        "when",
        "working",
        "year"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f274",
    voted: false
  },
  "calendar-day": {
    aliases: {
      unicodes: {
        secondary: [
          "10f783"
        ]
      }
    },
    changes: [
      "5.6.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Calendar Day",
    search: {
      terms: [
        "date",
        "day",
        "detail",
        "event",
        "focus",
        "month",
        "schedule",
        "single day",
        "time",
        "today",
        "when",
        "year"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f783",
    voted: true
  },
  "calendar-days": {
    aliases: {
      names: [
        "calendar-alt"
      ],
      unicodes: {
        secondary: [
          "10f073"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "5.6.0",
      "5.7.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Calendar Days",
    search: {
      terms: [
        "calendar",
        "date",
        "day",
        "event",
        "month",
        "schedule",
        "time",
        "when",
        "year"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f073",
    voted: false
  },
  "calendar-minus": {
    aliases: {
      unicodes: {
        secondary: [
          "10f272"
        ]
      }
    },
    changes: [
      "4.4.0",
      "5.0.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Calendar Minus",
    search: {
      terms: [
        "calendar",
        "date",
        "day",
        "delete",
        "event",
        "month",
        "negative",
        "remove",
        "schedule",
        "time",
        "when",
        "year"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f272",
    voted: false
  },
  "calendar-plus": {
    aliases: {
      unicodes: {
        secondary: [
          "10f271"
        ]
      }
    },
    changes: [
      "4.4.0",
      "5.0.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Calendar Plus",
    search: {
      terms: [
        "add",
        "calendar",
        "create",
        "date",
        "day",
        "event",
        "month",
        "new",
        "positive",
        "schedule",
        "time",
        "when",
        "year"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f271",
    voted: false
  },
  "calendar-week": {
    aliases: {
      unicodes: {
        secondary: [
          "10f784"
        ]
      }
    },
    changes: [
      "5.6.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Calendar Week",
    search: {
      terms: [
        "date",
        "day",
        "detail",
        "event",
        "focus",
        "month",
        "schedule",
        "single week",
        "time",
        "today",
        "when",
        "year"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f784",
    voted: true
  },
  "calendar-xmark": {
    aliases: {
      names: [
        "calendar-times"
      ],
      unicodes: {
        secondary: [
          "10f273"
        ]
      }
    },
    changes: [
      "4.4.0",
      "5.0.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Calendar Xmark",
    search: {
      terms: [
        "archive",
        "calendar",
        "date",
        "day",
        "delete",
        "event",
        "month",
        "remove",
        "schedule",
        "time",
        "uncheck",
        "when",
        "x",
        "year"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f273",
    voted: false
  },
  camera,
  "camera-retro": {
    aliases: {
      unicodes: {
        composite: [
          "1f4f7"
        ],
        secondary: [
          "10f083"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "5.10.1",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Camera Retro",
    search: {
      terms: [
        "camera",
        "image",
        "img",
        "lens",
        "photo",
        "picture",
        "record",
        "shutter",
        "video"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f083",
    voted: false
  },
  "camera-rotate": {
    changes: [
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Camera Rotate",
    search: {
      terms: [
        "flip",
        "front-facing",
        "img",
        "photo",
        "selfie"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e0d8",
    voted: true
  },
  campground,
  "canadian-maple-leaf": {
    changes: [
      "5.6.0",
      "5.8.0"
    ],
    label: "Canadian Maple Leaf",
    search: {
      terms: [
        "canada",
        "flag",
        "flora",
        "nature",
        "plant"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f785",
    voted: false
  },
  "candy-cane": {
    aliases: {
      unicodes: {
        secondary: [
          "10f786"
        ]
      }
    },
    changes: [
      "5.6.0",
      "5.10.1",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Candy Cane",
    search: {
      terms: [
        "candy",
        "christmas",
        "holiday",
        "mint",
        "peppermint",
        "striped",
        "xmas"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f786",
    voted: false
  },
  cannabis,
  capsules,
  car,
  "car-battery": {
    aliases: {
      names: [
        "battery-car"
      ],
      unicodes: {
        secondary: [
          "10f5df"
        ]
      }
    },
    changes: [
      "5.2.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Car Battery",
    search: {
      terms: [
        "auto",
        "electric",
        "mechanic",
        "power"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5df",
    voted: false
  },
  "car-burst": {
    aliases: {
      names: [
        "car-crash"
      ],
      unicodes: {
        secondary: [
          "10f5e1"
        ]
      }
    },
    changes: [
      "5.2.0",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Car Burst",
    search: {
      terms: [
        "accident",
        "auto",
        "automobile",
        "insurance",
        "sedan",
        "transportation",
        "vehicle",
        "wreck"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5e1",
    voted: false
  },
  "car-on": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Car On",
    search: {
      terms: [
        "alarm",
        "car",
        "carjack",
        "warning"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4dd",
    voted: false
  },
  "car-rear": {
    aliases: {
      names: [
        "car-alt"
      ],
      unicodes: {
        secondary: [
          "10f5de"
        ]
      }
    },
    changes: [
      "5.2.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Car Rear",
    search: {
      terms: [
        "auto",
        "automobile",
        "sedan",
        "transportation",
        "travel",
        "vehicle"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5de",
    voted: false
  },
  "car-side": {
    aliases: {
      unicodes: {
        composite: [
          "1f697"
        ],
        secondary: [
          "10f5e4"
        ]
      }
    },
    changes: [
      "5.2.0",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Car Side",
    search: {
      terms: [
        "auto",
        "automobile",
        "car",
        "sedan",
        "transportation",
        "travel",
        "vehicle"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5e4",
    voted: false
  },
  "car-tunnel": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Car Tunnel",
    search: {
      terms: [
        "road",
        "tunnel"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4de",
    voted: false
  },
  caravan,
  "caret-down": {
    aliases: {
      unicodes: {
        secondary: [
          "10f0d7"
        ]
      }
    },
    changes: [
      "2.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Caret Down",
    search: {
      terms: [
        "arrow",
        "dropdown",
        "expand",
        "menu",
        "more",
        "triangle"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f0d7",
    voted: false
  },
  "caret-left": {
    aliases: {
      unicodes: {
        secondary: [
          "10f0d9"
        ]
      }
    },
    changes: [
      "2.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Caret Left",
    search: {
      terms: [
        "arrow",
        "back",
        "previous",
        "triangle"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f0d9",
    voted: false
  },
  "caret-right": {
    aliases: {
      unicodes: {
        secondary: [
          "10f0da"
        ]
      }
    },
    changes: [
      "2.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Caret Right",
    search: {
      terms: [
        "arrow",
        "forward",
        "next",
        "triangle"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f0da",
    voted: false
  },
  "caret-up": {
    aliases: {
      unicodes: {
        secondary: [
          "10f0d8"
        ]
      }
    },
    changes: [
      "2.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Caret Up",
    search: {
      terms: [
        "arrow",
        "collapse",
        "triangle",
        "upgrade"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f0d8",
    voted: false
  },
  carrot,
  "cart-arrow-down": {
    aliases: {
      unicodes: {
        secondary: [
          "10f218"
        ]
      }
    },
    changes: [
      "4.3.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Cart Arrow Down",
    search: {
      terms: [
        "download",
        "insert",
        "save",
        "shopping"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f218",
    voted: false
  },
  "cart-flatbed": {
    aliases: {
      names: [
        "dolly-flatbed"
      ],
      unicodes: {
        secondary: [
          "10f474"
        ]
      }
    },
    changes: [
      "5.0.7",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Cart Flatbed",
    search: {
      terms: [
        "carry",
        "inventory",
        "shipping",
        "transport"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f474",
    voted: false
  },
  "cart-flatbed-suitcase": {
    aliases: {
      names: [
        "luggage-cart"
      ],
      unicodes: {
        secondary: [
          "10f59d"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Cart Flatbed Suitcase",
    search: {
      terms: [
        "airport",
        "bag",
        "baggage",
        "suitcase",
        "travel"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f59d",
    voted: false
  },
  "cart-plus": {
    aliases: {
      unicodes: {
        secondary: [
          "10f217"
        ]
      }
    },
    changes: [
      "4.3.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Cart Plus",
    search: {
      terms: [
        "add",
        "create",
        "new",
        "positive",
        "shopping"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f217",
    voted: false
  },
  "cart-shopping": {
    aliases: {
      names: [
        "shopping-cart"
      ],
      unicodes: {
        composite: [
          "1f6d2"
        ],
        secondary: [
          "10f07a"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Cart Shopping",
    search: {
      terms: [
        "buy",
        "cart",
        "checkout",
        "grocery",
        "payment",
        "purchase",
        "shopping",
        "shopping cart",
        "trolley"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f07a",
    voted: false
  },
  "cash-register": {
    aliases: {
      unicodes: {
        secondary: [
          "10f788"
        ]
      }
    },
    changes: [
      "5.6.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Cash Register",
    search: {
      terms: [
        "buy",
        "cha-ching",
        "change",
        "checkout",
        "commerce",
        "leaerboard",
        "machine",
        "pay",
        "payment",
        "purchase",
        "store"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f788",
    voted: true
  },
  cat,
  "cc-amazon-pay": {
    changes: [
      "5.0.2"
    ],
    label: "Amazon Pay Credit Card",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f42d",
    voted: false
  },
  "cc-amex": {
    changes: [
      "4.2.0",
      "5.0.0",
      "5.7.0",
      "6.1.2",
      "6.5.0"
    ],
    label: "Cc Amex",
    search: {
      terms: [
        "amex"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f1f3",
    voted: false
  },
  "cc-apple-pay": {
    changes: [
      "5.0.0"
    ],
    label: "Apple Pay Credit Card",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f416",
    voted: false
  },
  "cc-diners-club": {
    changes: [
      "4.4.0",
      "5.0.0"
    ],
    label: "Diner's Club Credit Card",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f24c",
    voted: false
  },
  "cc-discover": {
    changes: [
      "4.2.0",
      "5.0.0"
    ],
    label: "Discover Credit Card",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f1f2",
    voted: false
  },
  "cc-jcb": {
    changes: [
      "4.4.0",
      "5.0.0"
    ],
    label: "JCB Credit Card",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f24b",
    voted: false
  },
  "cc-mastercard": {
    changes: [
      "4.2.0",
      "5.0.0"
    ],
    label: "MasterCard Credit Card",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f1f1",
    voted: false
  },
  "cc-paypal": {
    changes: [
      "4.2.0",
      "5.0.0"
    ],
    label: "Paypal Credit Card",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f1f4",
    voted: false
  },
  "cc-stripe": {
    changes: [
      "4.2.0",
      "5.0.0"
    ],
    label: "Stripe Credit Card",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f1f5",
    voted: false
  },
  "cc-visa": {
    changes: [
      "4.2.0",
      "5.0.0"
    ],
    label: "Visa Credit Card",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f1f0",
    voted: false
  },
  "cedi-sign": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Cedi Sign",
    search: {
      terms: [
        "Cedi Sign",
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e0df",
    voted: false
  },
  "cent-sign": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Cent Sign",
    search: {
      terms: [
        "Cent Sign",
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e3f5",
    voted: false
  },
  centercode,
  centos,
  certificate,
  chair,
  chalkboard,
  "chalkboard-user": {
    aliases: {
      names: [
        "chalkboard-teacher"
      ],
      unicodes: {
        secondary: [
          "10f51c"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Chalkboard User",
    search: {
      terms: [
        "blackboard",
        "instructor",
        "learning",
        "professor",
        "school",
        "uer",
        "whiteboard",
        "writing"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f51c",
    voted: false
  },
  "champagne-glasses": {
    aliases: {
      names: [
        "glass-cheers"
      ],
      unicodes: {
        composite: [
          "1f942"
        ],
        secondary: [
          "10f79f"
        ]
      }
    },
    changes: [
      "5.6.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Champagne Glasses",
    search: {
      terms: [
        "alcohol",
        "bar",
        "beverage",
        "celebrate",
        "celebration",
        "champagne",
        "clink",
        "clinking glasses",
        "drink",
        "glass",
        "holiday",
        "new year's eve",
        "party",
        "toast"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f79f",
    voted: false
  },
  "charging-station": {
    aliases: {
      unicodes: {
        secondary: [
          "10f5e7"
        ]
      }
    },
    changes: [
      "5.2.0",
      "5.10.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Charging Station",
    search: {
      terms: [
        "electric",
        "ev",
        "tesla",
        "vehicle"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5e7",
    voted: false
  },
  "chart-area": {
    aliases: {
      names: [
        "area-chart"
      ],
      unicodes: {
        secondary: [
          "10f1fe"
        ]
      }
    },
    changes: [
      "4.2.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Chart Area",
    search: {
      terms: [
        "analytics",
        "area",
        "chart",
        "graph",
        "performance",
        "revenue",
        "statistics"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f1fe",
    voted: false
  },
  "chart-bar": {
    aliases: {
      names: [
        "bar-chart"
      ],
      unicodes: {
        secondary: [
          "10f080"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "5.3.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Chart Bar",
    search: {
      terms: [
        "analytics",
        "bar",
        "chart",
        "graph",
        "performance",
        "statistics"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f080",
    voted: false
  },
  "chart-column": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Chart Column",
    search: {
      terms: [
        "bar",
        "bar chart",
        "chart",
        "graph",
        "performance",
        "revenue",
        "statistics",
        "track",
        "trend"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e0e3",
    voted: false
  },
  "chart-diagram": {
    changes: [
      "6.7.0"
    ],
    label: "Chart Diagram",
    search: {
      terms: [
        "algorithm",
        "analytics",
        "flow",
        "graph"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e695",
    voted: false
  },
  "chart-gantt": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Chart Gantt",
    search: {
      terms: [
        "chart",
        "graph",
        "performance",
        "statistics",
        "track",
        "trend"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e0e4",
    voted: false
  },
  "chart-line": {
    aliases: {
      names: [
        "line-chart"
      ],
      unicodes: {
        secondary: [
          "10f201"
        ]
      }
    },
    changes: [
      "4.2.0",
      "5.0.0",
      "5.3.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Chart Line",
    search: {
      terms: [
        "activity",
        "analytics",
        "chart",
        "dashboard",
        "gain",
        "graph",
        "increase",
        "line",
        "performance",
        "revenue",
        "statistics"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f201",
    voted: false
  },
  "chart-pie": {
    aliases: {
      names: [
        "pie-chart"
      ],
      unicodes: {
        secondary: [
          "10f200"
        ]
      }
    },
    changes: [
      "4.2.0",
      "5.0.0",
      "5.3.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Chart Pie",
    search: {
      terms: [
        "analytics",
        "chart",
        "diagram",
        "graph",
        "performance",
        "pie",
        "revenue",
        "statistics"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f200",
    voted: false
  },
  "chart-simple": {
    changes: [
      "6.0.0-beta3",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Chart Simple",
    search: {
      terms: [
        "analytics",
        "bar",
        "chart",
        "column",
        "graph",
        "performance",
        "revenue",
        "row",
        "statistics",
        "trend"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e473",
    voted: false
  },
  check,
  "check-double": {
    aliases: {
      unicodes: {
        secondary: [
          "10f560"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.8.2",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Check Double",
    search: {
      terms: [
        "accept",
        "agree",
        "checkmark",
        "confirm",
        "correct",
        "coupon",
        "done",
        "enable",
        "notice",
        "notification",
        "notify",
        "ok",
        "select",
        "select all",
        "success",
        "tick",
        "todo",
        "validate",
        "working"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f560",
    voted: true
  },
  "check-to-slot": {
    aliases: {
      names: [
        "vote-yea"
      ],
      unicodes: {
        secondary: [
          "10f772"
        ]
      }
    },
    changes: [
      "5.5.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Check To Slot",
    search: {
      terms: [
        "accept",
        "cast",
        "election",
        "enable",
        "politics",
        "positive",
        "validate",
        "voting",
        "working",
        "yes"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f772",
    voted: false
  },
  cheese,
  chess,
  "chess-bishop": {
    aliases: {
      unicodes: {
        composite: [
          "265d"
        ],
        secondary: [
          "10f43a"
        ]
      }
    },
    changes: [
      "5.0.5",
      "5.9.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Chess Bishop",
    search: {
      terms: [
        "Black Chess Bishop",
        "board",
        "checkmate",
        "game",
        "strategy"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f43a",
    voted: false
  },
  "chess-board": {
    aliases: {
      unicodes: {
        secondary: [
          "10f43c"
        ]
      }
    },
    changes: [
      "5.0.5",
      "5.7.0",
      "5.9.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Chess Board",
    search: {
      terms: [
        "board",
        "checkmate",
        "game",
        "strategy"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f43c",
    voted: false
  },
  "chess-king": {
    aliases: {
      unicodes: {
        composite: [
          "265a"
        ],
        secondary: [
          "10f43f"
        ]
      }
    },
    changes: [
      "5.0.5",
      "5.9.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Chess King",
    search: {
      terms: [
        "Black Chess King",
        "board",
        "checkmate",
        "game",
        "strategy"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f43f",
    voted: false
  },
  "chess-knight": {
    aliases: {
      unicodes: {
        composite: [
          "265e"
        ],
        secondary: [
          "10f441"
        ]
      }
    },
    changes: [
      "5.0.5",
      "5.9.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Chess Knight",
    search: {
      terms: [
        "Black Chess Knight",
        "board",
        "checkmate",
        "game",
        "horse",
        "strategy"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f441",
    voted: false
  },
  "chess-pawn": {
    aliases: {
      unicodes: {
        composite: [
          "265f"
        ],
        secondary: [
          "10f443"
        ]
      }
    },
    changes: [
      "5.0.5",
      "5.9.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Chess Pawn",
    search: {
      terms: [
        "board",
        "checkmate",
        "chess",
        "chess pawn",
        "dupe",
        "expendable",
        "game",
        "strategy"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f443",
    voted: false
  },
  "chess-queen": {
    aliases: {
      unicodes: {
        composite: [
          "265b"
        ],
        secondary: [
          "10f445"
        ]
      }
    },
    changes: [
      "5.0.5",
      "5.9.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Chess Queen",
    search: {
      terms: [
        "Black Chess Queen",
        "board",
        "checkmate",
        "game",
        "strategy"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f445",
    voted: false
  },
  "chess-rook": {
    aliases: {
      unicodes: {
        composite: [
          "265c"
        ],
        secondary: [
          "10f447"
        ]
      }
    },
    changes: [
      "5.0.5",
      "5.9.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Chess Rook",
    search: {
      terms: [
        "Black Chess Rook",
        "board",
        "castle",
        "checkmate",
        "game",
        "strategy"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f447",
    voted: false
  },
  "chevron-down": {
    aliases: {
      unicodes: {
        secondary: [
          "10f078"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Chevron Down",
    search: {
      terms: [
        "arrow",
        "download",
        "expand",
        "insert"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f078",
    voted: false
  },
  "chevron-left": {
    aliases: {
      unicodes: {
        composite: [
          "2329"
        ],
        secondary: [
          "10f053"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Chevron Left",
    search: {
      terms: [
        "Left-Pointing Angle Bracket",
        "arrow",
        "back",
        "bracket",
        "previous"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f053",
    voted: false
  },
  "chevron-right": {
    aliases: {
      unicodes: {
        composite: [
          "232a"
        ],
        secondary: [
          "10f054"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Chevron Right",
    search: {
      terms: [
        "Right-Pointing Angle Bracket",
        "arrow",
        "bracket",
        "forward",
        "next"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f054",
    voted: false
  },
  "chevron-up": {
    aliases: {
      unicodes: {
        secondary: [
          "10f077"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Chevron Up",
    search: {
      terms: [
        "arrow",
        "collapse",
        "upgrade",
        "upload"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f077",
    voted: false
  },
  child,
  "child-combatant": {
    aliases: {
      names: [
        "child-rifle"
      ]
    },
    changes: [
      "6.1.0",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Child Combatant",
    search: {
      terms: [
        "combatant"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4e0",
    voted: false
  },
  "child-dress": {
    changes: [
      "6.1.1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Child Dress",
    search: {
      terms: [
        "boy",
        "girl",
        "kid",
        "toddler",
        "uer",
        "young",
        "youth"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e59c",
    voted: false
  },
  "child-reaching": {
    changes: [
      "6.1.1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Child Reaching",
    search: {
      terms: [
        "boy",
        "girl",
        "kid",
        "toddler",
        "uer",
        "young",
        "youth"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e59d",
    voted: false
  },
  children,
  chrome,
  chromecast,
  church,
  circle,
  "circle-arrow-down": {
    aliases: {
      names: [
        "arrow-circle-down"
      ],
      unicodes: {
        secondary: [
          "10f0ab"
        ]
      }
    },
    changes: [
      "2.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle Arrow Down",
    search: {
      terms: [
        "download"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f0ab",
    voted: false
  },
  "circle-arrow-left": {
    aliases: {
      names: [
        "arrow-circle-left"
      ],
      unicodes: {
        secondary: [
          "10f0a8"
        ]
      }
    },
    changes: [
      "2.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle Arrow Left",
    search: {
      terms: [
        "back",
        "previous"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f0a8",
    voted: false
  },
  "circle-arrow-right": {
    aliases: {
      names: [
        "arrow-circle-right"
      ],
      unicodes: {
        secondary: [
          "10f0a9"
        ]
      }
    },
    changes: [
      "2.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle Arrow Right",
    search: {
      terms: [
        "forward",
        "next"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f0a9",
    voted: false
  },
  "circle-arrow-up": {
    aliases: {
      names: [
        "arrow-circle-up"
      ],
      unicodes: {
        secondary: [
          "10f0aa"
        ]
      }
    },
    changes: [
      "2.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle Arrow Up",
    search: {
      terms: [
        "upgrade",
        "upload"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f0aa",
    voted: false
  },
  "circle-check": {
    aliases: {
      names: [
        "check-circle"
      ],
      unicodes: {
        composite: [
          "f05d"
        ],
        secondary: [
          "10f058"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle Check",
    search: {
      terms: [
        "accept",
        "affected",
        "agree",
        "clear",
        "confirm",
        "correct",
        "coupon",
        "done",
        "enable",
        "ok",
        "select",
        "success",
        "tick",
        "todo",
        "validate",
        "working",
        "yes"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f058",
    voted: false
  },
  "circle-chevron-down": {
    aliases: {
      names: [
        "chevron-circle-down"
      ],
      unicodes: {
        secondary: [
          "10f13a"
        ]
      }
    },
    changes: [
      "3.1.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle Chevron Down",
    search: {
      terms: [
        "arrow",
        "download",
        "dropdown",
        "menu",
        "more"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f13a",
    voted: false
  },
  "circle-chevron-left": {
    aliases: {
      names: [
        "chevron-circle-left"
      ],
      unicodes: {
        secondary: [
          "10f137"
        ]
      }
    },
    changes: [
      "3.1.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle Chevron Left",
    search: {
      terms: [
        "arrow",
        "back",
        "previous"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f137",
    voted: false
  },
  "circle-chevron-right": {
    aliases: {
      names: [
        "chevron-circle-right"
      ],
      unicodes: {
        secondary: [
          "10f138"
        ]
      }
    },
    changes: [
      "3.1.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle Chevron Right",
    search: {
      terms: [
        "arrow",
        "forward",
        "next"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f138",
    voted: false
  },
  "circle-chevron-up": {
    aliases: {
      names: [
        "chevron-circle-up"
      ],
      unicodes: {
        secondary: [
          "10f139"
        ]
      }
    },
    changes: [
      "3.1.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle Chevron Up",
    search: {
      terms: [
        "arrow",
        "collapse",
        "upgrade",
        "upload"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f139",
    voted: false
  },
  "circle-dollar-to-slot": {
    aliases: {
      names: [
        "donate"
      ],
      unicodes: {
        secondary: [
          "10f4b9"
        ]
      }
    },
    changes: [
      "5.0.9",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle Dollar To Slot",
    search: {
      terms: [
        "contribute",
        "generosity",
        "gift",
        "give",
        "premium"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f4b9",
    voted: false
  },
  "circle-dot": {
    aliases: {
      names: [
        "dot-circle"
      ],
      unicodes: {
        composite: [
          "1f518"
        ],
        secondary: [
          "10f192"
        ]
      }
    },
    changes: [
      "4.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle Dot",
    search: {
      terms: [
        "bullseye",
        "button",
        "geometric",
        "notification",
        "radio",
        "radio button",
        "target"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f192",
    voted: false
  },
  "circle-down": {
    aliases: {
      names: [
        "arrow-alt-circle-down"
      ],
      unicodes: {
        composite: [
          "f01a"
        ],
        secondary: [
          "10f358"
        ]
      }
    },
    changes: [
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle Down",
    search: {
      terms: [
        "arrow-circle-o-down",
        "download"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f358",
    voted: false
  },
  "circle-exclamation": {
    aliases: {
      names: [
        "exclamation-circle"
      ],
      unicodes: {
        secondary: [
          "10f06a"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle Exclamation",
    search: {
      terms: [
        "affect",
        "alert",
        "attention",
        "damage",
        "danger",
        "error",
        "failed",
        "important",
        "notice",
        "notification",
        "notify",
        "problem",
        "required",
        "warning"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f06a",
    voted: false
  },
  "circle-h": {
    aliases: {
      names: [
        "hospital-symbol"
      ],
      unicodes: {
        composite: [
          "24bd"
        ],
        secondary: [
          "10f47e"
        ]
      }
    },
    changes: [
      "5.0.7",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle H",
    search: {
      terms: [
        "Circled Latin Capital Letter H",
        "clinic",
        "covid-19",
        "emergency",
        "letter",
        "map"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f47e",
    voted: false
  },
  "circle-half-stroke": {
    aliases: {
      names: [
        "adjust"
      ],
      unicodes: {
        composite: [
          "25d0"
        ],
        secondary: [
          "10f042"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "5.10.2",
      "5.11.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle Half Stroke",
    search: {
      terms: [
        "Circle with Left Half Black",
        "adjust",
        "chart",
        "contrast",
        "dark",
        "fill",
        "light",
        "pie",
        "progress",
        "saturation"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f042",
    voted: false
  },
  "circle-info": {
    aliases: {
      names: [
        "info-circle"
      ],
      unicodes: {
        secondary: [
          "10f05a"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle Info",
    search: {
      terms: [
        "details",
        "help",
        "information",
        "more",
        "support"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f05a",
    voted: false
  },
  "circle-left": {
    aliases: {
      names: [
        "arrow-alt-circle-left"
      ],
      unicodes: {
        composite: [
          "f190"
        ],
        secondary: [
          "10f359"
        ]
      }
    },
    changes: [
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle Left",
    search: {
      terms: [
        "arrow-circle-o-left",
        "back",
        "previous"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f359",
    voted: false
  },
  "circle-minus": {
    aliases: {
      names: [
        "minus-circle"
      ],
      unicodes: {
        secondary: [
          "10f056"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle Minus",
    search: {
      terms: [
        "delete",
        "hide",
        "negative",
        "remove",
        "shape",
        "trash"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f056",
    voted: false
  },
  "circle-nodes": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle Nodes",
    search: {
      terms: [
        "cluster",
        "connect",
        "network"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4e2",
    voted: false
  },
  "circle-notch": {
    aliases: {
      unicodes: {
        secondary: [
          "10f1ce"
        ]
      }
    },
    changes: [
      "4.1.0",
      "5.0.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle Notch",
    search: {
      terms: [
        "circle-o-notch",
        "diameter",
        "dot",
        "ellipse",
        "round",
        "spinner"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f1ce",
    voted: false
  },
  "circle-pause": {
    aliases: {
      names: [
        "pause-circle"
      ],
      unicodes: {
        composite: [
          "f28c"
        ],
        secondary: [
          "10f28b"
        ]
      }
    },
    changes: [
      "4.5.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle Pause",
    search: {
      terms: [
        "hold",
        "wait"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f28b",
    voted: false
  },
  "circle-play": {
    aliases: {
      names: [
        "play-circle"
      ],
      unicodes: {
        composite: [
          "f01d"
        ],
        secondary: [
          "10f144"
        ]
      }
    },
    changes: [
      "3.1.0",
      "5.0.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle Play",
    search: {
      terms: [
        "audio",
        "music",
        "playing",
        "sound",
        "start",
        "video"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f144",
    voted: false
  },
  "circle-plus": {
    aliases: {
      names: [
        "plus-circle"
      ],
      unicodes: {
        secondary: [
          "10f055"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle Plus",
    search: {
      terms: [
        "add",
        "create",
        "expand",
        "new",
        "positive",
        "shape"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f055",
    voted: false
  },
  "circle-question": {
    aliases: {
      names: [
        "question-circle"
      ],
      unicodes: {
        composite: [
          "f29c"
        ],
        secondary: [
          "10f059"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle Question",
    search: {
      terms: [
        "faq",
        "help",
        "information",
        "support",
        "unknown"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f059",
    voted: false
  },
  "circle-radiation": {
    aliases: {
      names: [
        "radiation-alt"
      ],
      unicodes: {
        composite: [
          "2622"
        ],
        secondary: [
          "10f7ba"
        ]
      }
    },
    changes: [
      "5.6.0",
      "5.8.2",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle Radiation",
    search: {
      terms: [
        "danger",
        "dangerous",
        "deadly",
        "hazard",
        "nuclear",
        "radioactive",
        "sign",
        "warning"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f7ba",
    voted: true
  },
  "circle-right": {
    aliases: {
      names: [
        "arrow-alt-circle-right"
      ],
      unicodes: {
        composite: [
          "f18e"
        ],
        secondary: [
          "10f35a"
        ]
      }
    },
    changes: [
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle Right",
    search: {
      terms: [
        "arrow-circle-o-right",
        "forward",
        "next"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f35a",
    voted: false
  },
  "circle-stop": {
    aliases: {
      names: [
        "stop-circle"
      ],
      unicodes: {
        composite: [
          "f28e"
        ],
        secondary: [
          "10f28d"
        ]
      }
    },
    changes: [
      "4.5.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle Stop",
    search: {
      terms: [
        "block",
        "box",
        "circle",
        "square"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f28d",
    voted: false
  },
  "circle-up": {
    aliases: {
      names: [
        "arrow-alt-circle-up"
      ],
      unicodes: {
        composite: [
          "f01b"
        ],
        secondary: [
          "10f35b"
        ]
      }
    },
    changes: [
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle Up",
    search: {
      terms: [
        "arrow-circle-o-up",
        "upgrade"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f35b",
    voted: false
  },
  "circle-user": {
    aliases: {
      names: [
        "user-circle"
      ],
      unicodes: {
        composite: [
          "f2be"
        ],
        secondary: [
          "10f2bd"
        ]
      }
    },
    changes: [
      "4.7.0",
      "5.0.0",
      "5.0.3",
      "5.0.11",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle User",
    search: {
      terms: [
        "employee",
        "uer",
        "username",
        "users-people"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f2bd",
    voted: false
  },
  "circle-xmark": {
    aliases: {
      names: [
        "times-circle",
        "xmark-circle"
      ],
      unicodes: {
        composite: [
          "f05c"
        ],
        secondary: [
          "10f057"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Circle Xmark",
    search: {
      terms: [
        "close",
        "cross",
        "destroy",
        "exit",
        "incorrect",
        "notice",
        "notification",
        "notify",
        "problem",
        "uncheck",
        "wrong",
        "x"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f057",
    voted: false
  },
  city,
  clapperboard,
  clipboard,
  "clipboard-check": {
    aliases: {
      unicodes: {
        secondary: [
          "10f46c"
        ]
      }
    },
    changes: [
      "5.0.7",
      "6.0.0-beta1",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Clipboard Check",
    search: {
      terms: [
        "accept",
        "agree",
        "confirm",
        "coupon",
        "done",
        "enable",
        "ok",
        "select",
        "success",
        "tick",
        "todo",
        "validate",
        "working",
        "yes"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f46c",
    voted: false
  },
  "clipboard-list": {
    aliases: {
      unicodes: {
        secondary: [
          "10f46d"
        ]
      }
    },
    changes: [
      "5.0.7",
      "6.0.0-beta1",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Clipboard List",
    search: {
      terms: [
        "cheatsheet",
        "checklist",
        "completed",
        "done",
        "finished",
        "intinerary",
        "ol",
        "schedule",
        "summary",
        "survey",
        "tick",
        "todo",
        "ul",
        "wishlist"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f46d",
    voted: false
  },
  "clipboard-question": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Clipboard Question",
    search: {
      terms: [
        "assistance",
        "faq",
        "interview",
        "query",
        "question"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4e3",
    voted: false
  },
  "clipboard-user": {
    aliases: {
      unicodes: {
        secondary: [
          "10f7f3"
        ]
      }
    },
    changes: [
      "5.7.0",
      "6.0.0-beta1",
      "6.1.0",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Clipboard User",
    search: {
      terms: [
        "attendance",
        "employee",
        "record",
        "roster",
        "staff",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f7f3",
    voted: false
  },
  clock,
  "clock-rotate-left": {
    aliases: {
      names: [
        "history"
      ],
      unicodes: {
        secondary: [
          "10f1da"
        ]
      }
    },
    changes: [
      "4.1.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Clock Rotate Left",
    search: {
      terms: [
        "Rewind",
        "clock",
        "pending",
        "reverse",
        "time",
        "time machine",
        "time travel",
        "waiting"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f1da",
    voted: false
  },
  clone,
  "closed-captioning": {
    aliases: {
      unicodes: {
        secondary: [
          "10f20a"
        ]
      }
    },
    changes: [
      "4.2.0",
      "5.0.0",
      "5.10.1",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Closed Captioning",
    search: {
      terms: [
        "cc",
        "deaf",
        "hearing",
        "subtitle",
        "subtitling",
        "text",
        "video"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f20a",
    voted: false
  },
  cloud,
  "cloud-arrow-down": {
    aliases: {
      names: [
        "cloud-download",
        "cloud-download-alt"
      ],
      unicodes: {
        composite: [
          "f381"
        ],
        primary: [
          "f381"
        ],
        secondary: [
          "10f0ed",
          "10f381"
        ]
      }
    },
    changes: [
      "3.0.0",
      "5.0.0",
      "5.0.11",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Cloud Arrow Down",
    search: {
      terms: [
        "download",
        "export",
        "save"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f0ed",
    voted: false
  },
  "cloud-arrow-up": {
    aliases: {
      names: [
        "cloud-upload",
        "cloud-upload-alt"
      ],
      unicodes: {
        composite: [
          "f382"
        ],
        primary: [
          "f382"
        ],
        secondary: [
          "10f0ee",
          "10f382"
        ]
      }
    },
    changes: [
      "3.0.0",
      "5.0.0",
      "5.0.11",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Cloud Arrow Up",
    search: {
      terms: [
        "import",
        "save",
        "upgrade",
        "upload"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f0ee",
    voted: false
  },
  "cloud-bolt": {
    aliases: {
      names: [
        "thunderstorm"
      ],
      unicodes: {
        composite: [
          "1f329"
        ],
        secondary: [
          "10f76c"
        ]
      }
    },
    changes: [
      "5.5.0",
      "6.0.0-beta1",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Cloud Bolt",
    search: {
      terms: [
        "bolt",
        "cloud",
        "cloud with lightning",
        "lightning",
        "precipitation",
        "rain",
        "storm",
        "weather"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f76c",
    voted: false
  },
  "cloud-meatball": {
    aliases: {
      unicodes: {
        secondary: [
          "10f73b"
        ]
      }
    },
    changes: [
      "5.5.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Cloud Meatball",
    search: {
      terms: [
        "FLDSMDFR",
        "food",
        "spaghetti",
        "storm"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f73b",
    voted: false
  },
  "cloud-moon": {
    aliases: {
      unicodes: {
        secondary: [
          "10f6c3"
        ]
      }
    },
    changes: [
      "5.4.0",
      "5.5.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Cloud Moon",
    search: {
      terms: [
        "crescent",
        "evening",
        "lunar",
        "night",
        "partly cloudy",
        "sky"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f6c3",
    voted: false
  },
  "cloud-moon-rain": {
    aliases: {
      unicodes: {
        secondary: [
          "10f73c"
        ]
      }
    },
    changes: [
      "5.5.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Cloud Moon Rain",
    search: {
      terms: [
        "crescent",
        "evening",
        "lunar",
        "night",
        "partly cloudy",
        "precipitation",
        "rain",
        "sky",
        "storm"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f73c",
    voted: false
  },
  "cloud-rain": {
    aliases: {
      unicodes: {
        composite: [
          "1f327",
          "26c6"
        ],
        secondary: [
          "10f73d"
        ]
      }
    },
    changes: [
      "5.5.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Cloud Rain",
    search: {
      terms: [
        "Rain",
        "cloud",
        "cloud with rain",
        "precipitation",
        "rain",
        "sky",
        "storm"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f73d",
    voted: false
  },
  "cloud-showers-heavy": {
    aliases: {
      unicodes: {
        secondary: [
          "10f740"
        ]
      }
    },
    changes: [
      "5.5.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Cloud Showers Heavy",
    search: {
      terms: [
        "precipitation",
        "rain",
        "sky",
        "storm"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f740",
    voted: false
  },
  "cloud-showers-water": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Cloud Showers Water",
    search: {
      terms: [
        "cloud",
        "deluge",
        "flood",
        "rain",
        "storm",
        "surge"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4e4",
    voted: false
  },
  "cloud-sun": {
    aliases: {
      unicodes: {
        composite: [
          "26c5"
        ],
        secondary: [
          "10f6c4"
        ]
      }
    },
    changes: [
      "5.4.0",
      "5.5.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Cloud Sun",
    search: {
      terms: [
        "clear",
        "cloud",
        "day",
        "daytime",
        "fall",
        "outdoors",
        "overcast",
        "partly cloudy",
        "sun",
        "sun behind cloud"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f6c4",
    voted: false
  },
  "cloud-sun-rain": {
    aliases: {
      unicodes: {
        composite: [
          "1f326"
        ],
        secondary: [
          "10f743"
        ]
      }
    },
    changes: [
      "5.5.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Cloud Sun Rain",
    search: {
      terms: [
        "cloud",
        "day",
        "overcast",
        "precipitation",
        "rain",
        "storm",
        "summer",
        "sun",
        "sun behind rain cloud",
        "sunshower"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f743",
    voted: false
  },
  cloudflare,
  cloudscale,
  cloudsmith,
  cloudversify,
  clover,
  cmplid,
  code,
  "code-branch": {
    aliases: {
      unicodes: {
        secondary: [
          "10f126"
        ]
      }
    },
    changes: [
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Code Branch",
    search: {
      terms: [
        "branch",
        "git",
        "github",
        "mysql",
        "rebase",
        "sql",
        "svn",
        "vcs",
        "version"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f126",
    voted: false
  },
  "code-commit": {
    aliases: {
      unicodes: {
        secondary: [
          "10f386"
        ]
      }
    },
    changes: [
      "5.0.0",
      "5.1.1",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Code Commit",
    search: {
      terms: [
        "commit",
        "git",
        "github",
        "hash",
        "rebase",
        "svn",
        "vcs",
        "version"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f386",
    voted: false
  },
  "code-compare": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Code Compare",
    search: {
      terms: [
        "compare",
        "git",
        "github",
        "svn",
        "version"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e13a",
    voted: false
  },
  "code-fork": {
    changes: [
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Code Fork",
    search: {
      terms: [
        "fork",
        "git",
        "github",
        "svn",
        "version"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e13b",
    voted: false
  },
  "code-merge": {
    aliases: {
      unicodes: {
        secondary: [
          "10f387"
        ]
      }
    },
    changes: [
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Code Merge",
    search: {
      terms: [
        "git",
        "github",
        "merge",
        "pr",
        "rebase",
        "svn",
        "vcs",
        "version"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f387",
    voted: false
  },
  "code-pull-request": {
    changes: [
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Code Pull Request",
    search: {
      terms: [
        "git",
        "github",
        "pr",
        "svn",
        "version"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e13c",
    voted: false
  },
  codepen,
  codiepie,
  coins,
  "colon-sign": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Colon Sign",
    search: {
      terms: [
        "Colon Sign",
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e140",
    voted: false
  },
  comment,
  "comment-dollar": {
    aliases: {
      unicodes: {
        secondary: [
          "10f651"
        ]
      }
    },
    changes: [
      "5.3.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Comment Dollar",
    search: {
      terms: [
        "answer",
        "bubble",
        "chat",
        "commenting",
        "conversation",
        "feedback",
        "message",
        "money",
        "note",
        "notification",
        "pay",
        "salary",
        "sms",
        "speech",
        "spend",
        "texting",
        "transfer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f651",
    voted: false
  },
  "comment-dots": {
    aliases: {
      names: [
        "commenting"
      ],
      unicodes: {
        composite: [
          "1f4ac",
          "f27b"
        ],
        secondary: [
          "10f4ad"
        ]
      }
    },
    changes: [
      "5.0.9",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Comment Dots",
    search: {
      terms: [
        "answer",
        "balloon",
        "bubble",
        "chat",
        "comic",
        "commenting",
        "conversation",
        "dialog",
        "feedback",
        "message",
        "more",
        "note",
        "notification",
        "reply",
        "request",
        "sms",
        "speech",
        "speech balloon",
        "texting"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f4ad",
    voted: false
  },
  "comment-medical": {
    aliases: {
      unicodes: {
        secondary: [
          "10f7f5"
        ]
      }
    },
    changes: [
      "5.7.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Comment Medical",
    search: {
      terms: [
        "advice",
        "answer",
        "bubble",
        "chat",
        "commenting",
        "conversation",
        "diagnose",
        "feedback",
        "message",
        "note",
        "notification",
        "prescription",
        "sms",
        "speech",
        "texting"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f7f5",
    voted: false
  },
  "comment-nodes": {
    changes: [
      "6.7.0"
    ],
    label: "Comment Nodes",
    search: {
      terms: [
        "ai",
        "artificial intelligence",
        "cluster",
        "language",
        "model",
        "network",
        "neuronal"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e696",
    voted: false
  },
  "comment-slash": {
    aliases: {
      unicodes: {
        secondary: [
          "10f4b3"
        ]
      }
    },
    changes: [
      "5.0.9",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Comment Slash",
    search: {
      terms: [
        "answer",
        "bubble",
        "cancel",
        "chat",
        "commenting",
        "conversation",
        "disabled",
        "feedback",
        "message",
        "mute",
        "note",
        "notification",
        "quiet",
        "sms",
        "speech",
        "texting"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f4b3",
    voted: false
  },
  "comment-sms": {
    aliases: {
      names: [
        "sms"
      ],
      unicodes: {
        secondary: [
          "10f7cd"
        ]
      }
    },
    changes: [
      "5.6.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Comment Sms",
    search: {
      terms: [
        "answer",
        "chat",
        "conversation",
        "message",
        "mobile",
        "notification",
        "phone",
        "sms",
        "texting"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f7cd",
    voted: true
  },
  comments,
  "comments-dollar": {
    aliases: {
      unicodes: {
        secondary: [
          "10f653"
        ]
      }
    },
    changes: [
      "5.3.0",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Comments Dollar",
    search: {
      terms: [
        "answer",
        "bubble",
        "chat",
        "commenting",
        "conversation",
        "feedback",
        "message",
        "money",
        "note",
        "notification",
        "pay",
        "salary",
        "sms",
        "speech",
        "spend",
        "texting",
        "transfer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f653",
    voted: false
  },
  "compact-disc": {
    aliases: {
      unicodes: {
        composite: [
          "1f4bf",
          "1f4c0",
          "1f5b8"
        ],
        secondary: [
          "10f51f"
        ]
      }
    },
    changes: [
      "5.0.13",
      "5.10.1",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Compact Disc",
    search: {
      terms: [
        "Optical Disc Icon",
        "album",
        "blu-ray",
        "bluray",
        "cd",
        "computer",
        "disc",
        "disk",
        "dvd",
        "media",
        "movie",
        "music",
        "optical",
        "optical disk",
        "record",
        "video",
        "vinyl"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f51f",
    voted: true
  },
  compass,
  "compass-drafting": {
    aliases: {
      names: [
        "drafting-compass"
      ],
      unicodes: {
        secondary: [
          "10f568"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Compass Drafting",
    search: {
      terms: [
        "design",
        "map",
        "mechanical drawing",
        "plot",
        "plotting"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f568",
    voted: false
  },
  compress,
  computer,
  "computer-mouse": {
    aliases: {
      names: [
        "mouse"
      ],
      unicodes: {
        composite: [
          "1f5b1"
        ],
        secondary: [
          "10f8cc"
        ]
      }
    },
    changes: [
      "5.11.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Computer Mouse",
    search: {
      terms: [
        "click",
        "computer",
        "computer mouse",
        "cursor",
        "input",
        "peripheral"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f8cc",
    voted: true
  },
  confluence,
  connectdevelop,
  contao,
  cookie,
  "cookie-bite": {
    aliases: {
      unicodes: {
        secondary: [
          "10f564"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Cookie Bite",
    search: {
      terms: [
        "baked good",
        "bitten",
        "chips",
        "chocolate",
        "eat",
        "snack",
        "sweet",
        "treat"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f564",
    voted: true
  },
  copy,
  copyright,
  "cotton-bureau": {
    changes: [
      "5.10.0"
    ],
    label: "Cotton Bureau",
    search: {
      terms: [
        "clothing",
        "t-shirts",
        "tshirts"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f89e",
    voted: false
  },
  couch,
  cow,
  cpanel,
  "creative-commons": {
    changes: [
      "4.4.0",
      "5.0.0",
      "5.0.11",
      "5.1.0"
    ],
    label: "Creative Commons",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f25e",
    voted: false
  },
  "creative-commons-by": {
    changes: [
      "5.0.11"
    ],
    label: "Creative Commons Attribution",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f4e7",
    voted: false
  },
  "creative-commons-nc": {
    changes: [
      "5.0.11"
    ],
    label: "Creative Commons Noncommercial",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f4e8",
    voted: false
  },
  "creative-commons-nc-eu": {
    changes: [
      "5.0.11"
    ],
    label: "Creative Commons Noncommercial (Euro Sign)",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f4e9",
    voted: false
  },
  "creative-commons-nc-jp": {
    changes: [
      "5.0.11"
    ],
    label: "Creative Commons Noncommercial (Yen Sign)",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f4ea",
    voted: false
  },
  "creative-commons-nd": {
    changes: [
      "5.0.11"
    ],
    label: "Creative Commons No Derivative Works",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f4eb",
    voted: false
  },
  "creative-commons-pd": {
    changes: [
      "5.0.11"
    ],
    label: "Creative Commons Public Domain",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f4ec",
    voted: false
  },
  "creative-commons-pd-alt": {
    changes: [
      "5.0.11"
    ],
    label: "Alternate Creative Commons Public Domain",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f4ed",
    voted: false
  },
  "creative-commons-remix": {
    changes: [
      "5.0.11"
    ],
    label: "Creative Commons Remix",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f4ee",
    voted: false
  },
  "creative-commons-sa": {
    changes: [
      "5.0.11"
    ],
    label: "Creative Commons Share Alike",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f4ef",
    voted: false
  },
  "creative-commons-sampling": {
    changes: [
      "5.0.11"
    ],
    label: "Creative Commons Sampling",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f4f0",
    voted: false
  },
  "creative-commons-sampling-plus": {
    changes: [
      "5.0.11"
    ],
    label: "Creative Commons Sampling +",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f4f1",
    voted: false
  },
  "creative-commons-share": {
    changes: [
      "5.0.11"
    ],
    label: "Creative Commons Share",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f4f2",
    voted: false
  },
  "creative-commons-zero": {
    changes: [
      "5.0.11",
      "5.4.0"
    ],
    label: "Creative Commons CC0",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f4f3",
    voted: false
  },
  "credit-card": {
    aliases: {
      names: [
        "credit-card-alt"
      ],
      unicodes: {
        composite: [
          "1f4b3",
          "f283"
        ],
        secondary: [
          "10f09d"
        ]
      }
    },
    changes: [
      "2.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Credit Card",
    search: {
      terms: [
        "buy",
        "card",
        "checkout",
        "credit",
        "credit card",
        "credit-card-alt",
        "debit",
        "money",
        "payment",
        "purchase"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f09d",
    voted: false
  },
  "critical-role": {
    changes: [
      "5.4.0",
      "5.8.0"
    ],
    label: "Critical Role",
    search: {
      terms: [
        "Dungeons & Dragons",
        "d&d",
        "dnd",
        "fantasy",
        "game",
        "gaming",
        "tabletop"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f6c9",
    voted: false
  },
  crop,
  "crop-simple": {
    aliases: {
      names: [
        "crop-alt"
      ],
      unicodes: {
        secondary: [
          "10f565"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Crop Simple",
    search: {
      terms: [
        "design",
        "frame",
        "mask",
        "modify",
        "resize",
        "shrink"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f565",
    voted: false
  },
  cross,
  crosshairs,
  crow,
  crown,
  crutch,
  "cruzeiro-sign": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Cruzeiro Sign",
    search: {
      terms: [
        "Cruzeiro Sign",
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e152",
    voted: false
  },
  css,
  css3,
  "css3-alt": {
    changes: [
      "5.0.0"
    ],
    label: "Alternate CSS3 Logo",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f38b",
    voted: false
  },
  cube,
  cubes,
  "cubes-stacked": {
    changes: [
      "6.1.0",
      "6.1.1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Cubes Stacked",
    search: {
      terms: [
        "blocks",
        "cubes",
        "sugar"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4e6",
    voted: false
  },
  cuttlefish,
  d,
  "d-and-d": {
    changes: [
      "5.0.0"
    ],
    label: "Dungeons & Dragons",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f38d",
    voted: false
  },
  "d-and-d-beyond": {
    changes: [
      "5.4.0"
    ],
    label: "D&D Beyond",
    search: {
      terms: [
        "Dungeons & Dragons",
        "d&d",
        "dnd",
        "fantasy",
        "gaming",
        "tabletop"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f6ca",
    voted: false
  },
  dailymotion,
  "dart-lang": {
    changes: [
      "6.6.0"
    ],
    label: "Dart Lang",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "e693",
    voted: false
  },
  dashcube,
  database,
  debian,
  deezer,
  "delete-left": {
    aliases: {
      names: [
        "backspace"
      ],
      unicodes: {
        composite: [
          "232b"
        ],
        secondary: [
          "10f55a"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Delete Left",
    search: {
      terms: [
        "Erase to the Left",
        "command",
        "delete",
        "erase",
        "keyboard",
        "undo"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f55a",
    voted: true
  },
  delicious,
  democrat,
  deploydog,
  deskpro,
  desktop,
  dev,
  deviantart,
  dharmachakra,
  dhl,
  "diagram-next": {
    changes: [
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Diagram Next",
    search: {
      terms: [
        "cells",
        "chart",
        "gantt",
        "row",
        "subtask",
        "successor",
        "table"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e476",
    voted: false
  },
  "diagram-predecessor": {
    changes: [
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Diagram Predecessor",
    search: {
      terms: [
        "cells",
        "chart",
        "gantt",
        "predecessor",
        "previous",
        "row",
        "subtask",
        "table"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e477",
    voted: false
  },
  "diagram-project": {
    aliases: {
      names: [
        "project-diagram"
      ],
      unicodes: {
        secondary: [
          "10f542"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Diagram Project",
    search: {
      terms: [
        "chart",
        "graph",
        "network",
        "pert",
        "statistics"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f542",
    voted: false
  },
  "diagram-successor": {
    changes: [
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Diagram Successor",
    search: {
      terms: [
        "cells",
        "chart",
        "gantt",
        "next",
        "row",
        "subtask",
        "successor",
        "table"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e47a",
    voted: false
  },
  diamond,
  "diamond-turn-right": {
    aliases: {
      names: [
        "directions"
      ],
      unicodes: {
        secondary: [
          "10f5eb"
        ]
      }
    },
    changes: [
      "5.2.0",
      "5.11.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Diamond Turn Right",
    search: {
      terms: [
        "map",
        "navigation",
        "sign",
        "turn"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5eb",
    voted: false
  },
  diaspora,
  dice,
  "dice-d20": {
    aliases: {
      unicodes: {
        secondary: [
          "10f6cf"
        ]
      }
    },
    changes: [
      "5.4.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Dice D20",
    search: {
      terms: [
        "Dungeons & Dragons",
        "chance",
        "d&d",
        "dnd",
        "fantasy",
        "gambling",
        "game",
        "roll"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f6cf",
    voted: true
  },
  "dice-d6": {
    aliases: {
      unicodes: {
        secondary: [
          "10f6d1"
        ]
      }
    },
    changes: [
      "5.4.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Dice D6",
    search: {
      terms: [
        "Dungeons & Dragons",
        "chance",
        "d&d",
        "dnd",
        "fantasy",
        "gambling",
        "game",
        "roll"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f6d1",
    voted: false
  },
  "dice-five": {
    aliases: {
      unicodes: {
        composite: [
          "2684"
        ],
        secondary: [
          "10f523"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Dice Five",
    search: {
      terms: [
        "Die Face-5",
        "chance",
        "gambling",
        "game",
        "roll"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f523",
    voted: true
  },
  "dice-four": {
    aliases: {
      unicodes: {
        composite: [
          "2683"
        ],
        secondary: [
          "10f524"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Dice Four",
    search: {
      terms: [
        "Die Face-4",
        "chance",
        "gambling",
        "game",
        "roll"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f524",
    voted: true
  },
  "dice-one": {
    aliases: {
      unicodes: {
        composite: [
          "2680"
        ],
        secondary: [
          "10f525"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Dice One",
    search: {
      terms: [
        "Die Face-1",
        "chance",
        "gambling",
        "game",
        "roll"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f525",
    voted: true
  },
  "dice-six": {
    aliases: {
      unicodes: {
        composite: [
          "2685"
        ],
        secondary: [
          "10f526"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Dice Six",
    search: {
      terms: [
        "Die Face-6",
        "chance",
        "gambling",
        "game",
        "roll"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f526",
    voted: true
  },
  "dice-three": {
    aliases: {
      unicodes: {
        composite: [
          "2682"
        ],
        secondary: [
          "10f527"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Dice Three",
    search: {
      terms: [
        "Die Face-3",
        "chance",
        "gambling",
        "game",
        "roll"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f527",
    voted: true
  },
  "dice-two": {
    aliases: {
      unicodes: {
        composite: [
          "2681"
        ],
        secondary: [
          "10f528"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Dice Two",
    search: {
      terms: [
        "Die Face-2",
        "chance",
        "gambling",
        "game",
        "roll"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f528",
    voted: true
  },
  digg,
  "digital-ocean": {
    changes: [
      "5.0.0",
      "5.7.0"
    ],
    label: "Digital Ocean",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f391",
    voted: false
  },
  discord,
  discourse,
  disease,
  display,
  divide,
  dna,
  dochub,
  docker,
  dog,
  "dollar-sign": {
    aliases: {
      names: [
        "dollar",
        "usd"
      ],
      unicodes: {
        composite: [
          "1f4b2",
          "f155"
        ],
        primary: [
          "f155"
        ],
        secondary: [
          "1024",
          "10f155"
        ]
      }
    },
    changes: [
      "3.2.0",
      "5.0.0",
      "5.0.9",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Dollar Sign",
    search: {
      terms: [
        "Dollar Sign",
        "coupon",
        "currency",
        "dollar",
        "heavy dollar sign",
        "investment",
        "money",
        "premium",
        "revenue",
        "salary"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "24",
    voted: false
  },
  dolly,
  "dong-sign": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Dong Sign",
    search: {
      terms: [
        "Dong Sign",
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e169",
    voted: false
  },
  "door-closed": {
    aliases: {
      unicodes: {
        composite: [
          "1f6aa"
        ],
        secondary: [
          "10f52a"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Door Closed",
    search: {
      terms: [
        "doo",
        "door",
        "enter",
        "exit",
        "locked",
        "privacy"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f52a",
    voted: true
  },
  "door-open": {
    aliases: {
      unicodes: {
        secondary: [
          "10f52b"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Door Open",
    search: {
      terms: [
        "enter",
        "exit",
        "welcome"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f52b",
    voted: true
  },
  dove,
  "down-left-and-up-right-to-center": {
    aliases: {
      names: [
        "compress-alt"
      ],
      unicodes: {
        secondary: [
          "10f422"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "5.12.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Down Left And Up Right To Center",
    search: {
      terms: [
        "collapse",
        "fullscreen",
        "minimize",
        "move",
        "resize",
        "scale",
        "shrink",
        "size",
        "smaller"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f422",
    voted: false
  },
  "down-long": {
    aliases: {
      names: [
        "long-arrow-alt-down"
      ],
      unicodes: {
        secondary: [
          "10f309"
        ]
      }
    },
    changes: [
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Down Long",
    search: {
      terms: [
        "download",
        "long-arrow-down"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f309",
    voted: false
  },
  download,
  draft2digital,
  dragon,
  "draw-polygon": {
    aliases: {
      unicodes: {
        secondary: [
          "10f5ee"
        ]
      }
    },
    changes: [
      "5.2.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Draw Polygon",
    search: {
      terms: [
        "anchors",
        "lines",
        "object",
        "render",
        "shape"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5ee",
    voted: false
  },
  dribbble,
  dropbox,
  droplet,
  "droplet-slash": {
    aliases: {
      names: [
        "tint-slash"
      ],
      unicodes: {
        secondary: [
          "10f5c7"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Droplet Slash",
    search: {
      terms: [
        "blood",
        "color",
        "disabled",
        "drop",
        "droplet",
        "raindrop",
        "waterdrop"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5c7",
    voted: false
  },
  drum,
  "drum-steelpan": {
    aliases: {
      unicodes: {
        secondary: [
          "10f56a"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Drum Steelpan",
    search: {
      terms: [
        "calypso",
        "instrument",
        "music",
        "percussion",
        "reggae",
        "snare",
        "sound",
        "steel",
        "tropical"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f56a",
    voted: false
  },
  "drumstick-bite": {
    aliases: {
      unicodes: {
        secondary: [
          "10f6d7"
        ]
      }
    },
    changes: [
      "5.4.0",
      "5.7.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Drumstick Bite",
    search: {
      terms: [
        "bone",
        "chicken",
        "leg",
        "meat",
        "poultry",
        "turkey"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f6d7",
    voted: false
  },
  drupal,
  dumbbell,
  dumpster,
  "dumpster-fire": {
    aliases: {
      unicodes: {
        secondary: [
          "10f794"
        ]
      }
    },
    changes: [
      "5.6.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.5.2",
      "6.6.0",
      "6.7.0"
    ],
    label: "Dumpster Fire",
    search: {
      terms: [
        "alley",
        "bin",
        "commercial",
        "danger",
        "dangerous",
        "euphemism",
        "flame",
        "heat",
        "hot",
        "trash",
        "waste"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f794",
    voted: true
  },
  dungeon,
  dyalog,
  e,
  "ear-deaf": {
    aliases: {
      names: [
        "deaf",
        "deafness",
        "hard-of-hearing"
      ],
      unicodes: {
        secondary: [
          "10f2a4"
        ]
      }
    },
    changes: [
      "4.6.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Ear Deaf",
    search: {
      terms: [
        "ear",
        "hearing",
        "sign language"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f2a4",
    voted: false
  },
  "ear-listen": {
    aliases: {
      names: [
        "assistive-listening-systems"
      ],
      unicodes: {
        secondary: [
          "10f2a2"
        ]
      }
    },
    changes: [
      "4.6.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Ear Listen",
    search: {
      terms: [
        "amplify",
        "audio",
        "deaf",
        "ear",
        "headset",
        "hearing",
        "sound"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f2a2",
    voted: false
  },
  earlybirds,
  "earth-africa": {
    aliases: {
      names: [
        "globe-africa"
      ],
      unicodes: {
        composite: [
          "1f30d"
        ],
        secondary: [
          "10f57c"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Earth Africa",
    search: {
      terms: [
        "africa",
        "all",
        "country",
        "earth",
        "europe",
        "global",
        "globe",
        "gps",
        "language",
        "localize",
        "location",
        "map",
        "online",
        "place",
        "planet",
        "translate",
        "travel",
        "world"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f57c",
    voted: false
  },
  "earth-americas": {
    aliases: {
      names: [
        "earth",
        "earth-america",
        "globe-americas"
      ],
      unicodes: {
        composite: [
          "1f30e"
        ],
        secondary: [
          "10f57d"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Earth Americas",
    search: {
      terms: [
        "all",
        "america",
        "country",
        "earth",
        "global",
        "globe",
        "gps",
        "language",
        "localize",
        "location",
        "map",
        "online",
        "place",
        "planet",
        "translate",
        "travel",
        "world"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f57d",
    voted: false
  },
  "earth-asia": {
    aliases: {
      names: [
        "globe-asia"
      ],
      unicodes: {
        composite: [
          "1f30f"
        ],
        secondary: [
          "10f57e"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Earth Asia",
    search: {
      terms: [
        "all",
        "asia",
        "australia",
        "country",
        "earth",
        "global",
        "globe",
        "gps",
        "language",
        "localize",
        "location",
        "map",
        "online",
        "place",
        "planet",
        "translate",
        "travel",
        "world"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f57e",
    voted: false
  },
  "earth-europe": {
    aliases: {
      names: [
        "globe-europe"
      ],
      unicodes: {
        secondary: [
          "10f7a2"
        ]
      }
    },
    changes: [
      "5.6.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Earth Europe",
    search: {
      terms: [
        "all",
        "country",
        "earth",
        "europe",
        "global",
        "globe",
        "gps",
        "language",
        "localize",
        "location",
        "map",
        "online",
        "place",
        "planet",
        "translate",
        "travel",
        "world"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f7a2",
    voted: true
  },
  "earth-oceania": {
    aliases: {
      names: [
        "globe-oceania"
      ]
    },
    changes: [
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Earth Oceania",
    search: {
      terms: [
        "all",
        "australia",
        "country",
        "earth",
        "global",
        "globe",
        "gps",
        "language",
        "localize",
        "location",
        "map",
        "melanesia",
        "micronesia",
        "new zealand",
        "online",
        "place",
        "planet",
        "polynesia",
        "translate",
        "travel",
        "world"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e47b",
    voted: false
  },
  ebay,
  edge,
  "edge-legacy": {
    changes: [
      "5.13.1",
      "5.14.0"
    ],
    label: "Edge Legacy Browser",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "e078",
    voted: false
  },
  egg,
  eject,
  elementor,
  elevator,
  ellipsis,
  "ellipsis-vertical": {
    aliases: {
      names: [
        "ellipsis-v"
      ],
      unicodes: {
        secondary: [
          "10f142"
        ]
      }
    },
    changes: [
      "3.1.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Ellipsis Vertical",
    search: {
      terms: [
        "bullet",
        "dots",
        "drag",
        "kebab",
        "list",
        "menu",
        "nav",
        "navigation",
        "ol",
        "reorder",
        "settings",
        "three dots",
        "ul"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f142",
    voted: false
  },
  ello,
  ember,
  empire,
  envelope,
  "envelope-circle-check": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Envelope Circle Check",
    search: {
      terms: [
        "check",
        "email",
        "enable",
        "envelope",
        "mail",
        "not affected",
        "ok",
        "okay",
        "read",
        "sent",
        "validate",
        "working"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4e8",
    voted: false
  },
  "envelope-open": {
    aliases: {
      unicodes: {
        composite: [
          "f2b7"
        ],
        secondary: [
          "10f2b6"
        ]
      }
    },
    changes: [
      "4.7.0",
      "5.0.0",
      "5.10.1",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Envelope Open",
    search: {
      terms: [
        "e-mail",
        "email",
        "letter",
        "mail",
        "message",
        "newsletter",
        "notification",
        "offer",
        "support"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f2b6",
    voted: false
  },
  "envelope-open-text": {
    aliases: {
      unicodes: {
        secondary: [
          "10f658"
        ]
      }
    },
    changes: [
      "5.3.0",
      "5.10.1",
      "5.12.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Envelope Open Text",
    search: {
      terms: [
        "e-mail",
        "email",
        "letter",
        "mail",
        "message",
        "newsletter",
        "notification",
        "offer",
        "support"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f658",
    voted: false
  },
  "envelopes-bulk": {
    aliases: {
      names: [
        "mail-bulk"
      ],
      unicodes: {
        secondary: [
          "10f674"
        ]
      }
    },
    changes: [
      "5.3.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Envelopes Bulk",
    search: {
      terms: [
        "archive",
        "envelope",
        "letter",
        "newsletter",
        "offer",
        "post office",
        "postal",
        "postcard",
        "send",
        "stamp",
        "usps"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f674",
    voted: false
  },
  envira,
  equals,
  eraser,
  erlang,
  ethereum,
  ethernet,
  etsy,
  "euro-sign": {
    aliases: {
      names: [
        "eur",
        "euro"
      ],
      unicodes: {
        composite: [
          "20ac"
        ],
        secondary: [
          "10f153"
        ]
      }
    },
    changes: [
      "3.2.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Euro Sign",
    search: {
      terms: [
        "Euro Sign",
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f153",
    voted: false
  },
  evernote,
  exclamation,
  expand,
  expeditedssl,
  explosion,
  eye,
  "eye-dropper": {
    aliases: {
      names: [
        "eye-dropper-empty",
        "eyedropper"
      ],
      unicodes: {
        secondary: [
          "10f1fb"
        ]
      }
    },
    changes: [
      "4.2.0",
      "5.0.0",
      "5.1.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Eye Dropper",
    search: {
      terms: [
        "beaker",
        "clone",
        "color",
        "copy",
        "eyedropper",
        "pipette"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f1fb",
    voted: false
  },
  "eye-low-vision": {
    aliases: {
      names: [
        "low-vision"
      ],
      unicodes: {
        secondary: [
          "10f2a8"
        ]
      }
    },
    changes: [
      "4.6.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Eye Low Vision",
    search: {
      terms: [
        "blind",
        "eye",
        "sight"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f2a8",
    voted: false
  },
  "eye-slash": {
    aliases: {
      unicodes: {
        secondary: [
          "10f070"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "5.7.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Eye Slash",
    search: {
      terms: [
        "blind",
        "disabled",
        "hide",
        "show",
        "toggle",
        "unseen",
        "views",
        "visible",
        "visiblity"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f070",
    voted: false
  },
  f,
  "face-angry": {
    aliases: {
      names: [
        "angry"
      ],
      unicodes: {
        composite: [
          "1f620"
        ],
        secondary: [
          "10f556"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Angry",
    search: {
      terms: [
        "angry",
        "angry face",
        "disapprove",
        "emoticon",
        "face",
        "mad",
        "upset"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f556",
    voted: false
  },
  "face-dizzy": {
    aliases: {
      names: [
        "dizzy"
      ],
      unicodes: {
        secondary: [
          "10f567"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Dizzy",
    search: {
      terms: [
        "dazed",
        "dead",
        "disapprove",
        "emoticon",
        "face"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f567",
    voted: false
  },
  "face-flushed": {
    aliases: {
      names: [
        "flushed"
      ],
      unicodes: {
        composite: [
          "1f633"
        ],
        secondary: [
          "10f579"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Flushed",
    search: {
      terms: [
        "dazed",
        "embarrassed",
        "emoticon",
        "face",
        "flushed",
        "flushed face"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f579",
    voted: false
  },
  "face-frown": {
    aliases: {
      names: [
        "frown"
      ],
      unicodes: {
        composite: [
          "2639"
        ],
        secondary: [
          "10f119"
        ]
      }
    },
    changes: [
      "3.1.0",
      "5.0.0",
      "5.0.9",
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Frown",
    search: {
      terms: [
        "disapprove",
        "emoticon",
        "face",
        "frown",
        "frowning face",
        "rating",
        "sad",
        "uer"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f119",
    voted: false
  },
  "face-frown-open": {
    aliases: {
      names: [
        "frown-open"
      ],
      unicodes: {
        composite: [
          "1f626"
        ],
        secondary: [
          "10f57a"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Frown Open",
    search: {
      terms: [
        "disapprove",
        "emoticon",
        "face",
        "frown",
        "frowning face with open mouth",
        "mouth",
        "open",
        "rating",
        "sad"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f57a",
    voted: false
  },
  "face-grimace": {
    aliases: {
      names: [
        "grimace"
      ],
      unicodes: {
        composite: [
          "1f62c"
        ],
        secondary: [
          "10f57f"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Grimace",
    search: {
      terms: [
        "cringe",
        "emoticon",
        "face",
        "grimace",
        "grimacing face",
        "teeth"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f57f",
    voted: false
  },
  "face-grin": {
    aliases: {
      names: [
        "grin"
      ],
      unicodes: {
        composite: [
          "1f600"
        ],
        secondary: [
          "10f580"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Grin",
    search: {
      terms: [
        "emoticon",
        "face",
        "grin",
        "grinning face",
        "laugh",
        "smile"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f580",
    voted: false
  },
  "face-grin-beam": {
    aliases: {
      names: [
        "grin-beam"
      ],
      unicodes: {
        composite: [
          "1f604"
        ],
        secondary: [
          "10f582"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Grin Beam",
    search: {
      terms: [
        "emoticon",
        "eye",
        "face",
        "grinning face with smiling eyes",
        "laugh",
        "mouth",
        "open",
        "smile"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f582",
    voted: false
  },
  "face-grin-beam-sweat": {
    aliases: {
      names: [
        "grin-beam-sweat"
      ],
      unicodes: {
        composite: [
          "1f605"
        ],
        secondary: [
          "10f583"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Grin Beam Sweat",
    search: {
      terms: [
        "cold",
        "embarass",
        "emoticon",
        "face",
        "grinning face with sweat",
        "open",
        "smile",
        "sweat"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f583",
    voted: false
  },
  "face-grin-hearts": {
    aliases: {
      names: [
        "grin-hearts"
      ],
      unicodes: {
        composite: [
          "1f60d"
        ],
        secondary: [
          "10f584"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Grin Hearts",
    search: {
      terms: [
        "emoticon",
        "eye",
        "face",
        "love",
        "smile",
        "smiling face with heart-eyes"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f584",
    voted: false
  },
  "face-grin-squint": {
    aliases: {
      names: [
        "grin-squint"
      ],
      unicodes: {
        composite: [
          "1f606"
        ],
        secondary: [
          "10f585"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Grin Squint",
    search: {
      terms: [
        "emoticon",
        "face",
        "grinning squinting face",
        "laugh",
        "mouth",
        "satisfied",
        "smile"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f585",
    voted: false
  },
  "face-grin-squint-tears": {
    aliases: {
      names: [
        "grin-squint-tears"
      ],
      unicodes: {
        composite: [
          "1f923"
        ],
        secondary: [
          "10f586"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Grin Squint Tears",
    search: {
      terms: [
        "emoticon",
        "face",
        "floor",
        "happy",
        "laugh",
        "rolling",
        "rolling on the floor laughing",
        "smile"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f586",
    voted: false
  },
  "face-grin-stars": {
    aliases: {
      names: [
        "grin-stars"
      ],
      unicodes: {
        composite: [
          "1f929"
        ],
        secondary: [
          "10f587"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Grin Stars",
    search: {
      terms: [
        "emoticon",
        "eyes",
        "face",
        "grinning",
        "quality",
        "star",
        "star-struck",
        "starry-eyed",
        "vip"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f587",
    voted: false
  },
  "face-grin-tears": {
    aliases: {
      names: [
        "grin-tears"
      ],
      unicodes: {
        composite: [
          "1f602"
        ],
        secondary: [
          "10f588"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Grin Tears",
    search: {
      terms: [
        "LOL",
        "emoticon",
        "face",
        "face with tears of joy",
        "joy",
        "laugh",
        "tear"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f588",
    voted: false
  },
  "face-grin-tongue": {
    aliases: {
      names: [
        "grin-tongue"
      ],
      unicodes: {
        composite: [
          "1f61b"
        ],
        secondary: [
          "10f589"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Grin Tongue",
    search: {
      terms: [
        "LOL",
        "emoticon",
        "face",
        "face with tongue",
        "tongue"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f589",
    voted: false
  },
  "face-grin-tongue-squint": {
    aliases: {
      names: [
        "grin-tongue-squint"
      ],
      unicodes: {
        composite: [
          "1f61d"
        ],
        secondary: [
          "10f58a"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Grin Tongue Squint",
    search: {
      terms: [
        "LOL",
        "emoticon",
        "eye",
        "face",
        "horrible",
        "squinting face with tongue",
        "taste",
        "tongue"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f58a",
    voted: false
  },
  "face-grin-tongue-wink": {
    aliases: {
      names: [
        "grin-tongue-wink"
      ],
      unicodes: {
        composite: [
          "1f61c"
        ],
        secondary: [
          "10f58b"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "5.12.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Grin Tongue Wink",
    search: {
      terms: [
        "LOL",
        "emoticon",
        "eye",
        "face",
        "joke",
        "tongue",
        "wink",
        "winking face with tongue"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f58b",
    voted: false
  },
  "face-grin-wide": {
    aliases: {
      names: [
        "grin-alt"
      ],
      unicodes: {
        composite: [
          "1f603"
        ],
        secondary: [
          "10f581"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Grin Wide",
    search: {
      terms: [
        "emoticon",
        "face",
        "grinning face with big eyes",
        "laugh",
        "mouth",
        "open",
        "smile"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f581",
    voted: false
  },
  "face-grin-wink": {
    aliases: {
      names: [
        "grin-wink"
      ],
      unicodes: {
        secondary: [
          "10f58c"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.1.1",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Grin Wink",
    search: {
      terms: [
        "emoticon",
        "face",
        "flirt",
        "laugh",
        "smile"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f58c",
    voted: false
  },
  "face-kiss": {
    aliases: {
      names: [
        "kiss"
      ],
      unicodes: {
        composite: [
          "1f617"
        ],
        secondary: [
          "10f596"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.1.1",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.5.2",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Kiss",
    search: {
      terms: [
        "beso",
        "emoticon",
        "face",
        "kiss",
        "kissing face",
        "love",
        "smooch"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f596",
    voted: false
  },
  "face-kiss-beam": {
    aliases: {
      names: [
        "kiss-beam"
      ],
      unicodes: {
        composite: [
          "1f619"
        ],
        secondary: [
          "10f597"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.5.2",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Kiss Beam",
    search: {
      terms: [
        "beso",
        "emoticon",
        "eye",
        "face",
        "kiss",
        "kissing face with smiling eyes",
        "love",
        "smile",
        "smooch"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f597",
    voted: false
  },
  "face-kiss-wink-heart": {
    aliases: {
      names: [
        "kiss-wink-heart"
      ],
      unicodes: {
        composite: [
          "1f618"
        ],
        secondary: [
          "10f598"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.5.2",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Kiss Wink Heart",
    search: {
      terms: [
        "beso",
        "emoticon",
        "face",
        "face blowing a kiss",
        "kiss",
        "love",
        "smooch"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f598",
    voted: false
  },
  "face-laugh": {
    aliases: {
      names: [
        "laugh"
      ],
      unicodes: {
        secondary: [
          "10f599"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Laugh",
    search: {
      terms: [
        "LOL",
        "emoticon",
        "face",
        "laugh",
        "smile"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f599",
    voted: false
  },
  "face-laugh-beam": {
    aliases: {
      names: [
        "laugh-beam"
      ],
      unicodes: {
        composite: [
          "1f601"
        ],
        secondary: [
          "10f59a"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Laugh Beam",
    search: {
      terms: [
        "LOL",
        "beaming face with smiling eyes",
        "emoticon",
        "eye",
        "face",
        "grin",
        "happy",
        "smile"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f59a",
    voted: false
  },
  "face-laugh-squint": {
    aliases: {
      names: [
        "laugh-squint"
      ],
      unicodes: {
        secondary: [
          "10f59b"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Laugh Squint",
    search: {
      terms: [
        "LOL",
        "emoticon",
        "face",
        "happy",
        "smile"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f59b",
    voted: false
  },
  "face-laugh-wink": {
    aliases: {
      names: [
        "laugh-wink"
      ],
      unicodes: {
        secondary: [
          "10f59c"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Laugh Wink",
    search: {
      terms: [
        "LOL",
        "emoticon",
        "face",
        "happy",
        "smile"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f59c",
    voted: false
  },
  "face-meh": {
    aliases: {
      names: [
        "meh"
      ],
      unicodes: {
        composite: [
          "1f610"
        ],
        secondary: [
          "10f11a"
        ]
      }
    },
    changes: [
      "3.1.0",
      "5.0.0",
      "5.0.9",
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Meh",
    search: {
      terms: [
        "deadpan",
        "default",
        "emoticon",
        "face",
        "meh",
        "neutral",
        "neutral face",
        "rating",
        "uer"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f11a",
    voted: false
  },
  "face-meh-blank": {
    aliases: {
      names: [
        "meh-blank"
      ],
      unicodes: {
        composite: [
          "1f636"
        ],
        secondary: [
          "10f5a4"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Meh Blank",
    search: {
      terms: [
        "emoticon",
        "face",
        "face without mouth",
        "mouth",
        "neutral",
        "quiet",
        "rating",
        "silent"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f5a4",
    voted: false
  },
  "face-rolling-eyes": {
    aliases: {
      names: [
        "meh-rolling-eyes"
      ],
      unicodes: {
        composite: [
          "1f644"
        ],
        secondary: [
          "10f5a5"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Rolling Eyes",
    search: {
      terms: [
        "emoticon",
        "eyeroll",
        "eyes",
        "face",
        "face with rolling eyes",
        "neutral",
        "rating",
        "rolling"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f5a5",
    voted: false
  },
  "face-sad-cry": {
    aliases: {
      names: [
        "sad-cry"
      ],
      unicodes: {
        composite: [
          "1f62d"
        ],
        secondary: [
          "10f5b3"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Sad Cry",
    search: {
      terms: [
        "cry",
        "emoticon",
        "face",
        "loudly crying face",
        "sad",
        "sob",
        "tear",
        "tears"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f5b3",
    voted: false
  },
  "face-sad-tear": {
    aliases: {
      names: [
        "sad-tear"
      ],
      unicodes: {
        composite: [
          "1f622"
        ],
        secondary: [
          "10f5b4"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Sad Tear",
    search: {
      terms: [
        "cry",
        "crying face",
        "emoticon",
        "face",
        "sad",
        "tear",
        "tears"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f5b4",
    voted: false
  },
  "face-smile": {
    aliases: {
      names: [
        "smile"
      ],
      unicodes: {
        composite: [
          "1f642"
        ],
        secondary: [
          "10f118"
        ]
      }
    },
    changes: [
      "3.1.0",
      "5.0.0",
      "5.0.9",
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Smile",
    search: {
      terms: [
        "approve",
        "default",
        "emoticon",
        "face",
        "happy",
        "rating",
        "satisfied",
        "slightly smiling face",
        "smile",
        "uer"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f118",
    voted: false
  },
  "face-smile-beam": {
    aliases: {
      names: [
        "smile-beam"
      ],
      unicodes: {
        composite: [
          "1f60a"
        ],
        secondary: [
          "10f5b8"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Smile Beam",
    search: {
      terms: [
        "blush",
        "emoticon",
        "eye",
        "face",
        "happy",
        "positive",
        "smile",
        "smiling face with smiling eyes"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f5b8",
    voted: false
  },
  "face-smile-wink": {
    aliases: {
      names: [
        "smile-wink"
      ],
      unicodes: {
        composite: [
          "1f609"
        ],
        secondary: [
          "10f4da"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Smile Wink",
    search: {
      terms: [
        "emoticon",
        "face",
        "happy",
        "hint",
        "joke",
        "wink",
        "winking face"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f4da",
    voted: false
  },
  "face-surprise": {
    aliases: {
      names: [
        "surprise"
      ],
      unicodes: {
        composite: [
          "1f62e"
        ],
        secondary: [
          "10f5c2"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Surprise",
    search: {
      terms: [
        "emoticon",
        "face",
        "face with open mouth",
        "mouth",
        "open",
        "shocked",
        "sympathy"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f5c2",
    voted: false
  },
  "face-tired": {
    aliases: {
      names: [
        "tired"
      ],
      unicodes: {
        composite: [
          "1f62b"
        ],
        secondary: [
          "10f5c8"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Face Tired",
    search: {
      terms: [
        "angry",
        "emoticon",
        "face",
        "grumpy",
        "tired",
        "tired face",
        "upset"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f5c8",
    voted: false
  },
  facebook,
  "facebook-f": {
    changes: [
      "5.0.0",
      "5.8.2",
      "6.5.0"
    ],
    label: "Facebook F",
    search: {
      terms: [
        "fabook",
        "facebook",
        "fb"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f39e",
    voted: false
  },
  "facebook-messenger": {
    changes: [
      "5.0.0",
      "5.8.2",
      "5.9.0"
    ],
    label: "Facebook Messenger",
    search: {
      terms: [
        "fabook",
        "fb"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f39f",
    voted: false
  },
  fan,
  "fantasy-flight-games": {
    changes: [
      "5.4.0"
    ],
    label: "Fantasy Flight-games",
    search: {
      terms: [
        "Dungeons & Dragons",
        "d&d",
        "dnd",
        "fantasy",
        "game",
        "gaming",
        "tabletop"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f6dc",
    voted: false
  },
  faucet,
  "faucet-drip": {
    aliases: {
      unicodes: {
        composite: [
          "1f6b0"
        ],
        secondary: [
          "10e006"
        ]
      }
    },
    changes: [
      "5.12.0",
      "5.14.0",
      "6.0.0-beta1",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Faucet Drip",
    search: {
      terms: [
        "drinking",
        "drip",
        "house",
        "hygiene",
        "kitchen",
        "potable",
        "potable water",
        "sanitation",
        "sink",
        "water"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e006",
    voted: false
  },
  fax,
  feather,
  "feather-pointed": {
    aliases: {
      names: [
        "feather-alt"
      ],
      unicodes: {
        secondary: [
          "10f56b"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Feather Pointed",
    search: {
      terms: [
        "bird",
        "light",
        "plucked",
        "quill",
        "write"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f56b",
    voted: true
  },
  fedex,
  fedora,
  ferry,
  figma,
  file,
  "file-arrow-down": {
    aliases: {
      names: [
        "file-download"
      ],
      unicodes: {
        secondary: [
          "10f56d"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Arrow Down",
    search: {
      terms: [
        "archive",
        "document",
        "export",
        "insert",
        "save"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f56d",
    voted: true
  },
  "file-arrow-up": {
    aliases: {
      names: [
        "file-upload"
      ],
      unicodes: {
        secondary: [
          "10f574"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Arrow Up",
    search: {
      terms: [
        "document",
        "import",
        "page",
        "save",
        "upgrade"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f574",
    voted: true
  },
  "file-audio": {
    aliases: {
      unicodes: {
        secondary: [
          "10f1c7"
        ]
      }
    },
    changes: [
      "4.1.0",
      "5.0.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Audio",
    search: {
      terms: [
        "document",
        "mp3",
        "music",
        "page",
        "play",
        "sound"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f1c7",
    voted: false
  },
  "file-circle-check": {
    changes: [
      "6.0.0",
      "6.1.0",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Circle Check",
    search: {
      terms: [
        "document",
        "enable",
        "file",
        "not affected",
        "ok",
        "okay",
        "paper",
        "validate",
        "working"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e5a0",
    voted: false
  },
  "file-circle-exclamation": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Circle Exclamation",
    search: {
      terms: [
        "document",
        "failed",
        "file",
        "paper"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4eb",
    voted: false
  },
  "file-circle-minus": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Circle Minus",
    search: {
      terms: [
        "document",
        "file",
        "paper"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4ed",
    voted: false
  },
  "file-circle-plus": {
    aliases: {
      unicodes: {
        composite: [
          "e4ee"
        ]
      }
    },
    changes: [
      "6.0.0",
      "6.1.0",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Circle Plus",
    search: {
      terms: [
        "add",
        "document",
        "file",
        "new",
        "page",
        "paper",
        "pdf"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e494",
    voted: false
  },
  "file-circle-question": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Circle Question",
    search: {
      terms: [
        "document",
        "file",
        "paper"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4ef",
    voted: false
  },
  "file-circle-xmark": {
    changes: [
      "6.1.0",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Circle Xmark",
    search: {
      terms: [
        "document",
        "file",
        "paper",
        "uncheck"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e5a1",
    voted: false
  },
  "file-code": {
    aliases: {
      unicodes: {
        secondary: [
          "10f1c9"
        ]
      }
    },
    changes: [
      "4.1.0",
      "5.0.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Code",
    search: {
      terms: [
        "css",
        "development",
        "document",
        "html",
        "mysql",
        "sql"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f1c9",
    voted: false
  },
  "file-contract": {
    aliases: {
      unicodes: {
        secondary: [
          "10f56c"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Contract",
    search: {
      terms: [
        "agreement",
        "binding",
        "document",
        "legal",
        "signature",
        "username"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f56c",
    voted: false
  },
  "file-csv": {
    aliases: {
      unicodes: {
        secondary: [
          "10f6dd"
        ]
      }
    },
    changes: [
      "5.4.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Csv",
    search: {
      terms: [
        "document",
        "excel",
        "numbers",
        "spreadsheets",
        "table"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f6dd",
    voted: false
  },
  "file-excel": {
    aliases: {
      unicodes: {
        secondary: [
          "10f1c3"
        ]
      }
    },
    changes: [
      "4.1.0",
      "5.0.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Excel",
    search: {
      terms: [
        "csv",
        "document",
        "numbers",
        "spreadsheets",
        "table"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f1c3",
    voted: false
  },
  "file-export": {
    aliases: {
      names: [
        "arrow-right-from-file"
      ],
      unicodes: {
        secondary: [
          "10f56e"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.7.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Export",
    search: {
      terms: [
        "download",
        "save"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f56e",
    voted: true
  },
  "file-fragment": {
    changes: [
      "6.7.0"
    ],
    label: "File Fragment",
    search: {
      terms: [
        "block",
        "data",
        "partial",
        "piece"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e697",
    voted: false
  },
  "file-half-dashed": {
    changes: [
      "6.7.0"
    ],
    label: "File Half Dashed",
    search: {
      terms: [
        "data",
        "fragment",
        "partial",
        "piece"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e698",
    voted: false
  },
  "file-image": {
    aliases: {
      unicodes: {
        composite: [
          "1f5bb"
        ],
        secondary: [
          "10f1c5"
        ]
      }
    },
    changes: [
      "4.1.0",
      "5.0.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Image",
    search: {
      terms: [
        "Document with Picture",
        "document",
        "image",
        "img",
        "jpg",
        "photo",
        "png"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f1c5",
    voted: false
  },
  "file-import": {
    aliases: {
      names: [
        "arrow-right-to-file"
      ],
      unicodes: {
        secondary: [
          "10f56f"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.7.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Import",
    search: {
      terms: [
        "copy",
        "document",
        "insert",
        "send",
        "upload"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f56f",
    voted: true
  },
  "file-invoice": {
    aliases: {
      unicodes: {
        secondary: [
          "10f570"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Invoice",
    search: {
      terms: [
        "account",
        "bill",
        "charge",
        "document",
        "payment",
        "receipt"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f570",
    voted: true
  },
  "file-invoice-dollar": {
    aliases: {
      unicodes: {
        secondary: [
          "10f571"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Invoice Dollar",
    search: {
      terms: [
        "$",
        "account",
        "bill",
        "charge",
        "document",
        "dollar-sign",
        "money",
        "payment",
        "receipt",
        "revenue",
        "salary",
        "usd"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f571",
    voted: true
  },
  "file-lines": {
    aliases: {
      names: [
        "file-alt",
        "file-text"
      ],
      unicodes: {
        composite: [
          "1f5b9",
          "1f5ce",
          "f0f6"
        ],
        secondary: [
          "10f15c"
        ]
      }
    },
    changes: [
      "3.2.0",
      "5.0.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Lines",
    search: {
      terms: [
        "Document",
        "Document with Text",
        "document",
        "file-text",
        "invoice",
        "new",
        "page",
        "pdf"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f15c",
    voted: false
  },
  "file-medical": {
    aliases: {
      unicodes: {
        secondary: [
          "10f477"
        ]
      }
    },
    changes: [
      "5.0.7",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Medical",
    search: {
      terms: [
        "document",
        "health",
        "history",
        "prescription",
        "record"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f477",
    voted: false
  },
  "file-pdf": {
    aliases: {
      unicodes: {
        secondary: [
          "10f1c1"
        ]
      }
    },
    changes: [
      "4.1.0",
      "5.0.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.5.1",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Pdf",
    search: {
      terms: [
        "acrobat",
        "document",
        "preview",
        "save"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f1c1",
    voted: false
  },
  "file-pen": {
    aliases: {
      names: [
        "file-edit"
      ],
      unicodes: {
        composite: [
          "1f4dd"
        ],
        secondary: [
          "10f31c"
        ]
      }
    },
    changes: [
      "5.0.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Pen",
    search: {
      terms: [
        "edit",
        "memo",
        "modify",
        "pen",
        "pencil",
        "update",
        "write"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f31c",
    voted: false
  },
  "file-powerpoint": {
    aliases: {
      unicodes: {
        secondary: [
          "10f1c4"
        ]
      }
    },
    changes: [
      "4.1.0",
      "5.0.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Powerpoint",
    search: {
      terms: [
        "display",
        "document",
        "keynote",
        "presentation"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f1c4",
    voted: false
  },
  "file-prescription": {
    aliases: {
      unicodes: {
        secondary: [
          "10f572"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Prescription",
    search: {
      terms: [
        "document",
        "drugs",
        "medical",
        "medicine",
        "rx"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f572",
    voted: false
  },
  "file-shield": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Shield",
    search: {
      terms: [
        "antivirus",
        "data",
        "document",
        "protect",
        "safe",
        "safety",
        "secure"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4f0",
    voted: false
  },
  "file-signature": {
    aliases: {
      unicodes: {
        secondary: [
          "10f573"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Signature",
    search: {
      terms: [
        "John Hancock",
        "contract",
        "document",
        "name",
        "username"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f573",
    voted: true
  },
  "file-video": {
    aliases: {
      unicodes: {
        secondary: [
          "10f1c8"
        ]
      }
    },
    changes: [
      "4.1.0",
      "5.0.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Video",
    search: {
      terms: [
        "document",
        "m4v",
        "movie",
        "mp4",
        "play"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f1c8",
    voted: false
  },
  "file-waveform": {
    aliases: {
      names: [
        "file-medical-alt"
      ],
      unicodes: {
        secondary: [
          "10f478"
        ]
      }
    },
    changes: [
      "5.0.7",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Waveform",
    search: {
      terms: [
        "document",
        "health",
        "history",
        "prescription",
        "record"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f478",
    voted: false
  },
  "file-word": {
    aliases: {
      unicodes: {
        secondary: [
          "10f1c2"
        ]
      }
    },
    changes: [
      "4.1.0",
      "5.0.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Word",
    search: {
      terms: [
        "document",
        "edit",
        "page",
        "text",
        "writing"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f1c2",
    voted: false
  },
  "file-zipper": {
    aliases: {
      names: [
        "file-archive"
      ],
      unicodes: {
        secondary: [
          "10f1c6"
        ]
      }
    },
    changes: [
      "4.1.0",
      "5.0.0",
      "5.7.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "File Zipper",
    search: {
      terms: [
        ".zip",
        "bundle",
        "compress",
        "compression",
        "download",
        "zip"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f1c6",
    voted: false
  },
  "files-pinwheel": {
    changes: [
      "6.7.0"
    ],
    label: "Files Pinwheel",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "e69f",
    voted: false
  },
  fill,
  "fill-drip": {
    aliases: {
      unicodes: {
        secondary: [
          "10f576"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Fill Drip",
    search: {
      terms: [
        "bucket",
        "color",
        "drop",
        "paint",
        "paint bucket",
        "spill"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f576",
    voted: false
  },
  film,
  filter,
  "filter-circle-dollar": {
    aliases: {
      names: [
        "funnel-dollar"
      ],
      unicodes: {
        secondary: [
          "10f662"
        ]
      }
    },
    changes: [
      "5.3.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Filter Circle Dollar",
    search: {
      terms: [
        "filter",
        "money",
        "options",
        "premium",
        "separate",
        "sort"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f662",
    voted: false
  },
  "filter-circle-xmark": {
    changes: [
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Filter Circle Xmark",
    search: {
      terms: [
        "cancel",
        "funnel",
        "options",
        "remove",
        "separate",
        "sort",
        "uncheck"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e17b",
    voted: true
  },
  fingerprint,
  fire,
  "fire-burner": {
    changes: [
      "6.1.0",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.5.2",
      "6.6.0",
      "6.7.0"
    ],
    label: "Fire Burner",
    search: {
      terms: [
        "cook",
        "fire",
        "flame",
        "kitchen",
        "stove"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4f1",
    voted: false
  },
  "fire-extinguisher": {
    aliases: {
      unicodes: {
        composite: [
          "1f9ef"
        ],
        secondary: [
          "10f134"
        ]
      }
    },
    changes: [
      "3.1.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Fire Extinguisher",
    search: {
      terms: [
        "burn",
        "caliente",
        "extinguish",
        "fire",
        "fire extinguisher",
        "fire fighter",
        "flame",
        "heat",
        "hot",
        "quench",
        "rescue"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f134",
    voted: false
  },
  "fire-flame-curved": {
    aliases: {
      names: [
        "fire-alt"
      ],
      unicodes: {
        secondary: [
          "10f7e4"
        ]
      }
    },
    changes: [
      "5.6.3",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.5.1",
      "6.6.0",
      "6.7.0"
    ],
    label: "Fire Flame Curved",
    search: {
      terms: [
        "burn",
        "caliente",
        "flame",
        "heat",
        "hot",
        "popular"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f7e4",
    voted: false
  },
  "fire-flame-simple": {
    aliases: {
      names: [
        "burn"
      ],
      unicodes: {
        secondary: [
          "10f46a"
        ]
      }
    },
    changes: [
      "5.0.7",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Fire Flame Simple",
    search: {
      terms: [
        "caliente",
        "energy",
        "fire",
        "flame",
        "gas",
        "heat",
        "hot"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f46a",
    voted: false
  },
  firefox,
  "firefox-browser": {
    changes: [
      "5.12.0",
      "5.14.0"
    ],
    label: "Firefox Browser",
    search: {
      terms: [
        "browser"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "e007",
    voted: false
  },
  "first-order": {
    changes: [
      "4.6.0",
      "5.0.0"
    ],
    label: "First Order",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f2b0",
    voted: false
  },
  "first-order-alt": {
    changes: [
      "5.0.12"
    ],
    label: "Alternate First Order",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f50a",
    voted: false
  },
  firstdraft,
  fish,
  "fish-fins": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Fish Fins",
    search: {
      terms: [
        "fish",
        "fishery",
        "pisces",
        "seafood"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4f2",
    voted: false
  },
  flag,
  "flag-checkered": {
    aliases: {
      unicodes: {
        composite: [
          "1f3c1"
        ],
        secondary: [
          "10f11e"
        ]
      }
    },
    changes: [
      "3.1.0",
      "5.0.0",
      "5.7.0",
      "5.10.1",
      "6.0.0-beta1",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Flag Checkered",
    search: {
      terms: [
        "checkered",
        "chequered",
        "chequered flag",
        "finish",
        "notice",
        "notification",
        "notify",
        "pole",
        "racing",
        "report",
        "start",
        "symbol",
        "win"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f11e",
    voted: false
  },
  "flag-usa": {
    aliases: {
      unicodes: {
        secondary: [
          "10f74d"
        ]
      }
    },
    changes: [
      "5.5.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Flag Usa",
    search: {
      terms: [
        "betsy ross",
        "country",
        "fla",
        "flag: United States",
        "old glory",
        "stars",
        "stripes",
        "symbol"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f74d",
    voted: false
  },
  flask,
  "flask-vial": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Flask Vial",
    search: {
      terms: [
        "ampule",
        "beaker",
        "chemicals",
        "chemistry",
        "experiment",
        "experimental",
        "lab",
        "laboratory",
        "labs",
        "liquid",
        "potion",
        "science",
        "test",
        "test tube",
        "vial"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4f3",
    voted: false
  },
  flickr,
  flipboard,
  "floppy-disk": {
    aliases: {
      names: [
        "save"
      ],
      unicodes: {
        composite: [
          "1f4be",
          "1f5aa"
        ],
        secondary: [
          "10f0c7"
        ]
      }
    },
    changes: [
      "2.0.0",
      "5.0.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Floppy Disk",
    search: {
      terms: [
        "Black Hard Shell Floppy Disk",
        "computer",
        "disk",
        "download",
        "floppy",
        "floppy disk",
        "floppy-o"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f0c7",
    voted: false
  },
  "florin-sign": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Florin Sign",
    search: {
      terms: [
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e184",
    voted: false
  },
  flutter,
  fly,
  folder,
  "folder-closed": {
    changes: [
      "6.0.0-beta1",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Folder Closed",
    search: {
      terms: [
        "file"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "e185",
    voted: false
  },
  "folder-minus": {
    aliases: {
      unicodes: {
        secondary: [
          "10f65d"
        ]
      }
    },
    changes: [
      "5.3.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Folder Minus",
    search: {
      terms: [
        "archive",
        "delete",
        "directory",
        "document",
        "file",
        "negative",
        "remove"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f65d",
    voted: false
  },
  "folder-open": {
    aliases: {
      unicodes: {
        composite: [
          "1f4c2",
          "1f5c1",
          "f115"
        ],
        secondary: [
          "10f07c"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Folder Open",
    search: {
      terms: [
        "Open Folder",
        "archive",
        "directory",
        "document",
        "empty",
        "file",
        "folder",
        "new",
        "open",
        "open file folder"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f07c",
    voted: false
  },
  "folder-plus": {
    aliases: {
      unicodes: {
        secondary: [
          "10f65e"
        ]
      }
    },
    changes: [
      "5.3.0",
      "5.11.0",
      "5.12.1",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Folder Plus",
    search: {
      terms: [
        "add",
        "archive",
        "create",
        "directory",
        "document",
        "file",
        "new",
        "positive"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f65e",
    voted: false
  },
  "folder-tree": {
    aliases: {
      unicodes: {
        secondary: [
          "10f802"
        ]
      }
    },
    changes: [
      "5.7.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Folder Tree",
    search: {
      terms: [
        "archive",
        "directory",
        "document",
        "file",
        "search",
        "structure"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f802",
    voted: true
  },
  font,
  "font-awesome": {
    aliases: {
      names: [
        "font-awesome-flag",
        "font-awesome-logo-full"
      ],
      unicodes: {
        composite: [
          "f425",
          "f4e6"
        ],
        primary: [
          "f4e6"
        ],
        secondary: [
          "10f2b4",
          "10f4e6"
        ]
      }
    },
    changes: [
      "4.6.0",
      "5.0.0",
      "5.15.4",
      "6.0.0-beta1",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.5.2",
      "6.6.0",
      "6.7.0"
    ],
    label: "Font Awesome",
    search: {
      terms: [
        "awesome",
        "flag",
        "font",
        "icons",
        "typeface"
      ]
    },
    styles: [
      "solid",
      "regular",
      "brands"
    ],
    unicode: "f2b4",
    voted: false
  },
  fonticons,
  "fonticons-fi": {
    changes: [
      "5.0.0"
    ],
    label: "Fonticons Fi",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f3a2",
    voted: false
  },
  football,
  "fort-awesome": {
    changes: [
      "4.5.0",
      "5.0.0",
      "5.0.3"
    ],
    label: "Fort Awesome",
    search: {
      terms: [
        "castle"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f286",
    voted: false
  },
  "fort-awesome-alt": {
    changes: [
      "5.0.0"
    ],
    label: "Alternate Fort Awesome",
    search: {
      terms: [
        "castle"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f3a3",
    voted: false
  },
  forumbee,
  forward,
  "forward-fast": {
    aliases: {
      names: [
        "fast-forward"
      ],
      unicodes: {
        composite: [
          "23ed"
        ],
        secondary: [
          "10f050"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Forward Fast",
    search: {
      terms: [
        "arrow",
        "end",
        "last",
        "next",
        "next scene",
        "next track",
        "next track button",
        "quick",
        "triangle"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f050",
    voted: false
  },
  "forward-step": {
    aliases: {
      names: [
        "step-forward"
      ],
      unicodes: {
        secondary: [
          "10f051"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "5.10.2",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Forward Step",
    search: {
      terms: [
        "end",
        "last",
        "next"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f051",
    voted: false
  },
  foursquare,
  "franc-sign": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Franc Sign",
    search: {
      terms: [
        "French Franc Sign",
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e18f",
    voted: false
  },
  "free-code-camp": {
    changes: [
      "4.7.0",
      "5.0.0",
      "5.12.0"
    ],
    label: "freeCodeCamp",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f2c5",
    voted: false
  },
  freebsd,
  frog,
  fulcrum,
  futbol,
  g,
  "galactic-republic": {
    changes: [
      "5.0.12"
    ],
    label: "Galactic Republic",
    search: {
      terms: [
        "politics",
        "star wars"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f50c",
    voted: false
  },
  "galactic-senate": {
    changes: [
      "5.0.12"
    ],
    label: "Galactic Senate",
    search: {
      terms: [
        "star wars"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f50d",
    voted: false
  },
  gamepad,
  "gas-pump": {
    aliases: {
      unicodes: {
        composite: [
          "26fd"
        ],
        secondary: [
          "10f52f"
        ]
      }
    },
    changes: [
      "5.0.13",
      "5.10.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Gas Pump",
    search: {
      terms: [
        "car",
        "diesel",
        "fuel",
        "fuel pump",
        "fuelpump",
        "gas",
        "gasoline",
        "petrol",
        "pump",
        "station"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f52f",
    voted: true
  },
  gauge,
  "gauge-high": {
    aliases: {
      names: [
        "tachometer-alt",
        "tachometer-alt-fast"
      ],
      unicodes: {
        composite: [
          "f3fd"
        ],
        primary: [
          "f3fd"
        ],
        secondary: [
          "10f3fd",
          "10f625"
        ]
      }
    },
    changes: [
      "5.2.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Gauge High",
    search: {
      terms: [
        "dashboard",
        "fast",
        "odometer",
        "quick",
        "speed",
        "speedometer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f625",
    voted: false
  },
  "gauge-simple": {
    aliases: {
      names: [
        "gauge-simple-med",
        "tachometer-average"
      ],
      unicodes: {
        secondary: [
          "10f629"
        ]
      }
    },
    changes: [
      "5.2.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Gauge Simple",
    search: {
      terms: [
        "dashboard",
        "fast",
        "odometer",
        "speed",
        "speedometer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f629",
    voted: false
  },
  "gauge-simple-high": {
    aliases: {
      names: [
        "tachometer",
        "tachometer-fast"
      ],
      unicodes: {
        composite: [
          "f0e4"
        ],
        primary: [
          "f0e4"
        ],
        secondary: [
          "10f0e4",
          "10f62a"
        ]
      }
    },
    changes: [
      "5.2.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Gauge Simple High",
    search: {
      terms: [
        "dashboard",
        "fast",
        "odometer",
        "quick",
        "speed",
        "speedometer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f62a",
    voted: false
  },
  gavel,
  gear,
  gears,
  gem,
  genderless,
  "get-pocket": {
    changes: [
      "4.4.0",
      "5.0.0"
    ],
    label: "Get Pocket",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f265",
    voted: false
  },
  gg,
  "gg-circle": {
    changes: [
      "4.4.0",
      "5.0.0"
    ],
    label: "GG Currency Circle",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f261",
    voted: false
  },
  ghost,
  gift,
  gifts,
  git,
  "git-alt": {
    changes: [
      "5.8.2"
    ],
    label: "Git Alt",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f841",
    voted: false
  },
  github,
  "github-alt": {
    changes: [
      "3.0.0",
      "5.0.0"
    ],
    label: "Alternate GitHub",
    search: {
      terms: [
        "octocat"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f113",
    voted: false
  },
  gitkraken,
  gitlab,
  gitter,
  "glass-water": {
    changes: [
      "6.1.0",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Glass Water",
    search: {
      terms: [
        "potable",
        "water"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4f4",
    voted: false
  },
  "glass-water-droplet": {
    changes: [
      "6.1.0",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Glass Water Droplet",
    search: {
      terms: [
        "potable",
        "water"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4f5",
    voted: false
  },
  glasses,
  glide,
  "glide-g": {
    changes: [
      "4.6.0",
      "5.0.0"
    ],
    label: "Glide G",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f2a6",
    voted: false
  },
  globe,
  gofore,
  golang,
  "golf-ball-tee": {
    aliases: {
      names: [
        "golf-ball"
      ],
      unicodes: {
        secondary: [
          "10f450"
        ]
      }
    },
    changes: [
      "5.0.5",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Golf Ball Tee",
    search: {
      terms: [
        "caddy",
        "eagle",
        "putt",
        "tee"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f450",
    voted: false
  },
  goodreads,
  "goodreads-g": {
    changes: [
      "5.0.0"
    ],
    label: "Goodreads G",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f3a9",
    voted: false
  },
  google,
  "google-drive": {
    changes: [
      "5.0.0"
    ],
    label: "Google Drive",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f3aa",
    voted: false
  },
  "google-pay": {
    changes: [
      "5.13.1",
      "5.14.0"
    ],
    label: "Google Pay",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "e079",
    voted: false
  },
  "google-play": {
    changes: [
      "5.0.0"
    ],
    label: "Google Play",
    search: {
      terms: [
        "playstore"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f3ab",
    voted: false
  },
  "google-plus": {
    changes: [
      "4.6.0",
      "5.0.0",
      "5.13.1"
    ],
    label: "Google Plus",
    search: {
      terms: [
        "google-plus-circle",
        "google-plus-official"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f2b3",
    voted: false
  },
  "google-plus-g": {
    changes: [
      "2.0.0",
      "5.0.0"
    ],
    label: "Google Plus G",
    search: {
      terms: [
        "google-plus",
        "social network"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f0d5",
    voted: false
  },
  "google-scholar": {
    changes: [
      "6.5.0"
    ],
    label: "Google Scholar",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "e63b",
    voted: false
  },
  "google-wallet": {
    changes: [
      "4.2.0",
      "5.0.0"
    ],
    label: "Google Wallet",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f1ee",
    voted: false
  },
  gopuram,
  "graduation-cap": {
    aliases: {
      names: [
        "mortar-board"
      ],
      unicodes: {
        composite: [
          "1f393"
        ],
        secondary: [
          "10f19d"
        ]
      }
    },
    changes: [
      "4.1.0",
      "5.0.0",
      "5.2.0",
      "5.10.1",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Graduation Cap",
    search: {
      terms: [
        "cap",
        "celebration",
        "ceremony",
        "clothing",
        "college",
        "graduate",
        "graduation",
        "graduation cap",
        "hat",
        "learning",
        "school",
        "student"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f19d",
    voted: false
  },
  gratipay,
  grav,
  "greater-than": {
    aliases: {
      unicodes: {
        composite: [
          "f531"
        ],
        primary: [
          "f531"
        ],
        secondary: [
          "103e",
          "10f531"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Greater Than",
    search: {
      terms: [
        "Greater-Than Sign",
        "arithmetic",
        "compare",
        "math"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "3e",
    voted: true
  },
  "greater-than-equal": {
    aliases: {
      unicodes: {
        secondary: [
          "10f532"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Greater Than Equal",
    search: {
      terms: [
        "arithmetic",
        "compare",
        "math"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f532",
    voted: true
  },
  grip,
  "grip-lines": {
    aliases: {
      unicodes: {
        secondary: [
          "10f7a4"
        ]
      }
    },
    changes: [
      "5.6.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Grip Lines",
    search: {
      terms: [
        "affordance",
        "drag",
        "drop",
        "grab",
        "handle"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f7a4",
    voted: true
  },
  "grip-lines-vertical": {
    aliases: {
      unicodes: {
        secondary: [
          "10f7a5"
        ]
      }
    },
    changes: [
      "5.6.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Grip Lines Vertical",
    search: {
      terms: [
        "affordance",
        "drag",
        "drop",
        "grab",
        "handle"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f7a5",
    voted: true
  },
  "grip-vertical": {
    aliases: {
      unicodes: {
        secondary: [
          "10f58e"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Grip Vertical",
    search: {
      terms: [
        "affordance",
        "drag",
        "drop",
        "grab",
        "handle"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f58e",
    voted: true
  },
  gripfire,
  "group-arrows-rotate": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Group Arrows Rotate",
    search: {
      terms: [
        "community",
        "engagement",
        "spin",
        "sync"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4f6",
    voted: false
  },
  grunt,
  "guarani-sign": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Guarani Sign",
    search: {
      terms: [
        "Guarani Sign",
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e19a",
    voted: false
  },
  guilded,
  guitar,
  gulp,
  gun,
  h,
  "hacker-news": {
    changes: [
      "4.1.0",
      "5.0.0"
    ],
    label: "Hacker News",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f1d4",
    voted: false
  },
  hackerrank,
  hammer,
  hamsa,
  hand,
  "hand-back-fist": {
    aliases: {
      names: [
        "hand-rock"
      ],
      unicodes: {
        secondary: [
          "10f255"
        ]
      }
    },
    changes: [
      "4.4.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hand Back Fist",
    search: {
      terms: [
        "fist",
        "game",
        "roshambo"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f255",
    voted: false
  },
  "hand-dots": {
    aliases: {
      names: [
        "allergies"
      ],
      unicodes: {
        secondary: [
          "10f461"
        ]
      }
    },
    changes: [
      "5.0.7",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hand Dots",
    search: {
      terms: [
        "allergy",
        "freckles",
        "hand",
        "hives",
        "palm",
        "pox",
        "skin",
        "spots"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f461",
    voted: false
  },
  "hand-fist": {
    aliases: {
      names: [
        "fist-raised"
      ],
      unicodes: {
        composite: [
          "270a"
        ],
        secondary: [
          "10f6de"
        ]
      }
    },
    changes: [
      "5.4.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hand Fist",
    search: {
      terms: [
        "Dungeons & Dragons",
        "clenched",
        "d&d",
        "dnd",
        "fantasy",
        "fist",
        "hand",
        "ki",
        "monk",
        "punch",
        "raised fist",
        "resist",
        "strength",
        "unarmed combat"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f6de",
    voted: false
  },
  "hand-holding": {
    aliases: {
      unicodes: {
        secondary: [
          "10f4bd"
        ]
      }
    },
    changes: [
      "5.0.9",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hand Holding",
    search: {
      terms: [
        "carry",
        "lift"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f4bd",
    voted: false
  },
  "hand-holding-dollar": {
    aliases: {
      names: [
        "hand-holding-usd"
      ],
      unicodes: {
        secondary: [
          "10f4c0"
        ]
      }
    },
    changes: [
      "5.0.9",
      "5.11.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.4.1",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hand Holding Dollar",
    search: {
      terms: [
        "$",
        "carry",
        "coupon",
        "dollar sign",
        "donate",
        "donation",
        "giving",
        "investment",
        "lift",
        "money",
        "premium",
        "price",
        "revenue",
        "salary"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f4c0",
    voted: false
  },
  "hand-holding-droplet": {
    aliases: {
      names: [
        "hand-holding-water"
      ],
      unicodes: {
        secondary: [
          "10f4c1"
        ]
      }
    },
    changes: [
      "5.0.9",
      "5.13.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.4.1",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hand Holding Droplet",
    search: {
      terms: [
        "blood",
        "carry",
        "covid-19",
        "drought",
        "grow",
        "lift",
        "sanitation"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f4c1",
    voted: false
  },
  "hand-holding-hand": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.4.1",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hand Holding Hand",
    search: {
      terms: [
        "care",
        "give",
        "help",
        "hold",
        "protect"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4f7",
    voted: false
  },
  "hand-holding-heart": {
    aliases: {
      unicodes: {
        secondary: [
          "10f4be"
        ]
      }
    },
    changes: [
      "5.0.9",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.4.1",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hand Holding Heart",
    search: {
      terms: [
        "carry",
        "charity",
        "gift",
        "lift",
        "package",
        "wishlist"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f4be",
    voted: false
  },
  "hand-holding-medical": {
    aliases: {
      unicodes: {
        secondary: [
          "10e05c"
        ]
      }
    },
    changes: [
      "5.13.0",
      "5.14.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.4.1",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hand Holding Medical",
    search: {
      terms: [
        "care",
        "covid-19",
        "donate",
        "help"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e05c",
    voted: false
  },
  "hand-lizard": {
    aliases: {
      unicodes: {
        secondary: [
          "10f258"
        ]
      }
    },
    changes: [
      "4.4.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hand Lizard",
    search: {
      terms: [
        "game",
        "roshambo"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f258",
    voted: false
  },
  "hand-middle-finger": {
    aliases: {
      unicodes: {
        composite: [
          "1f595"
        ],
        secondary: [
          "10f806"
        ]
      }
    },
    changes: [
      "5.7.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hand Middle Finger",
    search: {
      terms: [
        "finger",
        "flip the bird",
        "gesture",
        "hand",
        "hate",
        "middle finger",
        "rude"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f806",
    voted: true
  },
  "hand-peace": {
    aliases: {
      unicodes: {
        composite: [
          "270c"
        ],
        secondary: [
          "10f25b"
        ]
      }
    },
    changes: [
      "4.4.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hand Peace",
    search: {
      terms: [
        "hand",
        "rest",
        "truce",
        "v",
        "victory",
        "victory hand"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f25b",
    voted: false
  },
  "hand-point-down": {
    aliases: {
      unicodes: {
        secondary: [
          "10f0a7"
        ]
      }
    },
    changes: [
      "2.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hand Point Down",
    search: {
      terms: [
        "finger",
        "hand-o-down",
        "point"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f0a7",
    voted: false
  },
  "hand-point-left": {
    aliases: {
      unicodes: {
        secondary: [
          "10f0a5"
        ]
      }
    },
    changes: [
      "2.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.4.1",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hand Point Left",
    search: {
      terms: [
        "back",
        "finger",
        "hand-o-left",
        "left",
        "point",
        "previous"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f0a5",
    voted: false
  },
  "hand-point-right": {
    aliases: {
      unicodes: {
        secondary: [
          "10f0a4"
        ]
      }
    },
    changes: [
      "2.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.4.1",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hand Point Right",
    search: {
      terms: [
        "finger",
        "forward",
        "hand-o-right",
        "next",
        "point",
        "right"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f0a4",
    voted: false
  },
  "hand-point-up": {
    aliases: {
      unicodes: {
        composite: [
          "261d"
        ],
        secondary: [
          "10f0a6"
        ]
      }
    },
    changes: [
      "2.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hand Point Up",
    search: {
      terms: [
        "finger",
        "hand",
        "hand-o-up",
        "index",
        "index pointing up",
        "point",
        "request",
        "up",
        "upgrade"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f0a6",
    voted: false
  },
  "hand-pointer": {
    aliases: {
      unicodes: {
        secondary: [
          "10f25a"
        ]
      }
    },
    changes: [
      "4.4.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hand Pointer",
    search: {
      terms: [
        "arrow",
        "cursor",
        "select"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f25a",
    voted: false
  },
  "hand-scissors": {
    aliases: {
      unicodes: {
        secondary: [
          "10f257"
        ]
      }
    },
    changes: [
      "4.4.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hand Scissors",
    search: {
      terms: [
        "cut",
        "game",
        "roshambo"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f257",
    voted: false
  },
  "hand-sparkles": {
    aliases: {
      unicodes: {
        secondary: [
          "10e05d"
        ]
      }
    },
    changes: [
      "5.13.0",
      "5.14.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.4.1",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hand Sparkles",
    search: {
      terms: [
        "clean",
        "covid-19",
        "hygiene",
        "magic",
        "palm",
        "soap",
        "wash"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e05d",
    voted: false
  },
  "hand-spock": {
    aliases: {
      unicodes: {
        composite: [
          "1f596"
        ],
        secondary: [
          "10f259"
        ]
      }
    },
    changes: [
      "4.4.0",
      "5.0.0",
      "5.12.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.4.1",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hand Spock",
    search: {
      terms: [
        "finger",
        "hand",
        "live long",
        "palm",
        "prosper",
        "salute",
        "spock",
        "star trek",
        "vulcan",
        "vulcan salute"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f259",
    voted: false
  },
  handcuffs,
  hands,
  "hands-asl-interpreting": {
    aliases: {
      names: [
        "american-sign-language-interpreting",
        "asl-interpreting",
        "hands-american-sign-language-interpreting"
      ],
      unicodes: {
        secondary: [
          "10f2a3"
        ]
      }
    },
    changes: [
      "4.6.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hands Asl Interpreting",
    search: {
      terms: [
        "asl",
        "deaf",
        "finger",
        "hand",
        "interpret",
        "speak"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f2a3",
    voted: false
  },
  "hands-bound": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hands Bound",
    search: {
      terms: [
        "abduction",
        "bound",
        "handcuff",
        "wrist"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4f9",
    voted: false
  },
  "hands-bubbles": {
    aliases: {
      names: [
        "hands-wash"
      ],
      unicodes: {
        secondary: [
          "10e05e"
        ]
      }
    },
    changes: [
      "5.13.0",
      "5.14.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.4.1",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hands Bubbles",
    search: {
      terms: [
        "covid-19",
        "hygiene",
        "soap",
        "wash"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e05e",
    voted: false
  },
  "hands-clapping": {
    changes: [
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hands Clapping",
    search: {
      terms: [
        "applause",
        "clap",
        "clapping hands",
        "hand"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e1a8",
    voted: false
  },
  "hands-holding": {
    aliases: {
      unicodes: {
        secondary: [
          "10f4c2"
        ]
      }
    },
    changes: [
      "5.0.9",
      "6.0.0-beta1",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hands Holding",
    search: {
      terms: [
        "carry",
        "hold",
        "lift"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f4c2",
    voted: false
  },
  "hands-holding-child": {
    changes: [
      "6.1.0",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.4.1",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hands Holding Child",
    search: {
      terms: [
        "care",
        "give",
        "help",
        "hold",
        "parent",
        "protect"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4fa",
    voted: false
  },
  "hands-holding-circle": {
    changes: [
      "6.1.0",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.4.1",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hands Holding Circle",
    search: {
      terms: [
        "circle",
        "gift",
        "protection"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4fb",
    voted: false
  },
  "hands-praying": {
    aliases: {
      names: [
        "praying-hands"
      ],
      unicodes: {
        secondary: [
          "10f684"
        ]
      }
    },
    changes: [
      "5.3.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hands Praying",
    search: {
      terms: [
        "kneel",
        "preach",
        "religion",
        "worship"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f684",
    voted: false
  },
  handshake,
  "handshake-angle": {
    aliases: {
      names: [
        "hands-helping"
      ],
      unicodes: {
        secondary: [
          "10f4c4"
        ]
      }
    },
    changes: [
      "5.0.9",
      "6.0.0-beta1",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Handshake Angle",
    search: {
      terms: [
        "aid",
        "assistance",
        "handshake",
        "partnership",
        "volunteering"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f4c4",
    voted: false
  },
  "handshake-simple": {
    aliases: {
      names: [
        "handshake-alt"
      ],
      unicodes: {
        composite: [
          "1f91d"
        ],
        secondary: [
          "10f4c6"
        ]
      }
    },
    changes: [
      "5.0.9",
      "6.0.0-beta1",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Handshake Simple",
    search: {
      terms: [
        "agreement",
        "greeting",
        "hand",
        "handshake",
        "meeting",
        "partnership",
        "shake"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f4c6",
    voted: false
  },
  "handshake-simple-slash": {
    aliases: {
      names: [
        "handshake-alt-slash"
      ],
      unicodes: {
        secondary: [
          "10e05f"
        ]
      }
    },
    changes: [
      "5.13.0",
      "5.14.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.4.1",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Handshake Simple Slash",
    search: {
      terms: [
        "broken",
        "covid-19",
        "disabled",
        "social distance"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e05f",
    voted: false
  },
  "handshake-slash": {
    aliases: {
      unicodes: {
        secondary: [
          "10e060"
        ]
      }
    },
    changes: [
      "5.13.0",
      "5.14.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.4.1",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Handshake Slash",
    search: {
      terms: [
        "broken",
        "covid-19",
        "disabled",
        "social distance"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e060",
    voted: false
  },
  hanukiah,
  "hard-drive": {
    aliases: {
      names: [
        "hdd"
      ],
      unicodes: {
        composite: [
          "1f5b4"
        ],
        secondary: [
          "10f0a0"
        ]
      }
    },
    changes: [
      "2.0.0",
      "5.0.0",
      "5.10.1",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hard Drive",
    search: {
      terms: [
        "Hard Disk",
        "cpu",
        "hard drive",
        "harddrive",
        "machine",
        "save",
        "storage"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f0a0",
    voted: false
  },
  hashnode,
  hashtag,
  "hat-cowboy": {
    aliases: {
      unicodes: {
        secondary: [
          "10f8c0"
        ]
      }
    },
    changes: [
      "5.11.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hat Cowboy",
    search: {
      terms: [
        "buckaroo",
        "horse",
        "jackeroo",
        "john b.",
        "old west",
        "pardner",
        "ranch",
        "rancher",
        "rodeo",
        "western",
        "wrangler"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f8c0",
    voted: false
  },
  "hat-cowboy-side": {
    aliases: {
      unicodes: {
        secondary: [
          "10f8c1"
        ]
      }
    },
    changes: [
      "5.11.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hat Cowboy Side",
    search: {
      terms: [
        "buckaroo",
        "horse",
        "jackeroo",
        "john b.",
        "old west",
        "pardner",
        "ranch",
        "rancher",
        "rodeo",
        "western",
        "wrangler"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f8c1",
    voted: false
  },
  "hat-wizard": {
    aliases: {
      unicodes: {
        secondary: [
          "10f6e8"
        ]
      }
    },
    changes: [
      "5.4.0",
      "5.11.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hat Wizard",
    search: {
      terms: [
        "Dungeons & Dragons",
        "accessory",
        "buckle",
        "clothing",
        "d&d",
        "dnd",
        "fantasy",
        "halloween",
        "head",
        "holiday",
        "mage",
        "magic",
        "pointy",
        "witch"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f6e8",
    voted: false
  },
  "head-side-cough": {
    aliases: {
      unicodes: {
        secondary: [
          "10e061"
        ]
      }
    },
    changes: [
      "5.13.0",
      "5.14.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Head Side Cough",
    search: {
      terms: [
        "cough",
        "covid-19",
        "germs",
        "lungs",
        "respiratory",
        "sick",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e061",
    voted: false
  },
  "head-side-cough-slash": {
    aliases: {
      unicodes: {
        secondary: [
          "10e062"
        ]
      }
    },
    changes: [
      "5.13.0",
      "5.14.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Head Side Cough Slash",
    search: {
      terms: [
        "cough",
        "covid-19",
        "disabled",
        "germs",
        "lungs",
        "respiratory",
        "sick",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e062",
    voted: false
  },
  "head-side-mask": {
    aliases: {
      unicodes: {
        secondary: [
          "10e063"
        ]
      }
    },
    changes: [
      "5.13.0",
      "5.14.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Head Side Mask",
    search: {
      terms: [
        "breath",
        "coronavirus",
        "covid-19",
        "filter",
        "flu",
        "infection",
        "pandemic",
        "respirator",
        "uer",
        "virus"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e063",
    voted: false
  },
  "head-side-virus": {
    aliases: {
      unicodes: {
        secondary: [
          "10e064"
        ]
      }
    },
    changes: [
      "5.13.0",
      "5.14.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Head Side Virus",
    search: {
      terms: [
        "cold",
        "coronavirus",
        "covid-19",
        "flu",
        "infection",
        "pandemic",
        "sick",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e064",
    voted: false
  },
  heading,
  headphones,
  "headphones-simple": {
    aliases: {
      names: [
        "headphones-alt"
      ],
      unicodes: {
        secondary: [
          "10f58f"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Headphones Simple",
    search: {
      terms: [
        "audio",
        "listen",
        "music",
        "sound",
        "speaker"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f58f",
    voted: true
  },
  headset,
  heart,
  "heart-circle-bolt": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Heart Circle Bolt",
    search: {
      terms: [
        "cardiogram",
        "ekg",
        "electric",
        "heart",
        "love",
        "pacemaker"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4fc",
    voted: false
  },
  "heart-circle-check": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Heart Circle Check",
    search: {
      terms: [
        "enable",
        "favorite",
        "heart",
        "love",
        "not affected",
        "ok",
        "okay",
        "validate",
        "working"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4fd",
    voted: false
  },
  "heart-circle-exclamation": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Heart Circle Exclamation",
    search: {
      terms: [
        "failed",
        "favorite",
        "heart",
        "love"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4fe",
    voted: false
  },
  "heart-circle-minus": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Heart Circle Minus",
    search: {
      terms: [
        "favorite",
        "heart",
        "love"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4ff",
    voted: false
  },
  "heart-circle-plus": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Heart Circle Plus",
    search: {
      terms: [
        "favorite",
        "heart",
        "love"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e500",
    voted: false
  },
  "heart-circle-xmark": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Heart Circle Xmark",
    search: {
      terms: [
        "favorite",
        "heart",
        "love",
        "uncheck"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e501",
    voted: false
  },
  "heart-crack": {
    aliases: {
      names: [
        "heart-broken"
      ],
      unicodes: {
        composite: [
          "1f494"
        ],
        secondary: [
          "10f7a9"
        ]
      }
    },
    changes: [
      "5.6.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Heart Crack",
    search: {
      terms: [
        "break",
        "breakup",
        "broken",
        "broken heart",
        "crushed",
        "dislike",
        "dumped",
        "grief",
        "love",
        "lovesick",
        "relationship",
        "sad"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f7a9",
    voted: true
  },
  "heart-pulse": {
    aliases: {
      names: [
        "heartbeat"
      ],
      unicodes: {
        secondary: [
          "10f21e"
        ]
      }
    },
    changes: [
      "4.3.0",
      "5.0.0",
      "5.0.7",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Heart Pulse",
    search: {
      terms: [
        "ekg",
        "electrocardiogram",
        "health",
        "lifeline",
        "vital signs"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f21e",
    voted: false
  },
  helicopter,
  "helicopter-symbol": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Helicopter Symbol",
    search: {
      terms: [
        "chopper",
        "helicopter",
        "landing pad",
        "whirlybird"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e502",
    voted: false
  },
  "helmet-safety": {
    aliases: {
      names: [
        "hard-hat",
        "hat-hard"
      ],
      unicodes: {
        secondary: [
          "10f807"
        ]
      }
    },
    changes: [
      "5.7.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Helmet Safety",
    search: {
      terms: [
        "construction",
        "hardhat",
        "helmet",
        "maintenance",
        "safety"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f807",
    voted: true
  },
  "helmet-un": {
    changes: [
      "6.1.0",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Helmet Un",
    search: {
      terms: [
        "helmet",
        "united nations"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e503",
    voted: false
  },
  "hexagon-nodes": {
    changes: [
      "6.7.0"
    ],
    label: "Hexagon Nodes",
    search: {
      terms: [
        "action",
        "ai",
        "artificial intelligence",
        "cluster",
        "graph",
        "language",
        "llm",
        "model",
        "network",
        "neuronal"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e699",
    voted: false
  },
  "hexagon-nodes-bolt": {
    changes: [
      "6.7.0"
    ],
    label: "Hexagon Nodes Bolt",
    search: {
      terms: [
        "LLM",
        "action",
        "ai",
        "artificial intelligence",
        "cluster",
        "graph",
        "language",
        "llm",
        "model",
        "network",
        "neuronal"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e69a",
    voted: false
  },
  highlighter,
  "hill-avalanche": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hill Avalanche",
    search: {
      terms: [
        "mudslide",
        "snow",
        "winter"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e507",
    voted: false
  },
  "hill-rockslide": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hill Rockslide",
    search: {
      terms: [
        "mudslide"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e508",
    voted: false
  },
  hippo,
  hips,
  "hire-a-helper": {
    changes: [
      "5.0.0"
    ],
    label: "HireAHelper",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f3b0",
    voted: false
  },
  hive,
  "hockey-puck": {
    aliases: {
      unicodes: {
        secondary: [
          "10f453"
        ]
      }
    },
    changes: [
      "5.0.5",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hockey Puck",
    search: {
      terms: [
        "ice",
        "nhl",
        "sport"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f453",
    voted: false
  },
  "holly-berry": {
    aliases: {
      unicodes: {
        secondary: [
          "10f7aa"
        ]
      }
    },
    changes: [
      "5.6.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Holly Berry",
    search: {
      terms: [
        "catwoman",
        "christmas",
        "decoration",
        "flora",
        "halle",
        "holiday",
        "ororo munroe",
        "plant",
        "storm",
        "xmas"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f7aa",
    voted: false
  },
  hooli,
  hornbill,
  horse,
  "horse-head": {
    aliases: {
      unicodes: {
        secondary: [
          "10f7ab"
        ]
      }
    },
    changes: [
      "5.6.0",
      "5.10.1",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Horse Head",
    search: {
      terms: [
        "equus",
        "fauna",
        "mammmal",
        "mare",
        "neigh",
        "pony"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f7ab",
    voted: false
  },
  hospital,
  "hospital-user": {
    aliases: {
      unicodes: {
        secondary: [
          "10f80d"
        ]
      }
    },
    changes: [
      "5.7.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hospital User",
    search: {
      terms: [
        "covid-19",
        "doctor",
        "network",
        "patient",
        "primary care",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f80d",
    voted: false
  },
  "hot-tub-person": {
    aliases: {
      names: [
        "hot-tub"
      ],
      unicodes: {
        secondary: [
          "10f593"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hot Tub Person",
    search: {
      terms: [
        "jacuzzi",
        "spa",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f593",
    voted: false
  },
  hotdog,
  hotel,
  hotjar,
  hourglass,
  "hourglass-end": {
    aliases: {
      names: [
        "hourglass-3"
      ],
      unicodes: {
        composite: [
          "231b"
        ],
        secondary: [
          "10f253"
        ]
      }
    },
    changes: [
      "4.4.0",
      "5.0.0",
      "5.10.1",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hourglass End",
    search: {
      terms: [
        "hour",
        "hourglass done",
        "minute",
        "pending",
        "sand",
        "stopwatch",
        "time",
        "timer",
        "waiting"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f253",
    voted: false
  },
  "hourglass-half": {
    aliases: {
      names: [
        "hourglass-2"
      ],
      unicodes: {
        secondary: [
          "10f252"
        ]
      }
    },
    changes: [
      "4.4.0",
      "5.0.0",
      "5.10.1",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hourglass Half",
    search: {
      terms: [
        "hour",
        "minute",
        "pending",
        "sand",
        "stopwatch",
        "time",
        "waiting"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f252",
    voted: false
  },
  "hourglass-start": {
    aliases: {
      names: [
        "hourglass-1"
      ],
      unicodes: {
        secondary: [
          "10f251"
        ]
      }
    },
    changes: [
      "4.4.0",
      "5.0.0",
      "5.10.1",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hourglass Start",
    search: {
      terms: [
        "hour",
        "minute",
        "sand",
        "stopwatch",
        "time",
        "waiting"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f251",
    voted: false
  },
  house,
  "house-chimney": {
    aliases: {
      names: [
        "home-lg"
      ],
      unicodes: {
        composite: [
          "f80b"
        ],
        primary: [
          "f80b"
        ],
        secondary: [
          "10f80b"
        ]
      }
    },
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "House Chimney",
    search: {
      terms: [
        "abode",
        "building",
        "chimney",
        "house",
        "main",
        "residence",
        "smokestack"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e3af",
    voted: false
  },
  "house-chimney-crack": {
    aliases: {
      names: [
        "house-damage"
      ],
      unicodes: {
        secondary: [
          "10f6f1"
        ]
      }
    },
    changes: [
      "5.4.0",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "House Chimney Crack",
    search: {
      terms: [
        "building",
        "devastation",
        "disaster",
        "earthquake",
        "home",
        "insurance"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f6f1",
    voted: false
  },
  "house-chimney-medical": {
    aliases: {
      names: [
        "clinic-medical"
      ],
      unicodes: {
        secondary: [
          "10f7f2"
        ]
      }
    },
    changes: [
      "5.7.0",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "House Chimney Medical",
    search: {
      terms: [
        "covid-19",
        "doctor",
        "general practitioner",
        "hospital",
        "infirmary",
        "medicine",
        "office",
        "outpatient"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f7f2",
    voted: false
  },
  "house-chimney-user": {
    aliases: {
      unicodes: {
        secondary: [
          "10e065"
        ]
      }
    },
    changes: [
      "5.13.0",
      "5.14.0",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "House Chimney User",
    search: {
      terms: [
        "covid-19",
        "home",
        "isolation",
        "quarantine",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e065",
    voted: false
  },
  "house-chimney-window": {
    aliases: {
      unicodes: {
        secondary: [
          "10e00d"
        ]
      }
    },
    changes: [
      "5.12.0",
      "5.14.0",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "House Chimney Window",
    search: {
      terms: [
        "abode",
        "building",
        "family",
        "home",
        "residence"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e00d",
    voted: false
  },
  "house-circle-check": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "House Circle Check",
    search: {
      terms: [
        "abode",
        "enable",
        "home",
        "house",
        "not affected",
        "ok",
        "okay",
        "validate",
        "working"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e509",
    voted: false
  },
  "house-circle-exclamation": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "House Circle Exclamation",
    search: {
      terms: [
        "abode",
        "affected",
        "failed",
        "home",
        "house"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e50a",
    voted: false
  },
  "house-circle-xmark": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "House Circle Xmark",
    search: {
      terms: [
        "abode",
        "destroy",
        "home",
        "house",
        "uncheck"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e50b",
    voted: false
  },
  "house-crack": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "House Crack",
    search: {
      terms: [
        "building",
        "devastation",
        "disaster",
        "earthquake",
        "home",
        "insurance"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e3b1",
    voted: false
  },
  "house-fire": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "House Fire",
    search: {
      terms: [
        "burn",
        "emergency",
        "home"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e50c",
    voted: false
  },
  "house-flag": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "House Flag",
    search: {
      terms: [
        "camp",
        "home"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e50d",
    voted: false
  },
  "house-flood-water": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "House Flood Water",
    search: {
      terms: [
        "damage",
        "flood",
        "water"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e50e",
    voted: false
  },
  "house-flood-water-circle-arrow-right": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "House Flood Water Circle Arrow Right",
    search: {
      terms: [
        "damage",
        "flood",
        "water"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e50f",
    voted: false
  },
  "house-laptop": {
    aliases: {
      names: [
        "laptop-house"
      ],
      unicodes: {
        secondary: [
          "10e066"
        ]
      }
    },
    changes: [
      "5.13.0",
      "5.14.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "House Laptop",
    search: {
      terms: [
        "computer",
        "covid-19",
        "device",
        "office",
        "remote",
        "work from home"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e066",
    voted: false
  },
  "house-lock": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "House Lock",
    search: {
      terms: [
        "closed",
        "home",
        "house",
        "lockdown",
        "padlock",
        "privacy",
        "quarantine"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e510",
    voted: false
  },
  "house-medical": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "House Medical",
    search: {
      terms: [
        "covid-19",
        "doctor",
        "facility",
        "general practitioner",
        "health",
        "hospital",
        "infirmary",
        "medicine",
        "office",
        "outpatient"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e3b2",
    voted: false
  },
  "house-medical-circle-check": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "House Medical Circle Check",
    search: {
      terms: [
        "clinic",
        "enable",
        "hospital",
        "not affected",
        "ok",
        "okay",
        "validate",
        "working"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e511",
    voted: false
  },
  "house-medical-circle-exclamation": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "House Medical Circle Exclamation",
    search: {
      terms: [
        "affected",
        "clinic",
        "failed",
        "hospital"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e512",
    voted: false
  },
  "house-medical-circle-xmark": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "House Medical Circle Xmark",
    search: {
      terms: [
        "clinic",
        "destroy",
        "hospital",
        "uncheck"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e513",
    voted: false
  },
  "house-medical-flag": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "House Medical Flag",
    search: {
      terms: [
        "clinic",
        "hospital",
        "mash"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e514",
    voted: false
  },
  "house-signal": {
    aliases: {
      unicodes: {
        secondary: [
          "10e012"
        ]
      }
    },
    changes: [
      "5.12.0",
      "5.14.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "House Signal",
    search: {
      terms: [
        "abode",
        "building",
        "connect",
        "family",
        "home",
        "residence",
        "smart home",
        "wifi",
        "www"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e012",
    voted: false
  },
  "house-tsunami": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "House Tsunami",
    search: {
      terms: [
        "damage",
        "flood",
        "tidal wave",
        "wave"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e515",
    voted: false
  },
  "house-user": {
    aliases: {
      names: [
        "home-user"
      ]
    },
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "House User",
    search: {
      terms: [
        "house",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e1b0",
    voted: false
  },
  houzz,
  "hryvnia-sign": {
    aliases: {
      names: [
        "hryvnia"
      ],
      unicodes: {
        composite: [
          "20b4"
        ],
        secondary: [
          "10f6f2"
        ]
      }
    },
    changes: [
      "5.4.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Hryvnia Sign",
    search: {
      terms: [
        "Hryvnia Sign",
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f6f2",
    voted: true
  },
  html5,
  hubspot,
  hurricane,
  i,
  "i-cursor": {
    aliases: {
      unicodes: {
        secondary: [
          "10f246"
        ]
      }
    },
    changes: [
      "4.4.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "I Cursor",
    search: {
      terms: [
        "editing",
        "i-beam",
        "type",
        "writing"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f246",
    voted: false
  },
  "ice-cream": {
    aliases: {
      unicodes: {
        composite: [
          "1f368"
        ],
        secondary: [
          "10f810"
        ]
      }
    },
    changes: [
      "5.7.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Ice Cream",
    search: {
      terms: [
        "chocolate",
        "cone",
        "cream",
        "dessert",
        "frozen",
        "ice",
        "ice cream",
        "scoop",
        "sorbet",
        "sweet",
        "vanilla",
        "yogurt"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f810",
    voted: false
  },
  icicles,
  icons,
  "id-badge": {
    aliases: {
      unicodes: {
        secondary: [
          "10f2c1"
        ]
      }
    },
    changes: [
      "4.7.0",
      "5.0.0",
      "5.0.3",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Id Badge",
    search: {
      terms: [
        "address",
        "contact",
        "identification",
        "license",
        "profile",
        "uer",
        "username"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f2c1",
    voted: false
  },
  "id-card": {
    aliases: {
      names: [
        "drivers-license"
      ],
      unicodes: {
        composite: [
          "f2c3"
        ],
        secondary: [
          "10f2c2"
        ]
      }
    },
    changes: [
      "4.7.0",
      "5.0.0",
      "5.0.3",
      "5.8.0",
      "5.10.1",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Id Card",
    search: {
      terms: [
        "contact",
        "demographics",
        "document",
        "identification",
        "issued",
        "profile",
        "registration",
        "uer",
        "username"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f2c2",
    voted: false
  },
  "id-card-clip": {
    aliases: {
      names: [
        "id-card-alt"
      ],
      unicodes: {
        secondary: [
          "10f47f"
        ]
      }
    },
    changes: [
      "5.0.7",
      "5.10.1",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Id Card Clip",
    search: {
      terms: [
        "contact",
        "demographics",
        "document",
        "identification",
        "issued",
        "profile",
        "uer",
        "username"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f47f",
    voted: false
  },
  ideal,
  igloo,
  image,
  "image-portrait": {
    aliases: {
      names: [
        "portrait"
      ],
      unicodes: {
        secondary: [
          "10f3e0"
        ]
      }
    },
    changes: [
      "5.0.0",
      "5.0.3",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Image Portrait",
    search: {
      terms: [
        "id",
        "image",
        "img",
        "photo",
        "picture",
        "selfie",
        "uer",
        "username"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f3e0",
    voted: false
  },
  images,
  imdb,
  inbox,
  indent,
  "indian-rupee-sign": {
    aliases: {
      names: [
        "indian-rupee",
        "inr"
      ]
    },
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Indian Rupee Sign",
    search: {
      terms: [
        "Indian Rupee Sign",
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e1bc",
    voted: false
  },
  industry,
  infinity,
  info,
  instagram,
  instalod,
  intercom,
  "internet-explorer": {
    changes: [
      "4.4.0",
      "5.0.0"
    ],
    label: "Internet-explorer",
    search: {
      terms: [
        "browser",
        "ie"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f26b",
    voted: false
  },
  invision,
  ioxhost,
  italic,
  "itch-io": {
    changes: [
      "5.8.0"
    ],
    label: "itch.io",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f83a",
    voted: false
  },
  itunes,
  "itunes-note": {
    changes: [
      "5.0.0"
    ],
    label: "Itunes Note",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f3b5",
    voted: false
  },
  j,
  jar,
  "jar-wheat": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Jar Wheat",
    search: {
      terms: [
        "flour",
        "storage"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e517",
    voted: false
  },
  java,
  jedi,
  "jedi-order": {
    changes: [
      "5.0.12",
      "5.7.0"
    ],
    label: "Jedi Order",
    search: {
      terms: [
        "star wars"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f50e",
    voted: false
  },
  jenkins,
  "jet-fighter": {
    aliases: {
      names: [
        "fighter-jet"
      ],
      unicodes: {
        secondary: [
          "10f0fb"
        ]
      }
    },
    changes: [
      "3.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Jet Fighter",
    search: {
      terms: [
        "airforce",
        "airplane",
        "airport",
        "fast",
        "fly",
        "goose",
        "marines",
        "maverick",
        "military",
        "plane",
        "quick",
        "top gun",
        "transportation",
        "travel"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f0fb",
    voted: false
  },
  "jet-fighter-up": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Jet Fighter Up",
    search: {
      terms: [
        "airforce",
        "airplane",
        "airport",
        "fast",
        "fly",
        "goose",
        "marines",
        "maverick",
        "military",
        "plane",
        "quick",
        "top gun",
        "transportation",
        "travel"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e518",
    voted: false
  },
  jira,
  joget,
  joint,
  joomla,
  js,
  jsfiddle,
  "jug-detergent": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Jug Detergent",
    search: {
      terms: [
        "detergent",
        "laundry",
        "soap",
        "wash"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e519",
    voted: false
  },
  jxl,
  k,
  kaaba,
  kaggle,
  key,
  keybase,
  keyboard,
  keycdn,
  khanda,
  kickstarter,
  "kickstarter-k": {
    changes: [
      "5.0.0",
      "6.5.2"
    ],
    label: "Kickstarter K",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f3bc",
    voted: false
  },
  "kip-sign": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Kip Sign",
    search: {
      terms: [
        "Kip Sign",
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e1c4",
    voted: false
  },
  "kit-medical": {
    aliases: {
      names: [
        "first-aid"
      ],
      unicodes: {
        secondary: [
          "10f479"
        ]
      }
    },
    changes: [
      "5.0.7",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Kit Medical",
    search: {
      terms: [
        "emergency",
        "emt",
        "health",
        "medical",
        "rescue"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f479",
    voted: false
  },
  "kitchen-set": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Kitchen Set",
    search: {
      terms: [
        "chef",
        "cook",
        "cup",
        "kitchen",
        "pan",
        "pot",
        "skillet"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e51a",
    voted: false
  },
  "kiwi-bird": {
    aliases: {
      unicodes: {
        secondary: [
          "10f535"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Kiwi Bird",
    search: {
      terms: [
        "bird",
        "fauna",
        "new zealand"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f535",
    voted: false
  },
  korvue,
  l,
  "land-mine-on": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Land Mine On",
    search: {
      terms: [
        "bomb",
        "danger",
        "explosion",
        "war"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e51b",
    voted: false
  },
  landmark,
  "landmark-dome": {
    aliases: {
      names: [
        "landmark-alt"
      ],
      unicodes: {
        secondary: [
          "10f752"
        ]
      }
    },
    changes: [
      "5.5.0",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Landmark Dome",
    search: {
      terms: [
        "building",
        "historic",
        "memorable",
        "monument",
        "politics"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f752",
    voted: false
  },
  "landmark-flag": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Landmark Flag",
    search: {
      terms: [
        "capitol",
        "flag",
        "landmark",
        "memorial"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e51c",
    voted: false
  },
  language,
  laptop,
  "laptop-code": {
    aliases: {
      unicodes: {
        secondary: [
          "10f5fc"
        ]
      }
    },
    changes: [
      "5.2.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Laptop Code",
    search: {
      terms: [
        "computer",
        "cpu",
        "dell",
        "demo",
        "develop",
        "device",
        "fabook",
        "fb",
        "mac",
        "macbook",
        "machine",
        "mysql",
        "pc",
        "sql"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5fc",
    voted: false
  },
  "laptop-file": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Laptop File",
    search: {
      terms: [
        "computer",
        "education",
        "laptop",
        "learning",
        "remote work"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e51d",
    voted: false
  },
  "laptop-medical": {
    aliases: {
      unicodes: {
        secondary: [
          "10f812"
        ]
      }
    },
    changes: [
      "5.7.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Laptop Medical",
    search: {
      terms: [
        "computer",
        "device",
        "ehr",
        "electronic health records",
        "history"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f812",
    voted: false
  },
  laravel,
  "lari-sign": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Lari Sign",
    search: {
      terms: [
        "Lari Sign",
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e1c8",
    voted: false
  },
  lastfm,
  "layer-group": {
    aliases: {
      unicodes: {
        secondary: [
          "10f5fd"
        ]
      }
    },
    changes: [
      "5.2.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Layer Group",
    search: {
      terms: [
        "arrange",
        "category",
        "develop",
        "layers",
        "map",
        "platform",
        "stack"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5fd",
    voted: false
  },
  leaf,
  leanpub,
  "left-long": {
    aliases: {
      names: [
        "long-arrow-alt-left"
      ],
      unicodes: {
        secondary: [
          "10f30a"
        ]
      }
    },
    changes: [
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Left Long",
    search: {
      terms: [
        "back",
        "long-arrow-left",
        "previous"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f30a",
    voted: false
  },
  "left-right": {
    aliases: {
      names: [
        "arrows-alt-h"
      ],
      unicodes: {
        composite: [
          "2194"
        ],
        secondary: [
          "10f337"
        ]
      }
    },
    changes: [
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Left Right",
    search: {
      terms: [
        "arrow",
        "arrows-h",
        "expand",
        "horizontal",
        "landscape",
        "left-right arrow",
        "resize",
        "wide"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f337",
    voted: false
  },
  lemon,
  less,
  "less-than": {
    aliases: {
      unicodes: {
        composite: [
          "f536"
        ],
        primary: [
          "f536"
        ],
        secondary: [
          "103c",
          "10f536"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Less Than",
    search: {
      terms: [
        "Less-Than Sign",
        "arithmetic",
        "compare",
        "math"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "3c",
    voted: true
  },
  "less-than-equal": {
    aliases: {
      unicodes: {
        secondary: [
          "10f537"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Less Than Equal",
    search: {
      terms: [
        "arithmetic",
        "compare",
        "math"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f537",
    voted: true
  },
  letterboxd,
  "life-ring": {
    aliases: {
      unicodes: {
        secondary: [
          "10f1cd"
        ]
      }
    },
    changes: [
      "4.1.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Life Ring",
    search: {
      terms: [
        "coast guard",
        "help",
        "overboard",
        "save",
        "support"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f1cd",
    voted: false
  },
  lightbulb,
  line,
  "lines-leaning": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Lines Leaning",
    search: {
      terms: [
        "canted",
        "domino",
        "falling",
        "resilience",
        "resilient",
        "tipped"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e51e",
    voted: false
  },
  link,
  "link-slash": {
    aliases: {
      names: [
        "chain-broken",
        "chain-slash",
        "unlink"
      ],
      unicodes: {
        secondary: [
          "10f127"
        ]
      }
    },
    changes: [
      "3.1.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Link Slash",
    search: {
      terms: [
        "attachment",
        "chain",
        "chain-broken",
        "disabled",
        "disconnect",
        "remove"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f127",
    voted: false
  },
  linkedin,
  "linkedin-in": {
    changes: [
      "2.0.0",
      "5.0.0",
      "5.4.1",
      "5.8.0",
      "5.8.1"
    ],
    label: "LinkedIn In",
    search: {
      terms: [
        "linkedin",
        "linkin"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f0e1",
    voted: false
  },
  linode,
  linux,
  "lira-sign": {
    aliases: {
      unicodes: {
        composite: [
          "20a4"
        ],
        secondary: [
          "10f195"
        ]
      }
    },
    changes: [
      "4.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Lira Sign",
    search: {
      terms: [
        "Lira Sign",
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f195",
    voted: false
  },
  list,
  "list-check": {
    aliases: {
      names: [
        "tasks"
      ],
      unicodes: {
        secondary: [
          "10f0ae"
        ]
      }
    },
    changes: [
      "2.0.0",
      "5.0.0",
      "5.9.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "List Check",
    search: {
      terms: [
        "bullet",
        "cheatsheet",
        "checklist",
        "downloading",
        "downloads",
        "enable",
        "loading",
        "progress",
        "project management",
        "settings",
        "summary",
        "to do",
        "validate",
        "working"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f0ae",
    voted: false
  },
  "list-ol": {
    aliases: {
      names: [
        "list-1-2",
        "list-numeric"
      ],
      unicodes: {
        secondary: [
          "10f0cb"
        ]
      }
    },
    changes: [
      "2.0.0",
      "5.0.0",
      "5.9.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "List Ol",
    search: {
      terms: [
        "cheatsheet",
        "checklist",
        "completed",
        "done",
        "finished",
        "numbers",
        "ol",
        "summary",
        "todo",
        "ul"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f0cb",
    voted: false
  },
  "list-ul": {
    aliases: {
      names: [
        "list-dots"
      ],
      unicodes: {
        secondary: [
          "10f0ca"
        ]
      }
    },
    changes: [
      "2.0.0",
      "5.0.0",
      "5.9.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "List Ul",
    search: {
      terms: [
        "bullet",
        "cheatsheet",
        "checklist",
        "completed",
        "done",
        "finished",
        "ol",
        "summary",
        "survey",
        "todo",
        "ul"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f0ca",
    voted: false
  },
  "litecoin-sign": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Litecoin Sign",
    search: {
      terms: [
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e1d3",
    voted: true
  },
  "location-arrow": {
    aliases: {
      unicodes: {
        secondary: [
          "10f124"
        ]
      }
    },
    changes: [
      "3.1.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Location Arrow",
    search: {
      terms: [
        "address",
        "compass",
        "coordinate",
        "direction",
        "gps",
        "map",
        "navigation",
        "place"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f124",
    voted: false
  },
  "location-crosshairs": {
    aliases: {
      names: [
        "location"
      ],
      unicodes: {
        secondary: [
          "10f601"
        ]
      }
    },
    changes: [
      "5.2.0",
      "5.11.0",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Location Crosshairs",
    search: {
      terms: [
        "address",
        "coordinate",
        "direction",
        "gps",
        "location",
        "map",
        "navigation",
        "place",
        "where"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f601",
    voted: false
  },
  "location-dot": {
    aliases: {
      names: [
        "map-marker-alt"
      ],
      unicodes: {
        secondary: [
          "10f3c5"
        ]
      }
    },
    changes: [
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Location Dot",
    search: {
      terms: [
        "address",
        "coordinates",
        "destination",
        "gps",
        "localize",
        "location",
        "map",
        "navigation",
        "paper",
        "pin",
        "place",
        "point of interest",
        "position",
        "route",
        "travel"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f3c5",
    voted: false
  },
  "location-pin": {
    aliases: {
      names: [
        "map-marker"
      ],
      unicodes: {
        secondary: [
          "10f041"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Location Pin",
    search: {
      terms: [
        "address",
        "coordinates",
        "destination",
        "gps",
        "localize",
        "location",
        "map",
        "navigation",
        "paper",
        "pin",
        "place",
        "point of interest",
        "position",
        "route",
        "travel"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f041",
    voted: false
  },
  "location-pin-lock": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Location Pin Lock",
    search: {
      terms: [
        "closed",
        "lockdown",
        "map",
        "padlock",
        "privacy",
        "quarantine"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e51f",
    voted: false
  },
  lock,
  "lock-open": {
    aliases: {
      unicodes: {
        secondary: [
          "10f3c1"
        ]
      }
    },
    changes: [
      "3.1.0",
      "5.0.0",
      "5.0.1",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Lock Open",
    search: {
      terms: [
        "admin",
        "lock",
        "open",
        "padlock",
        "password",
        "privacy",
        "private",
        "protect",
        "security",
        "unlock"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f3c1",
    voted: false
  },
  locust,
  lungs,
  "lungs-virus": {
    aliases: {
      unicodes: {
        secondary: [
          "10e067"
        ]
      }
    },
    changes: [
      "5.13.0",
      "5.14.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Lungs Virus",
    search: {
      terms: [
        "breath",
        "coronavirus",
        "covid-19",
        "flu",
        "infection",
        "pandemic",
        "respiratory",
        "sick"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e067",
    voted: false
  },
  lyft,
  m,
  magento,
  magnet,
  "magnifying-glass": {
    aliases: {
      names: [
        "search"
      ],
      unicodes: {
        composite: [
          "1f50d"
        ],
        secondary: [
          "10f002"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Magnifying Glass",
    search: {
      terms: [
        "bigger",
        "enlarge",
        "equipment",
        "find",
        "glass",
        "inspection",
        "magnifier",
        "magnify",
        "magnifying",
        "magnifying glass tilted left",
        "preview",
        "search",
        "tool",
        "zoom"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f002",
    voted: false
  },
  "magnifying-glass-arrow-right": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Magnifying Glass Arrow Right",
    search: {
      terms: [
        "find",
        "magnifier",
        "next",
        "search"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e521",
    voted: false
  },
  "magnifying-glass-chart": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Magnifying Glass Chart",
    search: {
      terms: [
        "analysis",
        "chart",
        "data",
        "graph",
        "intelligence",
        "magnifier",
        "market",
        "revenue"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e522",
    voted: false
  },
  "magnifying-glass-dollar": {
    aliases: {
      names: [
        "search-dollar"
      ],
      unicodes: {
        secondary: [
          "10f688"
        ]
      }
    },
    changes: [
      "5.3.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Magnifying Glass Dollar",
    search: {
      terms: [
        "bigger",
        "enlarge",
        "find",
        "magnifier",
        "magnify",
        "money",
        "preview",
        "zoom"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f688",
    voted: false
  },
  "magnifying-glass-location": {
    aliases: {
      names: [
        "search-location"
      ],
      unicodes: {
        secondary: [
          "10f689"
        ]
      }
    },
    changes: [
      "5.3.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Magnifying Glass Location",
    search: {
      terms: [
        "bigger",
        "enlarge",
        "find",
        "magnifier",
        "magnify",
        "preview",
        "zoom"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f689",
    voted: false
  },
  "magnifying-glass-minus": {
    aliases: {
      names: [
        "search-minus"
      ],
      unicodes: {
        secondary: [
          "10f010"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "5.0.13",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Magnifying Glass Minus",
    search: {
      terms: [
        "magnifier",
        "minify",
        "negative",
        "smaller",
        "zoom",
        "zoom out"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f010",
    voted: false
  },
  "magnifying-glass-plus": {
    aliases: {
      names: [
        "search-plus"
      ],
      unicodes: {
        secondary: [
          "10f00e"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Magnifying Glass Plus",
    search: {
      terms: [
        "bigger",
        "enlarge",
        "magnifier",
        "magnify",
        "positive",
        "zoom",
        "zoom in"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f00e",
    voted: false
  },
  mailchimp,
  "manat-sign": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Manat Sign",
    search: {
      terms: [
        "Manat Sign",
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e1d5",
    voted: false
  },
  mandalorian,
  map,
  "map-location": {
    aliases: {
      names: [
        "map-marked"
      ],
      unicodes: {
        secondary: [
          "10f59f"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Map Location",
    search: {
      terms: [
        "address",
        "coordinates",
        "destination",
        "gps",
        "localize",
        "location",
        "map",
        "navigation",
        "paper",
        "pin",
        "place",
        "point of interest",
        "position",
        "route",
        "travel"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f59f",
    voted: false
  },
  "map-location-dot": {
    aliases: {
      names: [
        "map-marked-alt"
      ],
      unicodes: {
        secondary: [
          "10f5a0"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Map Location Dot",
    search: {
      terms: [
        "address",
        "coordinates",
        "destination",
        "gps",
        "localize",
        "location",
        "map",
        "navigation",
        "paper",
        "pin",
        "place",
        "point of interest",
        "position",
        "route",
        "travel"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5a0",
    voted: false
  },
  "map-pin": {
    aliases: {
      unicodes: {
        composite: [
          "1f4cd"
        ],
        secondary: [
          "10f276"
        ]
      }
    },
    changes: [
      "4.4.0",
      "5.0.0",
      "5.2.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Map Pin",
    search: {
      terms: [
        "address",
        "agree",
        "coordinates",
        "destination",
        "gps",
        "localize",
        "location",
        "map",
        "marker",
        "navigation",
        "pin",
        "place",
        "position",
        "pushpin",
        "round pushpin",
        "travel"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f276",
    voted: false
  },
  markdown,
  marker,
  mars,
  "mars-and-venus": {
    aliases: {
      unicodes: {
        composite: [
          "26a5"
        ],
        secondary: [
          "10f224"
        ]
      }
    },
    changes: [
      "4.3.0",
      "5.0.0",
      "5.11.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Mars And Venus",
    search: {
      terms: [
        "Male and Female Sign",
        "female",
        "gender",
        "intersex",
        "male",
        "transgender"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f224",
    voted: false
  },
  "mars-and-venus-burst": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Mars And Venus Burst",
    search: {
      terms: [
        "gender",
        "uer",
        "violence"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e523",
    voted: false
  },
  "mars-double": {
    aliases: {
      unicodes: {
        composite: [
          "26a3"
        ],
        secondary: [
          "10f227"
        ]
      }
    },
    changes: [
      "4.3.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Mars Double",
    search: {
      terms: [
        "Doubled Male Sign",
        "gay",
        "gender",
        "male",
        "men"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f227",
    voted: false
  },
  "mars-stroke": {
    aliases: {
      unicodes: {
        composite: [
          "26a6"
        ],
        secondary: [
          "10f229"
        ]
      }
    },
    changes: [
      "4.3.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Mars Stroke",
    search: {
      terms: [
        "Male with Stroke Sign",
        "gender",
        "transgender"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f229",
    voted: false
  },
  "mars-stroke-right": {
    aliases: {
      names: [
        "mars-stroke-h"
      ],
      unicodes: {
        composite: [
          "26a9"
        ],
        secondary: [
          "10f22b"
        ]
      }
    },
    changes: [
      "4.3.0",
      "5.0.0",
      "5.11.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Mars Stroke Right",
    search: {
      terms: [
        "Horizontal Male with Stroke Sign",
        "gender"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f22b",
    voted: false
  },
  "mars-stroke-up": {
    aliases: {
      names: [
        "mars-stroke-v"
      ],
      unicodes: {
        composite: [
          "26a8"
        ],
        secondary: [
          "10f22a"
        ]
      }
    },
    changes: [
      "4.3.0",
      "5.0.0",
      "5.11.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Mars Stroke Up",
    search: {
      terms: [
        "Vertical Male with Stroke Sign",
        "gender"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f22a",
    voted: false
  },
  "martini-glass": {
    aliases: {
      names: [
        "glass-martini-alt"
      ],
      unicodes: {
        composite: [
          "1f378"
        ],
        secondary: [
          "10f57b"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Martini Glass",
    search: {
      terms: [
        "alcohol",
        "bar",
        "beverage",
        "cocktail",
        "cocktail glass",
        "drink",
        "glass",
        "liquor"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f57b",
    voted: false
  },
  "martini-glass-citrus": {
    aliases: {
      names: [
        "cocktail"
      ],
      unicodes: {
        secondary: [
          "10f561"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.10.1",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Martini Glass Citrus",
    search: {
      terms: [
        "alcohol",
        "beverage",
        "drink",
        "gin",
        "glass",
        "margarita",
        "martini",
        "vodka"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f561",
    voted: false
  },
  "martini-glass-empty": {
    aliases: {
      names: [
        "glass-martini"
      ],
      unicodes: {
        secondary: [
          "10f000"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "5.1.0",
      "5.10.1",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Martini Glass Empty",
    search: {
      terms: [
        "alcohol",
        "bar",
        "beverage",
        "drink",
        "liquor"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f000",
    voted: false
  },
  mask,
  "mask-face": {
    changes: [
      "6.0.0-beta1",
      "6.0.0",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Mask Face",
    search: {
      terms: [
        "breath",
        "coronavirus",
        "covid-19",
        "filter",
        "flu",
        "infection",
        "pandemic",
        "respirator",
        "virus"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e1d7",
    voted: false
  },
  "mask-ventilator": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Mask Ventilator",
    search: {
      terms: [
        "breath",
        "gas",
        "mask",
        "oxygen",
        "respirator",
        "ventilator"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e524",
    voted: false
  },
  "masks-theater": {
    aliases: {
      names: [
        "theater-masks"
      ],
      unicodes: {
        composite: [
          "1f3ad"
        ],
        secondary: [
          "10f630"
        ]
      }
    },
    changes: [
      "5.2.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Masks Theater",
    search: {
      terms: [
        "art",
        "comedy",
        "mask",
        "perform",
        "performing",
        "performing arts",
        "theater",
        "theatre",
        "tragedy"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f630",
    voted: false
  },
  mastodon,
  "mattress-pillow": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Mattress Pillow",
    search: {
      terms: [
        "air mattress",
        "mattress",
        "pillow",
        "rest",
        "sleep"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e525",
    voted: false
  },
  maxcdn,
  maximize,
  mdb,
  medal,
  medapps,
  medium,
  medrt,
  meetup,
  megaport,
  memory,
  mendeley,
  menorah,
  mercury,
  message,
  meta,
  meteor,
  microblog,
  microchip,
  microphone,
  "microphone-lines": {
    aliases: {
      names: [
        "microphone-alt"
      ],
      unicodes: {
        composite: [
          "1f399"
        ],
        secondary: [
          "10f3c9"
        ]
      }
    },
    changes: [
      "5.0.0",
      "5.0.13",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Microphone Lines",
    search: {
      terms: [
        "audio",
        "mic",
        "microphone",
        "music",
        "podcast",
        "record",
        "sing",
        "sound",
        "studio",
        "studio microphone",
        "talking",
        "voice"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f3c9",
    voted: false
  },
  "microphone-lines-slash": {
    aliases: {
      names: [
        "microphone-alt-slash"
      ],
      unicodes: {
        secondary: [
          "10f539"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Microphone Lines Slash",
    search: {
      terms: [
        "audio",
        "disable",
        "disabled",
        "disconnect",
        "disconnect",
        "mute",
        "podcast",
        "record",
        "sing",
        "sound",
        "voice"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f539",
    voted: false
  },
  "microphone-slash": {
    aliases: {
      unicodes: {
        secondary: [
          "10f131"
        ]
      }
    },
    changes: [
      "3.1.0",
      "5.0.0",
      "5.0.13",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Microphone Slash",
    search: {
      terms: [
        "audio",
        "disable",
        "disabled",
        "mute",
        "podcast",
        "record",
        "sing",
        "sound",
        "voice"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f131",
    voted: false
  },
  microscope,
  microsoft,
  "mill-sign": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Mill Sign",
    search: {
      terms: [
        "Mill Sign",
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e1ed",
    voted: false
  },
  minimize,
  mintbit,
  minus,
  mitten,
  mix,
  mixcloud,
  mixer,
  mizuni,
  mobile,
  "mobile-button": {
    aliases: {
      unicodes: {
        secondary: [
          "10f10b"
        ]
      }
    },
    changes: [
      "3.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Mobile Button",
    search: {
      terms: [
        "apple",
        "call",
        "cell phone",
        "device",
        "iphone",
        "number",
        "screen",
        "telephone"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f10b",
    voted: false
  },
  "mobile-retro": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Mobile Retro",
    search: {
      terms: [
        "cellphone",
        "cellular",
        "phone"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e527",
    voted: false
  },
  "mobile-screen": {
    aliases: {
      names: [
        "mobile-android-alt"
      ],
      unicodes: {
        secondary: [
          "10f3cf"
        ]
      }
    },
    changes: [
      "5.0.0",
      "6.0.0-beta1",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Mobile Screen",
    search: {
      terms: [
        "android",
        "call",
        "cell phone",
        "device",
        "number",
        "screen",
        "telephone",
        "text"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f3cf",
    voted: false
  },
  "mobile-screen-button": {
    aliases: {
      names: [
        "mobile-alt"
      ],
      unicodes: {
        secondary: [
          "10f3cd"
        ]
      }
    },
    changes: [
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Mobile Screen Button",
    search: {
      terms: [
        "apple",
        "call",
        "cell phone",
        "device",
        "iphone",
        "number",
        "screen",
        "telephone"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f3cd",
    voted: false
  },
  modx,
  monero,
  "money-bill": {
    aliases: {
      unicodes: {
        secondary: [
          "10f0d6"
        ]
      }
    },
    changes: [
      "2.0.0",
      "5.0.0",
      "5.0.13",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Money Bill",
    search: {
      terms: [
        "buy",
        "cash",
        "checkout",
        "coupon",
        "investment",
        "money",
        "payment",
        "premium",
        "price",
        "purchase",
        "revenue",
        "salary"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f0d6",
    voted: false
  },
  "money-bill-1": {
    aliases: {
      names: [
        "money-bill-alt"
      ],
      unicodes: {
        secondary: [
          "10f3d1"
        ]
      }
    },
    changes: [
      "5.0.0",
      "5.0.13",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Money Bill 1",
    search: {
      terms: [
        "buy",
        "cash",
        "checkout",
        "money",
        "payment",
        "premium",
        "price",
        "purchase",
        "salary"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f3d1",
    voted: false
  },
  "money-bill-1-wave": {
    aliases: {
      names: [
        "money-bill-wave-alt"
      ],
      unicodes: {
        secondary: [
          "10f53b"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Money Bill 1 Wave",
    search: {
      terms: [
        "buy",
        "cash",
        "checkout",
        "money",
        "payment",
        "premium",
        "price",
        "purchase",
        "salary"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f53b",
    voted: true
  },
  "money-bill-transfer": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Money Bill Transfer",
    search: {
      terms: [
        "bank",
        "conversion",
        "deposit",
        "investment",
        "money",
        "salary",
        "transfer",
        "withdrawal"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e528",
    voted: false
  },
  "money-bill-trend-up": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Money Bill Trend Up",
    search: {
      terms: [
        "bank",
        "bonds",
        "inflation",
        "investment",
        "market",
        "revenue",
        "salary",
        "stocks",
        "trade"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e529",
    voted: false
  },
  "money-bill-wave": {
    aliases: {
      unicodes: {
        secondary: [
          "10f53a"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Money Bill Wave",
    search: {
      terms: [
        "buy",
        "cash",
        "checkout",
        "money",
        "payment",
        "premium",
        "price",
        "purchase",
        "salary"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f53a",
    voted: true
  },
  "money-bill-wheat": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Money Bill Wheat",
    search: {
      terms: [
        "agribusiness",
        "agriculture",
        "farming",
        "food",
        "investment",
        "livelihood",
        "subsidy"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e52a",
    voted: false
  },
  "money-bills": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Money Bills",
    search: {
      terms: [
        "atm",
        "cash",
        "investment",
        "money",
        "moolah",
        "premium",
        "revenue",
        "salary"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e1f3",
    voted: false
  },
  "money-check": {
    aliases: {
      unicodes: {
        secondary: [
          "10f53c"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Money Check",
    search: {
      terms: [
        "bank check",
        "buy",
        "checkout",
        "cheque",
        "money",
        "payment",
        "price",
        "purchase",
        "salary"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f53c",
    voted: true
  },
  "money-check-dollar": {
    aliases: {
      names: [
        "money-check-alt"
      ],
      unicodes: {
        secondary: [
          "10f53d"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Money Check Dollar",
    search: {
      terms: [
        "bank check",
        "buy",
        "checkout",
        "cheque",
        "money",
        "payment",
        "price",
        "purchase",
        "salary"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f53d",
    voted: true
  },
  monument,
  moon,
  "mortar-pestle": {
    aliases: {
      unicodes: {
        secondary: [
          "10f5a7"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Mortar Pestle",
    search: {
      terms: [
        "crush",
        "culinary",
        "grind",
        "medical",
        "mix",
        "pharmacy",
        "prescription",
        "spices"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5a7",
    voted: false
  },
  mosque,
  mosquito,
  "mosquito-net": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Mosquito Net",
    search: {
      terms: [
        "bite",
        "malaria",
        "mosquito",
        "net"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e52c",
    voted: false
  },
  motorcycle,
  mound,
  mountain,
  "mountain-city": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Mountain City",
    search: {
      terms: [
        "location",
        "rural",
        "urban"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e52e",
    voted: false
  },
  "mountain-sun": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Mountain Sun",
    search: {
      terms: [
        "country",
        "hiking",
        "landscape",
        "rural",
        "travel",
        "view"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e52f",
    voted: false
  },
  "mug-hot": {
    aliases: {
      unicodes: {
        composite: [
          "2615"
        ],
        secondary: [
          "10f7b6"
        ]
      }
    },
    changes: [
      "5.6.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Mug Hot",
    search: {
      terms: [
        "beverage",
        "caliente",
        "cocoa",
        "coffee",
        "cup",
        "drink",
        "holiday",
        "hot",
        "hot beverage",
        "hot chocolate",
        "steam",
        "steaming",
        "tea",
        "warmth"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f7b6",
    voted: false
  },
  "mug-saucer": {
    aliases: {
      names: [
        "coffee"
      ],
      unicodes: {
        secondary: [
          "10f0f4"
        ]
      }
    },
    changes: [
      "3.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Mug Saucer",
    search: {
      terms: [
        "beverage",
        "breakfast",
        "cafe",
        "drink",
        "fall",
        "morning",
        "mug",
        "seasonal",
        "tea"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f0f4",
    voted: false
  },
  music,
  n,
  "naira-sign": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Naira Sign",
    search: {
      terms: [
        "Naira Sign",
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e1f6",
    voted: false
  },
  napster,
  neos,
  "network-wired": {
    aliases: {
      unicodes: {
        secondary: [
          "10f6ff"
        ]
      }
    },
    changes: [
      "5.4.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Network Wired",
    search: {
      terms: [
        "computer",
        "connect",
        "ethernet",
        "internet",
        "intranet"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f6ff",
    voted: true
  },
  neuter,
  newspaper,
  "nfc-directional": {
    changes: [
      "6.1.0"
    ],
    label: "NFC Directional",
    search: {
      terms: [
        "connect",
        "data",
        "near field communication",
        "nfc",
        "scan",
        "signal",
        "transfer",
        "wireless"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "e530",
    voted: false
  },
  "nfc-symbol": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Nfc Symbol",
    search: {
      terms: [
        "connect",
        "data",
        "near field communication",
        "nfc",
        "scan",
        "signal",
        "transfer",
        "wireless"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "e531",
    voted: false
  },
  nimblr,
  node,
  "node-js": {
    changes: [
      "5.0.0",
      "5.0.3"
    ],
    label: "Node.js JS",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f3d3",
    voted: false
  },
  "not-equal": {
    aliases: {
      unicodes: {
        secondary: [
          "10f53e"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Not Equal",
    search: {
      terms: [
        "arithmetic",
        "compare",
        "math"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f53e",
    voted: true
  },
  notdef,
  "note-sticky": {
    aliases: {
      names: [
        "sticky-note"
      ],
      unicodes: {
        composite: [
          "f24a"
        ],
        secondary: [
          "10f249"
        ]
      }
    },
    changes: [
      "4.4.0",
      "5.0.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Note Sticky",
    search: {
      terms: [
        "message",
        "note",
        "paper",
        "reminder",
        "sticker"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f249",
    voted: false
  },
  "notes-medical": {
    aliases: {
      unicodes: {
        secondary: [
          "10f481"
        ]
      }
    },
    changes: [
      "5.0.7",
      "6.0.0-beta1",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Notes Medical",
    search: {
      terms: [
        "clipboard",
        "doctor",
        "ehr",
        "health",
        "history",
        "records"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f481",
    voted: false
  },
  npm,
  ns8,
  nutritionix,
  o,
  "object-group": {
    aliases: {
      unicodes: {
        secondary: [
          "10f247"
        ]
      }
    },
    changes: [
      "4.4.0",
      "5.0.0",
      "5.10.1",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Object Group",
    search: {
      terms: [
        "combine",
        "copy",
        "design",
        "merge",
        "select"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f247",
    voted: false
  },
  "object-ungroup": {
    aliases: {
      unicodes: {
        secondary: [
          "10f248"
        ]
      }
    },
    changes: [
      "4.4.0",
      "5.0.0",
      "5.10.1",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Object Ungroup",
    search: {
      terms: [
        "copy",
        "design",
        "merge",
        "select",
        "separate"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f248",
    voted: false
  },
  "octopus-deploy": {
    changes: [
      "5.15.0"
    ],
    label: "Octopus Deploy",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "e082",
    voted: false
  },
  odnoklassniki,
  odysee,
  "oil-can": {
    aliases: {
      unicodes: {
        secondary: [
          "10f613"
        ]
      }
    },
    changes: [
      "5.2.0",
      "5.10.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Oil Can",
    search: {
      terms: [
        "auto",
        "crude",
        "gasoline",
        "grease",
        "lubricate",
        "petroleum"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f613",
    voted: false
  },
  "oil-well": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Oil Well",
    search: {
      terms: [
        "drill",
        "oil",
        "rig"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e532",
    voted: false
  },
  "old-republic": {
    changes: [
      "5.0.12"
    ],
    label: "Old Republic",
    search: {
      terms: [
        "politics",
        "star wars"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f510",
    voted: false
  },
  om,
  opencart,
  openid,
  opensuse,
  opera,
  "optin-monster": {
    changes: [
      "4.4.0",
      "5.0.0",
      "5.7.0"
    ],
    label: "Optin Monster",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f23c",
    voted: false
  },
  orcid,
  osi,
  otter,
  outdent,
  p,
  padlet,
  page4,
  pagelines,
  pager,
  "paint-roller": {
    aliases: {
      unicodes: {
        secondary: [
          "10f5aa"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Paint Roller",
    search: {
      terms: [
        "acrylic",
        "art",
        "brush",
        "color",
        "fill",
        "maintenance",
        "paint",
        "pigment",
        "watercolor"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5aa",
    voted: false
  },
  paintbrush,
  palette,
  palfed,
  pallet,
  panorama,
  "paper-plane": {
    aliases: {
      unicodes: {
        composite: [
          "f1d9"
        ],
        secondary: [
          "10f1d8"
        ]
      }
    },
    changes: [
      "4.1.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Paper Plane",
    search: {
      terms: [
        "air",
        "float",
        "fold",
        "mail",
        "paper",
        "send"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f1d8",
    voted: false
  },
  paperclip,
  "parachute-box": {
    aliases: {
      unicodes: {
        secondary: [
          "10f4cd"
        ]
      }
    },
    changes: [
      "5.0.9",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Parachute Box",
    search: {
      terms: [
        "aid",
        "assistance",
        "goods",
        "relief",
        "rescue",
        "supplies"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f4cd",
    voted: false
  },
  paragraph,
  passport,
  paste,
  patreon,
  pause,
  paw,
  paypal,
  peace,
  pen,
  "pen-clip": {
    aliases: {
      names: [
        "pen-alt"
      ],
      unicodes: {
        secondary: [
          "10f305"
        ]
      }
    },
    changes: [
      "5.0.0",
      "5.1.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Pen Clip",
    search: {
      terms: [
        "design",
        "edit",
        "modify",
        "update",
        "write"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f305",
    voted: false
  },
  "pen-fancy": {
    aliases: {
      unicodes: {
        composite: [
          "1f58b",
          "2712"
        ],
        secondary: [
          "10f5ac"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Pen Fancy",
    search: {
      terms: [
        "black nib",
        "design",
        "edit",
        "fountain",
        "fountain pen",
        "modify",
        "nib",
        "pen",
        "update",
        "write"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5ac",
    voted: false
  },
  "pen-nib": {
    aliases: {
      unicodes: {
        composite: [
          "2711"
        ],
        secondary: [
          "10f5ad"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Pen Nib",
    search: {
      terms: [
        "design",
        "edit",
        "fountain pen",
        "modify",
        "update",
        "write"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5ad",
    voted: true
  },
  "pen-ruler": {
    aliases: {
      names: [
        "pencil-ruler"
      ],
      unicodes: {
        secondary: [
          "10f5ae"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Pen Ruler",
    search: {
      terms: [
        "design",
        "draft",
        "draw",
        "maintenance",
        "modify",
        "pencil"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5ae",
    voted: false
  },
  "pen-to-square": {
    aliases: {
      names: [
        "edit"
      ],
      unicodes: {
        secondary: [
          "10f044"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Pen To Square",
    search: {
      terms: [
        "edit",
        "modify",
        "pen",
        "pencil",
        "update",
        "write"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f044",
    voted: false
  },
  pencil,
  "people-arrows": {
    aliases: {
      names: [
        "people-arrows-left-right"
      ],
      unicodes: {
        secondary: [
          "10e068"
        ]
      }
    },
    changes: [
      "5.13.0",
      "5.14.0",
      "6.0.0-beta1",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "People Arrows",
    search: {
      terms: [
        "conversation",
        "discussion",
        "distance",
        "insert",
        "isolation",
        "separate",
        "social distancing",
        "talk",
        "talking",
        "together",
        "uer",
        "users-people"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e068",
    voted: false
  },
  "people-carry-box": {
    aliases: {
      names: [
        "people-carry"
      ],
      unicodes: {
        secondary: [
          "10f4ce"
        ]
      }
    },
    changes: [
      "5.0.9",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "People Carry Box",
    search: {
      terms: [
        "together",
        "uer",
        "users-people"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f4ce",
    voted: false
  },
  "people-group": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "People Group",
    search: {
      terms: [
        "crowd",
        "family",
        "group",
        "team",
        "together",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e533",
    voted: false
  },
  "people-line": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "People Line",
    search: {
      terms: [
        "crowd",
        "group",
        "need",
        "together",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e534",
    voted: false
  },
  "people-pulling": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "People Pulling",
    search: {
      terms: [
        "forced return",
        "together",
        "uer",
        "yanking"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e535",
    voted: false
  },
  "people-robbery": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "People Robbery",
    search: {
      terms: [
        "criminal",
        "hands up",
        "looting",
        "robbery",
        "steal",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e536",
    voted: false
  },
  "people-roof": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "People Roof",
    search: {
      terms: [
        "crowd",
        "family",
        "group",
        "manage",
        "people",
        "safe",
        "shelter",
        "together",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e537",
    voted: false
  },
  "pepper-hot": {
    aliases: {
      unicodes: {
        composite: [
          "1f336"
        ],
        secondary: [
          "10f816"
        ]
      }
    },
    changes: [
      "5.7.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Pepper Hot",
    search: {
      terms: [
        "buffalo wings",
        "capsicum",
        "chili",
        "chilli",
        "habanero",
        "hot",
        "hot pepper",
        "jalapeno",
        "mexican",
        "pepper",
        "spicy",
        "tabasco",
        "vegetable"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f816",
    voted: true
  },
  perbyte,
  percent,
  periscope,
  person,
  "person-arrow-down-to-line": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Arrow Down To Line",
    search: {
      terms: [
        "ground",
        "indigenous",
        "insert",
        "native",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e538",
    voted: false
  },
  "person-arrow-up-from-line": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Arrow Up From Line",
    search: {
      terms: [
        "population",
        "rise",
        "uer",
        "upgrade"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e539",
    voted: false
  },
  "person-biking": {
    aliases: {
      names: [
        "biking"
      ],
      unicodes: {
        composite: [
          "1f6b4"
        ],
        secondary: [
          "10f84a"
        ]
      }
    },
    changes: [
      "5.9.0",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Biking",
    search: {
      terms: [
        "bicycle",
        "bike",
        "biking",
        "cyclist",
        "pedal",
        "person biking",
        "summer",
        "uer",
        "wheel"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f84a",
    voted: false
  },
  "person-booth": {
    aliases: {
      unicodes: {
        secondary: [
          "10f756"
        ]
      }
    },
    changes: [
      "5.5.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Booth",
    search: {
      terms: [
        "changing room",
        "curtain",
        "uer",
        "vote",
        "voting"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f756",
    voted: false
  },
  "person-breastfeeding": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Breastfeeding",
    search: {
      terms: [
        "baby",
        "child",
        "infant",
        "mother",
        "nutrition",
        "parent",
        "sustenance",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e53a",
    voted: false
  },
  "person-burst": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Burst",
    search: {
      terms: [
        "abuse",
        "accident",
        "crash",
        "explode",
        "uer",
        "violence"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e53b",
    voted: false
  },
  "person-cane": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Cane",
    search: {
      terms: [
        "aging",
        "cane",
        "elderly",
        "old",
        "staff",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e53c",
    voted: false
  },
  "person-chalkboard": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Chalkboard",
    search: {
      terms: [
        "blackboard",
        "instructor",
        "keynote",
        "lesson",
        "presentation",
        "teacher",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e53d",
    voted: false
  },
  "person-circle-check": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Circle Check",
    search: {
      terms: [
        "approved",
        "enable",
        "not affected",
        "ok",
        "okay",
        "uer",
        "validate",
        "working"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e53e",
    voted: false
  },
  "person-circle-exclamation": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Circle Exclamation",
    search: {
      terms: [
        "affected",
        "alert",
        "failed",
        "lost",
        "missing",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e53f",
    voted: false
  },
  "person-circle-minus": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Circle Minus",
    search: {
      terms: [
        "delete",
        "remove",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e540",
    voted: false
  },
  "person-circle-plus": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Circle Plus",
    search: {
      terms: [
        "add",
        "follow",
        "found",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e541",
    voted: false
  },
  "person-circle-question": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Circle Question",
    search: {
      terms: [
        "faq",
        "lost",
        "missing",
        "request",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e542",
    voted: false
  },
  "person-circle-xmark": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Circle Xmark",
    search: {
      terms: [
        "dead",
        "removed",
        "uer",
        "uncheck"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e543",
    voted: false
  },
  "person-digging": {
    aliases: {
      names: [
        "digging"
      ],
      unicodes: {
        secondary: [
          "10f85e"
        ]
      }
    },
    changes: [
      "5.9.0",
      "6.0.0-beta1",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Digging",
    search: {
      terms: [
        "bury",
        "construction",
        "debris",
        "dig",
        "maintenance",
        "men at work",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f85e",
    voted: false
  },
  "person-dots-from-line": {
    aliases: {
      names: [
        "diagnoses"
      ],
      unicodes: {
        secondary: [
          "10f470"
        ]
      }
    },
    changes: [
      "5.0.7",
      "5.7.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Dots From Line",
    search: {
      terms: [
        "allergy",
        "diagnosis",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f470",
    voted: false
  },
  "person-dress": {
    aliases: {
      names: [
        "female"
      ],
      unicodes: {
        secondary: [
          "10f182"
        ]
      }
    },
    changes: [
      "3.2.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Dress",
    search: {
      terms: [
        "man",
        "skirt",
        "uer",
        "woman"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f182",
    voted: false
  },
  "person-dress-burst": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Dress Burst",
    search: {
      terms: [
        "abuse",
        "accident",
        "crash",
        "explode",
        "uer",
        "violence"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e544",
    voted: false
  },
  "person-drowning": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Drowning",
    search: {
      terms: [
        "drown",
        "emergency",
        "swim",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e545",
    voted: false
  },
  "person-falling": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Falling",
    search: {
      terms: [
        "accident",
        "fall",
        "trip",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e546",
    voted: false
  },
  "person-falling-burst": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Falling Burst",
    search: {
      terms: [
        "accident",
        "crash",
        "death",
        "fall",
        "homicide",
        "murder",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e547",
    voted: false
  },
  "person-half-dress": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Half Dress",
    search: {
      terms: [
        "gender",
        "man",
        "restroom",
        "transgender",
        "uer",
        "woman"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e548",
    voted: false
  },
  "person-harassing": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Harassing",
    search: {
      terms: [
        "abuse",
        "scream",
        "shame",
        "shout",
        "uer",
        "yell"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e549",
    voted: false
  },
  "person-hiking": {
    aliases: {
      names: [
        "hiking"
      ],
      unicodes: {
        secondary: [
          "10f6ec"
        ]
      }
    },
    changes: [
      "5.4.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Hiking",
    search: {
      terms: [
        "autumn",
        "fall",
        "follow",
        "hike",
        "mountain",
        "outdoors",
        "summer",
        "uer",
        "walk"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f6ec",
    voted: false
  },
  "person-military-pointing": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Military Pointing",
    search: {
      terms: [
        "army",
        "customs",
        "guard",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e54a",
    voted: false
  },
  "person-military-rifle": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Military Rifle",
    search: {
      terms: [
        "armed forces",
        "army",
        "military",
        "rifle",
        "uer",
        "war"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e54b",
    voted: false
  },
  "person-military-to-person": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Military To Person",
    search: {
      terms: [
        "civilian",
        "coordination",
        "military",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e54c",
    voted: false
  },
  "person-praying": {
    aliases: {
      names: [
        "pray"
      ],
      unicodes: {
        composite: [
          "1f6d0"
        ],
        secondary: [
          "10f683"
        ]
      }
    },
    changes: [
      "5.3.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Praying",
    search: {
      terms: [
        "kneel",
        "place of worship",
        "religion",
        "thank",
        "uer",
        "worship"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f683",
    voted: false
  },
  "person-pregnant": {
    changes: [
      "6.0.0-beta1",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Pregnant",
    search: {
      terms: [
        "baby",
        "birth",
        "child",
        "parent",
        "pregnant",
        "pregnant woman",
        "uer",
        "woman"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e31e",
    voted: false
  },
  "person-rays": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Rays",
    search: {
      terms: [
        "affected",
        "focus",
        "shine",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e54d",
    voted: false
  },
  "person-rifle": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Rifle",
    search: {
      terms: [
        "army",
        "combatant",
        "gun",
        "military",
        "rifle",
        "uer",
        "war"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e54e",
    voted: false
  },
  "person-running": {
    aliases: {
      names: [
        "running"
      ],
      unicodes: {
        composite: [
          "1f3c3"
        ],
        secondary: [
          "10f70c"
        ]
      }
    },
    changes: [
      "5.4.0",
      "5.11.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Running",
    search: {
      terms: [
        "exit",
        "flee",
        "follow",
        "marathon",
        "person running",
        "race",
        "running",
        "uer",
        "workout"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f70c",
    voted: true
  },
  "person-shelter": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Shelter",
    search: {
      terms: [
        "house",
        "inside",
        "roof",
        "safe",
        "safety",
        "shelter",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e54f",
    voted: false
  },
  "person-skating": {
    aliases: {
      names: [
        "skating"
      ],
      unicodes: {
        secondary: [
          "10f7c5"
        ]
      }
    },
    changes: [
      "5.6.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Skating",
    search: {
      terms: [
        "figure skating",
        "ice",
        "olympics",
        "rink",
        "skate",
        "uer",
        "winter"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f7c5",
    voted: false
  },
  "person-skiing": {
    aliases: {
      names: [
        "skiing"
      ],
      unicodes: {
        composite: [
          "26f7"
        ],
        secondary: [
          "10f7c9"
        ]
      }
    },
    changes: [
      "5.6.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Skiing",
    search: {
      terms: [
        "downhill",
        "olympics",
        "ski",
        "skier",
        "snow",
        "uer",
        "winter"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f7c9",
    voted: false
  },
  "person-skiing-nordic": {
    aliases: {
      names: [
        "skiing-nordic"
      ],
      unicodes: {
        secondary: [
          "10f7ca"
        ]
      }
    },
    changes: [
      "5.6.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Skiing Nordic",
    search: {
      terms: [
        "cross country",
        "olympics",
        "uer",
        "winter"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f7ca",
    voted: false
  },
  "person-snowboarding": {
    aliases: {
      names: [
        "snowboarding"
      ],
      unicodes: {
        composite: [
          "1f3c2"
        ],
        secondary: [
          "10f7ce"
        ]
      }
    },
    changes: [
      "5.6.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Snowboarding",
    search: {
      terms: [
        "olympics",
        "ski",
        "snow",
        "snowboard",
        "snowboarder",
        "uer",
        "winter"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f7ce",
    voted: false
  },
  "person-swimming": {
    aliases: {
      names: [
        "swimmer"
      ],
      unicodes: {
        composite: [
          "1f3ca"
        ],
        secondary: [
          "10f5c4"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Swimming",
    search: {
      terms: [
        "ocean",
        "person swimming",
        "pool",
        "sea",
        "swim",
        "uer",
        "water"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5c4",
    voted: false
  },
  "person-through-window": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Through Window",
    search: {
      terms: [
        "door",
        "exit",
        "forced entry",
        "leave",
        "robbery",
        "steal",
        "uer",
        "window"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e5a9",
    voted: false
  },
  "person-walking": {
    aliases: {
      names: [
        "walking"
      ],
      unicodes: {
        composite: [
          "1f6b6"
        ],
        secondary: [
          "10f554"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Walking",
    search: {
      terms: [
        "crosswalk",
        "exercise",
        "follow",
        "hike",
        "move",
        "person walking",
        "uer",
        "walk",
        "walking",
        "workout"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f554",
    voted: true
  },
  "person-walking-arrow-loop-left": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Walking Arrow Loop Left",
    search: {
      terms: [
        "follow",
        "population return",
        "return",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e551",
    voted: false
  },
  "person-walking-arrow-right": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Walking Arrow Right",
    search: {
      terms: [
        "exit",
        "follow",
        "internally displaced",
        "leave",
        "refugee",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e552",
    voted: false
  },
  "person-walking-dashed-line-arrow-right": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Walking Dashed Line Arrow Right",
    search: {
      terms: [
        "exit",
        "follow",
        "refugee",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e553",
    voted: false
  },
  "person-walking-luggage": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Walking Luggage",
    search: {
      terms: [
        "bag",
        "baggage",
        "briefcase",
        "carry-on",
        "deployment",
        "follow",
        "rolling",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e554",
    voted: false
  },
  "person-walking-with-cane": {
    aliases: {
      names: [
        "blind"
      ],
      unicodes: {
        secondary: [
          "10f29d"
        ]
      }
    },
    changes: [
      "4.6.0",
      "5.0.0",
      "5.11.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Person Walking With Cane",
    search: {
      terms: [
        "blind",
        "cane",
        "follow",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f29d",
    voted: false
  },
  "peseta-sign": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Peseta Sign",
    search: {
      terms: [
        "Peseta Sign",
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e221",
    voted: false
  },
  "peso-sign": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Peso Sign",
    search: {
      terms: [
        "Peso Sign",
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e222",
    voted: false
  },
  phabricator,
  "phoenix-framework": {
    changes: [
      "5.0.0",
      "5.0.3"
    ],
    label: "Phoenix Framework",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f3dc",
    voted: false
  },
  "phoenix-squadron": {
    changes: [
      "5.0.12",
      "5.8.0"
    ],
    label: "Phoenix Squadron",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f511",
    voted: false
  },
  phone,
  "phone-flip": {
    aliases: {
      names: [
        "phone-alt"
      ],
      unicodes: {
        composite: [
          "1f57d"
        ],
        secondary: [
          "10f879"
        ]
      }
    },
    changes: [
      "5.9.0",
      "5.10.1",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Phone Flip",
    search: {
      terms: [
        "Right Hand Telephone Receiver",
        "call",
        "earphone",
        "number",
        "support",
        "telephone",
        "voice"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f879",
    voted: false
  },
  "phone-slash": {
    aliases: {
      unicodes: {
        secondary: [
          "10f3dd"
        ]
      }
    },
    changes: [
      "5.0.0",
      "5.0.9",
      "6.0.0-beta1",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Phone Slash",
    search: {
      terms: [
        "call",
        "cancel",
        "disabled",
        "disconnect",
        "earphone",
        "mute",
        "number",
        "support",
        "telephone",
        "voice"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f3dd",
    voted: false
  },
  "phone-volume": {
    aliases: {
      names: [
        "volume-control-phone"
      ],
      unicodes: {
        secondary: [
          "10f2a0"
        ]
      }
    },
    changes: [
      "4.6.0",
      "5.0.0",
      "5.0.3",
      "5.7.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Phone Volume",
    search: {
      terms: [
        "call",
        "earphone",
        "number",
        "ring",
        "ringing",
        "sound",
        "support",
        "talking",
        "telephone",
        "voice",
        "volume-control-phone"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f2a0",
    voted: false
  },
  "photo-film": {
    aliases: {
      names: [
        "photo-video"
      ],
      unicodes: {
        secondary: [
          "10f87c"
        ]
      }
    },
    changes: [
      "5.9.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Photo Film",
    search: {
      terms: [
        "av",
        "film",
        "image",
        "library",
        "media"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f87c",
    voted: false
  },
  php,
  "pied-piper": {
    changes: [
      "4.6.0",
      "5.0.0",
      "5.0.10",
      "5.12.0"
    ],
    label: "Pied Piper Logo",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f2ae",
    voted: false
  },
  "pied-piper-alt": {
    changes: [
      "4.1.0",
      "5.0.0",
      "5.7.0"
    ],
    label: "Alternate Pied Piper Logo (Old)",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f1a8",
    voted: false
  },
  "pied-piper-hat": {
    changes: [
      "5.0.10"
    ],
    label: "Pied Piper Hat (Old)",
    search: {
      terms: [
        "clothing"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f4e5",
    voted: false
  },
  "pied-piper-pp": {
    changes: [
      "4.1.0",
      "5.0.0"
    ],
    label: "Pied Piper PP Logo (Old)",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f1a7",
    voted: false
  },
  "piggy-bank": {
    aliases: {
      unicodes: {
        secondary: [
          "10f4d3"
        ]
      }
    },
    changes: [
      "5.0.9",
      "5.10.2",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Piggy Bank",
    search: {
      terms: [
        "bank",
        "salary",
        "save",
        "savings"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f4d3",
    voted: false
  },
  pills,
  pinterest,
  "pinterest-p": {
    changes: [
      "4.3.0",
      "5.0.0"
    ],
    label: "Pinterest P",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f231",
    voted: false
  },
  pix,
  pixiv,
  "pizza-slice": {
    aliases: {
      unicodes: {
        secondary: [
          "10f818"
        ]
      }
    },
    changes: [
      "5.7.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Pizza Slice",
    search: {
      terms: [
        "cheese",
        "chicago",
        "italian",
        "mozzarella",
        "new york",
        "pepperoni",
        "pie",
        "slice",
        "teenage mutant ninja turtles",
        "tomato"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f818",
    voted: true
  },
  "place-of-worship": {
    aliases: {
      unicodes: {
        secondary: [
          "10f67f"
        ]
      }
    },
    changes: [
      "5.3.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Place Of Worship",
    search: {
      terms: [
        "building",
        "church",
        "holy",
        "mosque",
        "synagogue"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f67f",
    voted: false
  },
  plane,
  "plane-arrival": {
    aliases: {
      unicodes: {
        composite: [
          "1f6ec"
        ],
        secondary: [
          "10f5af"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Plane Arrival",
    search: {
      terms: [
        "aeroplane",
        "airplane",
        "airplane arrival",
        "airport",
        "arrivals",
        "arriving",
        "destination",
        "fly",
        "land",
        "landing",
        "location",
        "mode",
        "travel",
        "trip"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5af",
    voted: false
  },
  "plane-circle-check": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Plane Circle Check",
    search: {
      terms: [
        "airplane",
        "airport",
        "enable",
        "flight",
        "fly",
        "not affected",
        "ok",
        "okay",
        "travel",
        "validate",
        "working"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e555",
    voted: false
  },
  "plane-circle-exclamation": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.5.1",
      "6.6.0",
      "6.7.0"
    ],
    label: "Plane Circle Exclamation",
    search: {
      terms: [
        "affected",
        "airplane",
        "airport",
        "failed",
        "flight",
        "fly",
        "travel"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e556",
    voted: false
  },
  "plane-circle-xmark": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.5.1",
      "6.6.0",
      "6.7.0"
    ],
    label: "Plane Circle Xmark",
    search: {
      terms: [
        "airplane",
        "airport",
        "destroy",
        "flight",
        "fly",
        "travel",
        "uncheck"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e557",
    voted: false
  },
  "plane-departure": {
    aliases: {
      unicodes: {
        composite: [
          "1f6eb"
        ],
        secondary: [
          "10f5b0"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.8.0",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Plane Departure",
    search: {
      terms: [
        "aeroplane",
        "airplane",
        "airplane departure",
        "airport",
        "check-in",
        "departing",
        "departure",
        "departures",
        "destination",
        "fly",
        "location",
        "mode",
        "take off",
        "taking off",
        "travel",
        "trip"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5b0",
    voted: false
  },
  "plane-lock": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Plane Lock",
    search: {
      terms: [
        "airplane",
        "airport",
        "closed",
        "flight",
        "fly",
        "lockdown",
        "padlock",
        "privacy",
        "quarantine",
        "travel"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e558",
    voted: false
  },
  "plane-slash": {
    aliases: {
      unicodes: {
        secondary: [
          "10e069"
        ]
      }
    },
    changes: [
      "5.13.0",
      "5.14.0",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Plane Slash",
    search: {
      terms: [
        "airplane mode",
        "airport",
        "canceled",
        "covid-19",
        "delayed",
        "disabled",
        "grounded",
        "travel"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e069",
    voted: false
  },
  "plane-up": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.4.1",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Plane Up",
    search: {
      terms: [
        "airplane",
        "airport",
        "internet",
        "signal",
        "sky",
        "wifi",
        "wireless"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e22d",
    voted: false
  },
  "plant-wilt": {
    changes: [
      "6.1.0",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Plant Wilt",
    search: {
      terms: [
        "drought",
        "planting",
        "vegetation",
        "wilt"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e5aa",
    voted: false
  },
  "plate-wheat": {
    changes: [
      "6.1.0",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Plate Wheat",
    search: {
      terms: [
        "bowl",
        "hunger",
        "rations",
        "wheat"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e55a",
    voted: false
  },
  play,
  playstation,
  plug,
  "plug-circle-bolt": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Plug Circle Bolt",
    search: {
      terms: [
        "electric",
        "electricity",
        "plug",
        "power"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e55b",
    voted: false
  },
  "plug-circle-check": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Plug Circle Check",
    search: {
      terms: [
        "electric",
        "electricity",
        "enable",
        "not affected",
        "ok",
        "okay",
        "plug",
        "power",
        "validate",
        "working"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e55c",
    voted: false
  },
  "plug-circle-exclamation": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Plug Circle Exclamation",
    search: {
      terms: [
        "affected",
        "electric",
        "electricity",
        "failed",
        "plug",
        "power"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e55d",
    voted: false
  },
  "plug-circle-minus": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Plug Circle Minus",
    search: {
      terms: [
        "disconnect",
        "electric",
        "electricity",
        "plug",
        "power"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e55e",
    voted: false
  },
  "plug-circle-plus": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Plug Circle Plus",
    search: {
      terms: [
        "electric",
        "electricity",
        "plug",
        "power"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e55f",
    voted: false
  },
  "plug-circle-xmark": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Plug Circle Xmark",
    search: {
      terms: [
        "destroy",
        "disconnect",
        "electric",
        "electricity",
        "outage",
        "plug",
        "power",
        "uncheck"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e560",
    voted: false
  },
  plus,
  "plus-minus": {
    changes: [
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Plus Minus",
    search: {
      terms: [
        "Plus-Minus Sign",
        "add",
        "math",
        "subtract"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e43c",
    voted: false
  },
  podcast,
  poo,
  "poo-storm": {
    aliases: {
      names: [
        "poo-bolt"
      ],
      unicodes: {
        secondary: [
          "10f75a"
        ]
      }
    },
    changes: [
      "5.5.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Poo Storm",
    search: {
      terms: [
        "bolt",
        "cloud",
        "euphemism",
        "lightning",
        "mess",
        "poop",
        "shit",
        "turd"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f75a",
    voted: false
  },
  poop,
  "power-off": {
    aliases: {
      unicodes: {
        composite: [
          "23fb"
        ],
        secondary: [
          "10f011"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Power Off",
    search: {
      terms: [
        "Power Symbol",
        "cancel",
        "computer",
        "on",
        "reboot",
        "restart"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f011",
    voted: false
  },
  prescription,
  "prescription-bottle": {
    aliases: {
      unicodes: {
        secondary: [
          "10f485"
        ]
      }
    },
    changes: [
      "5.0.7",
      "6.0.0-beta1",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Prescription Bottle",
    search: {
      terms: [
        "drugs",
        "medical",
        "medicine",
        "pharmacy",
        "rx"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f485",
    voted: false
  },
  "prescription-bottle-medical": {
    aliases: {
      names: [
        "prescription-bottle-alt"
      ],
      unicodes: {
        secondary: [
          "10f486"
        ]
      }
    },
    changes: [
      "5.0.7",
      "6.0.0-beta1",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Prescription Bottle Medical",
    search: {
      terms: [
        "drugs",
        "medical",
        "medicine",
        "pharmacy",
        "rx"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f486",
    voted: false
  },
  print,
  "product-hunt": {
    changes: [
      "4.5.0",
      "5.0.0"
    ],
    label: "Product Hunt",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f288",
    voted: false
  },
  "pump-medical": {
    aliases: {
      unicodes: {
        secondary: [
          "10e06a"
        ]
      }
    },
    changes: [
      "5.13.0",
      "5.14.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Pump Medical",
    search: {
      terms: [
        "anti-bacterial",
        "clean",
        "covid-19",
        "disinfect",
        "hygiene",
        "medical grade",
        "sanitizer",
        "soap"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e06a",
    voted: false
  },
  "pump-soap": {
    aliases: {
      unicodes: {
        secondary: [
          "10e06b"
        ]
      }
    },
    changes: [
      "5.13.0",
      "5.14.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Pump Soap",
    search: {
      terms: [
        "anti-bacterial",
        "clean",
        "covid-19",
        "disinfect",
        "hygiene",
        "sanitizer",
        "soap"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e06b",
    voted: false
  },
  pushed,
  "puzzle-piece": {
    aliases: {
      unicodes: {
        composite: [
          "1f9e9"
        ],
        secondary: [
          "10f12e"
        ]
      }
    },
    changes: [
      "3.1.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.4.1",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Puzzle Piece",
    search: {
      terms: [
        "add-on",
        "addon",
        "clue",
        "game",
        "interlocking",
        "jigsaw",
        "piece",
        "puzzle",
        "puzzle piece",
        "section"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f12e",
    voted: false
  },
  python,
  q,
  qq,
  qrcode,
  question,
  quinscape,
  quora,
  "quote-left": {
    aliases: {
      names: [
        "quote-left-alt"
      ],
      unicodes: {
        composite: [
          "201c"
        ],
        secondary: [
          "10f10d"
        ]
      }
    },
    changes: [
      "3.0.0",
      "5.0.0",
      "5.0.9",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Quote Left",
    search: {
      terms: [
        "Left Double Quotation Mark",
        "mention",
        "note",
        "phrase",
        "text",
        "type"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f10d",
    voted: false
  },
  "quote-right": {
    aliases: {
      names: [
        "quote-right-alt"
      ],
      unicodes: {
        composite: [
          "201d"
        ],
        secondary: [
          "10f10e"
        ]
      }
    },
    changes: [
      "3.0.0",
      "5.0.0",
      "5.0.9",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Quote Right",
    search: {
      terms: [
        "Right Double Quotation Mark",
        "mention",
        "note",
        "phrase",
        "text",
        "type"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f10e",
    voted: false
  },
  r,
  "r-project": {
    changes: [
      "5.0.11",
      "5.0.12"
    ],
    label: "R Project",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f4f7",
    voted: true
  },
  radiation,
  radio,
  rainbow,
  "ranking-star": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Ranking Star",
    search: {
      terms: [
        "chart",
        "first place",
        "podium",
        "quality",
        "rank",
        "revenue",
        "win"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e561",
    voted: false
  },
  "raspberry-pi": {
    changes: [
      "5.6.0"
    ],
    label: "Raspberry Pi",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f7bb",
    voted: true
  },
  ravelry,
  react,
  reacteurope,
  readme,
  rebel,
  receipt,
  "record-vinyl": {
    aliases: {
      unicodes: {
        secondary: [
          "10f8d9"
        ]
      }
    },
    changes: [
      "5.11.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Record Vinyl",
    search: {
      terms: [
        "LP",
        "album",
        "analog",
        "music",
        "phonograph",
        "sound"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f8d9",
    voted: false
  },
  "rectangle-ad": {
    aliases: {
      names: [
        "ad"
      ],
      unicodes: {
        secondary: [
          "10f641"
        ]
      }
    },
    changes: [
      "5.3.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Rectangle Ad",
    search: {
      terms: [
        "advertisement",
        "media",
        "newspaper",
        "promotion",
        "publicity"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f641",
    voted: false
  },
  "rectangle-list": {
    aliases: {
      names: [
        "list-alt"
      ],
      unicodes: {
        secondary: [
          "10f022"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Rectangle List",
    search: {
      terms: [
        "cheatsheet",
        "checklist",
        "completed",
        "done",
        "finished",
        "ol",
        "summary",
        "todo",
        "ul"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f022",
    voted: false
  },
  "rectangle-xmark": {
    aliases: {
      names: [
        "rectangle-times",
        "times-rectangle",
        "window-close"
      ],
      unicodes: {
        composite: [
          "f2d4"
        ],
        secondary: [
          "10f410"
        ]
      }
    },
    changes: [
      "4.7.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Rectangle Xmark",
    search: {
      terms: [
        "browser",
        "cancel",
        "computer",
        "development",
        "uncheck"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f410",
    voted: false
  },
  recycle,
  "red-river": {
    changes: [
      "5.0.0"
    ],
    label: "red river",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f3e3",
    voted: false
  },
  reddit,
  "reddit-alien": {
    changes: [
      "4.5.0",
      "5.0.0",
      "6.5.1"
    ],
    label: "Reddit Alien",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f281",
    voted: false
  },
  redhat,
  registered,
  renren,
  repeat,
  reply,
  "reply-all": {
    aliases: {
      names: [
        "mail-reply-all"
      ],
      unicodes: {
        secondary: [
          "10f122"
        ]
      }
    },
    changes: [
      "3.1.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Reply All",
    search: {
      terms: [
        "mail",
        "message",
        "respond"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f122",
    voted: false
  },
  replyd,
  republican,
  researchgate,
  resolving,
  restroom,
  retweet,
  rev,
  ribbon,
  "right-from-bracket": {
    aliases: {
      names: [
        "sign-out-alt"
      ],
      unicodes: {
        secondary: [
          "10f2f5"
        ]
      }
    },
    changes: [
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.5.2",
      "6.6.0",
      "6.7.0"
    ],
    label: "Right From Bracket",
    search: {
      terms: [
        "arrow",
        "exit",
        "leave",
        "log out",
        "logout",
        "sign-out"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f2f5",
    voted: false
  },
  "right-left": {
    aliases: {
      names: [
        "exchange-alt"
      ],
      unicodes: {
        secondary: [
          "10f362"
        ]
      }
    },
    changes: [
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Right Left",
    search: {
      terms: [
        "arrow",
        "arrows",
        "exchange",
        "reciprocate",
        "return",
        "swap",
        "transfer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f362",
    voted: false
  },
  "right-long": {
    aliases: {
      names: [
        "long-arrow-alt-right"
      ],
      unicodes: {
        secondary: [
          "10f30b"
        ]
      }
    },
    changes: [
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Right Long",
    search: {
      terms: [
        "forward",
        "long-arrow-right",
        "next"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f30b",
    voted: false
  },
  "right-to-bracket": {
    aliases: {
      names: [
        "sign-in-alt"
      ],
      unicodes: {
        secondary: [
          "10f2f6"
        ]
      }
    },
    changes: [
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.5.2",
      "6.6.0",
      "6.7.0"
    ],
    label: "Right To Bracket",
    search: {
      terms: [
        "arrow",
        "enter",
        "join",
        "log in",
        "login",
        "sign in",
        "sign up",
        "sign-in",
        "signin",
        "signup"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f2f6",
    voted: false
  },
  ring,
  road,
  "road-barrier": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Road Barrier",
    search: {
      terms: [
        "block",
        "border",
        "no entry",
        "roadblock"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e562",
    voted: false
  },
  "road-bridge": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Road Bridge",
    search: {
      terms: [
        "bridge",
        "infrastructure",
        "road",
        "travel"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e563",
    voted: false
  },
  "road-circle-check": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Road Circle Check",
    search: {
      terms: [
        "enable",
        "freeway",
        "highway",
        "not affected",
        "ok",
        "okay",
        "pavement",
        "road",
        "validate",
        "working"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e564",
    voted: false
  },
  "road-circle-exclamation": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Road Circle Exclamation",
    search: {
      terms: [
        "affected",
        "failed",
        "freeway",
        "highway",
        "pavement",
        "road"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e565",
    voted: false
  },
  "road-circle-xmark": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Road Circle Xmark",
    search: {
      terms: [
        "destroy",
        "freeway",
        "highway",
        "pavement",
        "road",
        "uncheck"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e566",
    voted: false
  },
  "road-lock": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Road Lock",
    search: {
      terms: [
        "closed",
        "freeway",
        "highway",
        "lockdown",
        "padlock",
        "pavement",
        "privacy",
        "quarantine",
        "road"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e567",
    voted: false
  },
  "road-spikes": {
    changes: [
      "6.1.0",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Road Spikes",
    search: {
      terms: [
        "barrier",
        "roadblock",
        "spikes"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e568",
    voted: false
  },
  robot,
  rocket,
  rocketchat,
  rockrms,
  rotate,
  "rotate-left": {
    aliases: {
      names: [
        "rotate-back",
        "rotate-backward",
        "undo-alt"
      ],
      unicodes: {
        secondary: [
          "10f2ea"
        ]
      }
    },
    changes: [
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Rotate Left",
    search: {
      terms: [
        "back",
        "control z",
        "exchange",
        "oops",
        "return",
        "swap"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f2ea",
    voted: false
  },
  "rotate-right": {
    aliases: {
      names: [
        "redo-alt",
        "rotate-forward"
      ],
      unicodes: {
        secondary: [
          "10f2f9"
        ]
      }
    },
    changes: [
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Rotate Right",
    search: {
      terms: [
        "forward",
        "refresh",
        "reload",
        "renew",
        "repeat",
        "retry"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f2f9",
    voted: false
  },
  route,
  rss,
  "ruble-sign": {
    aliases: {
      names: [
        "rouble",
        "rub",
        "ruble"
      ],
      unicodes: {
        composite: [
          "20bd"
        ],
        secondary: [
          "10f158"
        ]
      }
    },
    changes: [
      "4.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Ruble Sign",
    search: {
      terms: [
        "Ruble Sign",
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f158",
    voted: false
  },
  rug,
  ruler,
  "ruler-combined": {
    aliases: {
      unicodes: {
        secondary: [
          "10f546"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Ruler Combined",
    search: {
      terms: [
        "design",
        "draft",
        "length",
        "measure",
        "planning"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f546",
    voted: true
  },
  "ruler-horizontal": {
    aliases: {
      unicodes: {
        secondary: [
          "10f547"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Ruler Horizontal",
    search: {
      terms: [
        "design",
        "draft",
        "length",
        "measure",
        "planning"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f547",
    voted: true
  },
  "ruler-vertical": {
    aliases: {
      unicodes: {
        secondary: [
          "10f548"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Ruler Vertical",
    search: {
      terms: [
        "design",
        "draft",
        "length",
        "measure",
        "planning"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f548",
    voted: true
  },
  "rupee-sign": {
    aliases: {
      names: [
        "rupee"
      ],
      unicodes: {
        composite: [
          "20a8"
        ],
        secondary: [
          "10f156"
        ]
      }
    },
    changes: [
      "3.2.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Rupee Sign",
    search: {
      terms: [
        "Rupee Sign",
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f156",
    voted: false
  },
  "rupiah-sign": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Rupiah Sign",
    search: {
      terms: [
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e23d",
    voted: false
  },
  rust,
  s,
  "sack-dollar": {
    aliases: {
      unicodes: {
        composite: [
          "1f4b0"
        ],
        secondary: [
          "10f81d"
        ]
      }
    },
    changes: [
      "5.7.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Sack Dollar",
    search: {
      terms: [
        "bag",
        "burlap",
        "cash",
        "dollar",
        "investment",
        "money",
        "money bag",
        "moneybag",
        "premium",
        "robber",
        "salary",
        "santa",
        "usd"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f81d",
    voted: true
  },
  "sack-xmark": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Sack Xmark",
    search: {
      terms: [
        "bag",
        "burlap",
        "coupon",
        "rations",
        "salary",
        "uncheck"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e56a",
    voted: false
  },
  safari,
  sailboat,
  salesforce,
  sass,
  satellite,
  "satellite-dish": {
    aliases: {
      unicodes: {
        composite: [
          "1f4e1"
        ],
        secondary: [
          "10f7c0"
        ]
      }
    },
    changes: [
      "5.6.0",
      "5.12.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Satellite Dish",
    search: {
      terms: [
        "SETI",
        "antenna",
        "communications",
        "dish",
        "hardware",
        "radar",
        "receiver",
        "satellite",
        "satellite antenna",
        "saucer",
        "signal",
        "space"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f7c0",
    voted: true
  },
  "scale-balanced": {
    aliases: {
      names: [
        "balance-scale"
      ],
      unicodes: {
        composite: [
          "2696"
        ],
        secondary: [
          "10f24e"
        ]
      }
    },
    changes: [
      "4.4.0",
      "5.0.0",
      "5.0.13",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Scale Balanced",
    search: {
      terms: [
        "Libra",
        "balance",
        "balance scale",
        "balanced",
        "justice",
        "law",
        "legal",
        "measure",
        "rule",
        "scale",
        "weight",
        "zodiac"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f24e",
    voted: false
  },
  "scale-unbalanced": {
    aliases: {
      names: [
        "balance-scale-left"
      ],
      unicodes: {
        secondary: [
          "10f515"
        ]
      }
    },
    changes: [
      "5.0.13",
      "5.9.0",
      "5.12.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Scale Unbalanced",
    search: {
      terms: [
        "justice",
        "legal",
        "measure",
        "unbalanced",
        "weight"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f515",
    voted: true
  },
  "scale-unbalanced-flip": {
    aliases: {
      names: [
        "balance-scale-right"
      ],
      unicodes: {
        secondary: [
          "10f516"
        ]
      }
    },
    changes: [
      "5.0.13",
      "5.9.0",
      "5.12.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Scale Unbalanced Flip",
    search: {
      terms: [
        "justice",
        "legal",
        "measure",
        "unbalanced",
        "weight"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f516",
    voted: true
  },
  schlix,
  school,
  "school-circle-check": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "School Circle Check",
    search: {
      terms: [
        "enable",
        "not affected",
        "ok",
        "okay",
        "schoolhouse",
        "validate",
        "working"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e56b",
    voted: false
  },
  "school-circle-exclamation": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "School Circle Exclamation",
    search: {
      terms: [
        "affected",
        "failed",
        "schoolhouse"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e56c",
    voted: false
  },
  "school-circle-xmark": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "School Circle Xmark",
    search: {
      terms: [
        "destroy",
        "schoolhouse",
        "uncheck"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e56d",
    voted: false
  },
  "school-flag": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "School Flag",
    search: {
      terms: [
        "educate",
        "flag",
        "school",
        "schoolhouse"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e56e",
    voted: false
  },
  "school-lock": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "School Lock",
    search: {
      terms: [
        "closed",
        "lockdown",
        "padlock",
        "privacy",
        "quarantine",
        "schoolhouse"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e56f",
    voted: false
  },
  scissors,
  screenpal,
  screwdriver,
  "screwdriver-wrench": {
    aliases: {
      names: [
        "tools"
      ],
      unicodes: {
        secondary: [
          "10f7d9"
        ]
      }
    },
    changes: [
      "5.6.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Screwdriver Wrench",
    search: {
      terms: [
        "admin",
        "configuration",
        "equipment",
        "fix",
        "maintenance",
        "modify",
        "repair",
        "screwdriver",
        "settings",
        "tools",
        "wrench"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f7d9",
    voted: true
  },
  scribd,
  scroll,
  "scroll-torah": {
    aliases: {
      names: [
        "torah"
      ],
      unicodes: {
        secondary: [
          "10f6a0"
        ]
      }
    },
    changes: [
      "5.3.0",
      "5.7.0",
      "5.9.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Scroll Torah",
    search: {
      terms: [
        "book",
        "jewish",
        "judaism",
        "religion",
        "scroll"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f6a0",
    voted: false
  },
  "sd-card": {
    aliases: {
      unicodes: {
        secondary: [
          "10f7c2"
        ]
      }
    },
    changes: [
      "5.6.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Sd Card",
    search: {
      terms: [
        "image",
        "img",
        "memory",
        "photo",
        "save"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f7c2",
    voted: true
  },
  searchengin,
  section,
  seedling,
  sellcast,
  sellsy,
  server,
  servicestack,
  shapes,
  share,
  "share-from-square": {
    aliases: {
      names: [
        "share-square"
      ],
      unicodes: {
        composite: [
          "f045"
        ],
        secondary: [
          "10f14d"
        ]
      }
    },
    changes: [
      "3.1.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.4.1",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Share From Square",
    search: {
      terms: [
        "forward",
        "save",
        "send",
        "social"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f14d",
    voted: false
  },
  "share-nodes": {
    aliases: {
      names: [
        "share-alt"
      ],
      unicodes: {
        secondary: [
          "10f1e0"
        ]
      }
    },
    changes: [
      "4.1.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Share Nodes",
    search: {
      terms: [
        "forward",
        "save",
        "send",
        "social"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f1e0",
    voted: false
  },
  "sheet-plastic": {
    changes: [
      "6.1.0",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Sheet Plastic",
    search: {
      terms: [
        "plastic",
        "plastic wrap",
        "protect",
        "tarp",
        "tarpaulin",
        "waterproof"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e571",
    voted: false
  },
  "shekel-sign": {
    aliases: {
      names: [
        "ils",
        "shekel",
        "sheqel",
        "sheqel-sign"
      ],
      unicodes: {
        composite: [
          "20aa"
        ],
        secondary: [
          "10f20b"
        ]
      }
    },
    changes: [
      "4.2.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Shekel Sign",
    search: {
      terms: [
        "New Sheqel Sign",
        "currency",
        "ils",
        "money"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f20b",
    voted: true
  },
  shield,
  "shield-cat": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Shield Cat",
    search: {
      terms: [
        "animal",
        "feline",
        "pet",
        "protect",
        "safety",
        "veterinary"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e572",
    voted: false
  },
  "shield-dog": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Shield Dog",
    search: {
      terms: [
        "animal",
        "canine",
        "pet",
        "protect",
        "safety",
        "veterinary"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e573",
    voted: false
  },
  "shield-halved": {
    aliases: {
      names: [
        "shield-alt"
      ],
      unicodes: {
        secondary: [
          "10f3ed"
        ]
      }
    },
    changes: [
      "5.0.0",
      "6.0.0-beta1",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Shield Halved",
    search: {
      terms: [
        "achievement",
        "armor",
        "award",
        "block",
        "cleric",
        "defend",
        "defense",
        "holy",
        "paladin",
        "privacy",
        "security",
        "shield",
        "weapon",
        "winner"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f3ed",
    voted: false
  },
  "shield-heart": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Shield Heart",
    search: {
      terms: [
        "love",
        "protect",
        "safe",
        "safety",
        "shield",
        "wishlist"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e574",
    voted: false
  },
  "shield-virus": {
    aliases: {
      unicodes: {
        secondary: [
          "10e06c"
        ]
      }
    },
    changes: [
      "5.13.0",
      "5.14.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Shield Virus",
    search: {
      terms: [
        "antibodies",
        "barrier",
        "coronavirus",
        "covid-19",
        "flu",
        "health",
        "infection",
        "pandemic",
        "protect",
        "safety",
        "vaccine"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e06c",
    voted: false
  },
  ship,
  shirt,
  shirtsinbulk,
  "shoe-prints": {
    aliases: {
      unicodes: {
        secondary: [
          "10f54b"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Shoe Prints",
    search: {
      terms: [
        "feet",
        "footprints",
        "steps",
        "walk"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f54b",
    voted: true
  },
  shoelace,
  shop,
  "shop-lock": {
    changes: [
      "6.0.0",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Shop Lock",
    search: {
      terms: [
        "bodega",
        "building",
        "buy",
        "closed",
        "lock",
        "lockdown",
        "market",
        "padlock",
        "privacy",
        "purchase",
        "quarantine",
        "shop",
        "shopping",
        "store"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4a5",
    voted: false
  },
  "shop-slash": {
    aliases: {
      names: [
        "store-alt-slash"
      ],
      unicodes: {
        secondary: [
          "10e070"
        ]
      }
    },
    changes: [
      "5.13.0",
      "5.14.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Shop Slash",
    search: {
      terms: [
        "building",
        "buy",
        "closed",
        "covid-19",
        "disabled",
        "purchase",
        "shopping"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e070",
    voted: false
  },
  shopify,
  shopware,
  shower,
  shrimp,
  shuffle,
  "shuttle-space": {
    aliases: {
      names: [
        "space-shuttle"
      ],
      unicodes: {
        secondary: [
          "10f197"
        ]
      }
    },
    changes: [
      "4.1.0",
      "5.0.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Shuttle Space",
    search: {
      terms: [
        "astronaut",
        "machine",
        "nasa",
        "rocket",
        "space",
        "transportation"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f197",
    voted: false
  },
  "sign-hanging": {
    aliases: {
      names: [
        "sign"
      ],
      unicodes: {
        secondary: [
          "10f4d9"
        ]
      }
    },
    changes: [
      "5.0.9",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Sign Hanging",
    search: {
      terms: [
        "directions",
        "real estate",
        "signage",
        "wayfinding"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f4d9",
    voted: false
  },
  signal,
  "signal-messenger": {
    changes: [
      "6.5.0",
      "6.5.1"
    ],
    label: "Signal Messenger",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "e663",
    voted: false
  },
  signature,
  "signs-post": {
    aliases: {
      names: [
        "map-signs"
      ],
      unicodes: {
        secondary: [
          "10f277"
        ]
      }
    },
    changes: [
      "4.4.0",
      "5.0.0",
      "5.2.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Signs Post",
    search: {
      terms: [
        "directions",
        "directory",
        "map",
        "signage",
        "wayfinding"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f277",
    voted: false
  },
  "sim-card": {
    aliases: {
      unicodes: {
        secondary: [
          "10f7c4"
        ]
      }
    },
    changes: [
      "5.6.0",
      "5.8.2",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Sim Card",
    search: {
      terms: [
        "hard drive",
        "hardware",
        "portable",
        "storage",
        "technology",
        "tiny"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f7c4",
    voted: true
  },
  simplybuilt,
  sink,
  sistrix,
  sitemap,
  sith,
  sitrox,
  sketch,
  skull,
  "skull-crossbones": {
    aliases: {
      unicodes: {
        composite: [
          "1f571",
          "2620"
        ],
        secondary: [
          "10f714"
        ]
      }
    },
    changes: [
      "5.4.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Skull Crossbones",
    search: {
      terms: [
        "Black Skull and Crossbones",
        "Dungeons & Dragons",
        "alert",
        "bones",
        "crossbones",
        "d&d",
        "danger",
        "dangerous area",
        "dead",
        "deadly",
        "death",
        "dnd",
        "face",
        "fantasy",
        "halloween",
        "holiday",
        "jolly-roger",
        "monster",
        "pirate",
        "poison",
        "skeleton",
        "skull",
        "skull and crossbones",
        "warning"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f714",
    voted: false
  },
  skyatlas,
  skype,
  slack,
  slash,
  sleigh,
  sliders,
  slideshare,
  smog,
  smoking,
  snapchat,
  snowflake,
  snowman,
  snowplow,
  soap,
  socks,
  "solar-panel": {
    aliases: {
      unicodes: {
        secondary: [
          "10f5ba"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Solar Panel",
    search: {
      terms: [
        "clean",
        "eco-friendly",
        "energy",
        "green",
        "sun"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5ba",
    voted: false
  },
  sort,
  "sort-down": {
    aliases: {
      names: [
        "sort-desc"
      ],
      unicodes: {
        secondary: [
          "10f0dd"
        ]
      }
    },
    changes: [
      "2.0.0",
      "5.0.0",
      "5.10.1",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Sort Down",
    search: {
      terms: [
        "arrow",
        "descending",
        "filter",
        "insert",
        "order",
        "sort-desc"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f0dd",
    voted: false
  },
  "sort-up": {
    aliases: {
      names: [
        "sort-asc"
      ],
      unicodes: {
        secondary: [
          "10f0de"
        ]
      }
    },
    changes: [
      "2.0.0",
      "5.0.0",
      "5.10.1",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Sort Up",
    search: {
      terms: [
        "arrow",
        "ascending",
        "filter",
        "order",
        "sort-asc",
        "upgrade"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f0de",
    voted: false
  },
  soundcloud,
  sourcetree,
  spa,
  "space-awesome": {
    changes: [
      "6.1.2"
    ],
    label: "Space Awesome",
    search: {
      terms: [
        "adventure",
        "rocket",
        "ship",
        "shuttle"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "e5ac",
    voted: false
  },
  "spaghetti-monster-flying": {
    aliases: {
      names: [
        "pastafarianism"
      ],
      unicodes: {
        secondary: [
          "10f67b"
        ]
      }
    },
    changes: [
      "5.3.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Spaghetti Monster Flying",
    search: {
      terms: [
        "agnosticism",
        "atheism",
        "flying spaghetti monster",
        "fsm"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f67b",
    voted: false
  },
  speakap,
  "speaker-deck": {
    changes: [
      "5.8.0"
    ],
    label: "Speaker Deck",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f83c",
    voted: false
  },
  "spell-check": {
    aliases: {
      unicodes: {
        secondary: [
          "10f891"
        ]
      }
    },
    changes: [
      "5.9.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Spell Check",
    search: {
      terms: [
        "dictionary",
        "edit",
        "editor",
        "enable",
        "grammar",
        "text",
        "validate",
        "working"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f891",
    voted: false
  },
  spider,
  spinner,
  splotch,
  spoon,
  spotify,
  "spray-can": {
    aliases: {
      unicodes: {
        secondary: [
          "10f5bd"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.5.2",
      "6.6.0",
      "6.7.0"
    ],
    label: "Spray Can",
    search: {
      terms: [
        "Paint",
        "aerosol",
        "design",
        "graffiti",
        "tag"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5bd",
    voted: false
  },
  "spray-can-sparkles": {
    aliases: {
      names: [
        "air-freshener"
      ],
      unicodes: {
        secondary: [
          "10f5d0"
        ]
      }
    },
    changes: [
      "5.2.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.5.2",
      "6.6.0",
      "6.7.0"
    ],
    label: "Spray Can Sparkles",
    search: {
      terms: [
        "car",
        "clean",
        "deodorize",
        "fresh",
        "pine",
        "scent"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5d0",
    voted: false
  },
  square,
  "square-arrow-up-right": {
    aliases: {
      names: [
        "external-link-square"
      ],
      unicodes: {
        secondary: [
          "10f14c"
        ]
      }
    },
    changes: [
      "3.1.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Square Arrow Up Right",
    search: {
      terms: [
        "diagonal",
        "new",
        "open",
        "send",
        "share"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f14c",
    voted: false
  },
  "square-behance": {
    aliases: {
      names: [
        "behance-square"
      ]
    },
    changes: [
      "4.1.0",
      "5.0.0",
      "5.0.3",
      "6.1.2",
      "6.5.0"
    ],
    label: "Square Behance",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f1b5",
    voted: false
  },
  "square-binary": {
    changes: [
      "6.7.0"
    ],
    label: "Square Binary",
    search: {
      terms: [
        "ai",
        "data",
        "language",
        "llm",
        "model",
        "programming",
        "token"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e69b",
    voted: false
  },
  "square-bluesky": {
    changes: [
      "6.7.1"
    ],
    label: "Square Bluesky",
    search: {
      terms: [
        "social network"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "e6a3",
    voted: false
  },
  "square-caret-down": {
    aliases: {
      names: [
        "caret-square-down"
      ],
      unicodes: {
        secondary: [
          "10f150"
        ]
      }
    },
    changes: [
      "3.2.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Square Caret Down",
    search: {
      terms: [
        "arrow",
        "caret-square-o-down",
        "dropdown",
        "expand",
        "insert",
        "menu",
        "more",
        "triangle"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f150",
    voted: false
  },
  "square-caret-left": {
    aliases: {
      names: [
        "caret-square-left"
      ],
      unicodes: {
        secondary: [
          "10f191"
        ]
      }
    },
    changes: [
      "4.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Square Caret Left",
    search: {
      terms: [
        "arrow",
        "back",
        "caret-square-o-left",
        "previous",
        "triangle"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f191",
    voted: false
  },
  "square-caret-right": {
    aliases: {
      names: [
        "caret-square-right"
      ],
      unicodes: {
        secondary: [
          "10f152"
        ]
      }
    },
    changes: [
      "3.2.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Square Caret Right",
    search: {
      terms: [
        "arrow",
        "caret-square-o-right",
        "forward",
        "next",
        "triangle"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f152",
    voted: false
  },
  "square-caret-up": {
    aliases: {
      names: [
        "caret-square-up"
      ],
      unicodes: {
        secondary: [
          "10f151"
        ]
      }
    },
    changes: [
      "3.2.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Square Caret Up",
    search: {
      terms: [
        "arrow",
        "caret-square-o-up",
        "collapse",
        "triangle",
        "upgrade",
        "upload"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f151",
    voted: false
  },
  "square-check": {
    aliases: {
      names: [
        "check-square"
      ],
      unicodes: {
        composite: [
          "2611",
          "2705",
          "f046"
        ],
        secondary: [
          "10f14a"
        ]
      }
    },
    changes: [
      "3.1.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Square Check",
    search: {
      terms: [
        "accept",
        "agree",
        "box",
        "button",
        "check",
        "check box with check",
        "check mark button",
        "checkmark",
        "confirm",
        "correct",
        "coupon",
        "done",
        "enable",
        "mark",
        "ok",
        "select",
        "success",
        "tick",
        "todo",
        "validate",
        "working",
        "yes",
        "✓"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f14a",
    voted: false
  },
  "square-dribbble": {
    aliases: {
      names: [
        "dribbble-square"
      ]
    },
    changes: [
      "5.0.0",
      "6.1.2",
      "6.5.0"
    ],
    label: "Square Dribbble",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f397",
    voted: false
  },
  "square-envelope": {
    aliases: {
      names: [
        "envelope-square"
      ],
      unicodes: {
        secondary: [
          "10f199"
        ]
      }
    },
    changes: [
      "4.1.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Square Envelope",
    search: {
      terms: [
        "e-mail",
        "email",
        "letter",
        "mail",
        "message",
        "notification",
        "offer",
        "support"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f199",
    voted: false
  },
  "square-facebook": {
    aliases: {
      names: [
        "facebook-square"
      ]
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "5.8.2",
      "6.1.2",
      "6.5.0"
    ],
    label: "Square Facebook",
    search: {
      terms: [
        "fabook",
        "fb",
        "social network"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f082",
    voted: false
  },
  "square-font-awesome": {
    changes: [
      "5.0.0",
      "5.0.1",
      "6.0.0-beta1",
      "6.1.2",
      "6.5.2"
    ],
    label: "Square Font Awesome",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "e5ad",
    voted: false
  },
  "square-font-awesome-stroke": {
    aliases: {
      names: [
        "font-awesome-alt"
      ]
    },
    changes: [
      "5.0.0",
      "6.0.0-beta1",
      "6.5.2"
    ],
    label: "Square Font Awesome Stroke",
    search: {
      terms: [
        "awesome",
        "flag",
        "font",
        "icons",
        "typeface"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f35c",
    voted: false
  },
  "square-full": {
    aliases: {
      unicodes: {
        composite: [
          "1f7e5",
          "1f7e6",
          "1f7e7",
          "1f7e8",
          "1f7e9",
          "1f7ea",
          "1f7eb",
          "2b1b",
          "2b1c"
        ],
        secondary: [
          "10f45c"
        ]
      }
    },
    changes: [
      "5.0.5",
      "5.10.2",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Square Full",
    search: {
      terms: [
        "black large square",
        "block",
        "blue",
        "blue square",
        "box",
        "brown",
        "brown square",
        "geometric",
        "green",
        "green square",
        "orange",
        "orange square",
        "purple",
        "purple square",
        "red",
        "red square",
        "shape",
        "square",
        "white large square",
        "yellow",
        "yellow square"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f45c",
    voted: false
  },
  "square-git": {
    aliases: {
      names: [
        "git-square"
      ]
    },
    changes: [
      "4.1.0",
      "5.0.0",
      "5.8.2",
      "6.1.2",
      "6.5.0"
    ],
    label: "Square Git",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f1d2",
    voted: false
  },
  "square-github": {
    aliases: {
      names: [
        "github-square"
      ]
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.1.2",
      "6.5.0"
    ],
    label: "Square Github",
    search: {
      terms: [
        "octocat"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f092",
    voted: false
  },
  "square-gitlab": {
    aliases: {
      names: [
        "gitlab-square"
      ]
    },
    changes: [
      "6.1.2",
      "6.5.0"
    ],
    label: "Square Gitlab",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "e5ae",
    voted: false
  },
  "square-google-plus": {
    aliases: {
      names: [
        "google-plus-square"
      ]
    },
    changes: [
      "2.0.0",
      "5.0.0",
      "6.1.2",
      "6.5.0"
    ],
    label: "Square Google Plus",
    search: {
      terms: [
        "social network"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f0d4",
    voted: false
  },
  "square-h": {
    aliases: {
      names: [
        "h-square"
      ],
      unicodes: {
        secondary: [
          "10f0fd"
        ]
      }
    },
    changes: [
      "3.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Square H",
    search: {
      terms: [
        "directions",
        "emergency",
        "hospital",
        "hotel",
        "letter",
        "map"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f0fd",
    voted: false
  },
  "square-hacker-news": {
    aliases: {
      names: [
        "hacker-news-square"
      ]
    },
    changes: [
      "5.0.0",
      "6.1.2",
      "6.5.0"
    ],
    label: "Square Hacker News",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f3af",
    voted: false
  },
  "square-instagram": {
    aliases: {
      names: [
        "instagram-square"
      ]
    },
    changes: [
      "5.12.1",
      "5.14.0",
      "6.1.2",
      "6.5.0"
    ],
    label: "Square Instagram",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "e055",
    voted: true
  },
  "square-js": {
    aliases: {
      names: [
        "js-square"
      ]
    },
    changes: [
      "5.0.0",
      "5.0.3",
      "6.1.2",
      "6.5.0"
    ],
    label: "Square Js",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f3b9",
    voted: false
  },
  "square-lastfm": {
    aliases: {
      names: [
        "lastfm-square"
      ]
    },
    changes: [
      "4.2.0",
      "5.0.0",
      "5.0.11",
      "6.1.2",
      "6.5.0"
    ],
    label: "Square Lastfm",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f203",
    voted: false
  },
  "square-letterboxd": {
    changes: [
      "6.5.0"
    ],
    label: "Square Letterboxd",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "e62e",
    voted: false
  },
  "square-minus": {
    aliases: {
      names: [
        "minus-square"
      ],
      unicodes: {
        composite: [
          "f147"
        ],
        secondary: [
          "10f146"
        ]
      }
    },
    changes: [
      "3.1.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Square Minus",
    search: {
      terms: [
        "collapse",
        "delete",
        "hide",
        "minify",
        "negative",
        "remove",
        "shape",
        "trash"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f146",
    voted: false
  },
  "square-nfi": {
    changes: [
      "6.1.0",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Square Nfi",
    search: {
      terms: [
        "non-food item",
        "supplies"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e576",
    voted: false
  },
  "square-odnoklassniki": {
    aliases: {
      names: [
        "odnoklassniki-square"
      ]
    },
    changes: [
      "4.4.0",
      "5.0.0",
      "6.1.2",
      "6.5.0"
    ],
    label: "Square Odnoklassniki",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f264",
    voted: false
  },
  "square-parking": {
    aliases: {
      names: [
        "parking"
      ],
      unicodes: {
        composite: [
          "1f17f"
        ],
        secondary: [
          "10f540"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0",
      "6.7.1"
    ],
    label: "Square Parking",
    search: {
      terms: [
        "auto",
        "car",
        "garage",
        "meter",
        "parking"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f540",
    voted: true
  },
  "square-pen": {
    aliases: {
      names: [
        "pen-square",
        "pencil-square"
      ],
      unicodes: {
        secondary: [
          "10f14b"
        ]
      }
    },
    changes: [
      "3.1.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Square Pen",
    search: {
      terms: [
        "edit",
        "modify",
        "pencil-square",
        "update",
        "write"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f14b",
    voted: false
  },
  "square-person-confined": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Square Person Confined",
    search: {
      terms: [
        "captivity",
        "confined",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e577",
    voted: false
  },
  "square-phone": {
    aliases: {
      names: [
        "phone-square"
      ],
      unicodes: {
        secondary: [
          "10f098"
        ]
      }
    },
    changes: [
      "2.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Square Phone",
    search: {
      terms: [
        "call",
        "earphone",
        "number",
        "support",
        "telephone",
        "voice"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f098",
    voted: false
  },
  "square-phone-flip": {
    aliases: {
      names: [
        "phone-square-alt"
      ],
      unicodes: {
        secondary: [
          "10f87b"
        ]
      }
    },
    changes: [
      "5.9.0",
      "5.10.1",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Square Phone Flip",
    search: {
      terms: [
        "call",
        "earphone",
        "number",
        "support",
        "telephone",
        "voice"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f87b",
    voted: false
  },
  "square-pied-piper": {
    aliases: {
      names: [
        "pied-piper-square"
      ]
    },
    changes: [
      "5.12.0",
      "5.14.0",
      "6.1.2"
    ],
    label: "Pied Piper Square Logo (Old)",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "e01e",
    voted: false
  },
  "square-pinterest": {
    aliases: {
      names: [
        "pinterest-square"
      ]
    },
    changes: [
      "2.0.0",
      "5.0.0",
      "6.1.2",
      "6.5.0"
    ],
    label: "Square Pinterest",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f0d3",
    voted: false
  },
  "square-plus": {
    aliases: {
      names: [
        "plus-square"
      ],
      unicodes: {
        composite: [
          "f196"
        ],
        secondary: [
          "10f0fe"
        ]
      }
    },
    changes: [
      "3.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Square Plus",
    search: {
      terms: [
        "add",
        "create",
        "expand",
        "new",
        "positive",
        "shape"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f0fe",
    voted: false
  },
  "square-poll-horizontal": {
    aliases: {
      names: [
        "poll-h"
      ],
      unicodes: {
        secondary: [
          "10f682"
        ]
      }
    },
    changes: [
      "5.3.0",
      "5.10.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Square Poll Horizontal",
    search: {
      terms: [
        "chart",
        "graph",
        "results",
        "statistics",
        "survey",
        "trend",
        "vote",
        "voting"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f682",
    voted: false
  },
  "square-poll-vertical": {
    aliases: {
      names: [
        "poll"
      ],
      unicodes: {
        secondary: [
          "10f681"
        ]
      }
    },
    changes: [
      "5.3.0",
      "5.10.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Square Poll Vertical",
    search: {
      terms: [
        "chart",
        "graph",
        "results",
        "revenue",
        "statistics",
        "survey",
        "trend",
        "vote",
        "voting"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f681",
    voted: false
  },
  "square-reddit": {
    aliases: {
      names: [
        "reddit-square"
      ]
    },
    changes: [
      "4.1.0",
      "5.0.0",
      "6.1.2",
      "6.5.0",
      "6.5.1"
    ],
    label: "Square Reddit",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f1a2",
    voted: false
  },
  "square-root-variable": {
    aliases: {
      names: [
        "square-root-alt"
      ],
      unicodes: {
        secondary: [
          "10f698"
        ]
      }
    },
    changes: [
      "5.3.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Square Root Variable",
    search: {
      terms: [
        "arithmetic",
        "calculus",
        "division",
        "math"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f698",
    voted: false
  },
  "square-rss": {
    aliases: {
      names: [
        "rss-square"
      ],
      unicodes: {
        secondary: [
          "10f143"
        ]
      }
    },
    changes: [
      "3.1.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Square Rss",
    search: {
      terms: [
        "blog",
        "feed",
        "journal",
        "news",
        "writing"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f143",
    voted: false
  },
  "square-share-nodes": {
    aliases: {
      names: [
        "share-alt-square"
      ],
      unicodes: {
        secondary: [
          "10f1e1"
        ]
      }
    },
    changes: [
      "4.1.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Square Share Nodes",
    search: {
      terms: [
        "forward",
        "save",
        "send",
        "social"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f1e1",
    voted: false
  },
  "square-snapchat": {
    aliases: {
      names: [
        "snapchat-square"
      ]
    },
    changes: [
      "4.6.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.1.2"
    ],
    label: "Snapchat Square",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f2ad",
    voted: false
  },
  "square-steam": {
    aliases: {
      names: [
        "steam-square"
      ]
    },
    changes: [
      "4.1.0",
      "5.0.0",
      "6.1.2",
      "6.5.0"
    ],
    label: "Square Steam",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f1b7",
    voted: false
  },
  "square-threads": {
    changes: [
      "6.4.1",
      "6.4.2"
    ],
    label: "Square Threads",
    search: {
      terms: [
        "social network"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "e619",
    voted: false
  },
  "square-tumblr": {
    aliases: {
      names: [
        "tumblr-square"
      ]
    },
    changes: [
      "3.2.0",
      "5.0.0",
      "6.1.2",
      "6.5.0"
    ],
    label: "Square Tumblr",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f174",
    voted: false
  },
  "square-twitter": {
    aliases: {
      names: [
        "twitter-square"
      ]
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.1.2",
      "6.4.2"
    ],
    label: "Square Twitter",
    search: {
      terms: [
        "social network",
        "tweet"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f081",
    voted: false
  },
  "square-up-right": {
    aliases: {
      names: [
        "external-link-square-alt"
      ],
      unicodes: {
        composite: [
          "2197"
        ],
        secondary: [
          "10f360"
        ]
      }
    },
    changes: [
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Square Up Right",
    search: {
      terms: [
        "arrow",
        "diagonal",
        "direction",
        "external-link-square",
        "intercardinal",
        "new",
        "northeast",
        "open",
        "share",
        "up-right arrow"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f360",
    voted: false
  },
  "square-upwork": {
    changes: [
      "6.5.2"
    ],
    label: "Square Upwork",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "e67c",
    voted: false
  },
  "square-viadeo": {
    aliases: {
      names: [
        "viadeo-square"
      ]
    },
    changes: [
      "4.6.0",
      "5.0.0",
      "5.7.0",
      "6.1.2",
      "6.5.0"
    ],
    label: "Square Viadeo",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f2aa",
    voted: false
  },
  "square-vimeo": {
    aliases: {
      names: [
        "vimeo-square"
      ]
    },
    changes: [
      "4.0.0",
      "5.0.0",
      "6.1.2",
      "6.5.0"
    ],
    label: "Square Vimeo",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f194",
    voted: false
  },
  "square-virus": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Square Virus",
    search: {
      terms: [
        "coronavirus",
        "covid-19",
        "disease",
        "flu",
        "infection",
        "pandemic"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e578",
    voted: false
  },
  "square-web-awesome": {
    changes: [
      "6.5.2"
    ],
    label: "Square Web Awesome",
    search: {
      terms: [
        "awesome",
        "coding",
        "components",
        "crown",
        "web"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "e683",
    voted: false
  },
  "square-web-awesome-stroke": {
    changes: [
      "6.5.2"
    ],
    label: "Square Web Awesome Stroke",
    search: {
      terms: [
        "awesome",
        "coding",
        "components",
        "crown",
        "web"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "e684",
    voted: false
  },
  "square-whatsapp": {
    aliases: {
      names: [
        "whatsapp-square"
      ]
    },
    changes: [
      "5.0.0",
      "6.1.2",
      "6.5.0"
    ],
    label: "Square Whatsapp",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f40c",
    voted: false
  },
  "square-x-twitter": {
    changes: [
      "6.4.2"
    ],
    label: "Square X Twitter",
    search: {
      terms: [
        "elon",
        "twitter",
        "x"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "e61a",
    voted: false
  },
  "square-xing": {
    aliases: {
      names: [
        "xing-square"
      ]
    },
    changes: [
      "3.2.0",
      "5.0.0",
      "6.1.2",
      "6.5.0"
    ],
    label: "Square Xing",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f169",
    voted: false
  },
  "square-xmark": {
    aliases: {
      names: [
        "times-square",
        "xmark-square"
      ],
      unicodes: {
        composite: [
          "274e"
        ],
        secondary: [
          "10f2d3"
        ]
      }
    },
    changes: [
      "4.7.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Square Xmark",
    search: {
      terms: [
        "close",
        "cross",
        "cross mark button",
        "incorrect",
        "mark",
        "notice",
        "notification",
        "notify",
        "problem",
        "square",
        "uncheck",
        "window",
        "wrong",
        "x",
        "×"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f2d3",
    voted: false
  },
  "square-youtube": {
    aliases: {
      names: [
        "youtube-square"
      ],
      unicodes: {
        composite: [
          "f166"
        ]
      }
    },
    changes: [
      "5.0.3",
      "6.1.2",
      "6.5.0"
    ],
    label: "Square Youtube",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f431",
    voted: false
  },
  squarespace,
  "stack-exchange": {
    changes: [
      "4.0.0",
      "5.0.0",
      "5.0.3"
    ],
    label: "Stack Exchange",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f18d",
    voted: false
  },
  "stack-overflow": {
    changes: [
      "3.2.0",
      "5.0.0"
    ],
    label: "Stack Overflow",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f16c",
    voted: false
  },
  stackpath,
  "staff-snake": {
    aliases: {
      names: [
        "rod-asclepius",
        "rod-snake",
        "staff-aesculapius"
      ]
    },
    changes: [
      "6.1.0",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Staff Snake",
    search: {
      terms: [
        "asclepius",
        "asklepian",
        "health",
        "serpent",
        "wellness"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e579",
    voted: false
  },
  stairs,
  stamp,
  stapler,
  star,
  "star-and-crescent": {
    aliases: {
      unicodes: {
        composite: [
          "262a"
        ],
        secondary: [
          "10f699"
        ]
      }
    },
    changes: [
      "5.3.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Star And Crescent",
    search: {
      terms: [
        "Muslim",
        "islam",
        "muslim",
        "religion",
        "star and crescent"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f699",
    voted: false
  },
  "star-half": {
    aliases: {
      unicodes: {
        composite: [
          "f123"
        ],
        secondary: [
          "10f089"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Star Half",
    search: {
      terms: [
        "achievement",
        "award",
        "rating",
        "score",
        "star-half-empty",
        "star-half-full"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f089",
    voted: false
  },
  "star-half-stroke": {
    aliases: {
      names: [
        "star-half-alt"
      ],
      unicodes: {
        secondary: [
          "10f5c0"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Star Half Stroke",
    search: {
      terms: [
        "achievement",
        "award",
        "rating",
        "score",
        "star-half-empty",
        "star-half-full"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f5c0",
    voted: true
  },
  "star-of-david": {
    aliases: {
      unicodes: {
        composite: [
          "2721"
        ],
        secondary: [
          "10f69a"
        ]
      }
    },
    changes: [
      "5.3.0",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Star Of David",
    search: {
      terms: [
        "David",
        "Jew",
        "Jewish",
        "jewish",
        "judaism",
        "religion",
        "star",
        "star of David"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f69a",
    voted: false
  },
  "star-of-life": {
    aliases: {
      unicodes: {
        secondary: [
          "10f621"
        ]
      }
    },
    changes: [
      "5.2.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Star Of Life",
    search: {
      terms: [
        "doctor",
        "emt",
        "first aid",
        "health",
        "medical"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f621",
    voted: false
  },
  staylinked,
  steam,
  "steam-symbol": {
    changes: [
      "5.0.0"
    ],
    label: "Steam Symbol",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f3f6",
    voted: false
  },
  "sterling-sign": {
    aliases: {
      names: [
        "gbp",
        "pound-sign"
      ],
      unicodes: {
        composite: [
          "a3"
        ],
        secondary: [
          "10f154"
        ]
      }
    },
    changes: [
      "3.2.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Sterling Sign",
    search: {
      terms: [
        "Pound Sign",
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f154",
    voted: false
  },
  stethoscope,
  "sticker-mule": {
    changes: [
      "5.0.0",
      "5.7.0"
    ],
    label: "Sticker Mule",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f3f7",
    voted: false
  },
  stop,
  stopwatch,
  "stopwatch-20": {
    aliases: {
      unicodes: {
        secondary: [
          "10e06f"
        ]
      }
    },
    changes: [
      "5.13.0",
      "5.14.0",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Stopwatch 20",
    search: {
      terms: [
        "ABCs",
        "countdown",
        "covid-19",
        "happy birthday",
        "i will survive",
        "reminder",
        "seconds",
        "time",
        "timer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e06f",
    voted: false
  },
  store,
  "store-slash": {
    aliases: {
      unicodes: {
        secondary: [
          "10e071"
        ]
      }
    },
    changes: [
      "5.13.0",
      "5.14.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Store Slash",
    search: {
      terms: [
        "building",
        "buy",
        "closed",
        "covid-19",
        "disabled",
        "purchase",
        "shopping"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e071",
    voted: false
  },
  strava,
  "street-view": {
    aliases: {
      unicodes: {
        secondary: [
          "10f21d"
        ]
      }
    },
    changes: [
      "4.3.0",
      "5.0.0",
      "5.2.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Street View",
    search: {
      terms: [
        "directions",
        "location",
        "map",
        "navigation",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f21d",
    voted: false
  },
  strikethrough,
  stripe,
  "stripe-s": {
    changes: [
      "5.0.1",
      "5.8.0"
    ],
    label: "Stripe S",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f42a",
    voted: false
  },
  stroopwafel,
  stubber,
  studiovinari,
  stumbleupon,
  "stumbleupon-circle": {
    changes: [
      "4.1.0",
      "5.0.0"
    ],
    label: "StumbleUpon Circle",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f1a3",
    voted: false
  },
  subscript,
  suitcase,
  "suitcase-medical": {
    aliases: {
      names: [
        "medkit"
      ],
      unicodes: {
        secondary: [
          "10f0fa"
        ]
      }
    },
    changes: [
      "3.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Suitcase Medical",
    search: {
      terms: [
        "first aid",
        "firstaid",
        "health",
        "help",
        "medical",
        "supply",
        "support"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f0fa",
    voted: false
  },
  "suitcase-rolling": {
    aliases: {
      unicodes: {
        secondary: [
          "10f5c1"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Suitcase Rolling",
    search: {
      terms: [
        "baggage",
        "luggage",
        "move",
        "suitcase",
        "travel",
        "trip"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5c1",
    voted: false
  },
  sun,
  "sun-plant-wilt": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Sun Plant Wilt",
    search: {
      terms: [
        "arid",
        "droop",
        "drought"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e57a",
    voted: false
  },
  superpowers,
  superscript,
  supple,
  suse,
  swatchbook,
  swift,
  symfony,
  synagogue,
  syringe,
  t,
  table,
  "table-cells": {
    aliases: {
      names: [
        "th"
      ],
      unicodes: {
        secondary: [
          "10f00a"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "5.7.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Table Cells",
    search: {
      terms: [
        "blocks",
        "boxes",
        "category",
        "excel",
        "grid",
        "spreadsheet",
        "squares"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f00a",
    voted: false
  },
  "table-cells-column-lock": {
    changes: [
      "6.5.2",
      "6.6.0",
      "6.7.0"
    ],
    label: "Table Cells Column Lock",
    search: {
      terms: [
        "blocks",
        "boxes",
        "category",
        "column",
        "excel",
        "grid",
        "lock",
        "spreadsheet",
        "squares"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e678",
    voted: false
  },
  "table-cells-large": {
    aliases: {
      names: [
        "th-large"
      ],
      unicodes: {
        secondary: [
          "10f009"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Table Cells Large",
    search: {
      terms: [
        "blocks",
        "boxes",
        "category",
        "excel",
        "grid",
        "spreadsheet",
        "squares"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f009",
    voted: false
  },
  "table-cells-row-lock": {
    changes: [
      "6.5.2",
      "6.6.0",
      "6.7.0"
    ],
    label: "Table Cells Row Lock",
    search: {
      terms: [
        "blocks",
        "boxes",
        "category",
        "column",
        "column",
        "excel",
        "grid",
        "lock",
        "lock",
        "spreadsheet",
        "squares"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e67a",
    voted: false
  },
  "table-cells-row-unlock": {
    changes: [
      "6.6.0",
      "6.7.0"
    ],
    label: "Table Cells Row Unlock",
    search: {
      terms: [
        "blocks",
        "boxes",
        "category",
        "column",
        "column",
        "excel",
        "grid",
        "lock",
        "lock",
        "spreadsheet",
        "squares",
        "unlock"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e691",
    voted: false
  },
  "table-columns": {
    aliases: {
      names: [
        "columns"
      ],
      unicodes: {
        secondary: [
          "10f0db"
        ]
      }
    },
    changes: [
      "2.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Table Columns",
    search: {
      terms: [
        "browser",
        "category",
        "dashboard",
        "organize",
        "panes",
        "split"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f0db",
    voted: false
  },
  "table-list": {
    aliases: {
      names: [
        "th-list"
      ],
      unicodes: {
        secondary: [
          "10f00b"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Table List",
    search: {
      terms: [
        "category",
        "cheatsheet",
        "checklist",
        "completed",
        "done",
        "finished",
        "ol",
        "summary",
        "todo",
        "ul"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f00b",
    voted: false
  },
  "table-tennis-paddle-ball": {
    aliases: {
      names: [
        "ping-pong-paddle-ball",
        "table-tennis"
      ],
      unicodes: {
        composite: [
          "1f3d3"
        ],
        secondary: [
          "10f45d"
        ]
      }
    },
    changes: [
      "5.0.5",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Table Tennis Paddle Ball",
    search: {
      terms: [
        "ball",
        "bat",
        "game",
        "paddle",
        "ping pong",
        "table tennis"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f45d",
    voted: false
  },
  tablet,
  "tablet-button": {
    aliases: {
      unicodes: {
        secondary: [
          "10f10a"
        ]
      }
    },
    changes: [
      "3.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Tablet Button",
    search: {
      terms: [
        "apple",
        "device",
        "ipad",
        "kindle",
        "screen"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f10a",
    voted: false
  },
  "tablet-screen-button": {
    aliases: {
      names: [
        "tablet-alt"
      ],
      unicodes: {
        secondary: [
          "10f3fa"
        ]
      }
    },
    changes: [
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Tablet Screen Button",
    search: {
      terms: [
        "apple",
        "device",
        "ipad",
        "kindle",
        "screen"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f3fa",
    voted: false
  },
  tablets,
  "tachograph-digital": {
    aliases: {
      names: [
        "digital-tachograph"
      ],
      unicodes: {
        secondary: [
          "10f566"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Tachograph Digital",
    search: {
      terms: [
        "data",
        "distance",
        "speed",
        "tachometer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f566",
    voted: true
  },
  tag,
  tags,
  tape,
  tarp,
  "tarp-droplet": {
    changes: [
      "6.1.0",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Tarp Droplet",
    search: {
      terms: [
        "protection",
        "tarp",
        "tent",
        "waterproof"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e57c",
    voted: false
  },
  taxi,
  teamspeak,
  teeth,
  "teeth-open": {
    aliases: {
      unicodes: {
        secondary: [
          "10f62f"
        ]
      }
    },
    changes: [
      "5.2.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Teeth Open",
    search: {
      terms: [
        "dental",
        "dentist",
        "gums bite",
        "mouth",
        "smile",
        "tooth"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f62f",
    voted: false
  },
  telegram,
  "temperature-arrow-down": {
    aliases: {
      names: [
        "temperature-down"
      ],
      unicodes: {
        secondary: [
          "10e03f"
        ]
      }
    },
    changes: [
      "5.12.0",
      "5.14.0",
      "6.0.0-beta1",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Temperature Arrow Down",
    search: {
      terms: [
        "air conditioner",
        "cold",
        "heater",
        "mercury",
        "thermometer",
        "winter"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e03f",
    voted: false
  },
  "temperature-arrow-up": {
    aliases: {
      names: [
        "temperature-up"
      ],
      unicodes: {
        secondary: [
          "10e040"
        ]
      }
    },
    changes: [
      "5.12.0",
      "5.14.0",
      "6.0.0-beta1",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Temperature Arrow Up",
    search: {
      terms: [
        "air conditioner",
        "cold",
        "heater",
        "mercury",
        "thermometer",
        "winter"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e040",
    voted: false
  },
  "temperature-empty": {
    aliases: {
      names: [
        "temperature-0",
        "thermometer-0",
        "thermometer-empty"
      ],
      unicodes: {
        secondary: [
          "10f2cb"
        ]
      }
    },
    changes: [
      "4.7.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Temperature Empty",
    search: {
      terms: [
        "cold",
        "mercury",
        "status",
        "temperature"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f2cb",
    voted: false
  },
  "temperature-full": {
    aliases: {
      names: [
        "temperature-4",
        "thermometer-4",
        "thermometer-full"
      ],
      unicodes: {
        secondary: [
          "10f2c7"
        ]
      }
    },
    changes: [
      "4.7.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Temperature Full",
    search: {
      terms: [
        "fever",
        "hot",
        "mercury",
        "status",
        "temperature"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f2c7",
    voted: false
  },
  "temperature-half": {
    aliases: {
      names: [
        "temperature-2",
        "thermometer-2",
        "thermometer-half"
      ],
      unicodes: {
        composite: [
          "1f321"
        ],
        secondary: [
          "10f2c9"
        ]
      }
    },
    changes: [
      "4.7.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Temperature Half",
    search: {
      terms: [
        "mercury",
        "status",
        "temperature",
        "thermometer",
        "weather"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f2c9",
    voted: false
  },
  "temperature-high": {
    aliases: {
      unicodes: {
        secondary: [
          "10f769"
        ]
      }
    },
    changes: [
      "5.5.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Temperature High",
    search: {
      terms: [
        "cook",
        "covid-19",
        "mercury",
        "summer",
        "thermometer",
        "warm"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f769",
    voted: false
  },
  "temperature-low": {
    aliases: {
      unicodes: {
        secondary: [
          "10f76b"
        ]
      }
    },
    changes: [
      "5.5.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Temperature Low",
    search: {
      terms: [
        "cold",
        "cool",
        "covid-19",
        "mercury",
        "thermometer",
        "winter"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f76b",
    voted: false
  },
  "temperature-quarter": {
    aliases: {
      names: [
        "temperature-1",
        "thermometer-1",
        "thermometer-quarter"
      ],
      unicodes: {
        secondary: [
          "10f2ca"
        ]
      }
    },
    changes: [
      "4.7.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Temperature Quarter",
    search: {
      terms: [
        "mercury",
        "status",
        "temperature"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f2ca",
    voted: false
  },
  "temperature-three-quarters": {
    aliases: {
      names: [
        "temperature-3",
        "thermometer-3",
        "thermometer-three-quarters"
      ],
      unicodes: {
        secondary: [
          "10f2c8"
        ]
      }
    },
    changes: [
      "4.7.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Temperature Three Quarters",
    search: {
      terms: [
        "mercury",
        "status",
        "temperature"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f2c8",
    voted: false
  },
  "tencent-weibo": {
    changes: [
      "4.1.0",
      "5.0.0"
    ],
    label: "Tencent Weibo",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f1d5",
    voted: false
  },
  "tenge-sign": {
    aliases: {
      names: [
        "tenge"
      ],
      unicodes: {
        composite: [
          "20b8"
        ],
        secondary: [
          "10f7d7"
        ]
      }
    },
    changes: [
      "5.6.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Tenge Sign",
    search: {
      terms: [
        "Tenge Sign",
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f7d7",
    voted: true
  },
  tent,
  "tent-arrow-down-to-line": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Tent Arrow Down To Line",
    search: {
      terms: [
        "bivouac",
        "campground",
        "campsite",
        "permanent",
        "refugee",
        "refugee",
        "shelter",
        "shelter",
        "tent"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e57e",
    voted: false
  },
  "tent-arrow-left-right": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Tent Arrow Left Right",
    search: {
      terms: [
        "bivouac",
        "campground",
        "campsite",
        "refugee",
        "refugee",
        "shelter",
        "shelter",
        "tent",
        "transition"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e57f",
    voted: false
  },
  "tent-arrow-turn-left": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Tent Arrow Turn Left",
    search: {
      terms: [
        "bivouac",
        "campground",
        "campsite",
        "refugee",
        "refugee",
        "shelter",
        "shelter",
        "temporary",
        "tent"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e580",
    voted: false
  },
  "tent-arrows-down": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Tent Arrows Down",
    search: {
      terms: [
        "bivouac",
        "campground",
        "campsite",
        "insert",
        "refugee",
        "refugee",
        "shelter",
        "shelter",
        "spontaneous",
        "tent"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e581",
    voted: false
  },
  tents,
  terminal,
  "text-height": {
    aliases: {
      unicodes: {
        secondary: [
          "10f034"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "5.9.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Text Height",
    search: {
      terms: [
        "edit",
        "font",
        "format",
        "modify",
        "text",
        "type"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f034",
    voted: false
  },
  "text-slash": {
    aliases: {
      names: [
        "remove-format"
      ],
      unicodes: {
        secondary: [
          "10f87d"
        ]
      }
    },
    changes: [
      "5.9.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Text Slash",
    search: {
      terms: [
        "cancel",
        "disabled",
        "font",
        "format",
        "remove",
        "style",
        "text"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f87d",
    voted: false
  },
  "text-width": {
    aliases: {
      unicodes: {
        secondary: [
          "10f035"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "5.9.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Text Width",
    search: {
      terms: [
        "edit",
        "font",
        "format",
        "modify",
        "text",
        "type"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f035",
    voted: false
  },
  "the-red-yeti": {
    changes: [
      "5.3.0",
      "5.7.0",
      "5.8.0"
    ],
    label: "The Red Yeti",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f69d",
    voted: false
  },
  themeco,
  themeisle,
  thermometer,
  "think-peaks": {
    changes: [
      "5.4.2",
      "5.8.0"
    ],
    label: "Think Peaks",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f731",
    voted: false
  },
  threads,
  "thumbs-down": {
    aliases: {
      unicodes: {
        composite: [
          "1f44e",
          "f088"
        ],
        secondary: [
          "10f165"
        ]
      }
    },
    changes: [
      "3.2.0",
      "5.0.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Thumbs Down",
    search: {
      terms: [
        "-1",
        "disagree",
        "disapprove",
        "dislike",
        "down",
        "hand",
        "social",
        "thumb",
        "thumbs down",
        "thumbs-o-down"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f165",
    voted: false
  },
  "thumbs-up": {
    aliases: {
      unicodes: {
        composite: [
          "1f44d",
          "f087"
        ],
        secondary: [
          "10f164"
        ]
      }
    },
    changes: [
      "3.2.0",
      "5.0.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Thumbs Up",
    search: {
      terms: [
        "+1",
        "agree",
        "approve",
        "favorite",
        "hand",
        "like",
        "ok",
        "okay",
        "social",
        "success",
        "thumb",
        "thumbs up",
        "thumbs-o-up",
        "up",
        "yes",
        "you got it dude"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f164",
    voted: false
  },
  thumbtack,
  "thumbtack-slash": {
    aliases: {
      names: [
        "thumb-tack-slash"
      ]
    },
    changes: [
      "6.6.0",
      "6.7.0"
    ],
    label: "Thumbtack Slash",
    search: {
      terms: [
        "Black Pushpin",
        "coordinates",
        "location",
        "marker",
        "pin",
        "pushpin",
        "thumb-tack",
        "unpin"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e68f",
    voted: false
  },
  ticket,
  "ticket-simple": {
    aliases: {
      names: [
        "ticket-alt"
      ],
      unicodes: {
        secondary: [
          "10f3ff"
        ]
      }
    },
    changes: [
      "5.0.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.4.1",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Ticket Simple",
    search: {
      terms: [
        "admission",
        "coupon",
        "movie",
        "pass",
        "support",
        "ticket",
        "voucher"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f3ff",
    voted: false
  },
  tiktok,
  timeline,
  "toggle-off": {
    aliases: {
      unicodes: {
        secondary: [
          "10f204"
        ]
      }
    },
    changes: [
      "4.2.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Toggle Off",
    search: {
      terms: [
        "button",
        "off",
        "on",
        "switch"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f204",
    voted: false
  },
  "toggle-on": {
    aliases: {
      unicodes: {
        secondary: [
          "10f205"
        ]
      }
    },
    changes: [
      "4.2.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Toggle On",
    search: {
      terms: [
        "button",
        "off",
        "on",
        "switch"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f205",
    voted: false
  },
  toilet,
  "toilet-paper": {
    aliases: {
      unicodes: {
        composite: [
          "1f9fb"
        ],
        secondary: [
          "10f71e"
        ]
      }
    },
    changes: [
      "5.4.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Toilet Paper",
    search: {
      terms: [
        "bathroom",
        "covid-19",
        "halloween",
        "holiday",
        "lavatory",
        "paper towels",
        "prank",
        "privy",
        "restroom",
        "roll",
        "roll of paper",
        "toilet",
        "toilet paper",
        "wipe"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f71e",
    voted: false
  },
  "toilet-paper-slash": {
    aliases: {
      unicodes: {
        secondary: [
          "10e072"
        ]
      }
    },
    changes: [
      "5.13.0",
      "5.14.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Toilet Paper Slash",
    search: {
      terms: [
        "bathroom",
        "covid-19",
        "disabled",
        "halloween",
        "holiday",
        "lavatory",
        "leaves",
        "prank",
        "privy",
        "restroom",
        "roll",
        "toilet",
        "trouble",
        "ut oh",
        "wipe"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e072",
    voted: false
  },
  "toilet-portable": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Toilet Portable",
    search: {
      terms: [
        "outhouse",
        "toilet"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e583",
    voted: false
  },
  "toilets-portable": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Toilets Portable",
    search: {
      terms: [
        "outhouse",
        "toilet"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e584",
    voted: false
  },
  toolbox,
  tooth,
  "torii-gate": {
    aliases: {
      unicodes: {
        composite: [
          "26e9"
        ],
        secondary: [
          "10f6a1"
        ]
      }
    },
    changes: [
      "5.3.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Torii Gate",
    search: {
      terms: [
        "building",
        "religion",
        "shinto",
        "shinto shrine",
        "shintoism",
        "shrine"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f6a1",
    voted: false
  },
  tornado,
  "tower-broadcast": {
    aliases: {
      names: [
        "broadcast-tower"
      ],
      unicodes: {
        secondary: [
          "10f519"
        ]
      }
    },
    changes: [
      "5.0.13",
      "6.0.0-beta1",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Tower Broadcast",
    search: {
      terms: [
        "airwaves",
        "antenna",
        "communication",
        "emergency",
        "radio",
        "reception",
        "signal",
        "waves"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f519",
    voted: true
  },
  "tower-cell": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Tower Cell",
    search: {
      terms: [
        "airwaves",
        "antenna",
        "communication",
        "radio",
        "reception",
        "signal",
        "waves"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e585",
    voted: false
  },
  "tower-observation": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Tower Observation",
    search: {
      terms: [
        "fire tower",
        "view"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e586",
    voted: false
  },
  tractor,
  "trade-federation": {
    changes: [
      "5.0.12"
    ],
    label: "Trade Federation",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f513",
    voted: false
  },
  trademark,
  "traffic-light": {
    aliases: {
      unicodes: {
        composite: [
          "1f6a6"
        ],
        secondary: [
          "10f637"
        ]
      }
    },
    changes: [
      "5.2.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Traffic Light",
    search: {
      terms: [
        "direction",
        "go",
        "light",
        "road",
        "signal",
        "slow",
        "stop",
        "traffic",
        "travel",
        "vertical traffic light"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f637",
    voted: false
  },
  trailer,
  train,
  "train-subway": {
    aliases: {
      names: [
        "subway"
      ],
      unicodes: {
        secondary: [
          "10f239"
        ]
      }
    },
    changes: [
      "4.3.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Train Subway",
    search: {
      terms: [
        "machine",
        "railway",
        "train",
        "transportation",
        "vehicle"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f239",
    voted: false
  },
  "train-tram": {
    aliases: {
      unicodes: {
        composite: [
          "1f68a"
        ]
      }
    },
    changes: [
      "5.6.0",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Train Tram",
    search: {
      terms: [
        "crossing",
        "machine",
        "mountains",
        "seasonal",
        "tram",
        "transportation",
        "trolleybus"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e5b4",
    voted: false
  },
  transgender,
  trash,
  "trash-arrow-up": {
    aliases: {
      names: [
        "trash-restore"
      ],
      unicodes: {
        secondary: [
          "10f829"
        ]
      }
    },
    changes: [
      "5.7.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Trash Arrow Up",
    search: {
      terms: [
        "back",
        "control z",
        "delete",
        "garbage",
        "hide",
        "oops",
        "remove",
        "undo",
        "upgrade"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f829",
    voted: true
  },
  "trash-can": {
    aliases: {
      names: [
        "trash-alt"
      ],
      unicodes: {
        composite: [
          "f014"
        ],
        secondary: [
          "10f2ed"
        ]
      }
    },
    changes: [
      "5.0.0",
      "5.7.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Trash Can",
    search: {
      terms: [
        "delete",
        "garbage",
        "hide",
        "remove",
        "trash-o"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f2ed",
    voted: false
  },
  "trash-can-arrow-up": {
    aliases: {
      names: [
        "trash-restore-alt"
      ],
      unicodes: {
        secondary: [
          "10f82a"
        ]
      }
    },
    changes: [
      "5.7.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Trash Can Arrow Up",
    search: {
      terms: [
        "back",
        "control z",
        "delete",
        "garbage",
        "hide",
        "oops",
        "remove",
        "undo",
        "upgrade"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f82a",
    voted: true
  },
  tree,
  "tree-city": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Tree City",
    search: {
      terms: [
        "building",
        "city",
        "urban"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e587",
    voted: false
  },
  trello,
  "triangle-exclamation": {
    aliases: {
      names: [
        "exclamation-triangle",
        "warning"
      ],
      unicodes: {
        composite: [
          "26a0"
        ],
        secondary: [
          "10f071"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "5.6.1",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Triangle Exclamation",
    search: {
      terms: [
        "alert",
        "attention",
        "danger",
        "error",
        "failed",
        "important",
        "notice",
        "notification",
        "notify",
        "problem",
        "required",
        "warnin",
        "warning"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f071",
    voted: false
  },
  trophy,
  trowel,
  "trowel-bricks": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Trowel Bricks",
    search: {
      terms: [
        "build",
        "construction",
        "maintenance",
        "reconstruction",
        "tool"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e58a",
    voted: false
  },
  truck,
  "truck-arrow-right": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Truck Arrow Right",
    search: {
      terms: [
        "access",
        "fast",
        "shipping",
        "transport"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e58b",
    voted: false
  },
  "truck-droplet": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Truck Droplet",
    search: {
      terms: [
        "blood",
        "thirst",
        "truck",
        "water",
        "water supply"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e58c",
    voted: false
  },
  "truck-fast": {
    aliases: {
      names: [
        "shipping-fast"
      ],
      unicodes: {
        secondary: [
          "10f48b"
        ]
      }
    },
    changes: [
      "5.0.7",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Truck Fast",
    search: {
      terms: [
        "express",
        "fedex",
        "mail",
        "overnight",
        "package",
        "quick",
        "ups"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f48b",
    voted: false
  },
  "truck-field": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Truck Field",
    search: {
      terms: [
        "supplies",
        "truck"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e58d",
    voted: false
  },
  "truck-field-un": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Truck Field Un",
    search: {
      terms: [
        "supplies",
        "truck",
        "united nations"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e58e",
    voted: false
  },
  "truck-front": {
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Truck Front",
    search: {
      terms: [
        "shuttle",
        "truck",
        "van"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e2b7",
    voted: false
  },
  "truck-medical": {
    aliases: {
      names: [
        "ambulance"
      ],
      unicodes: {
        composite: [
          "1f691"
        ],
        secondary: [
          "10f0f9"
        ]
      }
    },
    changes: [
      "3.0.0",
      "5.0.0",
      "5.0.7",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Truck Medical",
    search: {
      terms: [
        "ambulance",
        "clinic",
        "covid-19",
        "emergency",
        "emt",
        "er",
        "help",
        "hospital",
        "mobile",
        "support",
        "vehicle"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f0f9",
    voted: false
  },
  "truck-monster": {
    aliases: {
      unicodes: {
        secondary: [
          "10f63b"
        ]
      }
    },
    changes: [
      "5.2.0",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Truck Monster",
    search: {
      terms: [
        "offroad",
        "vehicle",
        "wheel"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f63b",
    voted: false
  },
  "truck-moving": {
    aliases: {
      unicodes: {
        secondary: [
          "10f4df"
        ]
      }
    },
    changes: [
      "5.0.9",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Truck Moving",
    search: {
      terms: [
        "cargo",
        "inventory",
        "rental",
        "vehicle"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f4df",
    voted: false
  },
  "truck-pickup": {
    aliases: {
      unicodes: {
        composite: [
          "1f6fb"
        ],
        secondary: [
          "10f63c"
        ]
      }
    },
    changes: [
      "5.2.0",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Truck Pickup",
    search: {
      terms: [
        "cargo",
        "maintenance",
        "pick-up",
        "pickup",
        "pickup truck",
        "truck",
        "vehicle"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f63c",
    voted: false
  },
  "truck-plane": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Truck Plane",
    search: {
      terms: [
        "airplane",
        "plane",
        "transportation",
        "truck",
        "vehicle"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e58f",
    voted: false
  },
  "truck-ramp-box": {
    aliases: {
      names: [
        "truck-loading"
      ],
      unicodes: {
        secondary: [
          "10f4de"
        ]
      }
    },
    changes: [
      "5.0.9",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Truck Ramp Box",
    search: {
      terms: [
        "box",
        "cargo",
        "delivery",
        "inventory",
        "moving",
        "rental",
        "vehicle"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f4de",
    voted: false
  },
  tty,
  tumblr,
  "turkish-lira-sign": {
    aliases: {
      names: [
        "try",
        "turkish-lira"
      ]
    },
    changes: [
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Turkish Lira Sign",
    search: {
      terms: [
        "Turkish Lira Sign",
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e2bb",
    voted: false
  },
  "turn-down": {
    aliases: {
      names: [
        "level-down-alt"
      ],
      unicodes: {
        composite: [
          "2935"
        ],
        secondary: [
          "10f3be"
        ]
      }
    },
    changes: [
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Turn Down",
    search: {
      terms: [
        "arrow",
        "down",
        "level-down",
        "right arrow curving down"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f3be",
    voted: false
  },
  "turn-up": {
    aliases: {
      names: [
        "level-up-alt"
      ],
      unicodes: {
        composite: [
          "2934"
        ],
        secondary: [
          "10f3bf"
        ]
      }
    },
    changes: [
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Turn Up",
    search: {
      terms: [
        "arrow",
        "level-up",
        "right arrow curving up"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f3bf",
    voted: false
  },
  tv,
  twitch,
  twitter,
  typo3,
  u,
  uber,
  ubuntu,
  uikit,
  umbraco,
  umbrella,
  "umbrella-beach": {
    aliases: {
      unicodes: {
        composite: [
          "1f3d6"
        ],
        secondary: [
          "10f5ca"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Umbrella Beach",
    search: {
      terms: [
        "beach",
        "beach with umbrella",
        "protection",
        "recreation",
        "sand",
        "shade",
        "summer",
        "sun",
        "umbrella"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5ca",
    voted: false
  },
  uncharted,
  underline,
  uniregistry,
  unity,
  "universal-access": {
    aliases: {
      unicodes: {
        secondary: [
          "10f29a"
        ]
      }
    },
    changes: [
      "4.6.0",
      "5.0.0",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Universal Access",
    search: {
      terms: [
        "uer",
        "users-people"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f29a",
    voted: false
  },
  unlock,
  "unlock-keyhole": {
    aliases: {
      names: [
        "unlock-alt"
      ],
      unicodes: {
        secondary: [
          "10f13e"
        ]
      }
    },
    changes: [
      "3.1.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Unlock Keyhole",
    search: {
      terms: [
        "admin",
        "lock",
        "padlock",
        "password",
        "privacy",
        "private",
        "protect"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f13e",
    voted: false
  },
  unsplash,
  untappd,
  "up-down": {
    aliases: {
      names: [
        "arrows-alt-v"
      ],
      unicodes: {
        composite: [
          "2195",
          "2b0d"
        ],
        secondary: [
          "10f338"
        ]
      }
    },
    changes: [
      "5.0.0",
      "5.11.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Up Down",
    search: {
      terms: [
        "Up Down Black Arrow",
        "arrow",
        "arrows-v",
        "expand",
        "portrait",
        "resize",
        "tall",
        "up-down arrow",
        "vertical"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f338",
    voted: false
  },
  "up-down-left-right": {
    aliases: {
      names: [
        "arrows-alt"
      ],
      unicodes: {
        secondary: [
          "10f0b2"
        ]
      }
    },
    changes: [
      "2.0.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Up Down Left Right",
    search: {
      terms: [
        "arrow",
        "arrows",
        "bigger",
        "enlarge",
        "expand",
        "fullscreen",
        "move",
        "position",
        "reorder",
        "resize"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f0b2",
    voted: false
  },
  "up-long": {
    aliases: {
      names: [
        "long-arrow-alt-up"
      ],
      unicodes: {
        secondary: [
          "10f30c"
        ]
      }
    },
    changes: [
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Up Long",
    search: {
      terms: [
        "long-arrow-up",
        "upgrade",
        "upload"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f30c",
    voted: false
  },
  "up-right-and-down-left-from-center": {
    aliases: {
      names: [
        "expand-alt"
      ],
      unicodes: {
        secondary: [
          "10f424"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "5.12.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Up Right And Down Left From Center",
    search: {
      terms: [
        "arrows",
        "bigger",
        "enlarge",
        "expand",
        "fullscreen",
        "maximize",
        "resize",
        "resize",
        "scale",
        "size"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f424",
    voted: false
  },
  "up-right-from-square": {
    aliases: {
      names: [
        "external-link-alt"
      ],
      unicodes: {
        secondary: [
          "10f35d"
        ]
      }
    },
    changes: [
      "5.0.0",
      "5.11.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.2.1",
      "6.3.0",
      "6.4.0",
      "6.4.1",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Up Right From Square",
    search: {
      terms: [
        "external-link",
        "new",
        "open",
        "share",
        "upgrade"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f35d",
    voted: false
  },
  upload,
  ups,
  upwork,
  usb,
  user,
  "user-astronaut": {
    aliases: {
      unicodes: {
        secondary: [
          "10f4fb"
        ]
      }
    },
    changes: [
      "5.0.11",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.5.1",
      "6.6.0",
      "6.7.0"
    ],
    label: "User Astronaut",
    search: {
      terms: [
        "avatar",
        "clothing",
        "cosmonaut",
        "nasa",
        "space",
        "suit",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f4fb",
    voted: false
  },
  "user-check": {
    aliases: {
      unicodes: {
        secondary: [
          "10f4fc"
        ]
      }
    },
    changes: [
      "5.0.11",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "User Check",
    search: {
      terms: [
        "employee",
        "enable",
        "uer",
        "users-people",
        "validate",
        "working"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f4fc",
    voted: false
  },
  "user-clock": {
    aliases: {
      unicodes: {
        secondary: [
          "10f4fd"
        ]
      }
    },
    changes: [
      "5.0.11",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "User Clock",
    search: {
      terms: [
        "employee",
        "uer",
        "users-people"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f4fd",
    voted: false
  },
  "user-doctor": {
    aliases: {
      names: [
        "user-md"
      ],
      unicodes: {
        secondary: [
          "10f0f0"
        ]
      }
    },
    changes: [
      "2.0.0",
      "5.0.0",
      "5.0.3",
      "5.0.7",
      "5.0.11",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "User Doctor",
    search: {
      terms: [
        "covid-19",
        "health",
        "job",
        "medical",
        "nurse",
        "occupation",
        "physician",
        "profile",
        "surgeon",
        "uer",
        "worker"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f0f0",
    voted: false
  },
  "user-gear": {
    aliases: {
      names: [
        "user-cog"
      ],
      unicodes: {
        secondary: [
          "10f4fe"
        ]
      }
    },
    changes: [
      "5.0.11",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "User Gear",
    search: {
      terms: [
        "employee",
        "together",
        "uer",
        "users-people"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f4fe",
    voted: false
  },
  "user-graduate": {
    aliases: {
      unicodes: {
        secondary: [
          "10f501"
        ]
      }
    },
    changes: [
      "5.0.11",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "User Graduate",
    search: {
      terms: [
        "uer",
        "users-people"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f501",
    voted: false
  },
  "user-group": {
    aliases: {
      names: [
        "user-friends"
      ],
      unicodes: {
        composite: [
          "1f465"
        ],
        secondary: [
          "10f500"
        ]
      }
    },
    changes: [
      "5.0.11",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "User Group",
    search: {
      terms: [
        "bust",
        "busts in silhouette",
        "crowd",
        "employee",
        "silhouette",
        "together",
        "uer",
        "users-people"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f500",
    voted: false
  },
  "user-injured": {
    aliases: {
      unicodes: {
        secondary: [
          "10f728"
        ]
      }
    },
    changes: [
      "5.4.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "User Injured",
    search: {
      terms: [
        "employee",
        "uer",
        "users-people"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f728",
    voted: false
  },
  "user-large": {
    aliases: {
      names: [
        "user-alt"
      ],
      unicodes: {
        secondary: [
          "10f406"
        ]
      }
    },
    changes: [
      "5.0.0",
      "5.0.3",
      "5.0.11",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "User Large",
    search: {
      terms: [
        "employee",
        "uer",
        "users-people"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f406",
    voted: false
  },
  "user-large-slash": {
    aliases: {
      names: [
        "user-alt-slash"
      ],
      unicodes: {
        secondary: [
          "10f4fa"
        ]
      }
    },
    changes: [
      "5.0.11",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "User Large Slash",
    search: {
      terms: [
        "disabled",
        "disconnect",
        "employee",
        "uer",
        "users-people"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f4fa",
    voted: false
  },
  "user-lock": {
    aliases: {
      unicodes: {
        secondary: [
          "10f502"
        ]
      }
    },
    changes: [
      "5.0.11",
      "5.9.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "User Lock",
    search: {
      terms: [
        "employee",
        "padlock",
        "privacy",
        "uer",
        "users-people"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f502",
    voted: false
  },
  "user-minus": {
    aliases: {
      unicodes: {
        secondary: [
          "10f503"
        ]
      }
    },
    changes: [
      "5.0.11",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "User Minus",
    search: {
      terms: [
        "delete",
        "employee",
        "negative",
        "remove",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f503",
    voted: false
  },
  "user-ninja": {
    aliases: {
      unicodes: {
        composite: [
          "1f977"
        ],
        secondary: [
          "10f504"
        ]
      }
    },
    changes: [
      "5.0.11",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "User Ninja",
    search: {
      terms: [
        "assassin",
        "avatar",
        "dangerous",
        "deadly",
        "fighter",
        "hidden",
        "ninja",
        "sneaky",
        "stealth",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f504",
    voted: false
  },
  "user-nurse": {
    aliases: {
      unicodes: {
        secondary: [
          "10f82f"
        ]
      }
    },
    changes: [
      "5.7.0",
      "5.12.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "User Nurse",
    search: {
      terms: [
        "covid-19",
        "doctor",
        "health",
        "md",
        "medical",
        "midwife",
        "physician",
        "practitioner",
        "surgeon",
        "uer",
        "worker"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f82f",
    voted: false
  },
  "user-pen": {
    aliases: {
      names: [
        "user-edit"
      ],
      unicodes: {
        secondary: [
          "10f4ff"
        ]
      }
    },
    changes: [
      "5.0.11",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "User Pen",
    search: {
      terms: [
        "employee",
        "modify",
        "uer",
        "users-people"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f4ff",
    voted: false
  },
  "user-plus": {
    aliases: {
      unicodes: {
        secondary: [
          "10f234"
        ]
      }
    },
    changes: [
      "4.3.0",
      "5.0.0",
      "5.0.3",
      "5.0.11",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "User Plus",
    search: {
      terms: [
        "add",
        "avatar",
        "employee",
        "follow",
        "positive",
        "sign up",
        "signup",
        "team",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f234",
    voted: false
  },
  "user-secret": {
    aliases: {
      unicodes: {
        composite: [
          "1f575"
        ],
        secondary: [
          "10f21b"
        ]
      }
    },
    changes: [
      "4.3.0",
      "5.0.0",
      "5.0.3",
      "5.0.11",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.5.1",
      "6.6.0",
      "6.7.0"
    ],
    label: "User Secret",
    search: {
      terms: [
        "detective",
        "sleuth",
        "spy",
        "uer",
        "users-people"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f21b",
    voted: false
  },
  "user-shield": {
    aliases: {
      unicodes: {
        secondary: [
          "10f505"
        ]
      }
    },
    changes: [
      "5.0.11",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "User Shield",
    search: {
      terms: [
        "employee",
        "protect",
        "safety",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f505",
    voted: false
  },
  "user-slash": {
    aliases: {
      unicodes: {
        secondary: [
          "10f506"
        ]
      }
    },
    changes: [
      "5.0.11",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "User Slash",
    search: {
      terms: [
        "ban",
        "delete",
        "deny",
        "disabled",
        "disconnect",
        "employee",
        "remove",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f506",
    voted: false
  },
  "user-tag": {
    aliases: {
      unicodes: {
        secondary: [
          "10f507"
        ]
      }
    },
    changes: [
      "5.0.11",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "User Tag",
    search: {
      terms: [
        "employee",
        "uer",
        "users-people"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f507",
    voted: false
  },
  "user-tie": {
    aliases: {
      unicodes: {
        secondary: [
          "10f508"
        ]
      }
    },
    changes: [
      "5.0.11",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "User Tie",
    search: {
      terms: [
        "administrator",
        "avatar",
        "business",
        "clothing",
        "employee",
        "formal",
        "offer",
        "portfolio",
        "professional",
        "suit",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f508",
    voted: false
  },
  "user-xmark": {
    aliases: {
      names: [
        "user-times"
      ],
      unicodes: {
        secondary: [
          "10f235"
        ]
      }
    },
    changes: [
      "4.3.0",
      "5.0.0",
      "5.0.3",
      "5.0.11",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "User Xmark",
    search: {
      terms: [
        "archive",
        "delete",
        "employee",
        "remove",
        "uer",
        "uncheck",
        "x"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f235",
    voted: false
  },
  users,
  "users-between-lines": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Users Between Lines",
    search: {
      terms: [
        "covered",
        "crowd",
        "employee",
        "group",
        "people",
        "together",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e591",
    voted: false
  },
  "users-gear": {
    aliases: {
      names: [
        "users-cog"
      ],
      unicodes: {
        secondary: [
          "10f509"
        ]
      }
    },
    changes: [
      "5.0.11",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Users Gear",
    search: {
      terms: [
        "employee",
        "uer",
        "users-people"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f509",
    voted: false
  },
  "users-line": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Users Line",
    search: {
      terms: [
        "crowd",
        "employee",
        "group",
        "need",
        "people",
        "together",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e592",
    voted: false
  },
  "users-rays": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Users Rays",
    search: {
      terms: [
        "affected",
        "crowd",
        "employee",
        "focused",
        "group",
        "people",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e593",
    voted: false
  },
  "users-rectangle": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Users Rectangle",
    search: {
      terms: [
        "crowd",
        "employee",
        "focus",
        "group",
        "people",
        "reached",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e594",
    voted: false
  },
  "users-slash": {
    aliases: {
      unicodes: {
        secondary: [
          "10e073"
        ]
      }
    },
    changes: [
      "5.13.0",
      "5.14.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Users Slash",
    search: {
      terms: [
        "disabled",
        "disconnect",
        "employee",
        "together",
        "uer",
        "users-people"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e073",
    voted: false
  },
  "users-viewfinder": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Users Viewfinder",
    search: {
      terms: [
        "crowd",
        "focus",
        "group",
        "people",
        "targeted",
        "uer"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e595",
    voted: false
  },
  usps,
  ussunnah,
  utensils,
  v,
  vaadin,
  "van-shuttle": {
    aliases: {
      names: [
        "shuttle-van"
      ],
      unicodes: {
        composite: [
          "1f690"
        ],
        secondary: [
          "10f5b6"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.0.0-beta2",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Van Shuttle",
    search: {
      terms: [
        "airport",
        "bus",
        "machine",
        "minibus",
        "public-transportation",
        "transportation",
        "travel",
        "vehicle"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5b6",
    voted: false
  },
  vault,
  "vector-square": {
    aliases: {
      unicodes: {
        secondary: [
          "10f5cb"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Vector Square",
    search: {
      terms: [
        "anchors",
        "lines",
        "object",
        "render",
        "shape"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5cb",
    voted: false
  },
  venus,
  "venus-double": {
    aliases: {
      unicodes: {
        composite: [
          "26a2"
        ],
        secondary: [
          "10f226"
        ]
      }
    },
    changes: [
      "4.3.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Venus Double",
    search: {
      terms: [
        "Doubled Female Sign",
        "female",
        "gender",
        "lesbian"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f226",
    voted: false
  },
  "venus-mars": {
    aliases: {
      unicodes: {
        composite: [
          "26a4"
        ],
        secondary: [
          "10f228"
        ]
      }
    },
    changes: [
      "4.3.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Venus Mars",
    search: {
      terms: [
        "Interlocked Female and Male Sign",
        "female",
        "gender",
        "heterosexual",
        "male"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f228",
    voted: false
  },
  vest,
  "vest-patches": {
    aliases: {
      unicodes: {
        secondary: [
          "10e086"
        ]
      }
    },
    changes: [
      "5.15.0",
      "5.15.1",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Vest Patches",
    search: {
      terms: [
        "biker",
        "fashion",
        "style"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e086",
    voted: false
  },
  viacoin,
  viadeo,
  vial,
  "vial-circle-check": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Vial Circle Check",
    search: {
      terms: [
        "ampule",
        "chemist",
        "chemistry",
        "enable",
        "not affected",
        "ok",
        "okay",
        "success",
        "test tube",
        "tube",
        "vaccine",
        "validate",
        "working"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e596",
    voted: false
  },
  "vial-virus": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Vial Virus",
    search: {
      terms: [
        "ampule",
        "coronavirus",
        "covid-19",
        "flue",
        "infection",
        "lab",
        "laboratory",
        "pandemic",
        "test",
        "test tube",
        "vaccine"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e597",
    voted: false
  },
  vials,
  viber,
  video,
  "video-slash": {
    aliases: {
      unicodes: {
        secondary: [
          "10f4e2"
        ]
      }
    },
    changes: [
      "5.0.9",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Video Slash",
    search: {
      terms: [
        "add",
        "create",
        "disabled",
        "disconnect",
        "film",
        "new",
        "positive",
        "record",
        "video"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f4e2",
    voted: false
  },
  vihara,
  vimeo,
  "vimeo-v": {
    changes: [
      "4.4.0",
      "5.0.0"
    ],
    label: "Vimeo V",
    search: {
      terms: [
        "vimeo"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f27d",
    voted: false
  },
  vine,
  virus,
  "virus-covid": {
    changes: [
      "6.0.0",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Virus Covid",
    search: {
      terms: [
        "bug",
        "covid-19",
        "flu",
        "health",
        "infection",
        "pandemic",
        "vaccine",
        "viral",
        "virus"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4a8",
    voted: false
  },
  "virus-covid-slash": {
    changes: [
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Virus Covid Slash",
    search: {
      terms: [
        "bug",
        "covid-19",
        "disabled",
        "flu",
        "health",
        "infection",
        "pandemic",
        "vaccine",
        "viral",
        "virus"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e4a9",
    voted: false
  },
  "virus-slash": {
    aliases: {
      unicodes: {
        secondary: [
          "10e075"
        ]
      }
    },
    changes: [
      "5.13.0",
      "5.14.0",
      "6.0.0-beta1",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Virus Slash",
    search: {
      terms: [
        "bug",
        "coronavirus",
        "covid-19",
        "cure",
        "disabled",
        "eliminate",
        "flu",
        "health",
        "infection",
        "pandemic",
        "sick",
        "vaccine",
        "viral"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e075",
    voted: false
  },
  viruses,
  vk,
  vnv,
  voicemail,
  volcano,
  volleyball,
  "volume-high": {
    aliases: {
      names: [
        "volume-up"
      ],
      unicodes: {
        composite: [
          "1f50a"
        ],
        secondary: [
          "10f028"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "5.3.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Volume High",
    search: {
      terms: [
        "audio",
        "higher",
        "loud",
        "louder",
        "music",
        "sound",
        "speaker",
        "speaker high volume"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f028",
    voted: false
  },
  "volume-low": {
    aliases: {
      names: [
        "volume-down"
      ],
      unicodes: {
        composite: [
          "1f508"
        ],
        secondary: [
          "10f027"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "5.3.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Volume Low",
    search: {
      terms: [
        "audio",
        "lower",
        "music",
        "quieter",
        "soft",
        "sound",
        "speaker",
        "speaker low volume"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f027",
    voted: false
  },
  "volume-off": {
    aliases: {
      unicodes: {
        secondary: [
          "10f026"
        ]
      }
    },
    changes: [
      "1.0.0",
      "5.0.0",
      "5.3.0",
      "5.8.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Volume Off",
    search: {
      terms: [
        "audio",
        "ban",
        "music",
        "mute",
        "quiet",
        "silent",
        "sound"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f026",
    voted: false
  },
  "volume-xmark": {
    aliases: {
      names: [
        "volume-mute",
        "volume-times"
      ],
      unicodes: {
        secondary: [
          "10f6a9"
        ]
      }
    },
    changes: [
      "5.3.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Volume Xmark",
    search: {
      terms: [
        "audio",
        "music",
        "quiet",
        "sound",
        "speaker"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f6a9",
    voted: true
  },
  "vr-cardboard": {
    aliases: {
      unicodes: {
        secondary: [
          "10f729"
        ]
      }
    },
    changes: [
      "5.4.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Vr Cardboard",
    search: {
      terms: [
        "3d",
        "augment",
        "google",
        "reality",
        "virtual"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f729",
    voted: true
  },
  vuejs,
  w,
  "walkie-talkie": {
    aliases: {
      unicodes: {
        secondary: [
          "10f8ef"
        ]
      }
    },
    changes: [
      "5.11.0",
      "6.0.0-beta1",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Walkie Talkie",
    search: {
      terms: [
        "communication",
        "copy",
        "intercom",
        "over",
        "portable",
        "radio",
        "two way radio"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f8ef",
    voted: false
  },
  wallet,
  "wand-magic": {
    aliases: {
      names: [
        "magic"
      ],
      unicodes: {
        secondary: [
          "10f0d0"
        ]
      }
    },
    changes: [
      "2.0.0",
      "5.0.0",
      "5.1.0",
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Wand Magic",
    search: {
      terms: [
        "autocomplete",
        "automatic",
        "mage",
        "magic",
        "spell",
        "wand",
        "witch",
        "wizard"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f0d0",
    voted: false
  },
  "wand-magic-sparkles": {
    aliases: {
      names: [
        "magic-wand-sparkles"
      ]
    },
    changes: [
      "6.0.0-beta1",
      "6.0.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Wand Magic Sparkles",
    search: {
      terms: [
        "auto",
        "magic",
        "magic wand",
        "trick",
        "witch",
        "wizard"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e2ca",
    voted: false
  },
  "wand-sparkles": {
    aliases: {
      unicodes: {
        secondary: [
          "10f72b"
        ]
      }
    },
    changes: [
      "5.4.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Wand Sparkles",
    search: {
      terms: [
        "autocomplete",
        "automatic",
        "fantasy",
        "halloween",
        "holiday",
        "magic",
        "weapon",
        "witch",
        "wizard"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f72b",
    voted: false
  },
  warehouse,
  "watchman-monitoring": {
    changes: [
      "5.15.0"
    ],
    label: "Watchman Monitoring",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "e087",
    voted: false
  },
  water,
  "water-ladder": {
    aliases: {
      names: [
        "ladder-water",
        "swimming-pool"
      ],
      unicodes: {
        secondary: [
          "10f5c5"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Water Ladder",
    search: {
      terms: [
        "ladder",
        "recreation",
        "swim",
        "water"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5c5",
    voted: false
  },
  "wave-square": {
    aliases: {
      unicodes: {
        secondary: [
          "10f83e"
        ]
      }
    },
    changes: [
      "5.8.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Wave Square",
    search: {
      terms: [
        "frequency",
        "pulse",
        "signal"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f83e",
    voted: false
  },
  waze,
  "web-awesome": {
    changes: [
      "6.5.2",
      "6.6.0",
      "6.7.0"
    ],
    label: "Web Awesome",
    search: {
      terms: [
        "awesome",
        "coding",
        "components",
        "crown",
        "web"
      ]
    },
    styles: [
      "solid",
      "brands"
    ],
    unicode: "e682",
    voted: false
  },
  webflow,
  weebly,
  weibo,
  "weight-hanging": {
    aliases: {
      unicodes: {
        secondary: [
          "10f5cd"
        ]
      }
    },
    changes: [
      "5.1.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Weight Hanging",
    search: {
      terms: [
        "anvil",
        "heavy",
        "measurement"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5cd",
    voted: false
  },
  "weight-scale": {
    aliases: {
      names: [
        "weight"
      ],
      unicodes: {
        secondary: [
          "10f496"
        ]
      }
    },
    changes: [
      "5.0.7",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Weight Scale",
    search: {
      terms: [
        "health",
        "measurement",
        "scale",
        "weight"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f496",
    voted: false
  },
  weixin,
  whatsapp,
  "wheat-awn": {
    aliases: {
      names: [
        "wheat-alt"
      ]
    },
    changes: [
      "6.0.0-beta1",
      "6.1.0",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Wheat Awn",
    search: {
      terms: [
        "agriculture",
        "autumn",
        "fall",
        "farming",
        "grain"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e2cd",
    voted: false
  },
  "wheat-awn-circle-exclamation": {
    changes: [
      "6.1.0",
      "6.1.2",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Wheat Awn Circle Exclamation",
    search: {
      terms: [
        "affected",
        "failed",
        "famine",
        "food",
        "gluten",
        "hunger",
        "starve",
        "straw"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e598",
    voted: false
  },
  wheelchair,
  "wheelchair-move": {
    aliases: {
      names: [
        "wheelchair-alt"
      ]
    },
    changes: [
      "6.0.0-beta1",
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Wheelchair Move",
    search: {
      terms: [
        "access",
        "disabled",
        "handicap",
        "impairment",
        "physical",
        "uer",
        "wheelchair symbol"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e2ce",
    voted: false
  },
  "whiskey-glass": {
    aliases: {
      names: [
        "glass-whiskey"
      ],
      unicodes: {
        composite: [
          "1f943"
        ],
        secondary: [
          "10f7a0"
        ]
      }
    },
    changes: [
      "5.6.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Whiskey Glass",
    search: {
      terms: [
        "alcohol",
        "bar",
        "beverage",
        "bourbon",
        "drink",
        "glass",
        "liquor",
        "neat",
        "rye",
        "scotch",
        "shot",
        "tumbler",
        "tumbler glass",
        "whisky"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f7a0",
    voted: false
  },
  whmcs,
  wifi,
  "wikipedia-w": {
    changes: [
      "4.4.0",
      "5.0.0"
    ],
    label: "Wikipedia W",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f266",
    voted: false
  },
  wind,
  "window-maximize": {
    aliases: {
      unicodes: {
        composite: [
          "1f5d6"
        ],
        secondary: [
          "10f2d0"
        ]
      }
    },
    changes: [
      "4.7.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Window Maximize",
    search: {
      terms: [
        "Maximize",
        "browser",
        "computer",
        "development",
        "expand"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f2d0",
    voted: false
  },
  "window-minimize": {
    aliases: {
      unicodes: {
        composite: [
          "1f5d5"
        ],
        secondary: [
          "10f2d1"
        ]
      }
    },
    changes: [
      "4.7.0",
      "5.0.0",
      "5.10.1",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Window Minimize",
    search: {
      terms: [
        "Minimize",
        "browser",
        "collapse",
        "computer",
        "development"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f2d1",
    voted: false
  },
  "window-restore": {
    aliases: {
      unicodes: {
        secondary: [
          "10f2d2"
        ]
      }
    },
    changes: [
      "4.7.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Window Restore",
    search: {
      terms: [
        "browser",
        "computer",
        "development"
      ]
    },
    styles: [
      "solid",
      "regular"
    ],
    unicode: "f2d2",
    voted: false
  },
  windows,
  "wine-bottle": {
    aliases: {
      unicodes: {
        secondary: [
          "10f72f"
        ]
      }
    },
    changes: [
      "5.4.0",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Wine Bottle",
    search: {
      terms: [
        "alcohol",
        "beverage",
        "cabernet",
        "drink",
        "glass",
        "grapes",
        "merlot",
        "sauvignon"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f72f",
    voted: false
  },
  "wine-glass": {
    aliases: {
      unicodes: {
        composite: [
          "1f377"
        ],
        secondary: [
          "10f4e3"
        ]
      }
    },
    changes: [
      "5.0.9",
      "5.1.0",
      "5.10.1",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Wine Glass",
    search: {
      terms: [
        "alcohol",
        "bar",
        "beverage",
        "cabernet",
        "drink",
        "glass",
        "grapes",
        "merlot",
        "sauvignon",
        "wine",
        "wine glass"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f4e3",
    voted: false
  },
  "wine-glass-empty": {
    aliases: {
      names: [
        "wine-glass-alt"
      ],
      unicodes: {
        secondary: [
          "10f5ce"
        ]
      }
    },
    changes: [
      "5.1.0",
      "5.10.1",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.4.1",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Wine Glass Empty",
    search: {
      terms: [
        "alcohol",
        "beverage",
        "cabernet",
        "drink",
        "grapes",
        "merlot",
        "sauvignon"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f5ce",
    voted: false
  },
  wirsindhandwerk,
  wix,
  "wizards-of-the-coast": {
    changes: [
      "5.4.0"
    ],
    label: "Wizards of the Coast",
    search: {
      terms: [
        "Dungeons & Dragons",
        "d&d",
        "dnd",
        "fantasy",
        "game",
        "gaming",
        "tabletop"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "f730",
    voted: false
  },
  wodu,
  "wolf-pack-battalion": {
    changes: [
      "5.0.12",
      "5.8.0"
    ],
    label: "Wolf Pack Battalion",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f514",
    voted: false
  },
  "won-sign": {
    aliases: {
      names: [
        "krw",
        "won"
      ],
      unicodes: {
        composite: [
          "20a9"
        ],
        secondary: [
          "10f159"
        ]
      }
    },
    changes: [
      "3.2.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Won Sign",
    search: {
      terms: [
        "Won Sign",
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f159",
    voted: false
  },
  wordpress,
  "wordpress-simple": {
    changes: [
      "5.0.0"
    ],
    label: "Wordpress Simple",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f411",
    voted: false
  },
  worm,
  wpbeginner,
  wpexplorer,
  wpforms,
  wpressr,
  wrench,
  x,
  "x-ray": {
    aliases: {
      unicodes: {
        secondary: [
          "10f497"
        ]
      }
    },
    changes: [
      "5.0.7",
      "5.10.2",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "X Ray",
    search: {
      terms: [
        "health",
        "medical",
        "radiological images",
        "radiology",
        "skeleton"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f497",
    voted: false
  },
  "x-twitter": {
    changes: [
      "6.4.2"
    ],
    label: "X Twitter",
    search: {
      terms: [
        "elon",
        "twitter",
        "x"
      ]
    },
    styles: [
      "brands"
    ],
    unicode: "e61b",
    voted: false
  },
  xbox,
  xing,
  xmark,
  "xmarks-lines": {
    changes: [
      "6.1.0",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Xmarks Lines",
    search: {
      terms: [
        "barricade",
        "barrier",
        "fence",
        "poison",
        "roadblock"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "e59a",
    voted: false
  },
  y,
  "y-combinator": {
    changes: [
      "4.4.0",
      "5.0.0"
    ],
    label: "Y Combinator",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f23b",
    voted: false
  },
  yahoo,
  yammer,
  yandex,
  "yandex-international": {
    changes: [
      "5.0.0"
    ],
    label: "Yandex International",
    search: {
      terms: []
    },
    styles: [
      "brands"
    ],
    unicode: "f414",
    voted: false
  },
  yarn,
  yelp,
  "yen-sign": {
    aliases: {
      names: [
        "cny",
        "jpy",
        "rmb",
        "yen"
      ],
      unicodes: {
        composite: [
          "a5"
        ],
        secondary: [
          "10f157"
        ]
      }
    },
    changes: [
      "3.2.0",
      "5.0.0",
      "6.0.0-beta1",
      "6.0.0-beta3",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Yen Sign",
    search: {
      terms: [
        "Yen Sign",
        "currency"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f157",
    voted: false
  },
  "yin-yang": {
    aliases: {
      unicodes: {
        composite: [
          "262f"
        ],
        secondary: [
          "10f6ad"
        ]
      }
    },
    changes: [
      "5.3.0",
      "5.10.2",
      "5.11.0",
      "5.11.1",
      "6.0.0-beta1",
      "6.2.0",
      "6.3.0",
      "6.4.0",
      "6.5.0",
      "6.6.0",
      "6.7.0"
    ],
    label: "Yin Yang",
    search: {
      terms: [
        "daoism",
        "opposites",
        "religion",
        "tao",
        "taoism",
        "taoist",
        "yang",
        "yin",
        "yin yang"
      ]
    },
    styles: [
      "solid"
    ],
    unicode: "f6ad",
    voted: false
  },
  yoast,
  youtube,
  z,
  zhihu
};
const IonIcons = [
  {
    id: "ion-alert",
    value: "f101"
  },
  {
    id: "ion-alert-circled",
    value: "f100"
  },
  {
    id: "ion-android-add",
    value: "f2c7"
  },
  {
    id: "ion-android-add-circle",
    value: "f359"
  },
  {
    id: "ion-android-alarm-clock",
    value: "f35a"
  },
  {
    id: "ion-android-alert",
    value: "f35b"
  },
  {
    id: "ion-android-apps",
    value: "f35c"
  },
  {
    id: "ion-android-archive",
    value: "f2c9"
  },
  {
    id: "ion-android-arrow-back",
    value: "f2ca"
  },
  {
    id: "ion-android-arrow-down",
    value: "f35d"
  },
  {
    id: "ion-android-arrow-dropdown",
    value: "f35f"
  },
  {
    id: "ion-android-arrow-dropdown-circle",
    value: "f35e"
  },
  {
    id: "ion-android-arrow-dropleft",
    value: "f361"
  },
  {
    id: "ion-android-arrow-dropleft-circle",
    value: "f360"
  },
  {
    id: "ion-android-arrow-dropright",
    value: "f363"
  },
  {
    id: "ion-android-arrow-dropright-circle",
    value: "f362"
  },
  {
    id: "ion-android-arrow-dropup",
    value: "f365"
  },
  {
    id: "ion-android-arrow-dropup-circle",
    value: "f364"
  },
  {
    id: "ion-android-arrow-forward",
    value: "f30f"
  },
  {
    id: "ion-android-arrow-up",
    value: "f366"
  },
  {
    id: "ion-android-attach",
    value: "f367"
  },
  {
    id: "ion-android-bar",
    value: "f368"
  },
  {
    id: "ion-android-bicycle",
    value: "f369"
  },
  {
    id: "ion-android-boat",
    value: "f36a"
  },
  {
    id: "ion-android-bookmark",
    value: "f36b"
  },
  {
    id: "ion-android-bulb",
    value: "f36c"
  },
  {
    id: "ion-android-bus",
    value: "f36d"
  },
  {
    id: "ion-android-calendar",
    value: "f2d1"
  },
  {
    id: "ion-android-call",
    value: "f2d2"
  },
  {
    id: "ion-android-camera",
    value: "f2d3"
  },
  {
    id: "ion-android-cancel",
    value: "f36e"
  },
  {
    id: "ion-android-car",
    value: "f36f"
  },
  {
    id: "ion-android-cart",
    value: "f370"
  },
  {
    id: "ion-android-chat",
    value: "f2d4"
  },
  {
    id: "ion-android-checkbox",
    value: "f374"
  },
  {
    id: "ion-android-checkbox-blank",
    value: "f371"
  },
  {
    id: "ion-android-checkbox-outline",
    value: "f373"
  },
  {
    id: "ion-android-checkbox-outline-blank",
    value: "f372"
  },
  {
    id: "ion-android-checkmark-circle",
    value: "f375"
  },
  {
    id: "ion-android-clipboard",
    value: "f376"
  },
  {
    id: "ion-android-close",
    value: "f2d7"
  },
  {
    id: "ion-android-cloud",
    value: "f37a"
  },
  {
    id: "ion-android-cloud-circle",
    value: "f377"
  },
  {
    id: "ion-android-cloud-done",
    value: "f378"
  },
  {
    id: "ion-android-cloud-outline",
    value: "f379"
  },
  {
    id: "ion-android-color-palette",
    value: "f37b"
  },
  {
    id: "ion-android-compass",
    value: "f37c"
  },
  {
    id: "ion-android-contact",
    value: "f2d8"
  },
  {
    id: "ion-android-contacts",
    value: "f2d9"
  },
  {
    id: "ion-android-contract",
    value: "f37d"
  },
  {
    id: "ion-android-create",
    value: "f37e"
  },
  {
    id: "ion-android-delete",
    value: "f37f"
  },
  {
    id: "ion-android-desktop",
    value: "f380"
  },
  {
    id: "ion-android-document",
    value: "f381"
  },
  {
    id: "ion-android-done",
    value: "f383"
  },
  {
    id: "ion-android-done-all",
    value: "f382"
  },
  {
    id: "ion-android-download",
    value: "f2dd"
  },
  {
    id: "ion-android-drafts",
    value: "f384"
  },
  {
    id: "ion-android-exit",
    value: "f385"
  },
  {
    id: "ion-android-expand",
    value: "f386"
  },
  {
    id: "ion-android-favorite",
    value: "f388"
  },
  {
    id: "ion-android-favorite-outline",
    value: "f387"
  },
  {
    id: "ion-android-film",
    value: "f389"
  },
  {
    id: "ion-android-folder",
    value: "f2e0"
  },
  {
    id: "ion-android-folder-open",
    value: "f38a"
  },
  {
    id: "ion-android-funnel",
    value: "f38b"
  },
  {
    id: "ion-android-globe",
    value: "f38c"
  },
  {
    id: "ion-android-hand",
    value: "f2e3"
  },
  {
    id: "ion-android-hangout",
    value: "f38d"
  },
  {
    id: "ion-android-happy",
    value: "f38e"
  },
  {
    id: "ion-android-home",
    value: "f38f"
  },
  {
    id: "ion-android-image",
    value: "f2e4"
  },
  {
    id: "ion-android-laptop",
    value: "f390"
  },
  {
    id: "ion-android-list",
    value: "f391"
  },
  {
    id: "ion-android-locate",
    value: "f2e9"
  },
  {
    id: "ion-android-lock",
    value: "f392"
  },
  {
    id: "ion-android-mail",
    value: "f2eb"
  },
  {
    id: "ion-android-map",
    value: "f393"
  },
  {
    id: "ion-android-menu",
    value: "f394"
  },
  {
    id: "ion-android-microphone",
    value: "f2ec"
  },
  {
    id: "ion-android-microphone-off",
    value: "f395"
  },
  {
    id: "ion-android-more-horizontal",
    value: "f396"
  },
  {
    id: "ion-android-more-vertical",
    value: "f397"
  },
  {
    id: "ion-android-navigate",
    value: "f398"
  },
  {
    id: "ion-android-notifications",
    value: "f39b"
  },
  {
    id: "ion-android-notifications-none",
    value: "f399"
  },
  {
    id: "ion-android-notifications-off",
    value: "f39a"
  },
  {
    id: "ion-android-open",
    value: "f39c"
  },
  {
    id: "ion-android-options",
    value: "f39d"
  },
  {
    id: "ion-android-people",
    value: "f39e"
  },
  {
    id: "ion-android-person",
    value: "f3a0"
  },
  {
    id: "ion-android-person-add",
    value: "f39f"
  },
  {
    id: "ion-android-phone-landscape",
    value: "f3a1"
  },
  {
    id: "ion-android-phone-portrait",
    value: "f3a2"
  },
  {
    id: "ion-android-pin",
    value: "f3a3"
  },
  {
    id: "ion-android-plane",
    value: "f3a4"
  },
  {
    id: "ion-android-playstore",
    value: "f2f0"
  },
  {
    id: "ion-android-print",
    value: "f3a5"
  },
  {
    id: "ion-android-radio-button-off",
    value: "f3a6"
  },
  {
    id: "ion-android-radio-button-on",
    value: "f3a7"
  },
  {
    id: "ion-android-refresh",
    value: "f3a8"
  },
  {
    id: "ion-android-remove",
    value: "f2f4"
  },
  {
    id: "ion-android-remove-circle",
    value: "f3a9"
  },
  {
    id: "ion-android-restaurant",
    value: "f3aa"
  },
  {
    id: "ion-android-sad",
    value: "f3ab"
  },
  {
    id: "ion-android-search",
    value: "f2f5"
  },
  {
    id: "ion-android-send",
    value: "f2f6"
  },
  {
    id: "ion-android-settings",
    value: "f2f7"
  },
  {
    id: "ion-android-share",
    value: "f2f8"
  },
  {
    id: "ion-android-share-alt",
    value: "f3ac"
  },
  {
    id: "ion-android-star",
    value: "f2fc"
  },
  {
    id: "ion-android-star-half",
    value: "f3ad"
  },
  {
    id: "ion-android-star-outline",
    value: "f3ae"
  },
  {
    id: "ion-android-stopwatch",
    value: "f2fd"
  },
  {
    id: "ion-android-subway",
    value: "f3af"
  },
  {
    id: "ion-android-sunny",
    value: "f3b0"
  },
  {
    id: "ion-android-sync",
    value: "f3b1"
  },
  {
    id: "ion-android-textsms",
    value: "f3b2"
  },
  {
    id: "ion-android-time",
    value: "f3b3"
  },
  {
    id: "ion-android-train",
    value: "f3b4"
  },
  {
    id: "ion-android-unlock",
    value: "f3b5"
  },
  {
    id: "ion-android-upload",
    value: "f3b6"
  },
  {
    id: "ion-android-volume-down",
    value: "f3b7"
  },
  {
    id: "ion-android-volume-mute",
    value: "f3b8"
  },
  {
    id: "ion-android-volume-off",
    value: "f3b9"
  },
  {
    id: "ion-android-volume-up",
    value: "f3ba"
  },
  {
    id: "ion-android-walk",
    value: "f3bb"
  },
  {
    id: "ion-android-warning",
    value: "f3bc"
  },
  {
    id: "ion-android-watch",
    value: "f3bd"
  },
  {
    id: "ion-android-wifi",
    value: "f305"
  },
  {
    id: "ion-aperture",
    value: "f313"
  },
  {
    id: "ion-archive",
    value: "f102"
  },
  {
    id: "ion-arrow-down-a",
    value: "f103"
  },
  {
    id: "ion-arrow-down-b",
    value: "f104"
  },
  {
    id: "ion-arrow-down-c",
    value: "f105"
  },
  {
    id: "ion-arrow-expand",
    value: "f25e"
  },
  {
    id: "ion-arrow-graph-down-left",
    value: "f25f"
  },
  {
    id: "ion-arrow-graph-down-right",
    value: "f260"
  },
  {
    id: "ion-arrow-graph-up-left",
    value: "f261"
  },
  {
    id: "ion-arrow-graph-up-right",
    value: "f262"
  },
  {
    id: "ion-arrow-left-a",
    value: "f106"
  },
  {
    id: "ion-arrow-left-b",
    value: "f107"
  },
  {
    id: "ion-arrow-left-c",
    value: "f108"
  },
  {
    id: "ion-arrow-move",
    value: "f263"
  },
  {
    id: "ion-arrow-resize",
    value: "f264"
  },
  {
    id: "ion-arrow-return-left",
    value: "f265"
  },
  {
    id: "ion-arrow-return-right",
    value: "f266"
  },
  {
    id: "ion-arrow-right-a",
    value: "f109"
  },
  {
    id: "ion-arrow-right-b",
    value: "f10a"
  },
  {
    id: "ion-arrow-right-c",
    value: "f10b"
  },
  {
    id: "ion-arrow-shrink",
    value: "f267"
  },
  {
    id: "ion-arrow-swap",
    value: "f268"
  },
  {
    id: "ion-arrow-up-a",
    value: "f10c"
  },
  {
    id: "ion-arrow-up-b",
    value: "f10d"
  },
  {
    id: "ion-arrow-up-c",
    value: "f10e"
  },
  {
    id: "ion-asterisk",
    value: "f314"
  },
  {
    id: "ion-at",
    value: "f10f"
  },
  {
    id: "ion-backspace",
    value: "f3bf"
  },
  {
    id: "ion-backspace-outline",
    value: "f3be"
  },
  {
    id: "ion-bag",
    value: "f110"
  },
  {
    id: "ion-battery-charging",
    value: "f111"
  },
  {
    id: "ion-battery-empty",
    value: "f112"
  },
  {
    id: "ion-battery-full",
    value: "f113"
  },
  {
    id: "ion-battery-half",
    value: "f114"
  },
  {
    id: "ion-battery-low",
    value: "f115"
  },
  {
    id: "ion-beaker",
    value: "f269"
  },
  {
    id: "ion-beer",
    value: "f26a"
  },
  {
    id: "ion-bluetooth",
    value: "f116"
  },
  {
    id: "ion-bonfire",
    value: "f315"
  },
  {
    id: "ion-bookmark",
    value: "f26b"
  },
  {
    id: "ion-bowtie",
    value: "f3c0"
  },
  {
    id: "ion-briefcase",
    value: "f26c"
  },
  {
    id: "ion-bug",
    value: "f2be"
  },
  {
    id: "ion-calculator",
    value: "f26d"
  },
  {
    id: "ion-calendar",
    value: "f117"
  },
  {
    id: "ion-camera",
    value: "f118"
  },
  {
    id: "ion-card",
    value: "f119"
  },
  {
    id: "ion-cash",
    value: "f316"
  },
  {
    id: "ion-chatbox",
    value: "f11b"
  },
  {
    id: "ion-chatbox-working",
    value: "f11a"
  },
  {
    id: "ion-chatboxes",
    value: "f11c"
  },
  {
    id: "ion-chatbubble",
    value: "f11e"
  },
  {
    id: "ion-chatbubble-working",
    value: "f11d"
  },
  {
    id: "ion-chatbubbles",
    value: "f11f"
  },
  {
    id: "ion-checkmark",
    value: "f122"
  },
  {
    id: "ion-checkmark-circled",
    value: "f120"
  },
  {
    id: "ion-checkmark-round",
    value: "f121"
  },
  {
    id: "ion-chevron-down",
    value: "f123"
  },
  {
    id: "ion-chevron-left",
    value: "f124"
  },
  {
    id: "ion-chevron-right",
    value: "f125"
  },
  {
    id: "ion-chevron-up",
    value: "f126"
  },
  {
    id: "ion-clipboard",
    value: "f127"
  },
  {
    id: "ion-clock",
    value: "f26e"
  },
  {
    id: "ion-close",
    value: "f12a"
  },
  {
    id: "ion-close-circled",
    value: "f128"
  },
  {
    id: "ion-close-round",
    value: "f129"
  },
  {
    id: "ion-closed-captioning",
    value: "f317"
  },
  {
    id: "ion-cloud",
    value: "f12b"
  },
  {
    id: "ion-code",
    value: "f271"
  },
  {
    id: "ion-code-download",
    value: "f26f"
  },
  {
    id: "ion-code-working",
    value: "f270"
  },
  {
    id: "ion-coffee",
    value: "f272"
  },
  {
    id: "ion-compass",
    value: "f273"
  },
  {
    id: "ion-compose",
    value: "f12c"
  },
  {
    id: "ion-connection-bars",
    value: "f274"
  },
  {
    id: "ion-contrast",
    value: "f275"
  },
  {
    id: "ion-crop",
    value: "f3c1"
  },
  {
    id: "ion-cube",
    value: "f318"
  },
  {
    id: "ion-disc",
    value: "f12d"
  },
  {
    id: "ion-document",
    value: "f12f"
  },
  {
    id: "ion-document-text",
    value: "f12e"
  },
  {
    id: "ion-drag",
    value: "f130"
  },
  {
    id: "ion-earth",
    value: "f276"
  },
  {
    id: "ion-easel",
    value: "f3c2"
  },
  {
    id: "ion-edit",
    value: "f2bf"
  },
  {
    id: "ion-egg",
    value: "f277"
  },
  {
    id: "ion-eject",
    value: "f131"
  },
  {
    id: "ion-email",
    value: "f132"
  },
  {
    id: "ion-email-unread",
    value: "f3c3"
  },
  {
    id: "ion-erlenmeyer-flask",
    value: "f3c5"
  },
  {
    id: "ion-erlenmeyer-flask-bubbles",
    value: "f3c4"
  },
  {
    id: "ion-eye",
    value: "f133"
  },
  {
    id: "ion-eye-disabled",
    value: "f306"
  },
  {
    id: "ion-female",
    value: "f278"
  },
  {
    id: "ion-filing",
    value: "f134"
  },
  {
    id: "ion-film-marker",
    value: "f135"
  },
  {
    id: "ion-fireball",
    value: "f319"
  },
  {
    id: "ion-flag",
    value: "f279"
  },
  {
    id: "ion-flame",
    value: "f31a"
  },
  {
    id: "ion-flash",
    value: "f137"
  },
  {
    id: "ion-flash-off",
    value: "f136"
  },
  {
    id: "ion-folder",
    value: "f139"
  },
  {
    id: "ion-fork",
    value: "f27a"
  },
  {
    id: "ion-fork-repo",
    value: "f2c0"
  },
  {
    id: "ion-forward",
    value: "f13a"
  },
  {
    id: "ion-funnel",
    value: "f31b"
  },
  {
    id: "ion-gear-a",
    value: "f13d"
  },
  {
    id: "ion-gear-b",
    value: "f13e"
  },
  {
    id: "ion-grid",
    value: "f13f"
  },
  {
    id: "ion-hammer",
    value: "f27b"
  },
  {
    id: "ion-happy",
    value: "f31c"
  },
  {
    id: "ion-happy-outline",
    value: "f3c6"
  },
  {
    id: "ion-headphone",
    value: "f140"
  },
  {
    id: "ion-heart",
    value: "f141"
  },
  {
    id: "ion-heart-broken",
    value: "f31d"
  },
  {
    id: "ion-help",
    value: "f143"
  },
  {
    id: "ion-help-buoy",
    value: "f27c"
  },
  {
    id: "ion-help-circled",
    value: "f142"
  },
  {
    id: "ion-home",
    value: "f144"
  },
  {
    id: "ion-icecream",
    value: "f27d"
  },
  {
    id: "ion-image",
    value: "f147"
  },
  {
    id: "ion-images",
    value: "f148"
  },
  {
    id: "ion-information",
    value: "f14a"
  },
  {
    id: "ion-information-circled",
    value: "f149"
  },
  {
    id: "ion-ionic",
    value: "f14b"
  },
  {
    id: "ion-ios-alarm",
    value: "f3c8"
  },
  {
    id: "ion-ios-alarm-outline",
    value: "f3c7"
  },
  {
    id: "ion-ios-albums",
    value: "f3ca"
  },
  {
    id: "ion-ios-albums-outline",
    value: "f3c9"
  },
  {
    id: "ion-ios-americanfootball",
    value: "f3cc"
  },
  {
    id: "ion-ios-americanfootball-outline",
    value: "f3cb"
  },
  {
    id: "ion-ios-analytics",
    value: "f3ce"
  },
  {
    id: "ion-ios-analytics-outline",
    value: "f3cd"
  },
  {
    id: "ion-ios-arrow-back",
    value: "f3cf"
  },
  {
    id: "ion-ios-arrow-down",
    value: "f3d0"
  },
  {
    id: "ion-ios-arrow-forward",
    value: "f3d1"
  },
  {
    id: "ion-ios-arrow-left",
    value: "f3d2"
  },
  {
    id: "ion-ios-arrow-right",
    value: "f3d3"
  },
  {
    id: "ion-ios-arrow-thin-down",
    value: "f3d4"
  },
  {
    id: "ion-ios-arrow-thin-left",
    value: "f3d5"
  },
  {
    id: "ion-ios-arrow-thin-right",
    value: "f3d6"
  },
  {
    id: "ion-ios-arrow-thin-up",
    value: "f3d7"
  },
  {
    id: "ion-ios-arrow-up",
    value: "f3d8"
  },
  {
    id: "ion-ios-at",
    value: "f3da"
  },
  {
    id: "ion-ios-at-outline",
    value: "f3d9"
  },
  {
    id: "ion-ios-barcode",
    value: "f3dc"
  },
  {
    id: "ion-ios-barcode-outline",
    value: "f3db"
  },
  {
    id: "ion-ios-baseball",
    value: "f3de"
  },
  {
    id: "ion-ios-baseball-outline",
    value: "f3dd"
  },
  {
    id: "ion-ios-basketball",
    value: "f3e0"
  },
  {
    id: "ion-ios-basketball-outline",
    value: "f3df"
  },
  {
    id: "ion-ios-bell",
    value: "f3e2"
  },
  {
    id: "ion-ios-bell-outline",
    value: "f3e1"
  },
  {
    id: "ion-ios-body",
    value: "f3e4"
  },
  {
    id: "ion-ios-body-outline",
    value: "f3e3"
  },
  {
    id: "ion-ios-bolt",
    value: "f3e6"
  },
  {
    id: "ion-ios-bolt-outline",
    value: "f3e5"
  },
  {
    id: "ion-ios-book",
    value: "f3e8"
  },
  {
    id: "ion-ios-book-outline",
    value: "f3e7"
  },
  {
    id: "ion-ios-bookmarks",
    value: "f3ea"
  },
  {
    id: "ion-ios-bookmarks-outline",
    value: "f3e9"
  },
  {
    id: "ion-ios-box",
    value: "f3ec"
  },
  {
    id: "ion-ios-box-outline",
    value: "f3eb"
  },
  {
    id: "ion-ios-briefcase",
    value: "f3ee"
  },
  {
    id: "ion-ios-briefcase-outline",
    value: "f3ed"
  },
  {
    id: "ion-ios-browsers",
    value: "f3f0"
  },
  {
    id: "ion-ios-browsers-outline",
    value: "f3ef"
  },
  {
    id: "ion-ios-calculator",
    value: "f3f2"
  },
  {
    id: "ion-ios-calculator-outline",
    value: "f3f1"
  },
  {
    id: "ion-ios-calendar",
    value: "f3f4"
  },
  {
    id: "ion-ios-calendar-outline",
    value: "f3f3"
  },
  {
    id: "ion-ios-camera",
    value: "f3f6"
  },
  {
    id: "ion-ios-camera-outline",
    value: "f3f5"
  },
  {
    id: "ion-ios-cart",
    value: "f3f8"
  },
  {
    id: "ion-ios-cart-outline",
    value: "f3f7"
  },
  {
    id: "ion-ios-chatboxes",
    value: "f3fa"
  },
  {
    id: "ion-ios-chatboxes-outline",
    value: "f3f9"
  },
  {
    id: "ion-ios-chatbubble",
    value: "f3fc"
  },
  {
    id: "ion-ios-chatbubble-outline",
    value: "f3fb"
  },
  {
    id: "ion-ios-checkmark",
    value: "f3ff"
  },
  {
    id: "ion-ios-checkmark-empty",
    value: "f3fd"
  },
  {
    id: "ion-ios-checkmark-outline",
    value: "f3fe"
  },
  {
    id: "ion-ios-circle-filled",
    value: "f400"
  },
  {
    id: "ion-ios-circle-outline",
    value: "f401"
  },
  {
    id: "ion-ios-clock",
    value: "f403"
  },
  {
    id: "ion-ios-clock-outline",
    value: "f402"
  },
  {
    id: "ion-ios-close",
    value: "f406"
  },
  {
    id: "ion-ios-close-empty",
    value: "f404"
  },
  {
    id: "ion-ios-close-outline",
    value: "f405"
  },
  {
    id: "ion-ios-cloud",
    value: "f40c"
  },
  {
    id: "ion-ios-cloud-download",
    value: "f408"
  },
  {
    id: "ion-ios-cloud-download-outline",
    value: "f407"
  },
  {
    id: "ion-ios-cloud-outline",
    value: "f409"
  },
  {
    id: "ion-ios-cloud-upload",
    value: "f40b"
  },
  {
    id: "ion-ios-cloud-upload-outline",
    value: "f40a"
  },
  {
    id: "ion-ios-cloudy",
    value: "f410"
  },
  {
    id: "ion-ios-cloudy-night",
    value: "f40e"
  },
  {
    id: "ion-ios-cloudy-night-outline",
    value: "f40d"
  },
  {
    id: "ion-ios-cloudy-outline",
    value: "f40f"
  },
  {
    id: "ion-ios-cog",
    value: "f412"
  },
  {
    id: "ion-ios-cog-outline",
    value: "f411"
  },
  {
    id: "ion-ios-color-filter",
    value: "f414"
  },
  {
    id: "ion-ios-color-filter-outline",
    value: "f413"
  },
  {
    id: "ion-ios-color-wand",
    value: "f416"
  },
  {
    id: "ion-ios-color-wand-outline",
    value: "f415"
  },
  {
    id: "ion-ios-compose",
    value: "f418"
  },
  {
    id: "ion-ios-compose-outline",
    value: "f417"
  },
  {
    id: "ion-ios-contact",
    value: "f41a"
  },
  {
    id: "ion-ios-contact-outline",
    value: "f419"
  },
  {
    id: "ion-ios-copy",
    value: "f41c"
  },
  {
    id: "ion-ios-copy-outline",
    value: "f41b"
  },
  {
    id: "ion-ios-crop",
    value: "f41e"
  },
  {
    id: "ion-ios-crop-strong",
    value: "f41d"
  },
  {
    id: "ion-ios-download",
    value: "f420"
  },
  {
    id: "ion-ios-download-outline",
    value: "f41f"
  },
  {
    id: "ion-ios-drag",
    value: "f421"
  },
  {
    id: "ion-ios-email",
    value: "f423"
  },
  {
    id: "ion-ios-email-outline",
    value: "f422"
  },
  {
    id: "ion-ios-eye",
    value: "f425"
  },
  {
    id: "ion-ios-eye-outline",
    value: "f424"
  },
  {
    id: "ion-ios-fastforward",
    value: "f427"
  },
  {
    id: "ion-ios-fastforward-outline",
    value: "f426"
  },
  {
    id: "ion-ios-filing",
    value: "f429"
  },
  {
    id: "ion-ios-filing-outline",
    value: "f428"
  },
  {
    id: "ion-ios-film",
    value: "f42b"
  },
  {
    id: "ion-ios-film-outline",
    value: "f42a"
  },
  {
    id: "ion-ios-flag",
    value: "f42d"
  },
  {
    id: "ion-ios-flag-outline",
    value: "f42c"
  },
  {
    id: "ion-ios-flame",
    value: "f42f"
  },
  {
    id: "ion-ios-flame-outline",
    value: "f42e"
  },
  {
    id: "ion-ios-flask",
    value: "f431"
  },
  {
    id: "ion-ios-flask-outline",
    value: "f430"
  },
  {
    id: "ion-ios-flower",
    value: "f433"
  },
  {
    id: "ion-ios-flower-outline",
    value: "f432"
  },
  {
    id: "ion-ios-folder",
    value: "f435"
  },
  {
    id: "ion-ios-folder-outline",
    value: "f434"
  },
  {
    id: "ion-ios-football",
    value: "f437"
  },
  {
    id: "ion-ios-football-outline",
    value: "f436"
  },
  {
    id: "ion-ios-game-controller-a",
    value: "f439"
  },
  {
    id: "ion-ios-game-controller-a-outline",
    value: "f438"
  },
  {
    id: "ion-ios-game-controller-b",
    value: "f43b"
  },
  {
    id: "ion-ios-game-controller-b-outline",
    value: "f43a"
  },
  {
    id: "ion-ios-gear",
    value: "f43d"
  },
  {
    id: "ion-ios-gear-outline",
    value: "f43c"
  },
  {
    id: "ion-ios-glasses",
    value: "f43f"
  },
  {
    id: "ion-ios-glasses-outline",
    value: "f43e"
  },
  {
    id: "ion-ios-grid-view",
    value: "f441"
  },
  {
    id: "ion-ios-grid-view-outline",
    value: "f440"
  },
  {
    id: "ion-ios-heart",
    value: "f443"
  },
  {
    id: "ion-ios-heart-outline",
    value: "f442"
  },
  {
    id: "ion-ios-help",
    value: "f446"
  },
  {
    id: "ion-ios-help-empty",
    value: "f444"
  },
  {
    id: "ion-ios-help-outline",
    value: "f445"
  },
  {
    id: "ion-ios-home",
    value: "f448"
  },
  {
    id: "ion-ios-home-outline",
    value: "f447"
  },
  {
    id: "ion-ios-infinite",
    value: "f44a"
  },
  {
    id: "ion-ios-infinite-outline",
    value: "f449"
  },
  {
    id: "ion-ios-information",
    value: "f44d"
  },
  {
    id: "ion-ios-information-empty",
    value: "f44b"
  },
  {
    id: "ion-ios-information-outline",
    value: "f44c"
  },
  {
    id: "ion-ios-ionic-outline",
    value: "f44e"
  },
  {
    id: "ion-ios-keypad",
    value: "f450"
  },
  {
    id: "ion-ios-keypad-outline",
    value: "f44f"
  },
  {
    id: "ion-ios-lightbulb",
    value: "f452"
  },
  {
    id: "ion-ios-lightbulb-outline",
    value: "f451"
  },
  {
    id: "ion-ios-list",
    value: "f454"
  },
  {
    id: "ion-ios-list-outline",
    value: "f453"
  },
  {
    id: "ion-ios-location",
    value: "f456"
  },
  {
    id: "ion-ios-location-outline",
    value: "f455"
  },
  {
    id: "ion-ios-locked",
    value: "f458"
  },
  {
    id: "ion-ios-locked-outline",
    value: "f457"
  },
  {
    id: "ion-ios-loop",
    value: "f45a"
  },
  {
    id: "ion-ios-loop-strong",
    value: "f459"
  },
  {
    id: "ion-ios-medical",
    value: "f45c"
  },
  {
    id: "ion-ios-medical-outline",
    value: "f45b"
  },
  {
    id: "ion-ios-medkit",
    value: "f45e"
  },
  {
    id: "ion-ios-medkit-outline",
    value: "f45d"
  },
  {
    id: "ion-ios-mic",
    value: "f461"
  },
  {
    id: "ion-ios-mic-off",
    value: "f45f"
  },
  {
    id: "ion-ios-mic-outline",
    value: "f460"
  },
  {
    id: "ion-ios-minus",
    value: "f464"
  },
  {
    id: "ion-ios-minus-empty",
    value: "f462"
  },
  {
    id: "ion-ios-minus-outline",
    value: "f463"
  },
  {
    id: "ion-ios-monitor",
    value: "f466"
  },
  {
    id: "ion-ios-monitor-outline",
    value: "f465"
  },
  {
    id: "ion-ios-moon",
    value: "f468"
  },
  {
    id: "ion-ios-moon-outline",
    value: "f467"
  },
  {
    id: "ion-ios-more",
    value: "f46a"
  },
  {
    id: "ion-ios-more-outline",
    value: "f469"
  },
  {
    id: "ion-ios-musical-note",
    value: "f46b"
  },
  {
    id: "ion-ios-musical-notes",
    value: "f46c"
  },
  {
    id: "ion-ios-navigate",
    value: "f46e"
  },
  {
    id: "ion-ios-navigate-outline",
    value: "f46d"
  },
  {
    id: "ion-ios-nutrition",
    value: "f470"
  },
  {
    id: "ion-ios-nutrition-outline",
    value: "f46f"
  },
  {
    id: "ion-ios-paper",
    value: "f472"
  },
  {
    id: "ion-ios-paper-outline",
    value: "f471"
  },
  {
    id: "ion-ios-paperplane",
    value: "f474"
  },
  {
    id: "ion-ios-paperplane-outline",
    value: "f473"
  },
  {
    id: "ion-ios-partlysunny",
    value: "f476"
  },
  {
    id: "ion-ios-partlysunny-outline",
    value: "f475"
  },
  {
    id: "ion-ios-pause",
    value: "f478"
  },
  {
    id: "ion-ios-pause-outline",
    value: "f477"
  },
  {
    id: "ion-ios-paw",
    value: "f47a"
  },
  {
    id: "ion-ios-paw-outline",
    value: "f479"
  },
  {
    id: "ion-ios-people",
    value: "f47c"
  },
  {
    id: "ion-ios-people-outline",
    value: "f47b"
  },
  {
    id: "ion-ios-person",
    value: "f47e"
  },
  {
    id: "ion-ios-person-outline",
    value: "f47d"
  },
  {
    id: "ion-ios-personadd",
    value: "f480"
  },
  {
    id: "ion-ios-personadd-outline",
    value: "f47f"
  },
  {
    id: "ion-ios-photos",
    value: "f482"
  },
  {
    id: "ion-ios-photos-outline",
    value: "f481"
  },
  {
    id: "ion-ios-pie",
    value: "f484"
  },
  {
    id: "ion-ios-pie-outline",
    value: "f483"
  },
  {
    id: "ion-ios-pint",
    value: "f486"
  },
  {
    id: "ion-ios-pint-outline",
    value: "f485"
  },
  {
    id: "ion-ios-play",
    value: "f488"
  },
  {
    id: "ion-ios-play-outline",
    value: "f487"
  },
  {
    id: "ion-ios-plus",
    value: "f48b"
  },
  {
    id: "ion-ios-plus-empty",
    value: "f489"
  },
  {
    id: "ion-ios-plus-outline",
    value: "f48a"
  },
  {
    id: "ion-ios-pricetag",
    value: "f48d"
  },
  {
    id: "ion-ios-pricetag-outline",
    value: "f48c"
  },
  {
    id: "ion-ios-pricetags",
    value: "f48f"
  },
  {
    id: "ion-ios-pricetags-outline",
    value: "f48e"
  },
  {
    id: "ion-ios-printer",
    value: "f491"
  },
  {
    id: "ion-ios-printer-outline",
    value: "f490"
  },
  {
    id: "ion-ios-pulse",
    value: "f493"
  },
  {
    id: "ion-ios-pulse-strong",
    value: "f492"
  },
  {
    id: "ion-ios-rainy",
    value: "f495"
  },
  {
    id: "ion-ios-rainy-outline",
    value: "f494"
  },
  {
    id: "ion-ios-recording",
    value: "f497"
  },
  {
    id: "ion-ios-recording-outline",
    value: "f496"
  },
  {
    id: "ion-ios-redo",
    value: "f499"
  },
  {
    id: "ion-ios-redo-outline",
    value: "f498"
  },
  {
    id: "ion-ios-refresh",
    value: "f49c"
  },
  {
    id: "ion-ios-refresh-empty",
    value: "f49a"
  },
  {
    id: "ion-ios-refresh-outline",
    value: "f49b"
  },
  {
    id: "ion-ios-reload",
    value: "f49d"
  },
  {
    id: "ion-ios-reverse-camera",
    value: "f49f"
  },
  {
    id: "ion-ios-reverse-camera-outline",
    value: "f49e"
  },
  {
    id: "ion-ios-rewind",
    value: "f4a1"
  },
  {
    id: "ion-ios-rewind-outline",
    value: "f4a0"
  },
  {
    id: "ion-ios-rose",
    value: "f4a3"
  },
  {
    id: "ion-ios-rose-outline",
    value: "f4a2"
  },
  {
    id: "ion-ios-search",
    value: "f4a5"
  },
  {
    id: "ion-ios-search-strong",
    value: "f4a4"
  },
  {
    id: "ion-ios-settings",
    value: "f4a7"
  },
  {
    id: "ion-ios-settings-strong",
    value: "f4a6"
  },
  {
    id: "ion-ios-shuffle",
    value: "f4a9"
  },
  {
    id: "ion-ios-shuffle-strong",
    value: "f4a8"
  },
  {
    id: "ion-ios-skipbackward",
    value: "f4ab"
  },
  {
    id: "ion-ios-skipbackward-outline",
    value: "f4aa"
  },
  {
    id: "ion-ios-skipforward",
    value: "f4ad"
  },
  {
    id: "ion-ios-skipforward-outline",
    value: "f4ac"
  },
  {
    id: "ion-ios-snowy",
    value: "f4ae"
  },
  {
    id: "ion-ios-speedometer",
    value: "f4b0"
  },
  {
    id: "ion-ios-speedometer-outline",
    value: "f4af"
  },
  {
    id: "ion-ios-star",
    value: "f4b3"
  },
  {
    id: "ion-ios-star-half",
    value: "f4b1"
  },
  {
    id: "ion-ios-star-outline",
    value: "f4b2"
  },
  {
    id: "ion-ios-stopwatch",
    value: "f4b5"
  },
  {
    id: "ion-ios-stopwatch-outline",
    value: "f4b4"
  },
  {
    id: "ion-ios-sunny",
    value: "f4b7"
  },
  {
    id: "ion-ios-sunny-outline",
    value: "f4b6"
  },
  {
    id: "ion-ios-telephone",
    value: "f4b9"
  },
  {
    id: "ion-ios-telephone-outline",
    value: "f4b8"
  },
  {
    id: "ion-ios-tennisball",
    value: "f4bb"
  },
  {
    id: "ion-ios-tennisball-outline",
    value: "f4ba"
  },
  {
    id: "ion-ios-thunderstorm",
    value: "f4bd"
  },
  {
    id: "ion-ios-thunderstorm-outline",
    value: "f4bc"
  },
  {
    id: "ion-ios-time",
    value: "f4bf"
  },
  {
    id: "ion-ios-time-outline",
    value: "f4be"
  },
  {
    id: "ion-ios-timer",
    value: "f4c1"
  },
  {
    id: "ion-ios-timer-outline",
    value: "f4c0"
  },
  {
    id: "ion-ios-toggle",
    value: "f4c3"
  },
  {
    id: "ion-ios-toggle-outline",
    value: "f4c2"
  },
  {
    id: "ion-ios-trash",
    value: "f4c5"
  },
  {
    id: "ion-ios-trash-outline",
    value: "f4c4"
  },
  {
    id: "ion-ios-undo",
    value: "f4c7"
  },
  {
    id: "ion-ios-undo-outline",
    value: "f4c6"
  },
  {
    id: "ion-ios-unlocked",
    value: "f4c9"
  },
  {
    id: "ion-ios-unlocked-outline",
    value: "f4c8"
  },
  {
    id: "ion-ios-upload",
    value: "f4cb"
  },
  {
    id: "ion-ios-upload-outline",
    value: "f4ca"
  },
  {
    id: "ion-ios-videocam",
    value: "f4cd"
  },
  {
    id: "ion-ios-videocam-outline",
    value: "f4cc"
  },
  {
    id: "ion-ios-volume-high",
    value: "f4ce"
  },
  {
    id: "ion-ios-volume-low",
    value: "f4cf"
  },
  {
    id: "ion-ios-wineglass",
    value: "f4d1"
  },
  {
    id: "ion-ios-wineglass-outline",
    value: "f4d0"
  },
  {
    id: "ion-ios-world",
    value: "f4d3"
  },
  {
    id: "ion-ios-world-outline",
    value: "f4d2"
  },
  {
    id: "ion-ipad",
    value: "f1f9"
  },
  {
    id: "ion-iphone",
    value: "f1fa"
  },
  {
    id: "ion-ipod",
    value: "f1fb"
  },
  {
    id: "ion-jet",
    value: "f295"
  },
  {
    id: "ion-key",
    value: "f296"
  },
  {
    id: "ion-knife",
    value: "f297"
  },
  {
    id: "ion-laptop",
    value: "f1fc"
  },
  {
    id: "ion-leaf",
    value: "f1fd"
  },
  {
    id: "ion-levels",
    value: "f298"
  },
  {
    id: "ion-lightbulb",
    value: "f299"
  },
  {
    id: "ion-link",
    value: "f1fe"
  },
  {
    id: "ion-load-a",
    value: "f29a"
  },
  {
    id: "ion-load-b",
    value: "f29b"
  },
  {
    id: "ion-load-c",
    value: "f29c"
  },
  {
    id: "ion-load-d",
    value: "f29d"
  },
  {
    id: "ion-location",
    value: "f1ff"
  },
  {
    id: "ion-lock-combination",
    value: "f4d4"
  },
  {
    id: "ion-locked",
    value: "f200"
  },
  {
    id: "ion-log-in",
    value: "f29e"
  },
  {
    id: "ion-log-out",
    value: "f29f"
  },
  {
    id: "ion-loop",
    value: "f201"
  },
  {
    id: "ion-magnet",
    value: "f2a0"
  },
  {
    id: "ion-male",
    value: "f2a1"
  },
  {
    id: "ion-man",
    value: "f202"
  },
  {
    id: "ion-map",
    value: "f203"
  },
  {
    id: "ion-medkit",
    value: "f2a2"
  },
  {
    id: "ion-merge",
    value: "f33f"
  },
  {
    id: "ion-mic-a",
    value: "f204"
  },
  {
    id: "ion-mic-b",
    value: "f205"
  },
  {
    id: "ion-mic-c",
    value: "f206"
  },
  {
    id: "ion-minus",
    value: "f209"
  },
  {
    id: "ion-minus-circled",
    value: "f207"
  },
  {
    id: "ion-minus-round",
    value: "f208"
  },
  {
    id: "ion-model-s",
    value: "f2c1"
  },
  {
    id: "ion-monitor",
    value: "f20a"
  },
  {
    id: "ion-more",
    value: "f20b"
  },
  {
    id: "ion-mouse",
    value: "f340"
  },
  {
    id: "ion-music-note",
    value: "f20c"
  },
  {
    id: "ion-navicon",
    value: "f20e"
  },
  {
    id: "ion-navicon-round",
    value: "f20d"
  },
  {
    id: "ion-navigate",
    value: "f2a3"
  },
  {
    id: "ion-network",
    value: "f341"
  },
  {
    id: "ion-no-smoking",
    value: "f2c2"
  },
  {
    id: "ion-nuclear",
    value: "f2a4"
  },
  {
    id: "ion-outlet",
    value: "f342"
  },
  {
    id: "ion-paintbrush",
    value: "f4d5"
  },
  {
    id: "ion-paintbucket",
    value: "f4d6"
  },
  {
    id: "ion-paper-airplane",
    value: "f2c3"
  },
  {
    id: "ion-paperclip",
    value: "f20f"
  },
  {
    id: "ion-pause",
    value: "f210"
  },
  {
    id: "ion-person",
    value: "f213"
  },
  {
    id: "ion-person-add",
    value: "f211"
  },
  {
    id: "ion-person-stalker",
    value: "f212"
  },
  {
    id: "ion-pie-graph",
    value: "f2a5"
  },
  {
    id: "ion-pin",
    value: "f2a6"
  },
  {
    id: "ion-pinpoint",
    value: "f2a7"
  },
  {
    id: "ion-pizza",
    value: "f2a8"
  },
  {
    id: "ion-plane",
    value: "f214"
  },
  {
    id: "ion-planet",
    value: "f343"
  },
  {
    id: "ion-play",
    value: "f215"
  },
  {
    id: "ion-playstation",
    value: "f30a"
  },
  {
    id: "ion-plus",
    value: "f218"
  },
  {
    id: "ion-plus-circled",
    value: "f216"
  },
  {
    id: "ion-plus-round",
    value: "f217"
  },
  {
    id: "ion-podium",
    value: "f344"
  },
  {
    id: "ion-pound",
    value: "f219"
  },
  {
    id: "ion-power",
    value: "f2a9"
  },
  {
    id: "ion-pricetag",
    value: "f2aa"
  },
  {
    id: "ion-pricetags",
    value: "f2ab"
  },
  {
    id: "ion-printer",
    value: "f21a"
  },
  {
    id: "ion-pull-request",
    value: "f345"
  },
  {
    id: "ion-qr-scanner",
    value: "f346"
  },
  {
    id: "ion-quote",
    value: "f347"
  },
  {
    id: "ion-radio-waves",
    value: "f2ac"
  },
  {
    id: "ion-record",
    value: "f21b"
  },
  {
    id: "ion-refresh",
    value: "f21c"
  },
  {
    id: "ion-reply",
    value: "f21e"
  },
  {
    id: "ion-reply-all",
    value: "f21d"
  },
  {
    id: "ion-ribbon-a",
    value: "f348"
  },
  {
    id: "ion-ribbon-b",
    value: "f349"
  },
  {
    id: "ion-sad",
    value: "f34a"
  },
  {
    id: "ion-sad-outline",
    value: "f4d7"
  },
  {
    id: "ion-scissors",
    value: "f34b"
  },
  {
    id: "ion-search",
    value: "f21f"
  },
  {
    id: "ion-settings",
    value: "f2ad"
  },
  {
    id: "ion-share",
    value: "f220"
  },
  {
    id: "ion-shuffle",
    value: "f221"
  },
  {
    id: "ion-skip-backward",
    value: "f222"
  },
  {
    id: "ion-skip-forward",
    value: "f223"
  },
  {
    id: "ion-social-android",
    value: "f225"
  },
  {
    id: "ion-social-android-outline",
    value: "f224"
  },
  {
    id: "ion-social-angular",
    value: "f4d9"
  },
  {
    id: "ion-social-angular-outline",
    value: "f4d8"
  },
  {
    id: "ion-social-apple",
    value: "f227"
  },
  {
    id: "ion-social-apple-outline",
    value: "f226"
  },
  {
    id: "ion-social-bitcoin",
    value: "f2af"
  },
  {
    id: "ion-social-bitcoin-outline",
    value: "f2ae"
  },
  {
    id: "ion-social-buffer",
    value: "f229"
  },
  {
    id: "ion-social-buffer-outline",
    value: "f228"
  },
  {
    id: "ion-social-chrome",
    value: "f4db"
  },
  {
    id: "ion-social-chrome-outline",
    value: "f4da"
  },
  {
    id: "ion-social-codepen",
    value: "f4dd"
  },
  {
    id: "ion-social-codepen-outline",
    value: "f4dc"
  },
  {
    id: "ion-social-css3",
    value: "f4df"
  },
  {
    id: "ion-social-css3-outline",
    value: "f4de"
  },
  {
    id: "ion-social-designernews",
    value: "f22b"
  },
  {
    id: "ion-social-designernews-outline",
    value: "f22a"
  },
  {
    id: "ion-social-dribbble",
    value: "f22d"
  },
  {
    id: "ion-social-dribbble-outline",
    value: "f22c"
  },
  {
    id: "ion-social-dropbox",
    value: "f22f"
  },
  {
    id: "ion-social-dropbox-outline",
    value: "f22e"
  },
  {
    id: "ion-social-euro",
    value: "f4e1"
  },
  {
    id: "ion-social-euro-outline",
    value: "f4e0"
  },
  {
    id: "ion-social-facebook",
    value: "f231"
  },
  {
    id: "ion-social-facebook-outline",
    value: "f230"
  },
  {
    id: "ion-social-foursquare",
    value: "f34d"
  },
  {
    id: "ion-social-foursquare-outline",
    value: "f34c"
  },
  {
    id: "ion-social-freebsd-devil",
    value: "f2c4"
  },
  {
    id: "ion-social-github",
    value: "f233"
  },
  {
    id: "ion-social-github-outline",
    value: "f232"
  },
  {
    id: "ion-social-google",
    value: "f34f"
  },
  {
    id: "ion-social-google-outline",
    value: "f34e"
  },
  {
    id: "ion-social-googleplus",
    value: "f235"
  },
  {
    id: "ion-social-googleplus-outline",
    value: "f234"
  },
  {
    id: "ion-social-hackernews",
    value: "f237"
  },
  {
    id: "ion-social-hackernews-outline",
    value: "f236"
  },
  {
    id: "ion-social-html5",
    value: "f4e3"
  },
  {
    id: "ion-social-html5-outline",
    value: "f4e2"
  },
  {
    id: "ion-social-instagram",
    value: "f351"
  },
  {
    id: "ion-social-instagram-outline",
    value: "f350"
  },
  {
    id: "ion-social-javascript",
    value: "f4e5"
  },
  {
    id: "ion-social-javascript-outline",
    value: "f4e4"
  },
  {
    id: "ion-social-linkedin",
    value: "f239"
  },
  {
    id: "ion-social-linkedin-outline",
    value: "f238"
  },
  {
    id: "ion-social-markdown",
    value: "f4e6"
  },
  {
    id: "ion-social-nodejs",
    value: "f4e7"
  },
  {
    id: "ion-social-octocat",
    value: "f4e8"
  },
  {
    id: "ion-social-pinterest",
    value: "f2b1"
  },
  {
    id: "ion-social-pinterest-outline",
    value: "f2b0"
  },
  {
    id: "ion-social-python",
    value: "f4e9"
  },
  {
    id: "ion-social-reddit",
    value: "f23b"
  },
  {
    id: "ion-social-reddit-outline",
    value: "f23a"
  },
  {
    id: "ion-social-rss",
    value: "f23d"
  },
  {
    id: "ion-social-rss-outline",
    value: "f23c"
  },
  {
    id: "ion-social-sass",
    value: "f4ea"
  },
  {
    id: "ion-social-skype",
    value: "f23f"
  },
  {
    id: "ion-social-skype-outline",
    value: "f23e"
  },
  {
    id: "ion-social-snapchat",
    value: "f4ec"
  },
  {
    id: "ion-social-snapchat-outline",
    value: "f4eb"
  },
  {
    id: "ion-social-tumblr",
    value: "f241"
  },
  {
    id: "ion-social-tumblr-outline",
    value: "f240"
  },
  {
    id: "ion-social-tux",
    value: "f2c5"
  },
  {
    id: "ion-social-twitch",
    value: "f4ee"
  },
  {
    id: "ion-social-twitch-outline",
    value: "f4ed"
  },
  {
    id: "ion-social-twitter",
    value: "f243"
  },
  {
    id: "ion-social-twitter-outline",
    value: "f242"
  },
  {
    id: "ion-social-usd",
    value: "f353"
  },
  {
    id: "ion-social-usd-outline",
    value: "f352"
  },
  {
    id: "ion-social-vimeo",
    value: "f245"
  },
  {
    id: "ion-social-vimeo-outline",
    value: "f244"
  },
  {
    id: "ion-social-whatsapp",
    value: "f4f0"
  },
  {
    id: "ion-social-whatsapp-outline",
    value: "f4ef"
  },
  {
    id: "ion-social-windows",
    value: "f247"
  },
  {
    id: "ion-social-windows-outline",
    value: "f246"
  },
  {
    id: "ion-social-wordpress",
    value: "f249"
  },
  {
    id: "ion-social-wordpress-outline",
    value: "f248"
  },
  {
    id: "ion-social-yahoo",
    value: "f24b"
  },
  {
    id: "ion-social-yahoo-outline",
    value: "f24a"
  },
  {
    id: "ion-social-yen",
    value: "f4f2"
  },
  {
    id: "ion-social-yen-outline",
    value: "f4f1"
  },
  {
    id: "ion-social-youtube",
    value: "f24d"
  },
  {
    id: "ion-social-youtube-outline",
    value: "f24c"
  },
  {
    id: "ion-soup-can",
    value: "f4f4"
  },
  {
    id: "ion-soup-can-outline",
    value: "f4f3"
  },
  {
    id: "ion-speakerphone",
    value: "f2b2"
  },
  {
    id: "ion-speedometer",
    value: "f2b3"
  },
  {
    id: "ion-spoon",
    value: "f2b4"
  },
  {
    id: "ion-star",
    value: "f24e"
  },
  {
    id: "ion-stats-bars",
    value: "f2b5"
  },
  {
    id: "ion-steam",
    value: "f30b"
  },
  {
    id: "ion-stop",
    value: "f24f"
  },
  {
    id: "ion-thermometer",
    value: "f2b6"
  },
  {
    id: "ion-thumbsdown",
    value: "f250"
  },
  {
    id: "ion-thumbsup",
    value: "f251"
  },
  {
    id: "ion-toggle",
    value: "f355"
  },
  {
    id: "ion-toggle-filled",
    value: "f354"
  },
  {
    id: "ion-transgender",
    value: "f4f5"
  },
  {
    id: "ion-trash-a",
    value: "f252"
  },
  {
    id: "ion-trash-b",
    value: "f253"
  },
  {
    id: "ion-trophy",
    value: "f356"
  },
  {
    id: "ion-tshirt",
    value: "f4f7"
  },
  {
    id: "ion-tshirt-outline",
    value: "f4f6"
  },
  {
    id: "ion-umbrella",
    value: "f2b7"
  },
  {
    id: "ion-university",
    value: "f357"
  },
  {
    id: "ion-unlocked",
    value: "f254"
  },
  {
    id: "ion-upload",
    value: "f255"
  },
  {
    id: "ion-usb",
    value: "f2b8"
  },
  {
    id: "ion-videocamera",
    value: "f256"
  },
  {
    id: "ion-volume-high",
    value: "f257"
  },
  {
    id: "ion-volume-low",
    value: "f258"
  },
  {
    id: "ion-volume-medium",
    value: "f259"
  },
  {
    id: "ion-volume-mute",
    value: "f25a"
  },
  {
    id: "ion-wand",
    value: "f358"
  },
  {
    id: "ion-waterdrop",
    value: "f25b"
  },
  {
    id: "ion-wifi",
    value: "f25c"
  },
  {
    id: "ion-wineglass",
    value: "f2b9"
  },
  {
    id: "ion-woman",
    value: "f25d"
  },
  {
    id: "ion-wrench",
    value: "f2ba"
  },
  {
    id: "ion-xbox",
    value: "f30c"
  }
];
const _sfc_main$a = {
  name: "Input Url Component",
  props: [
    "idInput",
    "labelValue",
    "tooltip",
    "placeholder",
    "urlInitalValue"
  ],
  data() {
    return {
      value: "",
      isUrlValue: false
    };
  },
  watch: {
    value: function(newValue, oldValue) {
      this.$emit("url-value-update", newValue);
    }
  },
  components: {
    LabelWithTooltip
  },
  mounted() {
    console.log("Input Url Component Mounted");
    this.value = this.urlInitalValue;
  },
  emits: ["url-value-update"]
};
const _hoisted_1$6 = ["placeholder", "id"];
function _sfc_render$a(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_LabelWithTooltip = resolveComponent("LabelWithTooltip");
  return openBlock(), createElementBlock(Fragment, null, [
    createVNode(_component_LabelWithTooltip, {
      forId: this.idInput,
      hasSwitch: false,
      labelValue: this.labelValue,
      tooltip: this.tooltip
    }, null, 8, ["forId", "labelValue", "tooltip"]),
    withDirectives(createBaseVNode("input", {
      type: "text",
      class: "form-control",
      placeholder: $props.placeholder,
      id: $props.idInput,
      "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.value = $event)
    }, null, 8, _hoisted_1$6), [
      [vModelText, $data.value]
    ])
  ], 64);
}
const InputUrl = /* @__PURE__ */ _export_sfc(_sfc_main$a, [["render", _sfc_render$a]]);
const _sfc_main$9 = {
  name: "Input TextArea Component",
  data() {
    return {
      checkboxValue: false,
      inputValue: ""
    };
  },
  props: [
    "inputId",
    "inputEnabled",
    "inputInitialValue",
    "inputPlaceholder",
    "inputRows",
    "isLabelEnabled",
    "labelValue",
    "tooltip",
    "hasSwitch",
    "switchId",
    "switchTooltip",
    "switchDisabled",
    "switchInitialValue",
    "switchLabelEnabled",
    "switchLabelValue"
  ],
  components: {
    LabelWithTooltip
  },
  methods: {
    checkboxStatusChanged: function(oldCBValue, newCBValue) {
      this.$emit("checkbox-value-change", oldCBValue);
    }
  },
  watch: {
    inputValue: function(newValue, oldValue) {
      this.$emit("input-value-change", newValue);
    },
    inputInitialValue: function(newValue, oldValue) {
      this.inputValue = newValue;
    },
    switchInitialValue: function(newValue, oldValue) {
      this.checkboxValue = newValue;
    }
  },
  mounted() {
    this.inputValue = this.inputInitialValue;
  },
  emits: ["checkbox-value-change", "input-value-change"]
};
const _hoisted_1$5 = ["disabled", "id", "rows"];
function _sfc_render$9(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_LabelWithTooltip = resolveComponent("LabelWithTooltip");
  return openBlock(), createElementBlock(Fragment, null, [
    this.isLabelEnabled ? (openBlock(), createBlock(_component_LabelWithTooltip, {
      key: 0,
      labelValue: this.labelValue,
      tooltip: this.tooltip,
      forId: this.inputId,
      hasSwitch: this.hasSwitch,
      switchId: this.switchId,
      switchTooltip: this.switchTooltip,
      switchDisabled: this.switchDisabled,
      switchInitialValue: this.checkboxValue,
      switchLabelEnabled: this.switchLabelEnabled,
      switchLabelValue: this.switchLabelValue,
      onCheckboxStatusChanged: $options.checkboxStatusChanged
    }, null, 8, ["labelValue", "tooltip", "forId", "hasSwitch", "switchId", "switchTooltip", "switchDisabled", "switchInitialValue", "switchLabelEnabled", "switchLabelValue", "onCheckboxStatusChanged"])) : createCommentVNode("", true),
    withDirectives(createBaseVNode("textarea", {
      class: "form-control font-monospace",
      disabled: !$props.inputEnabled,
      id: $props.inputId,
      "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.inputValue = $event),
      rows: $props.inputRows ? $props.inputRows : ""
    }, null, 8, _hoisted_1$5), [
      [vModelText, $data.inputValue]
    ])
  ], 64);
}
const InputTextArea = /* @__PURE__ */ _export_sfc(_sfc_main$9, [["render", _sfc_render$9]]);
const _sfc_main$8 = {
  name: "Shape Node Accordion",
  props: ["checkboxValue"],
  data() {
    return {
      shape: "ellipse",
      options: [
        { value: "ellipse", label: "Elípse", selected: true, group: "Rótulo Dentro" },
        { value: "circle", label: "Círculo", selected: false, group: "Rótulo Dentro" },
        { value: "database", label: "Base de dados?", selected: false, group: "Rótulo Dentro" },
        { value: "box", label: "Caixa", selected: false, group: "Rótulo Dentro" },
        { value: "text", label: "Texto", selected: false, group: "Rótulo Dentro" },
        { value: "image", label: "Imagem", selected: false, group: "Rótulo Fora" },
        { value: "circularImage", label: "Imagem Circular", selected: false, group: "Rótulo Fora" },
        { value: "diamond", label: "Diamante", selected: false, group: "Rótulo Fora" },
        { value: "star", label: "Estrela", selected: false, group: "Rótulo Fora" },
        { value: "triangle", label: "Triângulo", selected: false, group: "Rótulo Fora" },
        { value: "triangleDown", label: "Triângulo Invertido", selected: false, group: "Rótulo Fora" },
        { value: "hexagon", label: "Exágono", selected: false, group: "Rótulo Fora" },
        { value: "square", label: "Quadrado", selected: false, group: "Rótulo Fora" },
        { value: "icon", label: "Ícone", selected: false, group: "Rótulo Fora" },
        { value: "custom", label: "Customizado CTX Render", selected: false, group: "Customizado" }
      ],
      imageSelected: false,
      alreadyTransmitedImage: false,
      circularImageSelected: false,
      iconSelected: false,
      customSelected: false,
      iconsNodeFontFace: "",
      iconsOptions: [],
      iconSelectedOption: { id: "f111", code: '<i class="fa-solid fa-circle me-2"></i>', label: "Circle", style: "solid" },
      iconWeight: 200,
      minWeight: 200,
      iconColor: "#2B7CE9",
      iconSize: 50,
      ///////////////////// Imagens
      imageObjectSendingEnabled: false,
      imageUrlUnselected: new URL("/paad-grafos-v2/images/paad_logo.png", import.meta.url).href,
      imageUrlSelected: new URL("/paad-grafos-v2/images/paad_logo_frio_e_dram%C3%A1tico.png", import.meta.url).href,
      //Custom selected
      customValue: "",
      isCustomInputEnabled: false,
      customFunction: null
    };
  },
  components: {
    InputSelect,
    LabelWithTooltip,
    InputSelectSearch,
    InputRange,
    InputColorPicker,
    InputUrl,
    SwitchWithInfo,
    InputTextArea
  },
  mounted() {
  },
  methods: {
    updateCustomValue: function(value2) {
      console.log("Atualizei o customValue.");
      this.customValue = value2;
    },
    updateNodeCustomShape: function() {
      console.log("Entrei no customValue.");
      try {
        this.customFunction = eval(this.customValue);
        this.$emit("message", "custom-render-node-update", this.customFunction);
      } catch (ex) {
        this.$emit("message", "send-toast", {
          toastTitle: "Erro!",
          toastIcon: "fa-circle-exclamation",
          toastBody: "Não foi possível utilizar sua função função para rendereização. Atualize sua página.",
          toastClasses: " bg-danger text-black"
        });
      }
    },
    updateNodeShape: function(value) {
      console.log("Updated selection: " + value);
      this.shape = value;
      if (value == "image") {
        this.imageSelected = true;
        this.circularImageSelected = false;
        this.iconSelected = false;
        this.customSelected = false;
        this.$emit("message", "update-node-shape", value);
      } else if (value == "circularImage") {
        this.circularImageSelected = true;
        this.imageSelected = false;
        this.iconSelected = false;
        this.customSelected = false;
        this.$emit("message", "update-node-shape", value);
      } else if (value == "icon") {
        this.$emit("message", "init-icons", null);
        this.$emit("message", "update-icon-font-face", "'Font Awesome 6 Free'");
        this.$emit("message", "update-icon-code", String.fromCharCode(parseInt(this.iconSelectedOption.id, 16)));
        this.iconSelected = true;
        this.imageSelected = false;
        this.circularImageSelected = false;
        this.customSelected = false;
        this.iconsNodeFontFace = "fontAwesome";
        this.$emit("message", "update-node-shape", value);
      } else if (value == "custom") {
        this.customSelected = true;
        this.iconSelected = false;
        this.imageSelected = false;
        this.circularImageSelected = false;
        __vitePreload(() => import("./ctxBaseRenderer-D4eZajWt.js"), true ? [] : void 0).then((res) => res.default).then((t) => {
          this.customValue = t;
          this.customFunction = eval(t);
          if (this.customFunction != null) {
            this.$emit("message", "custom-render-node-update", this.customFunction);
            this.$emit("message", "update-node-shape", value);
            this.$emit("message", "send-toast", {
              toastTitle: "Cuidado",
              toastIcon: "fa-circle-exclamation",
              toastBody: "O input de Javascript pode levar a erros e a travamentos da aplicação. Use com cautela! Você pode aprender a desenhar no canvas usando <a class='text-white' href='https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Drawing_shapes'>este link</a>.",
              toastClasses: " bg-danger text-black"
            });
          }
        });
      } else {
        this.customSelected = false;
        this.iconSelected = false;
        this.imageSelected = false;
        this.circularImageSelected = false;
        this.$emit("message", "update-node-shape", value);
      }
    },
    iconsOptionSelected: function(newValue) {
      this.iconSelectedOption = newValue;
      if (Object.hasOwn(newValue, "style")) {
        if (newValue.style == "brands") {
          if (this.iconsNodeFontFace == "fontAwesome") {
            this.iconWeight = "200";
            this.minWeight = "200";
            this.$emit("message", "update-icon-weight", 200);
            this.$emit("message", "update-icon-font-face", '"Font Awesome 6 Brands"');
          }
        } else {
          if (this.iconsNodeFontFace == "fontAwesome") {
            this.iconWeight = "600";
            this.minWeight = "600";
            this.$emit("message", "update-icon-weight", 600);
            this.$emit("message", "update-icon-font-face", '"Font Awesome 6 Free"');
          }
        }
      } else {
        if (this.iconsNodeFontFace == "ionIcons") {
          this.iconWeight = "100";
          this.minWeight = "100";
          this.$emit("message", "update-icon-weight", 100);
          this.$emit("message", "update-icon-font-face", "'IonIcons'");
        }
      }
      this.$emit("message", "update-icon-code", String.fromCharCode(parseInt(this.iconSelectedOption.id, 16)));
      this.$emit("message", "update-icon-color", this.iconColor);
    },
    updateIconWeight: function(value2) {
      this.$emit("message", "update-icon-weight", value2);
    },
    updateNodeFontFace: function(value2) {
      this.iconSelected = value2;
      if (value2 == "fontAwesome") {
        let options = [];
        for (var prop in FontAwesomeJsonIcons) {
          if (Object.prototype.hasOwnProperty.call(FontAwesomeJsonIcons, prop)) {
            options.push({
              id: FontAwesomeJsonIcons[prop].unicode,
              code: '<i class="fa-' + FontAwesomeJsonIcons[prop].styles[0] + " fa-" + prop + ' me-2"></i>',
              label: FontAwesomeJsonIcons[prop].label,
              style: FontAwesomeJsonIcons[prop].styles[0]
            });
          }
        }
        this.iconsOptions = options;
        this.$emit("message", "init-icons", null);
        this.$emit("message", "update-icon-font-face", "'Font Awesome 6 Free'");
        this.$emit("message", "update-icon-code", String.fromCharCode(parseInt(this.iconSelectedOption.id, 16)));
        this.iconSelected = true;
        this.iconsNodeFontFace = "fontAwesome";
        this.iconSelectedOption = { id: "f111", code: '<i class="fa-solid fa-circle me-2"></i>', label: "Circle", style: "solid" };
      } else if (value2 == "ionIcons") {
        let options = [];
        for (var icons2 in IonIcons) {
          options.push({
            id: IonIcons[icons2].value,
            code: '<i class="icon ' + IonIcons[icons2].id + ' me-2"></i>',
            label: IonIcons[icons2].id
          });
        }
        this.iconsOptions = options;
        this.$emit("message", "init-icons", null);
        this.$emit("message", "update-icon-font-face", '"IonIcons"');
        this.$emit("message", "update-icon-code", String.fromCharCode(parseInt("f2d2", 16)));
        this.iconSelected = true;
        this.iconsNodeFontFace = "ionIcons";
        this.iconSelectedOption = { id: "f3a0", code: '<i class="icon ion-android-person me-2"></i>', label: "ion-android-person" };
      }
      this.$emit("message", "update-icon-color", this.iconColor);
    },
    updateIconColor: function(newValue) {
      this.iconColor = newValue;
      this.$emit("message", "update-icon-color", newValue);
    },
    updateIconSize: function(value2) {
      this.iconSize = parseInt(value2);
      this.$emit("message", "update-icon-size", value2);
    },
    updateImageUrl: function(value2) {
      this.imageUrlUnselected = value2;
      this.$emit("message", "update-image-url", value2);
      if (this.alreadyTransmitedImage) {
        this.$emit("message", "update-canvas-key-change", true);
      }
      this.alreadyTransmitedImage = true;
    },
    imageUrlObjectSelected: function(value2) {
      this.imageUrlSelected = value2;
      this.$emit("message", "update-image-url-selected", [value2, this.imageUrlUnselected, this.imageUrlSelected]);
    },
    enableImageObjectSending: function(value2) {
      this.imageObjectSendingEnabled = value2;
    },
    enableCtxRendererEditing: function(value2) {
      this.isCustomInputEnabled = value2;
    }
  },
  watch: {
    imageObjectSendingEnabled: function(newValue, oldValue) {
      if (!newValue && oldValue) {
        this.imageUrlSelected = this.imageUrlUnselected;
        this.$emit("message", "update-image-url-selected", [false, this.imageUrlUnselected, this.imageUrlUnselected]);
      }
    }
  },
  emits: ["message"]
};
function _sfc_render$8(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_LabelWithTooltip = resolveComponent("LabelWithTooltip");
  const _component_InputSelect = resolveComponent("InputSelect");
  const _component_InputSelectSearch = resolveComponent("InputSelectSearch");
  const _component_InputRange = resolveComponent("InputRange");
  const _component_InputColorPicker = resolveComponent("InputColorPicker");
  const _component_SwitchWithInfo = resolveComponent("SwitchWithInfo");
  const _component_InputUrl = resolveComponent("InputUrl");
  const _component_InputTextArea = resolveComponent("InputTextArea");
  return openBlock(), createElementBlock(Fragment, null, [
    createVNode(_component_LabelWithTooltip, {
      forId: "node-shape-select",
      hasSwitch: false,
      labelValue: "Selecione a forma desejada",
      switchDisabled: false,
      tooltip: "Options.Nodes.Shape - Os tipos com o rótulo dentro são: elipse, círculo, banco de dados, caixa, texto. Aqueles com o rótulo fora são: imagem, circularImage, diamante, ponto, estrela, triângulo, triângulo para baixo, hexágono, quadrado e ícone. Se nenhuma dessas formas for suficiente, você pode usar a forma personalizada que permitirá criar sua própria forma renderizada por meio da opção ctxRenderer."
    }),
    createVNode(_component_InputSelect, {
      selectId: "node-shape-select",
      options: this.options,
      disabled: false,
      onUpdateSelection: $options.updateNodeShape
    }, null, 8, ["options", "onUpdateSelection"]),
    this.iconSelected ? (openBlock(), createBlock(_component_LabelWithTooltip, {
      key: 0,
      forId: "node-font-face",
      hasSwitch: false,
      labelValue: "Selecione a fonte dos Ícones",
      switchDisabled: false,
      tooltip: "Options.Nodes.Icon.Face - Escolha a fonte do ícones que irá utilizar."
    })) : createCommentVNode("", true),
    this.iconSelected ? (openBlock(), createBlock(_component_InputSelect, {
      key: 1,
      selectId: "node-font-face",
      options: [
        { value: "fontAwesome", label: "FontAwesome", selected: true },
        { value: "ionIcons", label: "IonIcons", selected: false }
      ],
      disabled: false,
      onUpdateSelection: $options.updateNodeFontFace
    }, null, 8, ["onUpdateSelection"])) : createCommentVNode("", true),
    this.iconSelected ? (openBlock(), createBlock(_component_LabelWithTooltip, {
      key: 2,
      forId: "icon-multiselect-option",
      hasSwitch: false,
      labelValue: "Selecione o ícone desejado",
      switchDisabled: false,
      tooltip: "Options.Nodes.Icon.Code - Escolha o ícone que quer usar nos vértices."
    })) : createCommentVNode("", true),
    this.iconSelected ? (openBlock(), createBlock(_component_InputSelectSearch, {
      key: 3,
      placeholder: "Escolha um ícone",
      onOptionChosen: $options.iconsOptionSelected,
      options: this.iconsOptions,
      selectId: "icon-multiselect-option",
      isDisabled: false,
      selected: this.iconSelectedOption
    }, null, 8, ["onOptionChosen", "options", "selected"])) : createCommentVNode("", true),
    this.iconSelected ? (openBlock(), createBlock(_component_InputRange, {
      key: 4,
      disabled: false,
      max: 900,
      min: this.minWeight,
      step: 100,
      initialValue: this.iconWeight,
      inputId: "input-icon-weight",
      isLabelEnabled: true,
      labelHasSwitch: false,
      labelValue: "Grossura da fonte do ícone",
      tooltip: "Options.Nodes.Icon.Weight - Altere a grossura da fonte. Alguns ícone não tem grossura mais fina.",
      onUpdateValueFromRangeInput: $options.updateIconWeight
    }, null, 8, ["min", "initialValue", "onUpdateValueFromRangeInput"])) : createCommentVNode("", true),
    this.iconSelected ? (openBlock(), createBlock(_component_LabelWithTooltip, {
      key: 5,
      forId: "node-icon-color-picker",
      hasSwitch: false,
      labelValue: "Cor do ícone",
      tooltip: "Options.Nodes.Icon.Color - Altere a cor do ícone do vértice."
    })) : createCommentVNode("", true),
    this.iconSelected ? (openBlock(), createBlock(_component_InputColorPicker, {
      key: 6,
      disabled: false,
      colorPickerDefaultColor: this.iconColor,
      colorPickerId: "node-icon-color-picker",
      tooltip: "Options.Nodes.Icon.Color - Altere a cor do ícone do vértice",
      onUpdateColor: $options.updateIconColor
    }, null, 8, ["colorPickerDefaultColor", "onUpdateColor"])) : createCommentVNode("", true),
    this.iconSelected ? (openBlock(), createBlock(_component_InputRange, {
      key: 7,
      disabled: false,
      max: 100,
      min: 1,
      step: 1,
      initialValue: "" + this.iconSize,
      inputId: "input-icon-size",
      isLabelEnabled: true,
      labelHasSwitch: false,
      labelValue: "Tamanho do ícone",
      tooltip: "Options.Nodes.Icon.Size - Altere o tamanho do ícone sendo utilizado.",
      onUpdateValueFromRangeInput: $options.updateIconSize
    }, null, 8, ["initialValue", "onUpdateValueFromRangeInput"])) : createCommentVNode("", true),
    $data.imageSelected || $data.circularImageSelected ? (openBlock(), createBlock(_component_SwitchWithInfo, {
      key: 8,
      switchDisabled: false,
      switchId: "enable-image-object-sending",
      switchInitialValue: $data.imageObjectSendingEnabled,
      switchLabelEnabled: true,
      switchLabelValue: "Ativar envio de objeto",
      switchTooltipEnabled: true,
      switchTooltip: "Object.Nodes.Image (Enable Object Sending) - Clique aqui para habilitar o envio de objeto para o campo.",
      onCheckboxStatusChanged: $options.enableImageObjectSending
    }, null, 8, ["switchInitialValue", "onCheckboxStatusChanged"])) : createCommentVNode("", true),
    $data.imageSelected || $data.circularImageSelected ? (openBlock(), createBlock(_component_InputUrl, {
      key: 9,
      idInput: "nodes-shapes-image",
      labelValue: !$data.imageObjectSendingEnabled ? "URL da Imagem:" : "URL da Imagem vértice não selecionado",
      tooltip: `Entre com a URL da imagem a ser utilizada como vértice ${$data.imageObjectSendingEnabled ?? `não selecionado`}.`,
      urlInitalValue: $data.imageUrlUnselected,
      onUrlValueUpdate: $options.updateImageUrl,
      placeholder: "http://www.google.com"
    }, null, 8, ["labelValue", "tooltip", "urlInitalValue", "onUrlValueUpdate"])) : createCommentVNode("", true),
    ($data.imageSelected || $data.circularImageSelected) && $data.imageObjectSendingEnabled ? (openBlock(), createBlock(_component_InputUrl, {
      key: 10,
      idInput: "nodes-shapes-image-selected",
      labelValue: "URL da Imagem vértice selecionado:",
      placeholder: "'http://www.google.com'",
      tooltip: "Entre com a URL da imagem a ser utilizada como vértice selecionado.",
      urlInitalValue: $data.imageUrlSelected,
      onUrlValueUpdate: $options.imageUrlObjectSelected
    }, null, 8, ["urlInitalValue", "onUrlValueUpdate"])) : createCommentVNode("", true),
    $data.customSelected ? (openBlock(), createBlock(_component_InputTextArea, {
      key: 11,
      inputId: "options-nodes-shape-custom",
      inputEnabled: $data.isCustomInputEnabled,
      inputInitialValue: $data.customValue,
      inputPlaceholder: "//Input the javascript function",
      inputRows: 15,
      isLabelEnabled: true,
      labelValue: "Editar customização do CTX Renderer",
      tooltip: "Options.Nodes.ctxRenderer - Edite a função de crição de formas personalizadas com o CTX Renderer",
      hasSwitch: true,
      switchId: "options-nodes-shape-custom-enable-code",
      switchTooltip: "Options.Nodes.ctxRenderer Enable code editing - Ative a edição de código",
      switchInitialValue: $data.isCustomInputEnabled,
      switchLabelEnabled: false,
      onCheckboxValueChange: $options.enableCtxRendererEditing,
      onInputValueChange: $options.updateCustomValue
    }, null, 8, ["inputEnabled", "inputInitialValue", "switchInitialValue", "onCheckboxValueChange", "onInputValueChange"])) : createCommentVNode("", true),
    $data.isCustomInputEnabled ? (openBlock(), createElementBlock("button", {
      key: 12,
      onClick: _cache[0] || (_cache[0] = withModifiers((...args) => $options.updateNodeCustomShape && $options.updateNodeCustomShape(...args), ["prevent"])),
      class: "btn btn-primary form-control mt-1"
    }, "Atualizar função de desenho do vértice")) : createCommentVNode("", true)
  ], 64);
}
const ShapeNodeAccordion = /* @__PURE__ */ _export_sfc(_sfc_main$8, [["render", _sfc_render$8]]);
const _sfc_main$7 = {
  name: "Accordion Item",
  props: {
    id: String,
    title: String,
    flushId: String,
    content: String,
    switchButton: Boolean,
    switchChecked: Boolean,
    hasTooltip: Boolean,
    tooltip: String,
    isCheckedEnabled: Boolean
  },
  data() {
    return {
      checkboxValue: false,
      currentlyEnabled: false,
      currentContent: null
    };
  },
  mounted() {
    this.checkboxValue = this.switchChecked;
    this.currentlyEnabled = this.isCheckedEnabled;
    switch (this.content) {
      case "nodes.chosen": {
        this.currentContent = "ChosenNodeAccordion";
        break;
      }
      case "nodes.color": {
        this.currentContent = "ColorNodeAccordion";
        break;
      }
      case "nodes.fixed": {
        this.currentContent = "FixedNodeAccordion";
        break;
      }
      case "nodes.font": {
        this.currentContent = "FontNodeAccordion";
        break;
      }
      case "nodes.heightConstraint": {
        this.currentContent = "HeightConstraintNodeAccordion";
        break;
      }
      case "nodes.shape": {
        this.currentContent = "ShapeNodeAccordion";
        break;
      }
    }
  },
  watch: {
    checkboxValue: function(newCheckbox, oldCheckbox) {
      this.$emit("toggle-switch-event", this.id, newCheckbox);
    }
  },
  components: {
    ChosenNodeAccordion,
    ColorNodeAccordion,
    FixedNodeAccordion,
    FontNodeAccordion,
    HeightConstraintNodeAccordion,
    ShapeNodeAccordion
  },
  methods: {
    message: function(message2, variables) {
      if (message2 == "enable-fixed-node-object-sending") {
        if (variables == true) {
          this.checkboxValue = false;
          this.currentlyEnabled = false;
        } else {
          this.currentlyEnabled = true;
        }
      } else {
        this.$emit("message", message2, variables);
      }
    }
  },
  emits: ["toggle-switch-event", "message"]
};
const _hoisted_1$4 = { class: "accordion-item" };
const _hoisted_2$3 = { class: "accordion-header border-bottom" };
const _hoisted_3$2 = { class: "d-flex" };
const _hoisted_4$1 = {
  key: 0,
  class: "form-check form-switch pt-1 pb-1 ms-1 collapsed"
};
const _hoisted_5$1 = ["id", "checked", "disabled"];
const _hoisted_6 = ["data-bs-target", "aria-controls"];
const _hoisted_7 = {
  key: 0,
  class: "d-flex w-100 justify-content-between"
};
const _hoisted_8 = { class: "ms-2" };
const _hoisted_9 = ["title"];
const _hoisted_10 = { key: 1 };
const _hoisted_11 = ["id", "data-bs-parent"];
const _hoisted_12 = { class: "accordion-body p-0 pt-1 pb-1" };
function _sfc_render$7(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1$4, [
    createBaseVNode("div", _hoisted_2$3, [
      createBaseVNode("div", _hoisted_3$2, [
        $props.switchButton ? (openBlock(), createElementBlock("div", _hoisted_4$1, [
          withDirectives(createBaseVNode("input", {
            class: "form-check-input",
            type: "checkbox",
            role: "switch",
            id: "flexSwitch-" + this.id,
            checked: this.checkboxValue,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => this.checkboxValue = $event),
            disabled: !this.currentlyEnabled
          }, null, 8, _hoisted_5$1), [
            [vModelCheckbox, this.checkboxValue]
          ])
        ])) : createCommentVNode("", true),
        createBaseVNode("button", {
          class: "accordion-button collapsed p-0 pt-1 pb-1 flex-fill",
          type: "button",
          "data-bs-toggle": "collapse",
          "data-bs-target": "#flush-collapse-" + this.id,
          "aria-expanded": "false",
          "aria-controls": "flush-collapse-" + this.id
        }, [
          this.hasTooltip ? (openBlock(), createElementBlock("div", _hoisted_7, [
            createBaseVNode("div", _hoisted_8, toDisplayString(this.title), 1),
            createBaseVNode("div", {
              class: "flex-shrink-1 badge bg-info m-1",
              "data-bs-toggle": "tooltip",
              title: this.tooltip
            }, _cache[1] || (_cache[1] = [
              createBaseVNode("i", { class: "fa-solid fa-info text-right" }, null, -1)
            ]), 8, _hoisted_9)
          ])) : (openBlock(), createElementBlock("div", _hoisted_10, toDisplayString(this.title), 1))
        ], 8, _hoisted_6)
      ])
    ]),
    createBaseVNode("div", {
      id: "flush-collapse-" + this.id,
      class: "accordion-collapse collapse ms-1 me-1",
      "data-bs-parent": "#accordionFlush-" + this.flushId
    }, [
      createBaseVNode("div", _hoisted_12, [
        (openBlock(), createBlock(resolveDynamicComponent($data.currentContent), {
          checkboxValue: this.checkboxValue,
          onMessage: $options.message
        }, null, 40, ["checkboxValue", "onMessage"]))
      ])
    ], 8, _hoisted_11)
  ]);
}
const AccordionItem = /* @__PURE__ */ _export_sfc(_sfc_main$7, [["render", _sfc_render$7]]);
const _sfc_main$6 = {
  name: "Accordion Flush",
  props: [
    "id",
    "accordionItems",
    "accordionItemsComponents"
  ],
  components: {
    AccordionItem
  },
  methods: {
    toggleSwitchEvent(switchId, value2) {
      this.$emit("toggle-switch-event", switchId, value2);
    },
    message: function(message2, value2) {
      this.$emit("message", message2, value2);
    }
  },
  emits: ["toggle-switch-event", "message"]
};
const _hoisted_1$3 = ["id"];
function _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_AccordionItem = resolveComponent("AccordionItem");
  return openBlock(), createElementBlock("div", {
    class: "accordion accordion-flush border",
    id: "accordionFlush-" + this.id
  }, [
    (openBlock(true), createElementBlock(Fragment, null, renderList($props.accordionItems, (item, i2) => {
      return openBlock(), createBlock(_component_AccordionItem, {
        key: i2,
        id: item.item,
        title: item.title,
        flushId: this.id,
        content: $props.accordionItemsComponents.find((el) => {
          return el.item == item.item;
        }).component,
        switchButton: item.switch,
        switchChecked: item.isChecked,
        hasTooltip: item.hasTooltip,
        tooltip: item.tooltip,
        isCheckedEnabled: item.isCheckedEnabled,
        onToggleSwitchEvent: $options.toggleSwitchEvent,
        onMessage: $options.message
      }, null, 8, ["id", "title", "flushId", "content", "switchButton", "switchChecked", "hasTooltip", "tooltip", "isCheckedEnabled", "onToggleSwitchEvent", "onMessage"]);
    }), 128))
  ], 8, _hoisted_1$3);
}
const AccordionFlush = /* @__PURE__ */ _export_sfc(_sfc_main$6, [["render", _sfc_render$6]]);
const _sfc_main$5 = {
  name: "Nodes",
  props: [
    "options",
    "network",
    "isNodesEnabled",
    "nodes"
  ],
  data() {
    return {
      encapsulateNodes: null,
      encapsulateOptions: null,
      encapsulateNetwork: null,
      borderWidth: 1,
      borderWidthSelected: 2,
      borderWidthSelectedDisabled: true,
      brokenImage: "/paad-grafos-v2/src/assets/images/paad_logo.png",
      firstAccordionItems: [],
      firstAccordionItemsComponents: [],
      fixedSwitchEnabled: true,
      fontSwitchEnabled: true,
      fontToggled: false,
      fontObjectOrString: true,
      heightConstraintSwitchEnabled: true,
      heightConstraintSwitchValue: false,
      heightConstraintObjectEnabled: false,
      heightConstraintIntegerValue: 0,
      heightConstraintObjectValue: {},
      hidden: false,
      shape: "ellipse"
    };
  },
  watch: {
    brokenImage: function(newBrokenImage, oldBrokenImage) {
      this.encapsulateOptions.nodes.brokenImage = newBrokenImage;
      this.$emit("options-has-changed", this.encapsulateOptions);
    }
  },
  mounted() {
    console.log("Nodes Component Mounted");
    this.encapsulateNetwork = this.network;
    this.encapsulateOptions = this.options;
    this.encapsulateNodes = this.nodes;
    this.borderWidth = this.encapsulateOptions.nodes.borderWidth;
    this.borderWidthSelected = this.encapsulateOptions.nodes.borderWidthSelected;
    this.brokenImage = this.encapsulateOptions.nodes.brokenImage;
    this.firstAccordionItems.push(
      {
        item: "chosen",
        title: "Selecionado",
        switch: true,
        isChecked: typeof this.encapsulateOptions.nodes.chosen == "boolean" ? this.encapsulateOptions.nodes.chosen : this.encapsulateOptions.nodes.chosen != null,
        isCheckedEnabled: typeof this.encapsulateOptions.nodes.chosen == "boolean",
        hasTooltip: true,
        tooltip: "Quando verdadeiro, selecionar ou sobrepor um vértice mudará a si e seu rótulo de acordo com o padrão. Quando falso, nenhuma alteração no vértice ou em seu rótulo ocorrerá quando o mesmo é escolhido. Se um objeto é fornecido, o ajuste mais refinado das características do vértice está disponível quando um vértice é escolhido."
      }
    );
    this.firstAccordionItemsComponents.push({ item: "chosen", component: "nodes.chosen" });
    this.firstAccordionItems.push(
      {
        item: "color",
        title: "Cores",
        switch: false,
        isChecked: false,
        isCheckedEnabled: false,
        hasTooltip: true,
        tooltip: 'O objeto color contêm as informações de cores do vértice em todas as situações. Quando o vértice necessita somente de apenas uma cor, um valor de cor como "rgba(120,32,14,1)", "#ffffff" ou "red" pode ser passado ao invés do objeto.'
      }
    );
    this.firstAccordionItemsComponents.push({
      item: "color",
      component: "nodes.color",
      variables: {
        background: this.encapsulateOptions.node && this.encapsulateOptions.node.color ? this.encapsulateOptions.nodes.color.background ?? "#D2E5FF" : "#D2E5FF",
        border: this.encapsulateOptions.node && this.encapsulateOptions.node.color ? this.encapsulateOptions.nodes.color.border ?? "#2B7CE9" : "#2B7CE9",
        highlight: {
          border: this.encapsulateOptions.node && this.encapsulateOptions.node.color ? this.encapsulateOptions.nodes.color.highlight ? this.encapsulateOptions.nodes.color.highlight.border ?? "#D2E5FF" : "#D2E5FF" : "#D2E5FF",
          background: this.encapsulateOptions.node && this.encapsulateOptions.node.color ? this.encapsulateOptions.nodes.color.highlight ? this.encapsulateOptions.nodes.color.highlight.background ?? "#2B7CE9" : "#2B7CE9" : "#2B7CE9"
        },
        hover: {
          border: this.encapsulateOptions.node && this.encapsulateOptions.node.color ? this.encapsulateOptions.nodes.color.hover ? this.encapsulateOptions.nodes.color.hover.border ?? "#D2E5FF" : "#D2E5FF" : "#D2E5FF",
          background: this.encapsulateOptions.node && this.encapsulateOptions.node.color ? this.encapsulateOptions.nodes.color.hover ? this.encapsulateOptions.nodes.color.hover.background ?? "#2B7CE9" : "#2B7CE9" : "#2B7CE9"
        }
      }
    });
    this.firstAccordionItems.push(
      {
        item: "fixed",
        title: "Fixado",
        switch: true,
        isChecked: false,
        isCheckedEnabled: this.fixedSwitchEnabled,
        hasTooltip: true,
        tooltip: "Options.Nodes.Fixed - Quando verdadeiro, os vértices não se moverão mas AINDA farão parte da simulação física. Quando definidio com um objeto, movimento em ambas as direções X ou Y podem ser desabilitados."
      }
    );
    this.firstAccordionItemsComponents.push({ item: "fixed", component: "nodes.fixed" });
    this.firstAccordionItems.push(
      {
        item: "font",
        title: "Fonte",
        switch: true,
        isChecked: false,
        isCheckedEnabled: this.fontSwitchEnabled,
        hasTooltip: true,
        tooltip: "Options.Nodes.Font - Este objeto define os detalhes do ródutlo. Ative verdadeiro para funcionar."
      }
    );
    this.firstAccordionItemsComponents.push({ item: "font", component: "nodes.font" });
    this.firstAccordionItems.push(
      {
        item: "heightConstraint",
        title: "Constante de altura",
        switch: true,
        isChecked: this.heightConstraintSwitchValue,
        isCheckedEnabled: this.heightConstraintSwitchEnabled,
        hasTooltip: true,
        tooltip: "Options.Nodes.HeightConstraint - Se falso, nada de constante de altura é aplicado. Se um número é especificado, o valor é usado como altura mínima de um vértice. A altura do vértice será configurado como o mínimo se é menor que o valor."
      }
    );
    this.firstAccordionItemsComponents.push({ item: "heightConstraint", component: "nodes.heightConstraint" });
    this.firstAccordionItems.push(
      {
        item: "shape",
        title: "Forma",
        switch: false,
        hasTooltip: true,
        tooltip: "Options.Nodes.Shape - A forma define a aparência do vértice. Existem três tipos de vértices. Um tipo tem o rótulo dentro dele e o outro tipo tem o rótulo abaixo dele. O terceiro tipo é uma forma personalizada onde você pode desenhar o que quiser para representar o vértice."
      }
    );
    this.firstAccordionItemsComponents.push({ item: "shape", component: "nodes.shape" });
  },
  components: {
    AccordionFlush,
    InputRange,
    SwitchWithInfo,
    InputUrl
  },
  methods: {
    toggleSwitchEvent: function(switchId, value2) {
      switch (switchId) {
        case "chosen": {
          this.encapsulateOptions.nodes.chosen = value2;
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "fixed": {
          console.log("Fixed: " + value2);
          this.encapsulateOptions.nodes.fixed = value2;
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "font": {
          if (!this.fontToggled && value2 == true) {
            this.encapsulateOptions.nodes.font = {};
            this.$emit("options-has-changed", this.encapsulateOptions);
          } else {
            this.encapsulateOptions.nodes.font = "";
            this.$emit("options-has-changed", this.encapsulateOptions);
          }
          this.fontToggled = value2;
          break;
        }
        case "heightConstraint": {
          this.encapsulateOptions.nodes.heightConstraint = value2;
          this.$emit("options-has-changed", this.encapsulateOptions);
          this.heightConstraintSwitchValue = value2;
        }
      }
    },
    isFontObject: function() {
      return typeof this.encapsulateOptions.nodes.font == "object";
    },
    message: function(message2, value2) {
      switch (message2) {
        case "update-chosen-node": {
          this.encapsulateOptions.nodes.chosen = { node: value2, label: value2 };
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "update-chosen-node-background-color": {
          this.encapsulateOptions.nodes.chosen = { node: null, label: true };
          this.encapsulateOptions.nodes.chosen.node = (values2, id2, selected, hovering) => {
          };
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "update-node-color-background": {
          this.encapsulateOptions.nodes.color = {
            background: value2
          };
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "update-node-color-border": {
          this.encapsulateOptions.nodes.color = {
            border: value2
          };
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "update-node-highlight-border-color": {
          this.encapsulateOptions.nodes.color = {
            highlight: {
              border: value2
            }
          };
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "update-node-highlight-background-color": {
          this.encapsulateOptions.nodes.color = {
            highlight: {
              background: value2
            }
          };
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "update-node-hover-border-color": {
          this.encapsulateOptions.nodes.color = {
            hover: {
              border: value2
            }
          };
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "update-node-hover-background-color": {
          this.encapsulateOptions.nodes.color = {
            hover: {
              background: value2
            }
          };
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "enable-fixed-node-object-sending": {
          this.fixedSwitchEnabled = false;
          break;
        }
        case "fix-nodes-x-coordinate": {
          if (typeof this.encapsulateOptions.nodes.fixed != "object") {
            this.encapsulateOptions.nodes.fixed = { x: false, y: false };
          }
          this.encapsulateOptions.nodes.fixed.x = value2;
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "fix-nodes-y-coordinate": {
          if (typeof this.encapsulateOptions.nodes.fixed != "object") {
            this.encapsulateOptions.nodes.fixed = { x: false, y: false };
          }
          this.encapsulateOptions.nodes.fixed.y = value2;
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "node-font-object-enabled": {
          if (this.fontToggled) {
            if (!value2) {
              this.encapsulateOptions.nodes.font = "15px arial black";
              this.$emit("options-has-changed", this.encapsulateOptions);
            } else {
              this.encapsulateOptions.nodes.font = {};
              this.$emit("options-has-changed", this.encapsulateOptions);
            }
            this.fontObjectOrString = value2;
          }
          break;
        }
        case "node-font-string": {
          if (!this.fontObjectOrString) {
            this.encapsulateOptions.nodes.font = value2;
            this.$emit("options-has-changed", this.encapsulateOptions);
          }
        }
        case "node-font-color": {
          if (this.fontToggled && this.isFontObject()) {
            this.encapsulateOptions.nodes.font.color = value2;
            this.$emit("options-has-changed", this.encapsulateOptions);
          } else {
            this.encapsulateOptions.nodes.font = "";
          }
          break;
        }
        case "node-font-size": {
          if (this.fontToggled && this.isFontObject()) {
            this.encapsulateOptions.nodes.font.size = parseInt(value2);
            this.$emit("options-has-changed", this.encapsulateOptions);
          } else {
            this.encapsulateOptions.nodes.font = "";
          }
          break;
        }
        case "node-font-face": {
          if (this.fontToggled && this.isFontObject()) {
            this.encapsulateOptions.nodes.font.face = value2;
            this.$emit("options-has-changed", this.encapsulateOptions);
          } else {
            this.encapsulateOptions.nodes.font = "";
          }
          break;
        }
        case "enable-font-background": {
          if (this.fontToggled && this.isFontObject()) {
            if (value2) {
              this.encapsulateOptions.nodes.font.background = "#ffffff";
              this.$emit("options-has-changed", this.encapsulateOptions);
            } else {
              this.encapsulateOptions.nodes.font.background = void 0;
              this.$emit("options-has-changed", this.encapsulateOptions);
            }
          } else {
            this.encapsulateOptions.nodes.font = "";
          }
          break;
        }
        case "node-font-background": {
          if (this.fontToggled && this.isFontObject()) {
            this.encapsulateOptions.nodes.font.background = value2;
            this.$emit("options-has-changed", this.encapsulateOptions);
          } else {
            this.encapsulateOptions.nodes.font = "";
          }
          break;
        }
        case "node-stroke-width": {
          if (this.fontToggled && this.isFontObject()) {
            this.encapsulateOptions.nodes.font.strokeWidth = parseInt(value2);
            this.$emit("options-has-changed", this.encapsulateOptions);
          } else {
            this.encapsulateOptions.nodes.font = "";
          }
          break;
        }
        case "node-stroke-color": {
          if (this.fontToggled && this.isFontObject()) {
            this.encapsulateOptions.nodes.font.strokeColor = value2;
            this.$emit("options-has-changed", this.encapsulateOptions);
          } else {
            this.encapsulateOptions.nodes.font = "";
          }
          break;
        }
        case "height-constraint-object-enabled": {
          if (this.heightConstraintSwitchValue) {
            this.heightConstraintObjectEnabled = value2;
          } else {
            this.encapsulateOptions.nodes.heightConstraint = false;
          }
          break;
        }
        case "height-constraint-value": {
          if (this.heightConstraintSwitchValue) {
            if (!this.heightConstraintObjectEnabled) {
              this.heightConstraintIntegerValue = value2;
              this.encapsulateOptions.nodes.heightConstraint = parseInt(value2);
              this.$emit("options-has-changed", this.encapsulateOptions);
            }
          } else {
            this.encapsulateOptions.nodes.heightConstraint = false;
          }
          break;
        }
        case "height-constraint-object-minimum": {
          if (this.heightConstraintSwitchValue) {
            if (this.heightConstraintObjectEnabled) {
              this.heightConstraintObjectValue.minimum = parseInt(value2);
              this.encapsulateOptions.nodes.heightConstraint = this.heightConstraintObjectValue;
              this.$emit("options-has-changed", this.encapsulateOptions);
            }
          } else {
            this.encapsulateOptions.nodes.heightConstraint = false;
          }
          break;
        }
        case "height-constraint-object-valign": {
          if (this.heightConstraintSwitchValue) {
            if (this.heightConstraintObjectEnabled) {
              this.heightConstraintObjectValue.valign = value2;
              this.encapsulateOptions.nodes.heightConstraint = this.heightConstraintObjectValue;
              this.$emit("options-has-changed", this.encapsulateOptions);
            }
          } else {
            this.encapsulateOptions.nodes.heightConstraint = false;
          }
          break;
        }
        case "update-node-shape": {
          this.shape = value2;
          this.encapsulateOptions.nodes.shape = value2;
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "init-icons": {
          this.encapsulateOptions.nodes.icon = { size: 50, weight: 300 };
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "update-icon-font-face": {
          this.encapsulateOptions.nodes.icon.face = value2;
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "update-icon-code": {
          this.encapsulateOptions.nodes.icon.code = value2;
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "update-icon-weight": {
          this.encapsulateOptions.nodes.icon.weight = parseInt(value2);
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "update-icon-color": {
          this.encapsulateOptions.nodes.icon.color = value2;
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "update-icon-size": {
          this.encapsulateOptions.nodes.icon.size = parseInt(value2);
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "update-image-url": {
          this.encapsulateOptions.nodes.image = value2;
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "update-canvas-key-change": {
          this.$emit("component-key-change", value2);
          break;
        }
        case "update-image-url-selected": {
          if (value2[0]) {
            this.encapsulateOptions.nodes.image = {
              unselected: value2[1],
              selected: value2[2]
            };
          } else {
            this.encapsulateOptions.nodes.image = {
              unselected: value2[1],
              selected: value2[1]
            };
          }
          this.$emit("options-has-changed", this.encapsulateOptions);
          this.$emit("component-key-change", value2);
          break;
        }
        case "custom-render-node-update": {
          this.encapsulateOptions.nodes.ctxRenderer = value2;
          this.$emit("options-has-changed", this.encapsulateOptions);
          break;
        }
        case "send-toast": {
          this.$emit("send-toast", value2);
          break;
        }
      }
    },
    emitOpacity: function(value2) {
      this.encapsulateOptions.nodes.opacity = parseFloat(value2);
      this.$emit("options-has-changed", this.encapsulateOptions);
    },
    emitBorderWidth: function(value2) {
      this.borderWidth = value2;
      this.encapsulateOptions.nodes.borderWidth = parseInt(value2);
      this.$emit("options-has-changed", this.encapsulateOptions);
      if (this.borderWidthSelectedDisabled) {
        this.borderWidthSelected = 2 * this.encapsulateOptions.nodes.borderWidth;
        this.encapsulateOptions.nodes.borderWidthSelected = this.borderWidthSelected;
        this.$emit("options-has-changed", this.encapsulateOptions);
      }
    },
    onBorderWidthSelectedChange: function(value2) {
      if (value2) {
        this.borderWidthSelected = 2 * this.encapsulateOptions.nodes.borderWidth;
        this.encapsulateOptions.nodes.borderWidthSelected = this.borderWidthSelected;
        this.$emit("options-has-changed", this.encapsulateOptions);
      }
      this.borderWidthSelectedDisabled = value2;
    },
    updateValueBorderWidhtSelected: function(value2) {
      if (!this.borderWidthSelectedDisabled) {
        this.borderWidthSelected = parseInt(value2);
        this.encapsulateOptions.nodes.borderWidthSelected = this.borderWidthSelected;
        this.$emit("options-has-changed", this.encapsulateOptions);
      }
    },
    updateBrokenImageValue: function(value2) {
      this.brokenImage = value2;
      this.encapsulateOptions.nodes.brokenImage = value2;
      this.$emit("options-has-changed", this.encapsulateOptions);
    },
    toggleHidden: function(value2) {
      this.hidden = value2;
      this.encapsulateOptions.nodes.hidden = value2;
      this.$emit("options-has-changed", this.encapsulateOptions);
    }
  },
  emits: ["options-has-changed", "nodes-has-changed", "component-key-change", "send-toast"]
};
function _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_SwitchWithInfo = resolveComponent("SwitchWithInfo");
  const _component_InputRange = resolveComponent("InputRange");
  const _component_InputUrl = resolveComponent("InputUrl");
  const _component_AccordionFlush = resolveComponent("AccordionFlush");
  return openBlock(), createElementBlock("div", null, [
    createVNode(_component_SwitchWithInfo, {
      switchId: "nodes-hidden",
      switchDisabled: false,
      switchInitialValue: this.hidden,
      switchTooltipEnabled: true,
      switchTooltip: "Quando verdadeiro, os vértices não serão mostrados. Ainda farão parte da simulação de física, no entanto!",
      switchLabelEnabled: true,
      switchLabelValue: "Esconder vértices",
      onCheckboxStatusChanged: $options.toggleHidden
    }, null, 8, ["switchInitialValue", "onCheckboxStatusChanged"]),
    createVNode(_component_InputRange, {
      inputId: "nodes-borderWidth-range",
      isLabelEnabled: true,
      min: 0,
      max: 25,
      step: 1,
      initialValue: this.borderWidth,
      labelValue: "Grossura da Borda",
      tooltip: "Options.Nodes.BorderWidth - A grossura da borda do vértice. Padrão 1",
      onUpdateValueFromRangeInput: $options.emitBorderWidth
    }, null, 8, ["initialValue", "onUpdateValueFromRangeInput"]),
    createVNode(_component_InputRange, {
      inputId: "nodes-borderWidthSelected-range",
      isLabelEnabled: true,
      min: 0,
      max: 50,
      step: 1,
      initialValue: this.borderWidthSelected,
      labelValue: "Grossura da borda do selecionado",
      tooltip: "Options.Nodes.BorderWidthSelected Toggle to disable default. - A largura da borda do nó quando ele é selecionado. Quando indefinido, o borderWidth * 2 é usado. Alterne para desabilitar o padrão.",
      disabled: this.borderWidthSelectedDisabled,
      labelHasSwitch: true,
      labelSwitchId: "nodes-borderWidthSelectedRange-default",
      labelSwitchInitialValue: this.borderWidthSelectedDisabled,
      onCheckboxStatusChanged: $options.onBorderWidthSelectedChange,
      onUpdateValueFromRangeInput: $options.updateValueBorderWidhtSelected
    }, null, 8, ["initialValue", "disabled", "labelSwitchInitialValue", "onCheckboxStatusChanged", "onUpdateValueFromRangeInput"]),
    createVNode(_component_InputUrl, {
      idInput: "nodes-brokenImage-url-input",
      labelValue: "Url de Imagem Quebrada",
      placeholder: "https://www.google.com",
      tooltip: "Options.Nodes.BrokenImage - Quando a forma está configurada para 'imagem' ou 'imagem circular', essa opção pode ser uma URL para uma imagem backup no caso da URL fornecida na opção de imagem não possa ser resolvida.",
      urlInitalValue: $data.brokenImage,
      onUrlValueUpdate: $options.updateBrokenImageValue
    }, null, 8, ["urlInitalValue", "onUrlValueUpdate"]),
    createVNode(_component_InputRange, {
      inputId: "opacity-range",
      isLabelEnabled: true,
      min: 0,
      max: 1,
      step: 0.01,
      initialValue: 1,
      labelValue: "Opacidade",
      tooltip: "Opacity - Opacidade geral de um nó (substitui qualquer opacidade na borda, plano de fundo, imagem e sombra).",
      onUpdateValueFromRangeInput: $options.emitOpacity
    }, null, 8, ["onUpdateValueFromRangeInput"]),
    createVNode(_component_AccordionFlush, {
      id: "first-accordion",
      accordionItems: $data.firstAccordionItems,
      accordionItemsComponents: $data.firstAccordionItemsComponents,
      class: "mt-2",
      onToggleSwitchEvent: $options.toggleSwitchEvent,
      onMessage: $options.message
    }, null, 8, ["accordionItems", "accordionItemsComponents", "onToggleSwitchEvent", "onMessage"])
  ]);
}
const nodes$1 = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["render", _sfc_render$5]]);
const _sfc_main$4 = {
  name: "Off Canvas",
  components: {
    "physics": physics$1,
    "nodes": nodes$1
  },
  props: [
    "offCanvasEnabled",
    "title",
    "type",
    "localNetwork",
    "options",
    "realNodes"
  ],
  data() {
    return {
      encapsulateLocalNetwork: null,
      encapsulateOptions: null,
      container: document.getElementById("offcanvasBody"),
      encapsulateNodes: null
    };
  },
  watch: {
    offCanvasEnabled: function(newOffCanvasEnabled, oldOffCanvasEnabled) {
      if (newOffCanvasEnabled) {
        if (this.type == "visjs-physics") {
          this.encapsulateLocalNetwork = this.localNetwork;
          this.encapsulateOptions = this.options;
          this.$emit("options-has-changed", this.encapsulateOptions);
        }
        if (this.type == "visjs-configure" || this.type == "visjs-nodes") {
          this.encapsulateLocalNetwork = this.localNetwork;
          this.encapsulateOptions = this.options;
        }
        if (this.type == "visjs-configure") {
          this.encapsulateLocalNetwork = this.localNetwork;
          this.encapsulateOptions = this.options;
          var container = document.getElementById("offcanvasBody");
          this.encapsulateOptions.configure = {
            enabled: true,
            filter: true,
            container,
            showButton: true
          };
          this.optionsHasChanged(this.encapsulateOptions);
        }
      } else {
        if (this.type == "visjs-configure") {
          this.encapsulateOptions.configure.enabled = false;
          this.$emit("options-has-changed", this.encapsulateOptions);
        }
      }
    }
  },
  mounted() {
    console.log("OffCanvas Component Mounted");
    this.encapsulateNodes = this.realNodes;
  },
  methods: {
    optionsHasChanged(recievedOptions) {
      this.encapsulateOptions = recievedOptions;
      this.$emit("options-has-changed", this.encapsulateOptions);
    },
    nodeshasChanged(recievedNodes) {
      this.encapsulateNodes = recievedNodes;
      this.$emit("nodes-has-changed", this.encapsulateNodes);
    },
    onComponentKeyChange: function(recievedFlag) {
      if (recievedFlag) {
        this.$emit("canvas-key-change");
      }
    },
    sendToast: function(value2) {
      this.$emit("send-toast", value2);
    }
  },
  emits: [
    "toggle-off-canvas",
    "options-has-changed",
    "nodes-has-changed",
    "canvas-key-change",
    "send-toast"
  ]
};
const _hoisted_1$2 = { class: "offcanvas-header p-2" };
const _hoisted_2$2 = ["innerHTML"];
const _hoisted_3$1 = { class: "offcanvas-body" };
function _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_physics = resolveComponent("physics");
  const _component_nodes = resolveComponent("nodes");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(["offcanvas offcanvas-end", $props.offCanvasEnabled ? "show" : ""]),
    tabindex: "-1",
    style: normalizeStyle({ visibility: $props.offCanvasEnabled ? "visible" : "hidden" })
  }, [
    createBaseVNode("div", _hoisted_1$2, [
      createBaseVNode("h5", {
        class: "offcanvas-title",
        id: "",
        innerHTML: $props.title
      }, null, 8, _hoisted_2$2),
      createBaseVNode("button", {
        type: "button",
        class: "btn-close text-reset",
        onClick: _cache[0] || (_cache[0] = withModifiers(($event) => _ctx.$emit("toggle-off-canvas"), ["prevent"]))
      })
    ]),
    createBaseVNode("div", _hoisted_3$1, [
      this.type == "visjs-physics" ? (openBlock(), createBlock(_component_physics, {
        key: 0,
        localNetwork: this.encapsulateLocalNetwork,
        options: this.encapsulateOptions,
        onOptionsHasChanged: $options.optionsHasChanged
      }, null, 8, ["localNetwork", "options", "onOptionsHasChanged"])) : createCommentVNode("", true),
      this.type == "visjs-nodes" ? (openBlock(), createBlock(_component_nodes, {
        key: 1,
        network: this.encapsulateLocalNetwork,
        options: this.encapsulateOptions,
        onOptionsHasChanged: $options.optionsHasChanged,
        onNodesHasChanged: $options.nodeshasChanged,
        nodes: $data.encapsulateNodes,
        onComponentKeyChange: $options.onComponentKeyChange,
        onSendToast: $options.sendToast
      }, null, 8, ["network", "options", "onOptionsHasChanged", "onNodesHasChanged", "nodes", "onComponentKeyChange", "onSendToast"])) : createCommentVNode("", true),
      _cache[1] || (_cache[1] = createBaseVNode("div", { id: "offcanvasBody" }, null, -1))
    ])
  ], 6);
}
const OffCanvas = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["render", _sfc_render$4], ["__scopeId", "data-v-2c7ea277"]]);
const _sfc_main$3 = {
  name: "Graph",
  props: ["nodes", "edges", "options"],
  data() {
    return {
      container: null
    };
  },
  computed: {
    graph_data() {
      return {
        nodes: new DataSet(this.nodes),
        edges: new DataSet(this.edges)
      };
    }
  },
  mounted() {
    console.log("Graph Component mounted.");
    this.container = document.getElementById("graph");
    this.$emit("canvas-start", this.container, this.graph_data, this.options);
  },
  emits: ["canvas-start"]
};
function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _cache[0] || (_cache[0] = [
    createBaseVNode("div", { id: "graph" }, null, -1)
  ]));
}
const Graph = /* @__PURE__ */ _export_sfc(_sfc_main$3, [["render", _sfc_render$3]]);
var hash = function() {
  return Math.floor(Math.random() * 9e4) + 1e4;
};
const _sfc_main$2 = {
  name: "Toast component",
  props: [
    "toastData"
  ],
  data() {
    return {
      shown: null,
      Hash: hash(),
      toastElement: null,
      toast: null,
      batata: null
    };
  },
  watch: {
    shown: function(newValue, oldValue) {
      if (newValue) this.toast.show();
      else {
        this.$emit("toast-hidden", this.toastData);
      }
    },
    show: function(newValue, oldValue) {
      this.shown = newValue;
    }
  },
  methods: {
    onBsToastHidden: function() {
      this.shown = false;
    }
  },
  mounted() {
    console.log("Toast component mounted " + this.Hash);
    this.toastElement = document.getElementById("toast-" + this.Hash);
    this.toast = new Toast(this.toastElement);
    var self2 = this;
    this.toastElement.addEventListener("hidden.bs.toast", function() {
      self2.onBsToastHidden();
    }, false);
    this.shown = true;
  },
  emits: ["toast-hidden"]
};
const _hoisted_1$1 = ["id", "data-bs-delay"];
const _hoisted_2$1 = { class: "toast-header" };
const _hoisted_3 = { class: "me-auto" };
const _hoisted_4 = { class: "toast-body" };
const _hoisted_5 = ["innerHTML"];
function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    id: "toast-" + $data.Hash,
    class: normalizeClass("toast hide " + this.toastData.toastClasses),
    role: "alert",
    "aria-live": "assertive",
    "aria-atomic": "true",
    "data-bs-delay": this.toastData.toastDelay ?? 5e3,
    key: $data.Hash
  }, [
    createBaseVNode("div", _hoisted_2$1, [
      createBaseVNode("i", {
        class: normalizeClass("fas " + this.toastData.toastIcon + " me-2")
      }, null, 2),
      createBaseVNode("strong", _hoisted_3, toDisplayString(this.toastData.toastTitle), 1),
      createBaseVNode("small", null, toDisplayString(this.toastData.toastSmall), 1),
      _cache[0] || (_cache[0] = createBaseVNode("button", {
        type: "button",
        class: "btn-close",
        "data-bs-dismiss": "toast",
        "aria-label": "Close"
      }, null, -1))
    ]),
    createBaseVNode("div", _hoisted_4, [
      createBaseVNode("div", {
        innerHTML: this.toastData.toastBody
      }, null, 8, _hoisted_5)
    ])
  ], 10, _hoisted_1$1);
}
const ToastComponent = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["render", _sfc_render$2]]);
const _sfc_main$1 = {
  name: "Toast Container Component",
  props: [
    "newToast"
  ],
  data() {
    return {
      toasts: []
    };
  },
  watch: {
    newToast: function(newValue, oldValue) {
      this.toasts.push(newValue);
    }
  },
  mounted() {
    console.log("Toast Container mounted");
  },
  methods: {
    toastHidden: function(value2) {
      this.toasts = this.toasts.filter(function(item) {
        return item !== value2;
      });
    }
  },
  components: {
    ToastComponent
  }
};
const _hoisted_1 = {
  "aria-live": "polite",
  "aria-atomic": "true",
  class: "position-relative"
};
const _hoisted_2 = {
  class: "toast-container position-fixed top-0 start-50 translate-middle-x mt-1",
  style: { "z-index": "1046" }
};
function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_ToastComponent = resolveComponent("ToastComponent");
  return openBlock(), createElementBlock("div", _hoisted_1, [
    createBaseVNode("div", _hoisted_2, [
      (openBlock(true), createElementBlock(Fragment, null, renderList($data.toasts, (item, i2) => {
        return openBlock(), createBlock(_component_ToastComponent, {
          key: i2,
          toastData: item,
          show: true,
          onToastHidden: $options.toastHidden
        }, null, 8, ["toastData", "onToastHidden"]);
      }), 128))
    ])
  ]);
}
const ToastContainer = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["render", _sfc_render$1]]);
const manipulation = {
  enabled: false,
  initiallyActive: true
};
const nodes = {
  borderWidth: 1,
  borderWidthSelected: 2,
  image: "",
  brokenImage: "",
  chosen: {
    node: true,
    label: true
  }
};
const physics = {
  enabled: true,
  barnesHut: {
    theta: 0.5,
    gravitationalConstant: -2e3,
    centralGravity: 0.3,
    springLength: 95,
    springConstant: 0.04,
    damping: 0.09,
    avoidOverlap: 0
  },
  forceAtlas2Based: {
    theta: 0.5,
    gravitationalConstant: -50,
    centralGravity: 0.01,
    springConstant: 0.08,
    springLength: 100,
    damping: 0.4,
    avoidOverlap: 0
  },
  repulsion: {
    centralGravity: 0.2,
    springLength: 200,
    springConstant: 0.05,
    nodeDistance: 100,
    damping: 0.09
  },
  hierarchicalRepulsion: {
    centralGravity: 0,
    springLength: 100,
    springConstant: 0.01,
    nodeDistance: 120,
    damping: 0.09,
    avoidOverlap: 0
  },
  maxVelocity: 50,
  minVelocity: 0.1,
  solver: "barnesHut",
  stabilization: {
    enabled: true,
    iterations: 1e3,
    updateInterval: 100,
    onlyDynamicEdges: false,
    fit: true
  },
  timestep: 0.5,
  adaptiveTimestep: true,
  wind: {
    x: 0,
    y: 0
  }
};
const interaction = {
  hover: true
};
const BaseOptions = {
  manipulation,
  nodes,
  physics,
  interaction
};
const _sfc_main = {
  data() {
    return {
      canvasEnabled: false,
      offCanvasEnabled: false,
      offCanvas: {
        title: "",
        type: ""
      },
      nodes: [
        { id: 1, label: "Node 1" },
        { id: 2, label: "Node 2" },
        { id: 3, label: "Node 3" },
        { id: 4, label: "Node 4" },
        { id: 5, label: "Node 5" }
      ],
      edges: [
        { from: 1, to: 3 },
        { from: 1, to: 2 },
        { from: 2, to: 4 },
        { from: 2, to: 5 },
        { from: 3, to: 3 }
      ],
      options: null,
      encapsulateNetwork: null,
      Hash: hash(),
      newToast: null
    };
  },
  components: {
    "top-navbar": TopNavbar,
    "bottom-navbar": BottomNavbar,
    "off-canvas": OffCanvas,
    "graph": Graph,
    "ToastContainer": ToastContainer
  },
  methods: {
    toggleOffCanvas() {
      this.offCanvasEnabled = !this.offCanvasEnabled;
    },
    offCanvasForVisConfigure() {
      this.offCanvas.title = "<i class='fa-solid fa-screwdriver-wrench'></i> Vis Js. Configure";
      this.offCanvas.type = "visjs-configure";
    },
    offCanvasForVisPhysics() {
      this.offCanvas.title = "<i class='fa-solid fa-earth-americas'></i> Vis Js. Física";
      this.offCanvas.type = "visjs-physics";
    },
    offCanvasForVisNodes() {
      this.offCanvas.title = "<i class='fa-solid fa-circle'></i> Vis Js. Vértices";
      this.offCanvas.type = "visjs-nodes";
    },
    canvasStart(container, graph_data, options) {
      let localNetwork = new Network(
        container,
        graph_data,
        options
      );
      this.encapsulateNetwork = localNetwork;
      this.optionsHasChanged(options);
    },
    optionsHasChanged(options) {
      this.options = options;
      toRaw(this.encapsulateNetwork).setOptions(this.options);
    },
    nodesHasChanged(nodes2) {
      this.nodes = nodes2;
    },
    onCanvasKeyChange: function() {
      this.Hash = hash();
    },
    emitNewToast: function(value2) {
      this.newToast = value2;
    }
  },
  mounted() {
    this.options = BaseOptions;
    this.options.nodes.image = new URL("/paad-grafos-v2/images/paad_logo.png", import.meta.url).href;
    this.options.nodes.brokenImage = new URL("/paad-grafos-v2/images/paad_logo.png", import.meta.url).href;
    this.canvasEnabled = true;
    new Tooltip(document.body, {
      selector: "[data-bs-toggle='tooltip']"
    });
    new Toast();
  }
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_ToastContainer = resolveComponent("ToastContainer");
  const _component_top_navbar = resolveComponent("top-navbar");
  const _component_graph = resolveComponent("graph");
  const _component_bottom_navbar = resolveComponent("bottom-navbar");
  const _component_off_canvas = resolveComponent("off-canvas");
  return openBlock(), createElementBlock("div", null, [
    createVNode(_component_ToastContainer, { newToast: $data.newToast }, null, 8, ["newToast"]),
    createVNode(_component_top_navbar, {
      onToggleOffCanvas: $options.toggleOffCanvas,
      onOffcanvasForVisConfigure: $options.offCanvasForVisConfigure,
      onOffcanvasForVisPhysics: $options.offCanvasForVisPhysics,
      onOffcanvasForVisNodes: $options.offCanvasForVisNodes
    }, null, 8, ["onToggleOffCanvas", "onOffcanvasForVisConfigure", "onOffcanvasForVisPhysics", "onOffcanvasForVisNodes"]),
    $data.canvasEnabled ? (openBlock(), createBlock(_component_graph, {
      nodes: $data.nodes,
      edges: $data.edges,
      options: $data.options,
      onCanvasStart: $options.canvasStart,
      key: $data.Hash
    }, null, 8, ["nodes", "edges", "options", "onCanvasStart"])) : createCommentVNode("", true),
    createVNode(_component_bottom_navbar),
    createVNode(_component_off_canvas, {
      offCanvasEnabled: this.offCanvasEnabled,
      title: this.offCanvas.title,
      type: this.offCanvas.type,
      localNetwork: this.encapsulateNetwork,
      options: this.options,
      onToggleOffCanvas: this.toggleOffCanvas,
      onOptionsHasChanged: this.optionsHasChanged,
      realNodes: this.nodes,
      onNodesHasChanged: this.nodesHasChanged,
      onCanvasKeyChange: $options.onCanvasKeyChange,
      onSendToast: $options.emitNewToast
    }, null, 8, ["offCanvasEnabled", "title", "type", "localNetwork", "options", "onToggleOffCanvas", "onOptionsHasChanged", "realNodes", "onNodesHasChanged", "onCanvasKeyChange", "onSendToast"])
  ]);
}
const appComponent = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
const app = createApp({});
app.component("app-component", appComponent);
app.config.compilerOptions.isCustomElement = (tag2) => tag2.startsWith("ion-icon");
app.mount("#app");
